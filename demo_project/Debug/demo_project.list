
demo_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089d4  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  08008b10  08008b10  00009b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008dd0  08008dd0  00009dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008dd8  08008dd8  00009dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008ddc  08008ddc  00009ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000024  20000008  08008de0  0000a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  2000002c  08008e04  0000a02c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000064  08008e39  0000a064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d0  20000078  08008e4a  0000a078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000648  08008e4a  0000a648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000aa67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000b000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000b000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08008e4a  0000a1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0002d45b  00000000  00000000  0000aa97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000063f8  00000000  00000000  00037ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002888  00000000  00000000  0003e2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001eed  00000000  00000000  00040b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002cd89  00000000  00000000  00042a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002ff13  00000000  00000000  0006f7ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f8cfb  00000000  00000000  0009f701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001983fc  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000a810  00000000  00000000  00198440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000004c  00000000  00000000  001a2c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000078 	.word	0x20000078
 8000158:	00000000 	.word	0x00000000
 800015c:	08008af8 	.word	0x08008af8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000007c 	.word	0x2000007c
 8000178:	08008af8 	.word	0x08008af8

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b96a 	b.w	8000478 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9d08      	ldr	r5, [sp, #32]
 80001c2:	460c      	mov	r4, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d14e      	bne.n	8000266 <__udivmoddi4+0xaa>
 80001c8:	4694      	mov	ip, r2
 80001ca:	458c      	cmp	ip, r1
 80001cc:	4686      	mov	lr, r0
 80001ce:	fab2 f282 	clz	r2, r2
 80001d2:	d962      	bls.n	800029a <__udivmoddi4+0xde>
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x2e>
 80001d6:	f1c2 0320 	rsb	r3, r2, #32
 80001da:	4091      	lsls	r1, r2
 80001dc:	fa20 f303 	lsr.w	r3, r0, r3
 80001e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e4:	4319      	orrs	r1, r3
 80001e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001ee:	fa1f f68c 	uxth.w	r6, ip
 80001f2:	fbb1 f4f7 	udiv	r4, r1, r7
 80001f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001fa:	fb07 1114 	mls	r1, r7, r4, r1
 80001fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000202:	fb04 f106 	mul.w	r1, r4, r6
 8000206:	4299      	cmp	r1, r3
 8000208:	d90a      	bls.n	8000220 <__udivmoddi4+0x64>
 800020a:	eb1c 0303 	adds.w	r3, ip, r3
 800020e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000212:	f080 8112 	bcs.w	800043a <__udivmoddi4+0x27e>
 8000216:	4299      	cmp	r1, r3
 8000218:	f240 810f 	bls.w	800043a <__udivmoddi4+0x27e>
 800021c:	3c02      	subs	r4, #2
 800021e:	4463      	add	r3, ip
 8000220:	1a59      	subs	r1, r3, r1
 8000222:	fa1f f38e 	uxth.w	r3, lr
 8000226:	fbb1 f0f7 	udiv	r0, r1, r7
 800022a:	fb07 1110 	mls	r1, r7, r0, r1
 800022e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000232:	fb00 f606 	mul.w	r6, r0, r6
 8000236:	429e      	cmp	r6, r3
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0303 	adds.w	r3, ip, r3
 800023e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000242:	f080 80fc 	bcs.w	800043e <__udivmoddi4+0x282>
 8000246:	429e      	cmp	r6, r3
 8000248:	f240 80f9 	bls.w	800043e <__udivmoddi4+0x282>
 800024c:	4463      	add	r3, ip
 800024e:	3802      	subs	r0, #2
 8000250:	1b9b      	subs	r3, r3, r6
 8000252:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000256:	2100      	movs	r1, #0
 8000258:	b11d      	cbz	r5, 8000262 <__udivmoddi4+0xa6>
 800025a:	40d3      	lsrs	r3, r2
 800025c:	2200      	movs	r2, #0
 800025e:	e9c5 3200 	strd	r3, r2, [r5]
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d905      	bls.n	8000276 <__udivmoddi4+0xba>
 800026a:	b10d      	cbz	r5, 8000270 <__udivmoddi4+0xb4>
 800026c:	e9c5 0100 	strd	r0, r1, [r5]
 8000270:	2100      	movs	r1, #0
 8000272:	4608      	mov	r0, r1
 8000274:	e7f5      	b.n	8000262 <__udivmoddi4+0xa6>
 8000276:	fab3 f183 	clz	r1, r3
 800027a:	2900      	cmp	r1, #0
 800027c:	d146      	bne.n	800030c <__udivmoddi4+0x150>
 800027e:	42a3      	cmp	r3, r4
 8000280:	d302      	bcc.n	8000288 <__udivmoddi4+0xcc>
 8000282:	4290      	cmp	r0, r2
 8000284:	f0c0 80f0 	bcc.w	8000468 <__udivmoddi4+0x2ac>
 8000288:	1a86      	subs	r6, r0, r2
 800028a:	eb64 0303 	sbc.w	r3, r4, r3
 800028e:	2001      	movs	r0, #1
 8000290:	2d00      	cmp	r5, #0
 8000292:	d0e6      	beq.n	8000262 <__udivmoddi4+0xa6>
 8000294:	e9c5 6300 	strd	r6, r3, [r5]
 8000298:	e7e3      	b.n	8000262 <__udivmoddi4+0xa6>
 800029a:	2a00      	cmp	r2, #0
 800029c:	f040 8090 	bne.w	80003c0 <__udivmoddi4+0x204>
 80002a0:	eba1 040c 	sub.w	r4, r1, ip
 80002a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a8:	fa1f f78c 	uxth.w	r7, ip
 80002ac:	2101      	movs	r1, #1
 80002ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80002b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b6:	fb08 4416 	mls	r4, r8, r6, r4
 80002ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002be:	fb07 f006 	mul.w	r0, r7, r6
 80002c2:	4298      	cmp	r0, r3
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x11c>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 34ff 	add.w	r4, r6, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x11a>
 80002d0:	4298      	cmp	r0, r3
 80002d2:	f200 80cd 	bhi.w	8000470 <__udivmoddi4+0x2b4>
 80002d6:	4626      	mov	r6, r4
 80002d8:	1a1c      	subs	r4, r3, r0
 80002da:	fa1f f38e 	uxth.w	r3, lr
 80002de:	fbb4 f0f8 	udiv	r0, r4, r8
 80002e2:	fb08 4410 	mls	r4, r8, r0, r4
 80002e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ea:	fb00 f707 	mul.w	r7, r0, r7
 80002ee:	429f      	cmp	r7, r3
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0x148>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x146>
 80002fc:	429f      	cmp	r7, r3
 80002fe:	f200 80b0 	bhi.w	8000462 <__udivmoddi4+0x2a6>
 8000302:	4620      	mov	r0, r4
 8000304:	1bdb      	subs	r3, r3, r7
 8000306:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030a:	e7a5      	b.n	8000258 <__udivmoddi4+0x9c>
 800030c:	f1c1 0620 	rsb	r6, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 f706 	lsr.w	r7, r2, r6
 8000316:	431f      	orrs	r7, r3
 8000318:	fa20 fc06 	lsr.w	ip, r0, r6
 800031c:	fa04 f301 	lsl.w	r3, r4, r1
 8000320:	ea43 030c 	orr.w	r3, r3, ip
 8000324:	40f4      	lsrs	r4, r6
 8000326:	fa00 f801 	lsl.w	r8, r0, r1
 800032a:	0c38      	lsrs	r0, r7, #16
 800032c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000330:	fbb4 fef0 	udiv	lr, r4, r0
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fb00 441e 	mls	r4, r0, lr, r4
 800033c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000340:	fb0e f90c 	mul.w	r9, lr, ip
 8000344:	45a1      	cmp	r9, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x1a6>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000352:	f080 8084 	bcs.w	800045e <__udivmoddi4+0x2a2>
 8000356:	45a1      	cmp	r9, r4
 8000358:	f240 8081 	bls.w	800045e <__udivmoddi4+0x2a2>
 800035c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000360:	443c      	add	r4, r7
 8000362:	eba4 0409 	sub.w	r4, r4, r9
 8000366:	fa1f f983 	uxth.w	r9, r3
 800036a:	fbb4 f3f0 	udiv	r3, r4, r0
 800036e:	fb00 4413 	mls	r4, r0, r3, r4
 8000372:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000376:	fb03 fc0c 	mul.w	ip, r3, ip
 800037a:	45a4      	cmp	ip, r4
 800037c:	d907      	bls.n	800038e <__udivmoddi4+0x1d2>
 800037e:	193c      	adds	r4, r7, r4
 8000380:	f103 30ff 	add.w	r0, r3, #4294967295
 8000384:	d267      	bcs.n	8000456 <__udivmoddi4+0x29a>
 8000386:	45a4      	cmp	ip, r4
 8000388:	d965      	bls.n	8000456 <__udivmoddi4+0x29a>
 800038a:	3b02      	subs	r3, #2
 800038c:	443c      	add	r4, r7
 800038e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000392:	fba0 9302 	umull	r9, r3, r0, r2
 8000396:	eba4 040c 	sub.w	r4, r4, ip
 800039a:	429c      	cmp	r4, r3
 800039c:	46ce      	mov	lr, r9
 800039e:	469c      	mov	ip, r3
 80003a0:	d351      	bcc.n	8000446 <__udivmoddi4+0x28a>
 80003a2:	d04e      	beq.n	8000442 <__udivmoddi4+0x286>
 80003a4:	b155      	cbz	r5, 80003bc <__udivmoddi4+0x200>
 80003a6:	ebb8 030e 	subs.w	r3, r8, lr
 80003aa:	eb64 040c 	sbc.w	r4, r4, ip
 80003ae:	fa04 f606 	lsl.w	r6, r4, r6
 80003b2:	40cb      	lsrs	r3, r1
 80003b4:	431e      	orrs	r6, r3
 80003b6:	40cc      	lsrs	r4, r1
 80003b8:	e9c5 6400 	strd	r6, r4, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	e750      	b.n	8000262 <__udivmoddi4+0xa6>
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa24 f303 	lsr.w	r3, r4, r3
 80003d0:	4094      	lsls	r4, r2
 80003d2:	430c      	orrs	r4, r1
 80003d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d8:	fa00 fe02 	lsl.w	lr, r0, r2
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3110 	mls	r1, r8, r0, r3
 80003e8:	0c23      	lsrs	r3, r4, #16
 80003ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ee:	fb00 f107 	mul.w	r1, r0, r7
 80003f2:	4299      	cmp	r1, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x24c>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 36ff 	add.w	r6, r0, #4294967295
 80003fe:	d22c      	bcs.n	800045a <__udivmoddi4+0x29e>
 8000400:	4299      	cmp	r1, r3
 8000402:	d92a      	bls.n	800045a <__udivmoddi4+0x29e>
 8000404:	3802      	subs	r0, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a5b      	subs	r3, r3, r1
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000410:	fb08 3311 	mls	r3, r8, r1, r3
 8000414:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000418:	fb01 f307 	mul.w	r3, r1, r7
 800041c:	42a3      	cmp	r3, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x276>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f101 36ff 	add.w	r6, r1, #4294967295
 8000428:	d213      	bcs.n	8000452 <__udivmoddi4+0x296>
 800042a:	42a3      	cmp	r3, r4
 800042c:	d911      	bls.n	8000452 <__udivmoddi4+0x296>
 800042e:	3902      	subs	r1, #2
 8000430:	4464      	add	r4, ip
 8000432:	1ae4      	subs	r4, r4, r3
 8000434:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000438:	e739      	b.n	80002ae <__udivmoddi4+0xf2>
 800043a:	4604      	mov	r4, r0
 800043c:	e6f0      	b.n	8000220 <__udivmoddi4+0x64>
 800043e:	4608      	mov	r0, r1
 8000440:	e706      	b.n	8000250 <__udivmoddi4+0x94>
 8000442:	45c8      	cmp	r8, r9
 8000444:	d2ae      	bcs.n	80003a4 <__udivmoddi4+0x1e8>
 8000446:	ebb9 0e02 	subs.w	lr, r9, r2
 800044a:	eb63 0c07 	sbc.w	ip, r3, r7
 800044e:	3801      	subs	r0, #1
 8000450:	e7a8      	b.n	80003a4 <__udivmoddi4+0x1e8>
 8000452:	4631      	mov	r1, r6
 8000454:	e7ed      	b.n	8000432 <__udivmoddi4+0x276>
 8000456:	4603      	mov	r3, r0
 8000458:	e799      	b.n	800038e <__udivmoddi4+0x1d2>
 800045a:	4630      	mov	r0, r6
 800045c:	e7d4      	b.n	8000408 <__udivmoddi4+0x24c>
 800045e:	46d6      	mov	lr, sl
 8000460:	e77f      	b.n	8000362 <__udivmoddi4+0x1a6>
 8000462:	4463      	add	r3, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e74d      	b.n	8000304 <__udivmoddi4+0x148>
 8000468:	4606      	mov	r6, r0
 800046a:	4623      	mov	r3, r4
 800046c:	4608      	mov	r0, r1
 800046e:	e70f      	b.n	8000290 <__udivmoddi4+0xd4>
 8000470:	3e02      	subs	r6, #2
 8000472:	4463      	add	r3, ip
 8000474:	e730      	b.n	80002d8 <__udivmoddi4+0x11c>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800047c:	b5b0      	push	{r4, r5, r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000482:	4b0b      	ldr	r3, [pc, #44]	@ (80004b0 <APPD_EnableCPU2+0x34>)
 8000484:	1d3c      	adds	r4, r7, #4
 8000486:	461d      	mov	r5, r3
 8000488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800048a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800048c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000490:	c403      	stmia	r4!, {r0, r1}
 8000492:	8022      	strh	r2, [r4, #0]
 8000494:	3402      	adds	r4, #2
 8000496:	0c13      	lsrs	r3, r2, #16
 8000498:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800049a:	f006 ffb9 	bl	8007410 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	4618      	mov	r0, r3
 80004a2:	f006 fa4a 	bl	800693a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80004a6:	bf00      	nop
}
 80004a8:	3720      	adds	r7, #32
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bdb0      	pop	{r4, r5, r7, pc}
 80004ae:	bf00      	nop
 80004b0:	08008b10 	.word	0x08008b10

080004b4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80004bc:	4b07      	ldr	r3, [pc, #28]	@ (80004dc <LL_C2_PWR_SetPowerMode+0x28>)
 80004be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80004c2:	f023 0207 	bic.w	r2, r3, #7
 80004c6:	4905      	ldr	r1, [pc, #20]	@ (80004dc <LL_C2_PWR_SetPowerMode+0x28>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4313      	orrs	r3, r2
 80004cc:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	58000400 	.word	0x58000400

080004e0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80004e8:	4b06      	ldr	r3, [pc, #24]	@ (8000504 <LL_EXTI_EnableIT_32_63+0x24>)
 80004ea:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80004ee:	4905      	ldr	r1, [pc, #20]	@ (8000504 <LL_EXTI_EnableIT_32_63+0x24>)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4313      	orrs	r3, r2
 80004f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	58000800 	.word	0x58000800

08000508 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000514:	4a0a      	ldr	r2, [pc, #40]	@ (8000540 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000516:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800051a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800051e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000522:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	021b      	lsls	r3, r3, #8
 800052a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800052e:	4313      	orrs	r3, r2
 8000530:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	cafecafe 	.word	0xcafecafe

08000544 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800054c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000556:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4313      	orrs	r3, r2
 800055e:	608b      	str	r3, [r1, #8]
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000570:	4b04      	ldr	r3, [pc, #16]	@ (8000584 <LL_DBGMCU_GetDeviceID+0x18>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000578:	4618      	mov	r0, r3
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	e0042000 	.word	0xe0042000

08000588 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800058c:	4b04      	ldr	r3, [pc, #16]	@ (80005a0 <LL_DBGMCU_GetRevisionID+0x18>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	0c1b      	lsrs	r3, r3, #16
 8000592:	b29b      	uxth	r3, r3
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	e0042000 	.word	0xe0042000

080005a4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	22ff      	movs	r2, #255	@ 0xff
 80005b0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	22ca      	movs	r2, #202	@ 0xca
 80005ca:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2253      	movs	r2, #83	@ 0x53
 80005d0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80005de:	b480      	push	{r7}
 80005e0:	b083      	sub	sp, #12
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
 80005e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	f023 0207 	bic.w	r2, r3, #7
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	431a      	orrs	r2, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	609a      	str	r2, [r3, #8]
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000608:	4b04      	ldr	r3, [pc, #16]	@ (800061c <MX_APPE_Config+0x18>)
 800060a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800060e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000610:	f000 f824 	bl	800065c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000614:	f000 f829 	bl	800066a <Config_HSE>

  return;
 8000618:	bf00      	nop
}
 800061a:	bd80      	pop	{r7, pc}
 800061c:	58004000 	.word	0x58004000

08000620 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000624:	f000 f835 	bl	8000692 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000628:	f000 f84e 	bl	80006c8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800062c:	4903      	ldr	r1, [pc, #12]	@ (800063c <MX_APPE_Init+0x1c>)
 800062e:	2000      	movs	r0, #0
 8000630:	f000 fdea 	bl	8001208 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000634:	f000 f856 	bl	80006e4 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000638:	bf00      	nop
}
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000170 	.word	0x20000170

08000640 <Init_Smps>:

void Init_Smps(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000644:	bf00      	nop
}
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <Init_Exti>:

void Init_Exti(void)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000652:	2050      	movs	r0, #80	@ 0x50
 8000654:	f7ff ff44 	bl	80004e0 <LL_EXTI_EnableIT_32_63>

  return;
 8000658:	bf00      	nop
}
 800065a:	bd80      	pop	{r7, pc}

0800065c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000660:	bf00      	nop
}
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr

0800066a <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000670:	2000      	movs	r0, #0
 8000672:	f006 ff59 	bl	8007528 <OTP_Read>
 8000676:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d005      	beq.n	800068a <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	799b      	ldrb	r3, [r3, #6]
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ff40 	bl	8000508 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000688:	bf00      	nop
 800068a:	bf00      	nop
}
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <System_Init>:

static void System_Init(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0
  Init_Smps();
 8000696:	f7ff ffd3 	bl	8000640 <Init_Smps>

  Init_Exti();
 800069a:	f7ff ffd8 	bl	800064e <Init_Exti>

  Init_Rtc();
 800069e:	f000 f803 	bl	80006a8 <Init_Rtc>

  return;
 80006a2:	bf00      	nop
}
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <Init_Rtc>:

static void Init_Rtc(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80006ac:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <Init_Rtc+0x1c>)
 80006ae:	f7ff ff86 	bl	80005be <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80006b2:	2100      	movs	r1, #0
 80006b4:	4803      	ldr	r0, [pc, #12]	@ (80006c4 <Init_Rtc+0x1c>)
 80006b6:	f7ff ff92 	bl	80005de <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80006ba:	4802      	ldr	r0, [pc, #8]	@ (80006c4 <Init_Rtc+0x1c>)
 80006bc:	f7ff ff72 	bl	80005a4 <LL_RTC_EnableWriteProtection>

  return;
 80006c0:	bf00      	nop
}
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40002800 	.word	0x40002800

080006c8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80006cc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80006d0:	f7ff ff38 	bl	8000544 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80006d4:	f007 ff5a 	bl	800858c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80006d8:	2004      	movs	r0, #4
 80006da:	f7ff feeb 	bl	80004b4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80006de:	bf00      	nop
}
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80006ea:	f006 fcdb 	bl	80070a4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80006ee:	4a11      	ldr	r2, [pc, #68]	@ (8000734 <appe_Tl_Init+0x50>)
 80006f0:	2100      	movs	r1, #0
 80006f2:	2008      	movs	r0, #8
 80006f4:	f008 f888 	bl	8008808 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <appe_Tl_Init+0x54>)
 80006fa:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <appe_Tl_Init+0x58>)
 80006fe:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000700:	463b      	mov	r3, r7
 8000702:	4619      	mov	r1, r3
 8000704:	480e      	ldr	r0, [pc, #56]	@ (8000740 <appe_Tl_Init+0x5c>)
 8000706:	f006 fb8f 	bl	8006e28 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <appe_Tl_Init+0x60>)
 800070c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <appe_Tl_Init+0x64>)
 8000710:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <appe_Tl_Init+0x68>)
 8000714:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000716:	f240 533c 	movw	r3, #1340	@ 0x53c
 800071a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	4618      	mov	r0, r3
 8000722:	f006 fe01 	bl	8007328 <TL_MM_Init>

  TL_Enable();
 8000726:	f006 fcb7 	bl	8007098 <TL_Enable>

  return;
 800072a:	bf00      	nop
}
 800072c:	3720      	adds	r7, #32
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	08006e61 	.word	0x08006e61
 8000738:	20030734 	.word	0x20030734
 800073c:	08000751 	.word	0x08000751
 8000740:	08000769 	.word	0x08000769
 8000744:	2003094c 	.word	0x2003094c
 8000748:	20030840 	.word	0x20030840
 800074c:	200301f8 	.word	0x200301f8

08000750 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800075a:	bf00      	nop
}
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
	...

08000768 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	330b      	adds	r3, #11
 8000776:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	b29b      	uxth	r3, r3
 800077e:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8000782:	2b07      	cmp	r3, #7
 8000784:	d81f      	bhi.n	80007c6 <APPE_SysUserEvtRx+0x5e>
 8000786:	a201      	add	r2, pc, #4	@ (adr r2, 800078c <APPE_SysUserEvtRx+0x24>)
 8000788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078c:	080007ad 	.word	0x080007ad
 8000790:	080007bf 	.word	0x080007bf
 8000794:	080007c7 	.word	0x080007c7
 8000798:	080007c7 	.word	0x080007c7
 800079c:	080007c7 	.word	0x080007c7
 80007a0:	080007c7 	.word	0x080007c7
 80007a4:	080007c7 	.word	0x080007c7
 80007a8:	080007c7 	.word	0x080007c7
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	4618      	mov	r0, r3
 80007b2:	f006 f8ef 	bl	8006994 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f000 f81b 	bl	80007f2 <APPE_SysEvtReadyProcessing>
    break;
 80007bc:	e004      	b.n	80007c8 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 f806 	bl	80007d0 <APPE_SysEvtError>
    break;
 80007c4:	e000      	b.n	80007c8 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80007c6:	bf00      	nop
  }

  return;
 80007c8:	bf00      	nop
}
 80007ca:	3720      	adds	r7, #32
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	330b      	adds	r3, #11
 80007de:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	3302      	adds	r3, #2
 80007e4:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80007e6:	bf00      	nop
}
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b08a      	sub	sp, #40	@ 0x28
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	330b      	adds	r3, #11
 8000816:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	3302      	adds	r3, #2
 800081c:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800081e:	69bb      	ldr	r3, [r7, #24]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d11d      	bne.n	8000862 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000826:	f7ff fe29 	bl	800047c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800082a:	230f      	movs	r3, #15
 800082c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800082e:	237f      	movs	r3, #127	@ 0x7f
 8000830:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000832:	f7ff fea9 	bl	8000588 <LL_DBGMCU_GetRevisionID>
 8000836:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800083a:	b29b      	uxth	r3, r3
 800083c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800083e:	f7ff fe95 	bl	800056c <LL_DBGMCU_GetDeviceID>
 8000842:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000844:	6a3b      	ldr	r3, [r7, #32]
 8000846:	b29b      	uxth	r3, r3
 8000848:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	4618      	mov	r0, r3
 8000850:	f006 f88a 	bl	8006968 <SHCI_C2_Config>

    APP_BLE_Init();
 8000854:	f006 ff72 	bl	800773c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000858:	2100      	movs	r1, #0
 800085a:	2001      	movs	r0, #1
 800085c:	f007 fea8 	bl	80085b0 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000860:	e007      	b.n	8000872 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000862:	69bb      	ldr	r3, [r7, #24]
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d103      	bne.n	8000872 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
  return;
 8000870:	bf00      	nop
 8000872:	bf00      	nop
}
 8000874:	3728      	adds	r7, #40	@ 0x28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800087e:	f04f 30ff 	mov.w	r0, #4294967295
 8000882:	f007 fec5 	bl	8008610 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}

0800088a <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800088e:	bf00      	nop
}
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80008a2:	f04f 30ff 	mov.w	r0, #4294967295
 80008a6:	f007 feb3 	bl	8008610 <UTIL_SEQ_Run>
  return;
 80008aa:	bf00      	nop
}
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80008ba:	2100      	movs	r1, #0
 80008bc:	2008      	movs	r0, #8
 80008be:	f007 ffc5 	bl	800884c <UTIL_SEQ_SetTask>
  return;
 80008c2:	bf00      	nop
}
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008d2:	2002      	movs	r0, #2
 80008d4:	f008 f826 	bl	8008924 <UTIL_SEQ_SetEvt>
  return;
 80008d8:	bf00      	nop
}
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008e8:	2002      	movs	r0, #2
 80008ea:	f008 f83b 	bl	8008964 <UTIL_SEQ_WaitEvt>
  return;
 80008ee:	bf00      	nop
}
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008f6:	b480      	push	{r7}
 80008f8:	b085      	sub	sp, #20
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000902:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000904:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4313      	orrs	r3, r2
 800090c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800090e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000912:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4013      	ands	r3, r2
 8000918:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800091a:	68fb      	ldr	r3, [r7, #12]
}
 800091c:	bf00      	nop
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093c:	2004      	movs	r0, #4
 800093e:	f7ff ffda 	bl	80008f6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	2001      	movs	r0, #1
 8000944:	f7ff ffd7 	bl	80008f6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000948:	2002      	movs	r0, #2
 800094a:	f7ff ffd4 	bl	80008f6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI_SEL2_Pin|SPI_SEL1_Pin|SEN_EN2_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f240 4103 	movw	r1, #1027	@ 0x403
 8000954:	4821      	ldr	r0, [pc, #132]	@ (80009dc <MX_GPIO_Init+0xb4>)
 8000956:	f001 fde3 	bl	8002520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEN_EN1_Pin|SPI_SEL0_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2103      	movs	r1, #3
 800095e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000962:	f001 fddd 	bl	8002520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A121_SPI_SS_GPIO_Port, A121_SPI_SS_Pin, GPIO_PIN_SET);
 8000966:	2201      	movs	r2, #1
 8000968:	2110      	movs	r1, #16
 800096a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800096e:	f001 fdd7 	bl	8002520 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SEN_INT2_Pin|SEN_INT1_Pin;
 8000972:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000976:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000978:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800097c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	4619      	mov	r1, r3
 8000986:	4815      	ldr	r0, [pc, #84]	@ (80009dc <MX_GPIO_Init+0xb4>)
 8000988:	f001 fc5a 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SPI_SEL2_Pin|SPI_SEL1_Pin|SEN_EN2_Pin;
 800098c:	f240 4303 	movw	r3, #1027	@ 0x403
 8000990:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099a:	2303      	movs	r3, #3
 800099c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	4619      	mov	r1, r3
 80009a2:	480e      	ldr	r0, [pc, #56]	@ (80009dc <MX_GPIO_Init+0xb4>)
 80009a4:	f001 fc4c 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SEN_EN1_Pin|SPI_SEL0_Pin|A121_SPI_SS_Pin;
 80009a8:	2313      	movs	r3, #19
 80009aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	4619      	mov	r1, r3
 80009bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c0:	f001 fc3e 	bl	8002240 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2100      	movs	r1, #0
 80009c8:	2028      	movs	r0, #40	@ 0x28
 80009ca:	f001 fbda 	bl	8002182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009ce:	2028      	movs	r0, #40	@ 0x28
 80009d0:	f001 fbf1 	bl	80021b6 <HAL_NVIC_EnableIRQ>

}
 80009d4:	bf00      	nop
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	48000800 	.word	0x48000800

080009e0 <LL_EXTI_EnableIT_0_31>:
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80009e8:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <LL_EXTI_EnableIT_0_31+0x24>)
 80009ea:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80009ee:	4905      	ldr	r1, [pc, #20]	@ (8000a04 <LL_EXTI_EnableIT_0_31+0x24>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	58000800 	.word	0x58000800

08000a08 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000a10:	4b05      	ldr	r3, [pc, #20]	@ (8000a28 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	4904      	ldr	r1, [pc, #16]	@ (8000a28 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	600b      	str	r3, [r1, #0]

}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	58000800 	.word	0x58000800

08000a2c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a32:	4b0d      	ldr	r3, [pc, #52]	@ (8000a68 <ReadRtcSsrValue+0x3c>)
 8000a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <ReadRtcSsrValue+0x3c>)
 8000a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000a42:	e005      	b.n	8000a50 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a48:	4b07      	ldr	r3, [pc, #28]	@ (8000a68 <ReadRtcSsrValue+0x3c>)
 8000a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d1f5      	bne.n	8000a44 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000a58:	683b      	ldr	r3, [r7, #0]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40002800 	.word	0x40002800

08000a6c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	460a      	mov	r2, r1
 8000a76:	71fb      	strb	r3, [r7, #7]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000a7c:	79ba      	ldrb	r2, [r7, #6]
 8000a7e:	491d      	ldr	r1, [pc, #116]	@ (8000af4 <LinkTimerAfter+0x88>)
 8000a80:	4613      	mov	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	4413      	add	r3, r2
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	440b      	add	r3, r1
 8000a8a:	3315      	adds	r3, #21
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	2b06      	cmp	r3, #6
 8000a94:	d009      	beq.n	8000aaa <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000a96:	7bfa      	ldrb	r2, [r7, #15]
 8000a98:	4916      	ldr	r1, [pc, #88]	@ (8000af4 <LinkTimerAfter+0x88>)
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	4413      	add	r3, r2
 8000aa0:	00db      	lsls	r3, r3, #3
 8000aa2:	440b      	add	r3, r1
 8000aa4:	3314      	adds	r3, #20
 8000aa6:	79fa      	ldrb	r2, [r7, #7]
 8000aa8:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000aaa:	79fa      	ldrb	r2, [r7, #7]
 8000aac:	4911      	ldr	r1, [pc, #68]	@ (8000af4 <LinkTimerAfter+0x88>)
 8000aae:	4613      	mov	r3, r2
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	4413      	add	r3, r2
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	440b      	add	r3, r1
 8000ab8:	3315      	adds	r3, #21
 8000aba:	7bfa      	ldrb	r2, [r7, #15]
 8000abc:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000abe:	79fa      	ldrb	r2, [r7, #7]
 8000ac0:	490c      	ldr	r1, [pc, #48]	@ (8000af4 <LinkTimerAfter+0x88>)
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	4413      	add	r3, r2
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	440b      	add	r3, r1
 8000acc:	3314      	adds	r3, #20
 8000ace:	79ba      	ldrb	r2, [r7, #6]
 8000ad0:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000ad2:	79ba      	ldrb	r2, [r7, #6]
 8000ad4:	4907      	ldr	r1, [pc, #28]	@ (8000af4 <LinkTimerAfter+0x88>)
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	4413      	add	r3, r2
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	440b      	add	r3, r1
 8000ae0:	3315      	adds	r3, #21
 8000ae2:	79fa      	ldrb	r2, [r7, #7]
 8000ae4:	701a      	strb	r2, [r3, #0]

  return;
 8000ae6:	bf00      	nop
}
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000094 	.word	0x20000094

08000af8 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	460a      	mov	r2, r1
 8000b02:	71fb      	strb	r3, [r7, #7]
 8000b04:	4613      	mov	r3, r2
 8000b06:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000b08:	4b29      	ldr	r3, [pc, #164]	@ (8000bb0 <LinkTimerBefore+0xb8>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	79ba      	ldrb	r2, [r7, #6]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d032      	beq.n	8000b7a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000b14:	79ba      	ldrb	r2, [r7, #6]
 8000b16:	4927      	ldr	r1, [pc, #156]	@ (8000bb4 <LinkTimerBefore+0xbc>)
 8000b18:	4613      	mov	r3, r2
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	4413      	add	r3, r2
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	440b      	add	r3, r1
 8000b22:	3314      	adds	r3, #20
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000b28:	7bfa      	ldrb	r2, [r7, #15]
 8000b2a:	4922      	ldr	r1, [pc, #136]	@ (8000bb4 <LinkTimerBefore+0xbc>)
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	4413      	add	r3, r2
 8000b32:	00db      	lsls	r3, r3, #3
 8000b34:	440b      	add	r3, r1
 8000b36:	3315      	adds	r3, #21
 8000b38:	79fa      	ldrb	r2, [r7, #7]
 8000b3a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b3c:	79fa      	ldrb	r2, [r7, #7]
 8000b3e:	491d      	ldr	r1, [pc, #116]	@ (8000bb4 <LinkTimerBefore+0xbc>)
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	440b      	add	r3, r1
 8000b4a:	3315      	adds	r3, #21
 8000b4c:	79ba      	ldrb	r2, [r7, #6]
 8000b4e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000b50:	79fa      	ldrb	r2, [r7, #7]
 8000b52:	4918      	ldr	r1, [pc, #96]	@ (8000bb4 <LinkTimerBefore+0xbc>)
 8000b54:	4613      	mov	r3, r2
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	4413      	add	r3, r2
 8000b5a:	00db      	lsls	r3, r3, #3
 8000b5c:	440b      	add	r3, r1
 8000b5e:	3314      	adds	r3, #20
 8000b60:	7bfa      	ldrb	r2, [r7, #15]
 8000b62:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b64:	79ba      	ldrb	r2, [r7, #6]
 8000b66:	4913      	ldr	r1, [pc, #76]	@ (8000bb4 <LinkTimerBefore+0xbc>)
 8000b68:	4613      	mov	r3, r2
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	4413      	add	r3, r2
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	440b      	add	r3, r1
 8000b72:	3314      	adds	r3, #20
 8000b74:	79fa      	ldrb	r2, [r7, #7]
 8000b76:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000b78:	e014      	b.n	8000ba4 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b7a:	79fa      	ldrb	r2, [r7, #7]
 8000b7c:	490d      	ldr	r1, [pc, #52]	@ (8000bb4 <LinkTimerBefore+0xbc>)
 8000b7e:	4613      	mov	r3, r2
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	4413      	add	r3, r2
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	440b      	add	r3, r1
 8000b88:	3315      	adds	r3, #21
 8000b8a:	79ba      	ldrb	r2, [r7, #6]
 8000b8c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b8e:	79ba      	ldrb	r2, [r7, #6]
 8000b90:	4908      	ldr	r1, [pc, #32]	@ (8000bb4 <LinkTimerBefore+0xbc>)
 8000b92:	4613      	mov	r3, r2
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	4413      	add	r3, r2
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	440b      	add	r3, r1
 8000b9c:	3314      	adds	r3, #20
 8000b9e:	79fa      	ldrb	r2, [r7, #7]
 8000ba0:	701a      	strb	r2, [r3, #0]
  return;
 8000ba2:	bf00      	nop
}
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000124 	.word	0x20000124
 8000bb4:	20000094 	.word	0x20000094

08000bb8 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000bc2:	4b4e      	ldr	r3, [pc, #312]	@ (8000cfc <linkTimer+0x144>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b06      	cmp	r3, #6
 8000bca:	d118      	bne.n	8000bfe <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000bcc:	4b4b      	ldr	r3, [pc, #300]	@ (8000cfc <linkTimer+0x144>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4b4b      	ldr	r3, [pc, #300]	@ (8000d00 <linkTimer+0x148>)
 8000bd4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000bd6:	4a49      	ldr	r2, [pc, #292]	@ (8000cfc <linkTimer+0x144>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000bdc:	79fa      	ldrb	r2, [r7, #7]
 8000bde:	4949      	ldr	r1, [pc, #292]	@ (8000d04 <linkTimer+0x14c>)
 8000be0:	4613      	mov	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4413      	add	r3, r2
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	440b      	add	r3, r1
 8000bea:	3315      	adds	r3, #21
 8000bec:	2206      	movs	r2, #6
 8000bee:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000bf0:	4b45      	ldr	r3, [pc, #276]	@ (8000d08 <linkTimer+0x150>)
 8000bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf6:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	81fb      	strh	r3, [r7, #14]
 8000bfc:	e078      	b.n	8000cf0 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000bfe:	f000 f909 	bl	8000e14 <ReturnTimeElapsed>
 8000c02:	4603      	mov	r3, r0
 8000c04:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000c06:	79fa      	ldrb	r2, [r7, #7]
 8000c08:	493e      	ldr	r1, [pc, #248]	@ (8000d04 <linkTimer+0x14c>)
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	4413      	add	r3, r2
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	440b      	add	r3, r1
 8000c14:	3308      	adds	r3, #8
 8000c16:	6819      	ldr	r1, [r3, #0]
 8000c18:	89fb      	ldrh	r3, [r7, #14]
 8000c1a:	79fa      	ldrb	r2, [r7, #7]
 8000c1c:	4419      	add	r1, r3
 8000c1e:	4839      	ldr	r0, [pc, #228]	@ (8000d04 <linkTimer+0x14c>)
 8000c20:	4613      	mov	r3, r2
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	4413      	add	r3, r2
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	4403      	add	r3, r0
 8000c2a:	3308      	adds	r3, #8
 8000c2c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000c2e:	79fa      	ldrb	r2, [r7, #7]
 8000c30:	4934      	ldr	r1, [pc, #208]	@ (8000d04 <linkTimer+0x14c>)
 8000c32:	4613      	mov	r3, r2
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	4413      	add	r3, r2
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	440b      	add	r3, r1
 8000c3c:	3308      	adds	r3, #8
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000c42:	4b2e      	ldr	r3, [pc, #184]	@ (8000cfc <linkTimer+0x144>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4a2e      	ldr	r2, [pc, #184]	@ (8000d04 <linkTimer+0x14c>)
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	440b      	add	r3, r1
 8000c52:	00db      	lsls	r3, r3, #3
 8000c54:	4413      	add	r3, r2
 8000c56:	3308      	adds	r3, #8
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d337      	bcc.n	8000cd0 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000c60:	4b26      	ldr	r3, [pc, #152]	@ (8000cfc <linkTimer+0x144>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000c66:	7b7a      	ldrb	r2, [r7, #13]
 8000c68:	4926      	ldr	r1, [pc, #152]	@ (8000d04 <linkTimer+0x14c>)
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	4413      	add	r3, r2
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	440b      	add	r3, r1
 8000c74:	3315      	adds	r3, #21
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000c7a:	e013      	b.n	8000ca4 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000c7c:	7b7a      	ldrb	r2, [r7, #13]
 8000c7e:	4921      	ldr	r1, [pc, #132]	@ (8000d04 <linkTimer+0x14c>)
 8000c80:	4613      	mov	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	4413      	add	r3, r2
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	440b      	add	r3, r1
 8000c8a:	3315      	adds	r3, #21
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000c90:	7b7a      	ldrb	r2, [r7, #13]
 8000c92:	491c      	ldr	r1, [pc, #112]	@ (8000d04 <linkTimer+0x14c>)
 8000c94:	4613      	mov	r3, r2
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	4413      	add	r3, r2
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	440b      	add	r3, r1
 8000c9e:	3315      	adds	r3, #21
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ca4:	7b3b      	ldrb	r3, [r7, #12]
 8000ca6:	2b06      	cmp	r3, #6
 8000ca8:	d00b      	beq.n	8000cc2 <linkTimer+0x10a>
 8000caa:	7b3a      	ldrb	r2, [r7, #12]
 8000cac:	4915      	ldr	r1, [pc, #84]	@ (8000d04 <linkTimer+0x14c>)
 8000cae:	4613      	mov	r3, r2
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	4413      	add	r3, r2
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	440b      	add	r3, r1
 8000cb8:	3308      	adds	r3, #8
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	68ba      	ldr	r2, [r7, #8]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d2dc      	bcs.n	8000c7c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000cc2:	7b7a      	ldrb	r2, [r7, #13]
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fecf 	bl	8000a6c <LinkTimerAfter>
 8000cce:	e00f      	b.n	8000cf0 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <linkTimer+0x144>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	4611      	mov	r1, r2
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff0c 	bl	8000af8 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <linkTimer+0x144>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <linkTimer+0x148>)
 8000ce8:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000cea:	4a04      	ldr	r2, [pc, #16]	@ (8000cfc <linkTimer+0x144>)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000cf0:	89fb      	ldrh	r3, [r7, #14]
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000124 	.word	0x20000124
 8000d00:	20000125 	.word	0x20000125
 8000d04:	20000094 	.word	0x20000094
 8000d08:	20000128 	.word	0x20000128

08000d0c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	460a      	mov	r2, r1
 8000d16:	71fb      	strb	r3, [r7, #7]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000d1c:	4b39      	ldr	r3, [pc, #228]	@ (8000e04 <UnlinkTimer+0xf8>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	79fa      	ldrb	r2, [r7, #7]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d111      	bne.n	8000d4c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000d28:	4b36      	ldr	r3, [pc, #216]	@ (8000e04 <UnlinkTimer+0xf8>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b36      	ldr	r3, [pc, #216]	@ (8000e08 <UnlinkTimer+0xfc>)
 8000d30:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000d32:	79fa      	ldrb	r2, [r7, #7]
 8000d34:	4935      	ldr	r1, [pc, #212]	@ (8000e0c <UnlinkTimer+0x100>)
 8000d36:	4613      	mov	r3, r2
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	4413      	add	r3, r2
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	440b      	add	r3, r1
 8000d40:	3315      	adds	r3, #21
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b2f      	ldr	r3, [pc, #188]	@ (8000e04 <UnlinkTimer+0xf8>)
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	e03e      	b.n	8000dca <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000d4c:	79fa      	ldrb	r2, [r7, #7]
 8000d4e:	492f      	ldr	r1, [pc, #188]	@ (8000e0c <UnlinkTimer+0x100>)
 8000d50:	4613      	mov	r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	4413      	add	r3, r2
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	440b      	add	r3, r1
 8000d5a:	3314      	adds	r3, #20
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000d60:	79fa      	ldrb	r2, [r7, #7]
 8000d62:	492a      	ldr	r1, [pc, #168]	@ (8000e0c <UnlinkTimer+0x100>)
 8000d64:	4613      	mov	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	4413      	add	r3, r2
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	440b      	add	r3, r1
 8000d6e:	3315      	adds	r3, #21
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000d74:	79f9      	ldrb	r1, [r7, #7]
 8000d76:	7bfa      	ldrb	r2, [r7, #15]
 8000d78:	4824      	ldr	r0, [pc, #144]	@ (8000e0c <UnlinkTimer+0x100>)
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	440b      	add	r3, r1
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	4403      	add	r3, r0
 8000d84:	3315      	adds	r3, #21
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b2d8      	uxtb	r0, r3
 8000d8a:	4920      	ldr	r1, [pc, #128]	@ (8000e0c <UnlinkTimer+0x100>)
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	440b      	add	r3, r1
 8000d96:	3315      	adds	r3, #21
 8000d98:	4602      	mov	r2, r0
 8000d9a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d9c:	7bbb      	ldrb	r3, [r7, #14]
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d013      	beq.n	8000dca <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000da2:	79f9      	ldrb	r1, [r7, #7]
 8000da4:	7bba      	ldrb	r2, [r7, #14]
 8000da6:	4819      	ldr	r0, [pc, #100]	@ (8000e0c <UnlinkTimer+0x100>)
 8000da8:	460b      	mov	r3, r1
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	440b      	add	r3, r1
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	4403      	add	r3, r0
 8000db2:	3314      	adds	r3, #20
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	b2d8      	uxtb	r0, r3
 8000db8:	4914      	ldr	r1, [pc, #80]	@ (8000e0c <UnlinkTimer+0x100>)
 8000dba:	4613      	mov	r3, r2
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	4413      	add	r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	440b      	add	r3, r1
 8000dc4:	3314      	adds	r3, #20
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000dca:	79fa      	ldrb	r2, [r7, #7]
 8000dcc:	490f      	ldr	r1, [pc, #60]	@ (8000e0c <UnlinkTimer+0x100>)
 8000dce:	4613      	mov	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	440b      	add	r3, r1
 8000dd8:	330c      	adds	r3, #12
 8000dda:	2201      	movs	r2, #1
 8000ddc:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000dde:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <UnlinkTimer+0xf8>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b06      	cmp	r3, #6
 8000de6:	d107      	bne.n	8000df8 <UnlinkTimer+0xec>
 8000de8:	79bb      	ldrb	r3, [r7, #6]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d104      	bne.n	8000df8 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000dee:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <UnlinkTimer+0x104>)
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295
 8000df4:	601a      	str	r2, [r3, #0]
  }

  return;
 8000df6:	bf00      	nop
 8000df8:	bf00      	nop
}
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	20000124 	.word	0x20000124
 8000e08:	20000125 	.word	0x20000125
 8000e0c:	20000094 	.word	0x20000094
 8000e10:	20000128 	.word	0x20000128

08000e14 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e84 <ReturnTimeElapsed+0x70>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e22:	d026      	beq.n	8000e72 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000e24:	f7ff fe02 	bl	8000a2c <ReadRtcSsrValue>
 8000e28:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000e2a:	4b16      	ldr	r3, [pc, #88]	@ (8000e84 <ReturnTimeElapsed+0x70>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d805      	bhi.n	8000e40 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000e34:	4b13      	ldr	r3, [pc, #76]	@ (8000e84 <ReturnTimeElapsed+0x70>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	e00a      	b.n	8000e56 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000e40:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <ReturnTimeElapsed+0x74>)
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e84 <ReturnTimeElapsed+0x70>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	683a      	ldr	r2, [r7, #0]
 8000e52:	4413      	add	r3, r2
 8000e54:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000e56:	4b0d      	ldr	r3, [pc, #52]	@ (8000e8c <ReturnTimeElapsed+0x78>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	fb02 f303 	mul.w	r3, r2, r3
 8000e62:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000e64:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <ReturnTimeElapsed+0x7c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	40d3      	lsrs	r3, r2
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	e001      	b.n	8000e76 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	b29b      	uxth	r3, r3
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000128 	.word	0x20000128
 8000e88:	20000130 	.word	0x20000130
 8000e8c:	2000012e 	.word	0x2000012e
 8000e90:	2000012d 	.word	0x2000012d

08000e94 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000e9e:	88fb      	ldrh	r3, [r7, #6]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d108      	bne.n	8000eb6 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000ea4:	f7ff fdc2 	bl	8000a2c <ReadRtcSsrValue>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	4a21      	ldr	r2, [pc, #132]	@ (8000f30 <RestartWakeupCounter+0x9c>)
 8000eac:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000eae:	2003      	movs	r0, #3
 8000eb0:	f001 f9a9 	bl	8002206 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000eb4:	e039      	b.n	8000f2a <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d803      	bhi.n	8000ec4 <RestartWakeupCounter+0x30>
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f34 <RestartWakeupCounter+0xa0>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d002      	beq.n	8000eca <RestartWakeupCounter+0x36>
      Value -= 1;
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000eca:	bf00      	nop
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f38 <RestartWakeupCounter+0xa4>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d0f8      	beq.n	8000ecc <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000eda:	4b17      	ldr	r3, [pc, #92]	@ (8000f38 <RestartWakeupCounter+0xa4>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4b15      	ldr	r3, [pc, #84]	@ (8000f38 <RestartWakeupCounter+0xa4>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000eea:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000eec:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <RestartWakeupCounter+0xa8>)
 8000eee:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000ef2:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f001 f994 	bl	8002222 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000efa:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <RestartWakeupCounter+0xac>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	0c1b      	lsrs	r3, r3, #16
 8000f00:	041b      	lsls	r3, r3, #16
 8000f02:	88fa      	ldrh	r2, [r7, #6]
 8000f04:	490e      	ldr	r1, [pc, #56]	@ (8000f40 <RestartWakeupCounter+0xac>)
 8000f06:	4313      	orrs	r3, r2
 8000f08:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000f0a:	f7ff fd8f 	bl	8000a2c <ReadRtcSsrValue>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a07      	ldr	r2, [pc, #28]	@ (8000f30 <RestartWakeupCounter+0x9c>)
 8000f12:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <RestartWakeupCounter+0xa4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	4b07      	ldr	r3, [pc, #28]	@ (8000f38 <RestartWakeupCounter+0xa4>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000f22:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000f24:	f3af 8000 	nop.w
  return ;
 8000f28:	bf00      	nop
}
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000128 	.word	0x20000128
 8000f34:	2000012d 	.word	0x2000012d
 8000f38:	20000170 	.word	0x20000170
 8000f3c:	58000800 	.word	0x58000800
 8000f40:	40002800 	.word	0x40002800

08000f44 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000f4a:	4b45      	ldr	r3, [pc, #276]	@ (8001060 <RescheduleTimerList+0x11c>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f56:	d107      	bne.n	8000f68 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000f58:	bf00      	nop
 8000f5a:	4b42      	ldr	r3, [pc, #264]	@ (8001064 <RescheduleTimerList+0x120>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1f8      	bne.n	8000f5a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000f68:	4b3e      	ldr	r3, [pc, #248]	@ (8001064 <RescheduleTimerList+0x120>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8001064 <RescheduleTimerList+0x120>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000f76:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000f78:	4b3b      	ldr	r3, [pc, #236]	@ (8001068 <RescheduleTimerList+0x124>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000f7e:	7bfa      	ldrb	r2, [r7, #15]
 8000f80:	493a      	ldr	r1, [pc, #232]	@ (800106c <RescheduleTimerList+0x128>)
 8000f82:	4613      	mov	r3, r2
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4413      	add	r3, r2
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	440b      	add	r3, r1
 8000f8c:	3308      	adds	r3, #8
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000f92:	f7ff ff3f 	bl	8000e14 <ReturnTimeElapsed>
 8000f96:	4603      	mov	r3, r0
 8000f98:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d205      	bcs.n	8000fae <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000fa6:	4b32      	ldr	r3, [pc, #200]	@ (8001070 <RescheduleTimerList+0x12c>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]
 8000fac:	e04d      	b.n	800104a <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	4a30      	ldr	r2, [pc, #192]	@ (8001074 <RescheduleTimerList+0x130>)
 8000fb2:	8812      	ldrh	r2, [r2, #0]
 8000fb4:	b292      	uxth	r2, r2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	461a      	mov	r2, r3
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d906      	bls.n	8000fce <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000fc0:	4b2c      	ldr	r3, [pc, #176]	@ (8001074 <RescheduleTimerList+0x130>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000fc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001070 <RescheduleTimerList+0x12c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
 8000fcc:	e03d      	b.n	800104a <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000fd8:	4b25      	ldr	r3, [pc, #148]	@ (8001070 <RescheduleTimerList+0x12c>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000fde:	e034      	b.n	800104a <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000fe0:	7bfa      	ldrb	r2, [r7, #15]
 8000fe2:	4922      	ldr	r1, [pc, #136]	@ (800106c <RescheduleTimerList+0x128>)
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4413      	add	r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	440b      	add	r3, r1
 8000fee:	3308      	adds	r3, #8
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d20a      	bcs.n	800100e <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000ff8:	7bfa      	ldrb	r2, [r7, #15]
 8000ffa:	491c      	ldr	r1, [pc, #112]	@ (800106c <RescheduleTimerList+0x128>)
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4413      	add	r3, r2
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	440b      	add	r3, r1
 8001006:	3308      	adds	r3, #8
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	e013      	b.n	8001036 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	4916      	ldr	r1, [pc, #88]	@ (800106c <RescheduleTimerList+0x128>)
 8001012:	4613      	mov	r3, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	4413      	add	r3, r2
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	440b      	add	r3, r1
 800101c:	3308      	adds	r3, #8
 800101e:	6819      	ldr	r1, [r3, #0]
 8001020:	88fb      	ldrh	r3, [r7, #6]
 8001022:	7bfa      	ldrb	r2, [r7, #15]
 8001024:	1ac9      	subs	r1, r1, r3
 8001026:	4811      	ldr	r0, [pc, #68]	@ (800106c <RescheduleTimerList+0x128>)
 8001028:	4613      	mov	r3, r2
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	4413      	add	r3, r2
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	4403      	add	r3, r0
 8001032:	3308      	adds	r3, #8
 8001034:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	490c      	ldr	r1, [pc, #48]	@ (800106c <RescheduleTimerList+0x128>)
 800103a:	4613      	mov	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4413      	add	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	440b      	add	r3, r1
 8001044:	3315      	adds	r3, #21
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	2b06      	cmp	r3, #6
 800104e:	d1c7      	bne.n	8000fe0 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001050:	89bb      	ldrh	r3, [r7, #12]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff1e 	bl	8000e94 <RestartWakeupCounter>

  return ;
 8001058:	bf00      	nop
}
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40002800 	.word	0x40002800
 8001064:	20000170 	.word	0x20000170
 8001068:	20000124 	.word	0x20000124
 800106c:	20000094 	.word	0x20000094
 8001070:	2000012c 	.word	0x2000012c
 8001074:	20000132 	.word	0x20000132

08001078 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	@ 0x28
 800107c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800107e:	f3ef 8310 	mrs	r3, PRIMASK
 8001082:	617b      	str	r3, [r7, #20]
  return(result);
 8001084:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001088:	b672      	cpsid	i
}
 800108a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800108c:	4b59      	ldr	r3, [pc, #356]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	22ca      	movs	r2, #202	@ 0xca
 8001092:	625a      	str	r2, [r3, #36]	@ 0x24
 8001094:	4b57      	ldr	r3, [pc, #348]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2253      	movs	r2, #83	@ 0x53
 800109a:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 800109c:	4b55      	ldr	r3, [pc, #340]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	4b54      	ldr	r3, [pc, #336]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80010aa:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80010ac:	4b52      	ldr	r3, [pc, #328]	@ (80011f8 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80010b4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80010b8:	4950      	ldr	r1, [pc, #320]	@ (80011fc <HW_TS_RTC_Wakeup_Handler+0x184>)
 80010ba:	4613      	mov	r3, r2
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	4413      	add	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	440b      	add	r3, r1
 80010c4:	330c      	adds	r3, #12
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d16e      	bne.n	80011ac <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80010ce:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80010d2:	494a      	ldr	r1, [pc, #296]	@ (80011fc <HW_TS_RTC_Wakeup_Handler+0x184>)
 80010d4:	4613      	mov	r3, r2
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	4413      	add	r3, r2
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	440b      	add	r3, r1
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80010e2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80010e6:	4945      	ldr	r1, [pc, #276]	@ (80011fc <HW_TS_RTC_Wakeup_Handler+0x184>)
 80010e8:	4613      	mov	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4413      	add	r3, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	440b      	add	r3, r1
 80010f2:	3310      	adds	r3, #16
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80010f8:	4b41      	ldr	r3, [pc, #260]	@ (8001200 <HW_TS_RTC_Wakeup_Handler+0x188>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d04c      	beq.n	800119c <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001102:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001106:	493d      	ldr	r1, [pc, #244]	@ (80011fc <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001108:	4613      	mov	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4413      	add	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	440b      	add	r3, r1
 8001112:	330d      	adds	r3, #13
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b01      	cmp	r3, #1
 800111a:	d124      	bne.n	8001166 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800111c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001120:	2101      	movs	r1, #1
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fdf2 	bl	8000d0c <UnlinkTimer>
 8001128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	f383 8810 	msr	PRIMASK, r3
}
 8001132:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001134:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001138:	4930      	ldr	r1, [pc, #192]	@ (80011fc <HW_TS_RTC_Wakeup_Handler+0x184>)
 800113a:	4613      	mov	r3, r2
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	4413      	add	r3, r2
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	440b      	add	r3, r1
 8001144:	3304      	adds	r3, #4
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800114c:	4611      	mov	r1, r2
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f9b8 	bl	80014c4 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001154:	4b27      	ldr	r3, [pc, #156]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	22ca      	movs	r2, #202	@ 0xca
 800115a:	625a      	str	r2, [r3, #36]	@ 0x24
 800115c:	4b25      	ldr	r3, [pc, #148]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2253      	movs	r2, #83	@ 0x53
 8001162:	625a      	str	r2, [r3, #36]	@ 0x24
 8001164:	e012      	b.n	800118c <HW_TS_RTC_Wakeup_Handler+0x114>
 8001166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001168:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f383 8810 	msr	PRIMASK, r3
}
 8001170:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001172:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f920 	bl	80013bc <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800117c:	4b1d      	ldr	r3, [pc, #116]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	22ca      	movs	r2, #202	@ 0xca
 8001182:	625a      	str	r2, [r3, #36]	@ 0x24
 8001184:	4b1b      	ldr	r3, [pc, #108]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2253      	movs	r2, #83	@ 0x53
 800118a:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 800118c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001190:	69fa      	ldr	r2, [r7, #28]
 8001192:	4619      	mov	r1, r3
 8001194:	69b8      	ldr	r0, [r7, #24]
 8001196:	f000 fa1b 	bl	80015d0 <HW_TS_RTC_Int_AppNot>
 800119a:	e022      	b.n	80011e2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 800119c:	f7ff fed2 	bl	8000f44 <RescheduleTimerList>
 80011a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	f383 8810 	msr	PRIMASK, r3
}
 80011aa:	e01a      	b.n	80011e2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80011ac:	bf00      	nop
 80011ae:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0f8      	beq.n	80011ae <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80011bc:	4b0d      	ldr	r3, [pc, #52]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80011cc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80011ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001204 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80011d0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f383 8810 	msr	PRIMASK, r3
}
 80011e0:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80011e2:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	22ff      	movs	r2, #255	@ 0xff
 80011e8:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 80011ea:	bf00      	nop
}
 80011ec:	3728      	adds	r7, #40	@ 0x28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000170 	.word	0x20000170
 80011f8:	20000124 	.word	0x20000124
 80011fc:	20000094 	.word	0x20000094
 8001200:	2000012c 	.word	0x2000012c
 8001204:	58000800 	.word	0x58000800

08001208 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001214:	4b5e      	ldr	r3, [pc, #376]	@ (8001390 <HW_TS_Init+0x188>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	22ca      	movs	r2, #202	@ 0xca
 800121a:	625a      	str	r2, [r3, #36]	@ 0x24
 800121c:	4b5c      	ldr	r3, [pc, #368]	@ (8001390 <HW_TS_Init+0x188>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2253      	movs	r2, #83	@ 0x53
 8001222:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001224:	4b5b      	ldr	r3, [pc, #364]	@ (8001394 <HW_TS_Init+0x18c>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	4a5a      	ldr	r2, [pc, #360]	@ (8001394 <HW_TS_Init+0x18c>)
 800122a:	f043 0320 	orr.w	r3, r3, #32
 800122e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001230:	4b58      	ldr	r3, [pc, #352]	@ (8001394 <HW_TS_Init+0x18c>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f1c3 0304 	rsb	r3, r3, #4
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b55      	ldr	r3, [pc, #340]	@ (8001398 <HW_TS_Init+0x190>)
 8001244:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001246:	4b53      	ldr	r3, [pc, #332]	@ (8001394 <HW_TS_Init+0x18c>)
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800124e:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8001252:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	fa92 f2a2 	rbit	r2, r2
 800125a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001260:	697a      	ldr	r2, [r7, #20]
 8001262:	2a00      	cmp	r2, #0
 8001264:	d101      	bne.n	800126a <HW_TS_Init+0x62>
  {
    return 32U;
 8001266:	2220      	movs	r2, #32
 8001268:	e003      	b.n	8001272 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	fab2 f282 	clz	r2, r2
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	40d3      	lsrs	r3, r2
 8001274:	b2db      	uxtb	r3, r3
 8001276:	3301      	adds	r3, #1
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b48      	ldr	r3, [pc, #288]	@ (800139c <HW_TS_Init+0x194>)
 800127c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800127e:	4b45      	ldr	r3, [pc, #276]	@ (8001394 <HW_TS_Init+0x18c>)
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	b29b      	uxth	r3, r3
 8001284:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001288:	b29b      	uxth	r3, r3
 800128a:	3301      	adds	r3, #1
 800128c:	b29a      	uxth	r2, r3
 800128e:	4b44      	ldr	r3, [pc, #272]	@ (80013a0 <HW_TS_Init+0x198>)
 8001290:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001292:	4b43      	ldr	r3, [pc, #268]	@ (80013a0 <HW_TS_Init+0x198>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	3b01      	subs	r3, #1
 8001298:	4a40      	ldr	r2, [pc, #256]	@ (800139c <HW_TS_Init+0x194>)
 800129a:	7812      	ldrb	r2, [r2, #0]
 800129c:	fb02 f303 	mul.w	r3, r2, r3
 80012a0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80012a4:	4a3c      	ldr	r2, [pc, #240]	@ (8001398 <HW_TS_Init+0x190>)
 80012a6:	7812      	ldrb	r2, [r2, #0]
 80012a8:	40d3      	lsrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d904      	bls.n	80012c0 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80012b6:	4b3b      	ldr	r3, [pc, #236]	@ (80013a4 <HW_TS_Init+0x19c>)
 80012b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012bc:	801a      	strh	r2, [r3, #0]
 80012be:	e003      	b.n	80012c8 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	4b37      	ldr	r3, [pc, #220]	@ (80013a4 <HW_TS_Init+0x19c>)
 80012c6:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80012c8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80012cc:	f7ff fb9c 	bl	8000a08 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80012d0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80012d4:	f7ff fb84 	bl	80009e0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d13d      	bne.n	800135a <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80012de:	4b32      	ldr	r3, [pc, #200]	@ (80013a8 <HW_TS_Init+0x1a0>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80012e4:	4b31      	ldr	r3, [pc, #196]	@ (80013ac <HW_TS_Init+0x1a4>)
 80012e6:	f04f 32ff 	mov.w	r2, #4294967295
 80012ea:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80012ec:	2300      	movs	r3, #0
 80012ee:	77fb      	strb	r3, [r7, #31]
 80012f0:	e00c      	b.n	800130c <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80012f2:	7ffa      	ldrb	r2, [r7, #31]
 80012f4:	492e      	ldr	r1, [pc, #184]	@ (80013b0 <HW_TS_Init+0x1a8>)
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	440b      	add	r3, r1
 8001300:	330c      	adds	r3, #12
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001306:	7ffb      	ldrb	r3, [r7, #31]
 8001308:	3301      	adds	r3, #1
 800130a:	77fb      	strb	r3, [r7, #31]
 800130c:	7ffb      	ldrb	r3, [r7, #31]
 800130e:	2b05      	cmp	r3, #5
 8001310:	d9ef      	bls.n	80012f2 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001312:	4b28      	ldr	r3, [pc, #160]	@ (80013b4 <HW_TS_Init+0x1ac>)
 8001314:	2206      	movs	r2, #6
 8001316:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001318:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <HW_TS_Init+0x188>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	4b1c      	ldr	r3, [pc, #112]	@ (8001390 <HW_TS_Init+0x188>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001326:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001328:	4b19      	ldr	r3, [pc, #100]	@ (8001390 <HW_TS_Init+0x188>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	b2da      	uxtb	r2, r3
 8001330:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <HW_TS_Init+0x188>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001338:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800133a:	4b1f      	ldr	r3, [pc, #124]	@ (80013b8 <HW_TS_Init+0x1b0>)
 800133c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001340:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001342:	2003      	movs	r0, #3
 8001344:	f000 ff6d 	bl	8002222 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001348:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <HW_TS_Init+0x188>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <HW_TS_Init+0x188>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	e009      	b.n	800136e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800135a:	4b0d      	ldr	r3, [pc, #52]	@ (8001390 <HW_TS_Init+0x188>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001364:	2b00      	cmp	r3, #0
 8001366:	d002      	beq.n	800136e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001368:	2003      	movs	r0, #3
 800136a:	f000 ff4c 	bl	8002206 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800136e:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <HW_TS_Init+0x188>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	22ff      	movs	r2, #255	@ 0xff
 8001374:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001376:	2200      	movs	r2, #0
 8001378:	2103      	movs	r1, #3
 800137a:	2003      	movs	r0, #3
 800137c:	f000 ff01 	bl	8002182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001380:	2003      	movs	r0, #3
 8001382:	f000 ff18 	bl	80021b6 <HAL_NVIC_EnableIRQ>

  return;
 8001386:	bf00      	nop
}
 8001388:	3720      	adds	r7, #32
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000170 	.word	0x20000170
 8001394:	40002800 	.word	0x40002800
 8001398:	2000012d 	.word	0x2000012d
 800139c:	2000012e 	.word	0x2000012e
 80013a0:	20000130 	.word	0x20000130
 80013a4:	20000132 	.word	0x20000132
 80013a8:	2000012c 	.word	0x2000012c
 80013ac:	20000128 	.word	0x20000128
 80013b0:	20000094 	.word	0x20000094
 80013b4:	20000124 	.word	0x20000124
 80013b8:	58000800 	.word	0x58000800

080013bc <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013c6:	f3ef 8310 	mrs	r3, PRIMASK
 80013ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80013cc:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80013ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80013d0:	b672      	cpsid	i
}
 80013d2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80013d4:	2003      	movs	r0, #3
 80013d6:	f000 fefc 	bl	80021d2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80013da:	4b34      	ldr	r3, [pc, #208]	@ (80014ac <HW_TS_Stop+0xf0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	22ca      	movs	r2, #202	@ 0xca
 80013e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80013e2:	4b32      	ldr	r3, [pc, #200]	@ (80014ac <HW_TS_Stop+0xf0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2253      	movs	r2, #83	@ 0x53
 80013e8:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80013ea:	79fa      	ldrb	r2, [r7, #7]
 80013ec:	4930      	ldr	r1, [pc, #192]	@ (80014b0 <HW_TS_Stop+0xf4>)
 80013ee:	4613      	mov	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4413      	add	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	440b      	add	r3, r1
 80013f8:	330c      	adds	r3, #12
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d142      	bne.n	8001488 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fc80 	bl	8000d0c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800140c:	4b29      	ldr	r3, [pc, #164]	@ (80014b4 <HW_TS_Stop+0xf8>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001412:	7cfb      	ldrb	r3, [r7, #19]
 8001414:	2b06      	cmp	r3, #6
 8001416:	d12f      	bne.n	8001478 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001418:	4b27      	ldr	r3, [pc, #156]	@ (80014b8 <HW_TS_Stop+0xfc>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001420:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001424:	d107      	bne.n	8001436 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001426:	bf00      	nop
 8001428:	4b20      	ldr	r3, [pc, #128]	@ (80014ac <HW_TS_Stop+0xf0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f8      	bne.n	8001428 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001436:	4b1d      	ldr	r3, [pc, #116]	@ (80014ac <HW_TS_Stop+0xf0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ac <HW_TS_Stop+0xf0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001444:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001446:	bf00      	nop
 8001448:	4b18      	ldr	r3, [pc, #96]	@ (80014ac <HW_TS_Stop+0xf0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f8      	beq.n	8001448 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001456:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <HW_TS_Stop+0xf0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4b13      	ldr	r3, [pc, #76]	@ (80014ac <HW_TS_Stop+0xf0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001466:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001468:	4b14      	ldr	r3, [pc, #80]	@ (80014bc <HW_TS_Stop+0x100>)
 800146a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800146e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001470:	2003      	movs	r0, #3
 8001472:	f000 fed6 	bl	8002222 <HAL_NVIC_ClearPendingIRQ>
 8001476:	e007      	b.n	8001488 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001478:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <HW_TS_Stop+0x104>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	7cfa      	ldrb	r2, [r7, #19]
 8001480:	429a      	cmp	r2, r3
 8001482:	d001      	beq.n	8001488 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001484:	f7ff fd5e 	bl	8000f44 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001488:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <HW_TS_Stop+0xf0>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	22ff      	movs	r2, #255	@ 0xff
 800148e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001490:	2003      	movs	r0, #3
 8001492:	f000 fe90 	bl	80021b6 <HAL_NVIC_EnableIRQ>
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	f383 8810 	msr	PRIMASK, r3
}
 80014a0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80014a2:	bf00      	nop
}
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000170 	.word	0x20000170
 80014b0:	20000094 	.word	0x20000094
 80014b4:	20000124 	.word	0x20000124
 80014b8:	40002800 	.word	0x40002800
 80014bc:	58000800 	.word	0x58000800
 80014c0:	20000125 	.word	0x20000125

080014c4 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80014d0:	79fa      	ldrb	r2, [r7, #7]
 80014d2:	493b      	ldr	r1, [pc, #236]	@ (80015c0 <HW_TS_Start+0xfc>)
 80014d4:	4613      	mov	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	440b      	add	r3, r1
 80014de:	330c      	adds	r3, #12
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d103      	bne.n	80014f0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff ff66 	bl	80013bc <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014f0:	f3ef 8310 	mrs	r3, PRIMASK
 80014f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80014f6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80014f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80014fa:	b672      	cpsid	i
}
 80014fc:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80014fe:	2003      	movs	r0, #3
 8001500:	f000 fe67 	bl	80021d2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001504:	4b2f      	ldr	r3, [pc, #188]	@ (80015c4 <HW_TS_Start+0x100>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	22ca      	movs	r2, #202	@ 0xca
 800150a:	625a      	str	r2, [r3, #36]	@ 0x24
 800150c:	4b2d      	ldr	r3, [pc, #180]	@ (80015c4 <HW_TS_Start+0x100>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2253      	movs	r2, #83	@ 0x53
 8001512:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001514:	79fa      	ldrb	r2, [r7, #7]
 8001516:	492a      	ldr	r1, [pc, #168]	@ (80015c0 <HW_TS_Start+0xfc>)
 8001518:	4613      	mov	r3, r2
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4413      	add	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	440b      	add	r3, r1
 8001522:	330c      	adds	r3, #12
 8001524:	2202      	movs	r2, #2
 8001526:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001528:	79fa      	ldrb	r2, [r7, #7]
 800152a:	4925      	ldr	r1, [pc, #148]	@ (80015c0 <HW_TS_Start+0xfc>)
 800152c:	4613      	mov	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	440b      	add	r3, r1
 8001536:	3308      	adds	r3, #8
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800153c:	79fa      	ldrb	r2, [r7, #7]
 800153e:	4920      	ldr	r1, [pc, #128]	@ (80015c0 <HW_TS_Start+0xfc>)
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	440b      	add	r3, r1
 800154a:	3304      	adds	r3, #4
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fb30 	bl	8000bb8 <linkTimer>
 8001558:	4603      	mov	r3, r0
 800155a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800155c:	4b1a      	ldr	r3, [pc, #104]	@ (80015c8 <HW_TS_Start+0x104>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001562:	4b1a      	ldr	r3, [pc, #104]	@ (80015cc <HW_TS_Start+0x108>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	7c7a      	ldrb	r2, [r7, #17]
 800156a:	429a      	cmp	r2, r3
 800156c:	d002      	beq.n	8001574 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800156e:	f7ff fce9 	bl	8000f44 <RescheduleTimerList>
 8001572:	e013      	b.n	800159c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001574:	79fa      	ldrb	r2, [r7, #7]
 8001576:	4912      	ldr	r1, [pc, #72]	@ (80015c0 <HW_TS_Start+0xfc>)
 8001578:	4613      	mov	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	440b      	add	r3, r1
 8001582:	3308      	adds	r3, #8
 8001584:	6819      	ldr	r1, [r3, #0]
 8001586:	8a7b      	ldrh	r3, [r7, #18]
 8001588:	79fa      	ldrb	r2, [r7, #7]
 800158a:	1ac9      	subs	r1, r1, r3
 800158c:	480c      	ldr	r0, [pc, #48]	@ (80015c0 <HW_TS_Start+0xfc>)
 800158e:	4613      	mov	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4413      	add	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4403      	add	r3, r0
 8001598:	3308      	adds	r3, #8
 800159a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800159c:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <HW_TS_Start+0x100>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	22ff      	movs	r2, #255	@ 0xff
 80015a2:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80015a4:	2003      	movs	r0, #3
 80015a6:	f000 fe06 	bl	80021b6 <HAL_NVIC_EnableIRQ>
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	f383 8810 	msr	PRIMASK, r3
}
 80015b4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80015b6:	bf00      	nop
}
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000094 	.word	0x20000094
 80015c4:	20000170 	.word	0x20000170
 80015c8:	20000124 	.word	0x20000124
 80015cc:	20000125 	.word	0x20000125

080015d0 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	460b      	mov	r3, r1
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4798      	blx	r3

  return;
 80015e2:	bf00      	nop
}
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b085      	sub	sp, #20
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80015f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4313      	orrs	r3, r2
 8001600:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001602:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001606:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4013      	ands	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800160e:	68fb      	ldr	r3, [r7, #12]
}
 8001610:	bf00      	nop
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <MX_IPCC_Init+0x20>)
 8001622:	4a07      	ldr	r2, [pc, #28]	@ (8001640 <MX_IPCC_Init+0x24>)
 8001624:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001626:	4805      	ldr	r0, [pc, #20]	@ (800163c <MX_IPCC_Init+0x20>)
 8001628:	f000 ffda 	bl	80025e0 <HAL_IPCC_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001632:	f000 f8d9 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000134 	.word	0x20000134
 8001640:	58000c00 	.word	0x58000c00

08001644 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0d      	ldr	r2, [pc, #52]	@ (8001688 <HAL_IPCC_MspInit+0x44>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d113      	bne.n	800167e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001656:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800165a:	f7ff ffc6 	bl	80015ea <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2100      	movs	r1, #0
 8001662:	202c      	movs	r0, #44	@ 0x2c
 8001664:	f000 fd8d 	bl	8002182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001668:	202c      	movs	r0, #44	@ 0x2c
 800166a:	f000 fda4 	bl	80021b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	202d      	movs	r0, #45	@ 0x2d
 8001674:	f000 fd85 	bl	8002182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001678:	202d      	movs	r0, #45	@ 0x2d
 800167a:	f000 fd9c 	bl	80021b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	58000c00 	.word	0x58000c00

0800168c <LL_RCC_LSE_SetDriveCapability>:
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001694:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800169c:	f023 0218 	bic.w	r2, r3, #24
 80016a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016bc:	f000 fba0 	bl	8001e00 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80016c0:	f7fe ffa0 	bl	8000604 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c4:	f000 f814 	bl	80016f0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80016c8:	f000 f86e 	bl	80017a8 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80016cc:	f7ff ffa6 	bl	800161c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016d0:	f7ff f92a 	bl	8000928 <MX_GPIO_Init>
  MX_RTC_Init();
 80016d4:	f000 f8c0 	bl	8001858 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80016d8:	f000 fac6 	bl	8001c68 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80016dc:	f000 f956 	bl	800198c <MX_SPI1_Init>
  MX_RF_Init();
 80016e0:	f000 f888 	bl	80017f4 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80016e4:	f7fe ff9c 	bl	8000620 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80016e8:	f7ff f8c7 	bl	800087a <MX_APPE_Process>
 80016ec:	e7fc      	b.n	80016e8 <main+0x30>
	...

080016f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b09a      	sub	sp, #104	@ 0x68
 80016f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f6:	f107 0320 	add.w	r3, r7, #32
 80016fa:	2248      	movs	r2, #72	@ 0x48
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f007 f9c0 	bl	8008a84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]
 8001712:	615a      	str	r2, [r3, #20]
 8001714:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001716:	f000 ffe9 	bl	80026ec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800171a:	2010      	movs	r0, #16
 800171c:	f7ff ffb6 	bl	800168c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001720:	4b20      	ldr	r3, [pc, #128]	@ (80017a4 <SystemClock_Config+0xb4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001728:	4a1e      	ldr	r2, [pc, #120]	@ (80017a4 <SystemClock_Config+0xb4>)
 800172a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	4b1c      	ldr	r3, [pc, #112]	@ (80017a4 <SystemClock_Config+0xb4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001738:	603b      	str	r3, [r7, #0]
 800173a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800173c:	2307      	movs	r3, #7
 800173e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001740:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001744:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001746:	2301      	movs	r3, #1
 8001748:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800174a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800174e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001750:	2340      	movs	r3, #64	@ 0x40
 8001752:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001754:	2300      	movs	r3, #0
 8001756:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001758:	f107 0320 	add.w	r3, r7, #32
 800175c:	4618      	mov	r0, r3
 800175e:	f001 fb59 	bl	8002e14 <HAL_RCC_OscConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001768:	f000 f83e 	bl	80017e8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800176c:	236f      	movs	r3, #111	@ 0x6f
 800176e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001770:	2302      	movs	r3, #2
 8001772:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001778:	2300      	movs	r3, #0
 800177a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001780:	2300      	movs	r3, #0
 8001782:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001784:	2300      	movs	r3, #0
 8001786:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	2101      	movs	r1, #1
 800178c:	4618      	mov	r0, r3
 800178e:	f001 feb5 	bl	80034fc <HAL_RCC_ClockConfig>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001798:	f000 f826 	bl	80017e8 <Error_Handler>
  }
}
 800179c:	bf00      	nop
 800179e:	3768      	adds	r7, #104	@ 0x68
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	58000400 	.word	0x58000400

080017a8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b094      	sub	sp, #80	@ 0x50
 80017ac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017ae:	463b      	mov	r3, r7
 80017b0:	2250      	movs	r2, #80	@ 0x50
 80017b2:	2100      	movs	r1, #0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f007 f965 	bl	8008a84 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80017ba:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80017be:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80017c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017c4:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80017c6:	2302      	movs	r3, #2
 80017c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80017ca:	2310      	movs	r3, #16
 80017cc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ce:	463b      	mov	r3, r7
 80017d0:	4618      	mov	r0, r3
 80017d2:	f002 fad0 	bl	8003d76 <HAL_RCCEx_PeriphCLKConfig>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80017dc:	f000 f804 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80017e0:	bf00      	nop
 80017e2:	3750      	adds	r7, #80	@ 0x50
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017ec:	b672      	cpsid	i
}
 80017ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <Error_Handler+0x8>

080017f4 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001806:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800180a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800180e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001812:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001816:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800182c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001830:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001832:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4313      	orrs	r3, r2
 800183a:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800183c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001840:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4013      	ands	r3, r2
 8001846:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001848:	68fb      	ldr	r3, [r7, #12]
}
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800185c:	4b16      	ldr	r3, [pc, #88]	@ (80018b8 <MX_RTC_Init+0x60>)
 800185e:	4a17      	ldr	r2, [pc, #92]	@ (80018bc <MX_RTC_Init+0x64>)
 8001860:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001862:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <MX_RTC_Init+0x60>)
 8001864:	2200      	movs	r2, #0
 8001866:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001868:	4b13      	ldr	r3, [pc, #76]	@ (80018b8 <MX_RTC_Init+0x60>)
 800186a:	220f      	movs	r2, #15
 800186c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800186e:	4b12      	ldr	r3, [pc, #72]	@ (80018b8 <MX_RTC_Init+0x60>)
 8001870:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001874:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001876:	4b10      	ldr	r3, [pc, #64]	@ (80018b8 <MX_RTC_Init+0x60>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800187c:	4b0e      	ldr	r3, [pc, #56]	@ (80018b8 <MX_RTC_Init+0x60>)
 800187e:	2200      	movs	r2, #0
 8001880:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001882:	4b0d      	ldr	r3, [pc, #52]	@ (80018b8 <MX_RTC_Init+0x60>)
 8001884:	2200      	movs	r2, #0
 8001886:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001888:	4b0b      	ldr	r3, [pc, #44]	@ (80018b8 <MX_RTC_Init+0x60>)
 800188a:	2200      	movs	r2, #0
 800188c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800188e:	480a      	ldr	r0, [pc, #40]	@ (80018b8 <MX_RTC_Init+0x60>)
 8001890:	f002 fcf8 	bl	8004284 <HAL_RTC_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800189a:	f7ff ffa5 	bl	80017e8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800189e:	2200      	movs	r2, #0
 80018a0:	2100      	movs	r1, #0
 80018a2:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <MX_RTC_Init+0x60>)
 80018a4:	f002 fdee 	bl	8004484 <HAL_RTCEx_SetWakeUpTimer_IT>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80018ae:	f7ff ff9b 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000170 	.word	0x20000170
 80018bc:	40002800 	.word	0x40002800

080018c0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b096      	sub	sp, #88	@ 0x58
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018c8:	f107 0308 	add.w	r3, r7, #8
 80018cc:	2250      	movs	r2, #80	@ 0x50
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f007 f8d7 	bl	8008a84 <memset>
  if(rtcHandle->Instance==RTC)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a12      	ldr	r2, [pc, #72]	@ (8001924 <HAL_RTC_MspInit+0x64>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d11d      	bne.n	800191c <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80018e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80018e4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80018e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018ea:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ec:	f107 0308 	add.w	r3, r7, #8
 80018f0:	4618      	mov	r0, r3
 80018f2:	f002 fa40 	bl	8003d76 <HAL_RCCEx_PeriphCLKConfig>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80018fc:	f7ff ff74 	bl	80017e8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001900:	f7ff ff7f 	bl	8001802 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001904:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001908:	f7ff ff8c 	bl	8001824 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800190c:	2200      	movs	r2, #0
 800190e:	2100      	movs	r1, #0
 8001910:	2003      	movs	r0, #3
 8001912:	f000 fc36 	bl	8002182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001916:	2003      	movs	r0, #3
 8001918:	f000 fc4d 	bl	80021b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800191c:	bf00      	nop
 800191e:	3758      	adds	r7, #88	@ 0x58
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40002800 	.word	0x40002800

08001928 <LL_AHB2_GRP1_EnableClock>:
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001930:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001934:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001936:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4313      	orrs	r3, r2
 800193e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001944:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4013      	ands	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800194c:	68fb      	ldr	r3, [r7, #12]
}
 800194e:	bf00      	nop
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800195a:	b480      	push	{r7}
 800195c:	b085      	sub	sp, #20
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001966:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001968:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4313      	orrs	r3, r2
 8001970:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001972:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001976:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4013      	ands	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800197e:	68fb      	ldr	r3, [r7, #12]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001990:	4b1b      	ldr	r3, [pc, #108]	@ (8001a00 <MX_SPI1_Init+0x74>)
 8001992:	4a1c      	ldr	r2, [pc, #112]	@ (8001a04 <MX_SPI1_Init+0x78>)
 8001994:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001996:	4b1a      	ldr	r3, [pc, #104]	@ (8001a00 <MX_SPI1_Init+0x74>)
 8001998:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800199c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800199e:	4b18      	ldr	r3, [pc, #96]	@ (8001a00 <MX_SPI1_Init+0x74>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019a4:	4b16      	ldr	r3, [pc, #88]	@ (8001a00 <MX_SPI1_Init+0x74>)
 80019a6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80019aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019ac:	4b14      	ldr	r3, [pc, #80]	@ (8001a00 <MX_SPI1_Init+0x74>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019b2:	4b13      	ldr	r3, [pc, #76]	@ (8001a00 <MX_SPI1_Init+0x74>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019b8:	4b11      	ldr	r3, [pc, #68]	@ (8001a00 <MX_SPI1_Init+0x74>)
 80019ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80019c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <MX_SPI1_Init+0x74>)
 80019c2:	2208      	movs	r2, #8
 80019c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a00 <MX_SPI1_Init+0x74>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <MX_SPI1_Init+0x74>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <MX_SPI1_Init+0x74>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80019d8:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <MX_SPI1_Init+0x74>)
 80019da:	2207      	movs	r2, #7
 80019dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019de:	4b08      	ldr	r3, [pc, #32]	@ (8001a00 <MX_SPI1_Init+0x74>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019e4:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <MX_SPI1_Init+0x74>)
 80019e6:	2208      	movs	r2, #8
 80019e8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019ea:	4805      	ldr	r0, [pc, #20]	@ (8001a00 <MX_SPI1_Init+0x74>)
 80019ec:	f002 fe06 	bl	80045fc <HAL_SPI_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80019f6:	f7ff fef7 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000194 	.word	0x20000194
 8001a04:	40013000 	.word	0x40013000

08001a08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 030c 	add.w	r3, r7, #12
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0f      	ldr	r2, [pc, #60]	@ (8001a64 <HAL_SPI_MspInit+0x5c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d117      	bne.n	8001a5a <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a2a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001a2e:	f7ff ff94 	bl	800195a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	2001      	movs	r0, #1
 8001a34:	f7ff ff78 	bl	8001928 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a38:	23e0      	movs	r3, #224	@ 0xe0
 8001a3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a48:	2305      	movs	r3, #5
 8001a4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4c:	f107 030c 	add.w	r3, r7, #12
 8001a50:	4619      	mov	r1, r3
 8001a52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a56:	f000 fbf3 	bl	8002240 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	3720      	adds	r7, #32
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40013000 	.word	0x40013000

08001a68 <LL_AHB3_GRP1_EnableClock>:
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001a70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001a80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
}
 8001a8e:	bf00      	nop
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001a9e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001aa2:	f7ff ffe1 	bl	8001a68 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	202e      	movs	r0, #46	@ 0x2e
 8001aac:	f000 fb69 	bl	8002182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001ab0:	202e      	movs	r0, #46	@ 0x2e
 8001ab2:	f000 fb80 	bl	80021b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001abe:	bf00      	nop
 8001ac0:	e7fd      	b.n	8001abe <NMI_Handler+0x4>

08001ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac6:	bf00      	nop
 8001ac8:	e7fd      	b.n	8001ac6 <HardFault_Handler+0x4>

08001aca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ace:	bf00      	nop
 8001ad0:	e7fd      	b.n	8001ace <MemManage_Handler+0x4>

08001ad2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad6:	bf00      	nop
 8001ad8:	e7fd      	b.n	8001ad6 <BusFault_Handler+0x4>

08001ada <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ade:	bf00      	nop
 8001ae0:	e7fd      	b.n	8001ade <UsageFault_Handler+0x4>

08001ae2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b10:	f000 f9d0 	bl	8001eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001b1c:	f7ff faac 	bl	8001078 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SEN_INT1_Pin);
 8001b28:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001b2c:	f000 fd10 	bl	8002550 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SEN_INT2_Pin);
 8001b30:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001b34:	f000 fd0c 	bl	8002550 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001b40:	f006 fbe6 	bl	8008310 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001b4c:	f006 fc16 	bl	800837c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001b58:	f000 fd1e 	bl	8002598 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001b64:	4b24      	ldr	r3, [pc, #144]	@ (8001bf8 <SystemInit+0x98>)
 8001b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b6a:	4a23      	ldr	r2, [pc, #140]	@ (8001bf8 <SystemInit+0x98>)
 8001b6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001b84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b88:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001b8c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001b8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b98:	4b18      	ldr	r3, [pc, #96]	@ (8001bfc <SystemInit+0x9c>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001b9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ba6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001baa:	f023 0305 	bic.w	r3, r3, #5
 8001bae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001bb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bbe:	f023 0301 	bic.w	r3, r3, #1
 8001bc2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001bc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bca:	4a0d      	ldr	r2, [pc, #52]	@ (8001c00 <SystemInit+0xa0>)
 8001bcc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001bce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bd2:	4a0b      	ldr	r2, [pc, #44]	@ (8001c00 <SystemInit+0xa0>)
 8001bd4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001be0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001be4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001be6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bea:	2200      	movs	r2, #0
 8001bec:	619a      	str	r2, [r3, #24]
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000ed00 	.word	0xe000ed00
 8001bfc:	faf6fefb 	.word	0xfaf6fefb
 8001c00:	22041000 	.word	0x22041000

08001c04 <LL_AHB2_GRP1_EnableClock>:
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c10:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c20:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4013      	ands	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c28:	68fb      	ldr	r3, [r7, #12]
}
 8001c2a:	bf00      	nop
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <LL_APB2_GRP1_EnableClock>:
{
 8001c36:	b480      	push	{r7}
 8001c38:	b085      	sub	sp, #20
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c42:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c52:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4013      	ands	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c6c:	4b22      	ldr	r3, [pc, #136]	@ (8001cf8 <MX_USART1_UART_Init+0x90>)
 8001c6e:	4a23      	ldr	r2, [pc, #140]	@ (8001cfc <MX_USART1_UART_Init+0x94>)
 8001c70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c72:	4b21      	ldr	r3, [pc, #132]	@ (8001cf8 <MX_USART1_UART_Init+0x90>)
 8001c74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf8 <MX_USART1_UART_Init+0x90>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c80:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf8 <MX_USART1_UART_Init+0x90>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c86:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf8 <MX_USART1_UART_Init+0x90>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf8 <MX_USART1_UART_Init+0x90>)
 8001c8e:	220c      	movs	r2, #12
 8001c90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c92:	4b19      	ldr	r3, [pc, #100]	@ (8001cf8 <MX_USART1_UART_Init+0x90>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c98:	4b17      	ldr	r3, [pc, #92]	@ (8001cf8 <MX_USART1_UART_Init+0x90>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c9e:	4b16      	ldr	r3, [pc, #88]	@ (8001cf8 <MX_USART1_UART_Init+0x90>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ca4:	4b14      	ldr	r3, [pc, #80]	@ (8001cf8 <MX_USART1_UART_Init+0x90>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001caa:	4b13      	ldr	r3, [pc, #76]	@ (8001cf8 <MX_USART1_UART_Init+0x90>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cb0:	4811      	ldr	r0, [pc, #68]	@ (8001cf8 <MX_USART1_UART_Init+0x90>)
 8001cb2:	f002 fd66 	bl	8004782 <HAL_UART_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001cbc:	f7ff fd94 	bl	80017e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	480d      	ldr	r0, [pc, #52]	@ (8001cf8 <MX_USART1_UART_Init+0x90>)
 8001cc4:	f003 fa2e 	bl	8005124 <HAL_UARTEx_SetTxFifoThreshold>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001cce:	f7ff fd8b 	bl	80017e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4808      	ldr	r0, [pc, #32]	@ (8001cf8 <MX_USART1_UART_Init+0x90>)
 8001cd6:	f003 fa63 	bl	80051a0 <HAL_UARTEx_SetRxFifoThreshold>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001ce0:	f7ff fd82 	bl	80017e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ce4:	4804      	ldr	r0, [pc, #16]	@ (8001cf8 <MX_USART1_UART_Init+0x90>)
 8001ce6:	f003 f9e4 	bl	80050b2 <HAL_UARTEx_DisableFifoMode>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001cf0:	f7ff fd7a 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	200001f8 	.word	0x200001f8
 8001cfc:	40013800 	.word	0x40013800

08001d00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b09c      	sub	sp, #112	@ 0x70
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d18:	f107 030c 	add.w	r3, r7, #12
 8001d1c:	2250      	movs	r2, #80	@ 0x50
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4618      	mov	r0, r3
 8001d22:	f006 feaf 	bl	8008a84 <memset>
  if(uartHandle->Instance==USART1)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a16      	ldr	r2, [pc, #88]	@ (8001d84 <HAL_UART_MspInit+0x84>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d124      	bne.n	8001d7a <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d30:	2301      	movs	r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d34:	2300      	movs	r3, #0
 8001d36:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d38:	f107 030c 	add.w	r3, r7, #12
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f002 f81a 	bl	8003d76 <HAL_RCCEx_PeriphCLKConfig>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d48:	f7ff fd4e 	bl	80017e8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d4c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001d50:	f7ff ff71 	bl	8001c36 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d54:	2002      	movs	r0, #2
 8001d56:	f7ff ff55 	bl	8001c04 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d5a:	23c0      	movs	r3, #192	@ 0xc0
 8001d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d66:	2300      	movs	r3, #0
 8001d68:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d6a:	2307      	movs	r3, #7
 8001d6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001d72:	4619      	mov	r1, r3
 8001d74:	4804      	ldr	r0, [pc, #16]	@ (8001d88 <HAL_UART_MspInit+0x88>)
 8001d76:	f000 fa63 	bl	8002240 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	3770      	adds	r7, #112	@ 0x70
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40013800 	.word	0x40013800
 8001d88:	48000400 	.word	0x48000400

08001d8c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001d8c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d8e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d90:	3304      	adds	r3, #4

08001d92 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d92:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d94:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001d96:	d3f9      	bcc.n	8001d8c <CopyDataInit>
  bx lr
 8001d98:	4770      	bx	lr

08001d9a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001d9a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001d9c:	3004      	adds	r0, #4

08001d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001d9e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001da0:	d3fb      	bcc.n	8001d9a <FillZerobss>
  bx lr
 8001da2:	4770      	bx	lr

08001da4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001da4:	480c      	ldr	r0, [pc, #48]	@ (8001dd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001da6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001da8:	f7ff feda 	bl	8001b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001dac:	480b      	ldr	r0, [pc, #44]	@ (8001ddc <LoopForever+0x6>)
 8001dae:	490c      	ldr	r1, [pc, #48]	@ (8001de0 <LoopForever+0xa>)
 8001db0:	4a0c      	ldr	r2, [pc, #48]	@ (8001de4 <LoopForever+0xe>)
 8001db2:	2300      	movs	r3, #0
 8001db4:	f7ff ffed 	bl	8001d92 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001db8:	480b      	ldr	r0, [pc, #44]	@ (8001de8 <LoopForever+0x12>)
 8001dba:	490c      	ldr	r1, [pc, #48]	@ (8001dec <LoopForever+0x16>)
 8001dbc:	4a0c      	ldr	r2, [pc, #48]	@ (8001df0 <LoopForever+0x1a>)
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f7ff ffe7 	bl	8001d92 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001dc4:	480b      	ldr	r0, [pc, #44]	@ (8001df4 <LoopForever+0x1e>)
 8001dc6:	490c      	ldr	r1, [pc, #48]	@ (8001df8 <LoopForever+0x22>)
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f7ff ffe8 	bl	8001d9e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001dce:	f006 fe61 	bl	8008a94 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001dd2:	f7ff fc71 	bl	80016b8 <main>

08001dd6 <LoopForever>:

LoopForever:
  b LoopForever
 8001dd6:	e7fe      	b.n	8001dd6 <LoopForever>
  ldr   r0, =_estack
 8001dd8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001ddc:	20000008 	.word	0x20000008
 8001de0:	2000002c 	.word	0x2000002c
 8001de4:	08008de0 	.word	0x08008de0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001de8:	200301e4 	.word	0x200301e4
 8001dec:	20030a67 	.word	0x20030a67
 8001df0:	08008e4a 	.word	0x08008e4a
  INIT_BSS _sbss, _ebss
 8001df4:	20000078 	.word	0x20000078
 8001df8:	20000648 	.word	0x20000648

08001dfc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dfc:	e7fe      	b.n	8001dfc <ADC1_IRQHandler>
	...

08001e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <HAL_Init+0x3c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a0b      	ldr	r2, [pc, #44]	@ (8001e3c <HAL_Init+0x3c>)
 8001e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e14:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e16:	2003      	movs	r0, #3
 8001e18:	f000 f9a8 	bl	800216c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e1c:	200f      	movs	r0, #15
 8001e1e:	f000 f80f 	bl	8001e40 <HAL_InitTick>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	71fb      	strb	r3, [r7, #7]
 8001e2c:	e001      	b.n	8001e32 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e2e:	f7ff fe34 	bl	8001a9a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e32:	79fb      	ldrb	r3, [r7, #7]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	58004000 	.word	0x58004000

08001e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001e4c:	4b17      	ldr	r3, [pc, #92]	@ (8001eac <HAL_InitTick+0x6c>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d024      	beq.n	8001e9e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e54:	f001 fcfe 	bl	8003854 <HAL_RCC_GetHCLKFreq>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	4b14      	ldr	r3, [pc, #80]	@ (8001eac <HAL_InitTick+0x6c>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e64:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f000 f9be 	bl	80021ee <HAL_SYSTICK_Config>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d10f      	bne.n	8001e98 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b0f      	cmp	r3, #15
 8001e7c:	d809      	bhi.n	8001e92 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	f04f 30ff 	mov.w	r0, #4294967295
 8001e86:	f000 f97c 	bl	8002182 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e8a:	4a09      	ldr	r2, [pc, #36]	@ (8001eb0 <HAL_InitTick+0x70>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	e007      	b.n	8001ea2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	73fb      	strb	r3, [r7, #15]
 8001e96:	e004      	b.n	8001ea2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	73fb      	strb	r3, [r7, #15]
 8001e9c:	e001      	b.n	8001ea2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000010 	.word	0x20000010
 8001eb0:	2000000c 	.word	0x2000000c

08001eb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001eb8:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <HAL_IncTick+0x20>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <HAL_IncTick+0x24>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	4a04      	ldr	r2, [pc, #16]	@ (8001ed8 <HAL_IncTick+0x24>)
 8001ec6:	6013      	str	r3, [r2, #0]
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	20000010 	.word	0x20000010
 8001ed8:	2000028c 	.word	0x2000028c

08001edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee0:	4b03      	ldr	r3, [pc, #12]	@ (8001ef0 <HAL_GetTick+0x14>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	2000028c 	.word	0x2000028c

08001ef4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001ef8:	4b03      	ldr	r3, [pc, #12]	@ (8001f08 <HAL_GetTickPrio+0x14>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	2000000c 	.word	0x2000000c

08001f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3e:	4a04      	ldr	r2, [pc, #16]	@ (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	60d3      	str	r3, [r2, #12]
}
 8001f44:	bf00      	nop
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f58:	4b04      	ldr	r3, [pc, #16]	@ (8001f6c <__NVIC_GetPriorityGrouping+0x18>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	0a1b      	lsrs	r3, r3, #8
 8001f5e:	f003 0307 	and.w	r3, r3, #7
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	db0b      	blt.n	8001f9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	f003 021f 	and.w	r2, r3, #31
 8001f88:	4907      	ldr	r1, [pc, #28]	@ (8001fa8 <__NVIC_EnableIRQ+0x38>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	2001      	movs	r0, #1
 8001f92:	fa00 f202 	lsl.w	r2, r0, r2
 8001f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000e100 	.word	0xe000e100

08001fac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	db12      	blt.n	8001fe4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	f003 021f 	and.w	r2, r3, #31
 8001fc4:	490a      	ldr	r1, [pc, #40]	@ (8001ff0 <__NVIC_DisableIRQ+0x44>)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	2001      	movs	r0, #1
 8001fce:	fa00 f202 	lsl.w	r2, r0, r2
 8001fd2:	3320      	adds	r3, #32
 8001fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001fd8:	f3bf 8f4f 	dsb	sy
}
 8001fdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001fde:	f3bf 8f6f 	isb	sy
}
 8001fe2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000e100 	.word	0xe000e100

08001ff4 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	2b00      	cmp	r3, #0
 8002004:	db0c      	blt.n	8002020 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	f003 021f 	and.w	r2, r3, #31
 800200c:	4907      	ldr	r1, [pc, #28]	@ (800202c <__NVIC_SetPendingIRQ+0x38>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	2001      	movs	r0, #1
 8002016:	fa00 f202 	lsl.w	r2, r0, r2
 800201a:	3340      	adds	r3, #64	@ 0x40
 800201c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000e100 	.word	0xe000e100

08002030 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	2b00      	cmp	r3, #0
 8002040:	db0c      	blt.n	800205c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	f003 021f 	and.w	r2, r3, #31
 8002048:	4907      	ldr	r1, [pc, #28]	@ (8002068 <__NVIC_ClearPendingIRQ+0x38>)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	2001      	movs	r0, #1
 8002052:	fa00 f202 	lsl.w	r2, r0, r2
 8002056:	3360      	adds	r3, #96	@ 0x60
 8002058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000e100 	.word	0xe000e100

0800206c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	6039      	str	r1, [r7, #0]
 8002076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207c:	2b00      	cmp	r3, #0
 800207e:	db0a      	blt.n	8002096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	b2da      	uxtb	r2, r3
 8002084:	490c      	ldr	r1, [pc, #48]	@ (80020b8 <__NVIC_SetPriority+0x4c>)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	0112      	lsls	r2, r2, #4
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	440b      	add	r3, r1
 8002090:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002094:	e00a      	b.n	80020ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4908      	ldr	r1, [pc, #32]	@ (80020bc <__NVIC_SetPriority+0x50>)
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	3b04      	subs	r3, #4
 80020a4:	0112      	lsls	r2, r2, #4
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	440b      	add	r3, r1
 80020aa:	761a      	strb	r2, [r3, #24]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	e000e100 	.word	0xe000e100
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b089      	sub	sp, #36	@ 0x24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f1c3 0307 	rsb	r3, r3, #7
 80020da:	2b04      	cmp	r3, #4
 80020dc:	bf28      	it	cs
 80020de:	2304      	movcs	r3, #4
 80020e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3304      	adds	r3, #4
 80020e6:	2b06      	cmp	r3, #6
 80020e8:	d902      	bls.n	80020f0 <NVIC_EncodePriority+0x30>
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3b03      	subs	r3, #3
 80020ee:	e000      	b.n	80020f2 <NVIC_EncodePriority+0x32>
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f4:	f04f 32ff 	mov.w	r2, #4294967295
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43da      	mvns	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	401a      	ands	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002108:	f04f 31ff 	mov.w	r1, #4294967295
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	fa01 f303 	lsl.w	r3, r1, r3
 8002112:	43d9      	mvns	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	4313      	orrs	r3, r2
         );
}
 800211a:	4618      	mov	r0, r3
 800211c:	3724      	adds	r7, #36	@ 0x24
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
	...

08002128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3b01      	subs	r3, #1
 8002134:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002138:	d301      	bcc.n	800213e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800213a:	2301      	movs	r3, #1
 800213c:	e00f      	b.n	800215e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800213e:	4a0a      	ldr	r2, [pc, #40]	@ (8002168 <SysTick_Config+0x40>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3b01      	subs	r3, #1
 8002144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002146:	210f      	movs	r1, #15
 8002148:	f04f 30ff 	mov.w	r0, #4294967295
 800214c:	f7ff ff8e 	bl	800206c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002150:	4b05      	ldr	r3, [pc, #20]	@ (8002168 <SysTick_Config+0x40>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002156:	4b04      	ldr	r3, [pc, #16]	@ (8002168 <SysTick_Config+0x40>)
 8002158:	2207      	movs	r2, #7
 800215a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	e000e010 	.word	0xe000e010

0800216c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff fec9 	bl	8001f0c <__NVIC_SetPriorityGrouping>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b086      	sub	sp, #24
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002190:	f7ff fee0 	bl	8001f54 <__NVIC_GetPriorityGrouping>
 8002194:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	68b9      	ldr	r1, [r7, #8]
 800219a:	6978      	ldr	r0, [r7, #20]
 800219c:	f7ff ff90 	bl	80020c0 <NVIC_EncodePriority>
 80021a0:	4602      	mov	r2, r0
 80021a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a6:	4611      	mov	r1, r2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff ff5f 	bl	800206c <__NVIC_SetPriority>
}
 80021ae:	bf00      	nop
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	4603      	mov	r3, r0
 80021be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fed3 	bl	8001f70 <__NVIC_EnableIRQ>
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	4603      	mov	r3, r0
 80021da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80021dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fee3 	bl	8001fac <__NVIC_DisableIRQ>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff ff96 	bl	8002128 <SysTick_Config>
 80021fc:	4603      	mov	r3, r0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	4603      	mov	r3, r0
 800220e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff feed 	bl	8001ff4 <__NVIC_SetPendingIRQ>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800222c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fefd 	bl	8002030 <__NVIC_ClearPendingIRQ>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002240:	b480      	push	{r7}
 8002242:	b087      	sub	sp, #28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800224e:	e14c      	b.n	80024ea <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	2101      	movs	r1, #1
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	fa01 f303 	lsl.w	r3, r1, r3
 800225c:	4013      	ands	r3, r2
 800225e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 813e 	beq.w	80024e4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0303 	and.w	r3, r3, #3
 8002270:	2b01      	cmp	r3, #1
 8002272:	d005      	beq.n	8002280 <HAL_GPIO_Init+0x40>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d130      	bne.n	80022e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	2203      	movs	r2, #3
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4013      	ands	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022b6:	2201      	movs	r2, #1
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4013      	ands	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	091b      	lsrs	r3, r3, #4
 80022cc:	f003 0201 	and.w	r2, r3, #1
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d017      	beq.n	800231e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	2203      	movs	r2, #3
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4013      	ands	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d123      	bne.n	8002372 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	08da      	lsrs	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3208      	adds	r2, #8
 8002332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002336:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	220f      	movs	r2, #15
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4013      	ands	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	691a      	ldr	r2, [r3, #16]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	08da      	lsrs	r2, r3, #3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3208      	adds	r2, #8
 800236c:	6939      	ldr	r1, [r7, #16]
 800236e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	2203      	movs	r2, #3
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4013      	ands	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0203 	and.w	r2, r3, #3
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 8098 	beq.w	80024e4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80023b4:	4a54      	ldr	r2, [pc, #336]	@ (8002508 <HAL_GPIO_Init+0x2c8>)
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	089b      	lsrs	r3, r3, #2
 80023ba:	3302      	adds	r3, #2
 80023bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	220f      	movs	r2, #15
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4013      	ands	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023de:	d019      	beq.n	8002414 <HAL_GPIO_Init+0x1d4>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a4a      	ldr	r2, [pc, #296]	@ (800250c <HAL_GPIO_Init+0x2cc>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d013      	beq.n	8002410 <HAL_GPIO_Init+0x1d0>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a49      	ldr	r2, [pc, #292]	@ (8002510 <HAL_GPIO_Init+0x2d0>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d00d      	beq.n	800240c <HAL_GPIO_Init+0x1cc>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a48      	ldr	r2, [pc, #288]	@ (8002514 <HAL_GPIO_Init+0x2d4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d007      	beq.n	8002408 <HAL_GPIO_Init+0x1c8>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a47      	ldr	r2, [pc, #284]	@ (8002518 <HAL_GPIO_Init+0x2d8>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d101      	bne.n	8002404 <HAL_GPIO_Init+0x1c4>
 8002400:	2304      	movs	r3, #4
 8002402:	e008      	b.n	8002416 <HAL_GPIO_Init+0x1d6>
 8002404:	2307      	movs	r3, #7
 8002406:	e006      	b.n	8002416 <HAL_GPIO_Init+0x1d6>
 8002408:	2303      	movs	r3, #3
 800240a:	e004      	b.n	8002416 <HAL_GPIO_Init+0x1d6>
 800240c:	2302      	movs	r3, #2
 800240e:	e002      	b.n	8002416 <HAL_GPIO_Init+0x1d6>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <HAL_GPIO_Init+0x1d6>
 8002414:	2300      	movs	r3, #0
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	f002 0203 	and.w	r2, r2, #3
 800241c:	0092      	lsls	r2, r2, #2
 800241e:	4093      	lsls	r3, r2
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002426:	4938      	ldr	r1, [pc, #224]	@ (8002508 <HAL_GPIO_Init+0x2c8>)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	089b      	lsrs	r3, r3, #2
 800242c:	3302      	adds	r3, #2
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002434:	4b39      	ldr	r3, [pc, #228]	@ (800251c <HAL_GPIO_Init+0x2dc>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	43db      	mvns	r3, r3
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002458:	4a30      	ldr	r2, [pc, #192]	@ (800251c <HAL_GPIO_Init+0x2dc>)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800245e:	4b2f      	ldr	r3, [pc, #188]	@ (800251c <HAL_GPIO_Init+0x2dc>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	43db      	mvns	r3, r3
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002482:	4a26      	ldr	r2, [pc, #152]	@ (800251c <HAL_GPIO_Init+0x2dc>)
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002488:	4b24      	ldr	r3, [pc, #144]	@ (800251c <HAL_GPIO_Init+0x2dc>)
 800248a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800248e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	43db      	mvns	r3, r3
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	4013      	ands	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024ae:	4a1b      	ldr	r2, [pc, #108]	@ (800251c <HAL_GPIO_Init+0x2dc>)
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80024b6:	4b19      	ldr	r3, [pc, #100]	@ (800251c <HAL_GPIO_Init+0x2dc>)
 80024b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024dc:	4a0f      	ldr	r2, [pc, #60]	@ (800251c <HAL_GPIO_Init+0x2dc>)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	3301      	adds	r3, #1
 80024e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	fa22 f303 	lsr.w	r3, r2, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f47f aeab 	bne.w	8002250 <HAL_GPIO_Init+0x10>
  }
}
 80024fa:	bf00      	nop
 80024fc:	bf00      	nop
 80024fe:	371c      	adds	r7, #28
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	40010000 	.word	0x40010000
 800250c:	48000400 	.word	0x48000400
 8002510:	48000800 	.word	0x48000800
 8002514:	48000c00 	.word	0x48000c00
 8002518:	48001000 	.word	0x48001000
 800251c:	58000800 	.word	0x58000800

08002520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	807b      	strh	r3, [r7, #2]
 800252c:	4613      	mov	r3, r2
 800252e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002530:	787b      	ldrb	r3, [r7, #1]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002536:	887a      	ldrh	r2, [r7, #2]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800253c:	e002      	b.n	8002544 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800253e:	887a      	ldrh	r2, [r7, #2]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800255a:	4b08      	ldr	r3, [pc, #32]	@ (800257c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	4013      	ands	r3, r2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d006      	beq.n	8002574 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002566:	4a05      	ldr	r2, [pc, #20]	@ (800257c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800256c:	88fb      	ldrh	r3, [r7, #6]
 800256e:	4618      	mov	r0, r3
 8002570:	f000 f806 	bl	8002580 <HAL_GPIO_EXTI_Callback>
  }
}
 8002574:	bf00      	nop
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	58000800 	.word	0x58000800

08002580 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
	...

08002598 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800259e:	4b0a      	ldr	r3, [pc, #40]	@ (80025c8 <HAL_HSEM_IRQHandler+0x30>)
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80025a4:	4b08      	ldr	r3, [pc, #32]	@ (80025c8 <HAL_HSEM_IRQHandler+0x30>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	43db      	mvns	r3, r3
 80025ac:	4906      	ldr	r1, [pc, #24]	@ (80025c8 <HAL_HSEM_IRQHandler+0x30>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80025b2:	4a05      	ldr	r2, [pc, #20]	@ (80025c8 <HAL_HSEM_IRQHandler+0x30>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f807 	bl	80025cc <HAL_HSEM_FreeCallback>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	58001500 	.word	0x58001500

080025cc <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d01e      	beq.n	8002630 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80025f2:	4b13      	ldr	r3, [pc, #76]	@ (8002640 <HAL_IPCC_Init+0x60>)
 80025f4:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d102      	bne.n	8002608 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff f81e 	bl	8001644 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002608:	68b8      	ldr	r0, [r7, #8]
 800260a:	f000 f85b 	bl	80026c4 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f82c 	bl	8002678 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800262e:	e001      	b.n	8002634 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002634:	7bfb      	ldrb	r3, [r7, #15]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	58000c00 	.word	0x58000c00

08002644 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	4613      	mov	r3, r2
 8002650:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002652:	bf00      	nop
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800265e:	b480      	push	{r7}
 8002660:	b085      	sub	sp, #20
 8002662:	af00      	add	r7, sp, #0
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	4613      	mov	r3, r2
 800266a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002680:	2300      	movs	r3, #0
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	e00f      	b.n	80026a6 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	4a0b      	ldr	r2, [pc, #44]	@ (80026bc <IPCC_SetDefaultCallbacks+0x44>)
 8002690:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	3306      	adds	r3, #6
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	4a08      	ldr	r2, [pc, #32]	@ (80026c0 <IPCC_SetDefaultCallbacks+0x48>)
 800269e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	3301      	adds	r3, #1
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2b05      	cmp	r3, #5
 80026aa:	d9ec      	bls.n	8002686 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80026ac:	bf00      	nop
 80026ae:	bf00      	nop
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	08002645 	.word	0x08002645
 80026c0:	0800265f 	.word	0x0800265f

080026c4 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 80026d8:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	223f      	movs	r2, #63	@ 0x3f
 80026de:	609a      	str	r2, [r3, #8]
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026f0:	4b05      	ldr	r3, [pc, #20]	@ (8002708 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a04      	ldr	r2, [pc, #16]	@ (8002708 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026fa:	6013      	str	r3, [r2, #0]
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	58000400 	.word	0x58000400

0800270c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002710:	4b04      	ldr	r3, [pc, #16]	@ (8002724 <HAL_PWREx_GetVoltageRange+0x18>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002718:	4618      	mov	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	58000400 	.word	0x58000400

08002728 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800272c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002736:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800273a:	d101      	bne.n	8002740 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <LL_RCC_HSE_Enable>:
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002750:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800275a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800275e:	6013      	str	r3, [r2, #0]
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <LL_RCC_HSE_Disable>:
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800276e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002778:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800277c:	6013      	str	r3, [r2, #0]
}
 800277e:	bf00      	nop
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <LL_RCC_HSE_IsReady>:
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800278c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002796:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800279a:	d101      	bne.n	80027a0 <LL_RCC_HSE_IsReady+0x18>
 800279c:	2301      	movs	r3, #1
 800279e:	e000      	b.n	80027a2 <LL_RCC_HSE_IsReady+0x1a>
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <LL_RCC_HSI_Enable>:
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80027b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027be:	6013      	str	r3, [r2, #0]
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <LL_RCC_HSI_Disable>:
{
 80027ca:	b480      	push	{r7}
 80027cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80027ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027dc:	6013      	str	r3, [r2, #0]
}
 80027de:	bf00      	nop
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <LL_RCC_HSI_IsReady>:
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80027ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027fa:	d101      	bne.n	8002800 <LL_RCC_HSI_IsReady+0x18>
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <LL_RCC_HSI_IsReady+0x1a>
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <LL_RCC_HSI_SetCalibTrimming>:
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002814:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	061b      	lsls	r3, r3, #24
 8002822:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <LL_RCC_HSI48_Enable>:
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800283a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800283e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002842:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800284e:	bf00      	nop
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <LL_RCC_HSI48_Disable>:
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800285c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002860:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002864:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002868:	f023 0301 	bic.w	r3, r3, #1
 800286c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <LL_RCC_HSI48_IsReady>:
{
 800287a:	b480      	push	{r7}
 800287c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800287e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002882:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b02      	cmp	r3, #2
 800288c:	d101      	bne.n	8002892 <LL_RCC_HSI48_IsReady+0x18>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <LL_RCC_HSI48_IsReady+0x1a>
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <LL_RCC_LSE_Enable>:
{
 800289e:	b480      	push	{r7}
 80028a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80028a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80028b6:	bf00      	nop
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_RCC_LSE_Disable>:
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80028c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028d0:	f023 0301 	bic.w	r3, r3, #1
 80028d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <LL_RCC_LSE_EnableBypass>:
{
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80028e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028f2:	f043 0304 	orr.w	r3, r3, #4
 80028f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80028fa:	bf00      	nop
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_RCC_LSE_DisableBypass>:
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002908:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800290c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002910:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002914:	f023 0304 	bic.w	r3, r3, #4
 8002918:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <LL_RCC_LSE_IsReady>:
{
 8002926:	b480      	push	{r7}
 8002928:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800292a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800292e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b02      	cmp	r3, #2
 8002938:	d101      	bne.n	800293e <LL_RCC_LSE_IsReady+0x18>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <LL_RCC_LSE_IsReady+0x1a>
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <LL_RCC_LSI1_Enable>:
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800294e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002952:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002956:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002962:	bf00      	nop
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <LL_RCC_LSI1_Disable>:
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002970:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002974:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002978:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800297c:	f023 0301 	bic.w	r3, r3, #1
 8002980:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <LL_RCC_LSI1_IsReady>:
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002992:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002996:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d101      	bne.n	80029a6 <LL_RCC_LSI1_IsReady+0x18>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <LL_RCC_LSI1_IsReady+0x1a>
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <LL_RCC_LSI2_Enable>:
{
 80029b2:	b480      	push	{r7}
 80029b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80029b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029c2:	f043 0304 	orr.w	r3, r3, #4
 80029c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80029ca:	bf00      	nop
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <LL_RCC_LSI2_Disable>:
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80029d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029e4:	f023 0304 	bic.w	r3, r3, #4
 80029e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <LL_RCC_LSI2_IsReady>:
{
 80029f6:	b480      	push	{r7}
 80029f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80029fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d101      	bne.n	8002a0e <LL_RCC_LSI2_IsReady+0x18>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <LL_RCC_LSI2_IsReady+0x1a>
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <LL_RCC_LSI2_SetTrimming>:
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002a22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a2a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	021b      	lsls	r3, r3, #8
 8002a32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <LL_RCC_MSI_Enable>:
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002a4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	6013      	str	r3, [r2, #0]
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <LL_RCC_MSI_Disable>:
{
 8002a66:	b480      	push	{r7}
 8002a68:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002a6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a74:	f023 0301 	bic.w	r3, r3, #1
 8002a78:	6013      	str	r3, [r2, #0]
}
 8002a7a:	bf00      	nop
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <LL_RCC_MSI_IsReady>:
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002a88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d101      	bne.n	8002a9a <LL_RCC_MSI_IsReady+0x16>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <LL_RCC_MSI_IsReady+0x18>
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <LL_RCC_MSI_SetRange>:
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002aae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ab8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	600b      	str	r3, [r1, #0]
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <LL_RCC_MSI_GetRange>:
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002ad4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ade:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2bb0      	cmp	r3, #176	@ 0xb0
 8002ae4:	d901      	bls.n	8002aea <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002ae6:	23b0      	movs	r3, #176	@ 0xb0
 8002ae8:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002aea:	687b      	ldr	r3, [r7, #4]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002b00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	021b      	lsls	r3, r3, #8
 8002b0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b12:	4313      	orrs	r3, r2
 8002b14:	604b      	str	r3, [r1, #4]
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <LL_RCC_SetSysClkSource>:
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002b2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f023 0203 	bic.w	r2, r3, #3
 8002b34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	608b      	str	r3, [r1, #8]
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <LL_RCC_GetSysClkSource>:
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002b4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 030c 	and.w	r3, r3, #12
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <LL_RCC_SetAHBPrescaler>:
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002b6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	608b      	str	r3, [r1, #8]
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <LL_C2_RCC_SetAHBPrescaler>:
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002b92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b96:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002b9a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <LL_RCC_SetAHB4Prescaler>:
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002bbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bc2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002bc6:	f023 020f 	bic.w	r2, r3, #15
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	091b      	lsrs	r3, r3, #4
 8002bce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <LL_RCC_SetAPB1Prescaler>:
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002bec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bf6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	608b      	str	r3, [r1, #8]
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <LL_RCC_SetAPB2Prescaler>:
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002c14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	608b      	str	r3, [r1, #8]
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <LL_RCC_GetAHBPrescaler>:
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002c38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <LL_RCC_GetAHB4Prescaler>:
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002c50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c54:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <LL_RCC_GetAPB1Prescaler>:
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002c6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LL_RCC_GetAPB2Prescaler>:
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002c9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ca6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002caa:	6013      	str	r3, [r2, #0]
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002cba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cc4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cc8:	6013      	str	r3, [r2, #0]
}
 8002cca:	bf00      	nop
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002cd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ce6:	d101      	bne.n	8002cec <LL_RCC_PLL_IsReady+0x18>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <LL_RCC_PLL_IsReady+0x1a>
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002cfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	0a1b      	lsrs	r3, r3, #8
 8002d04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002d12:	b480      	push	{r7}
 8002d14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002d2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002d42:	b480      	push	{r7}
 8002d44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002d46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f003 0303 	and.w	r3, r3, #3
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002d5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d6c:	d101      	bne.n	8002d72 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002d82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d86:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d92:	d101      	bne.n	8002d98 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dac:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002db0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002db4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002db8:	d101      	bne.n	8002dbe <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002dce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ddc:	d101      	bne.n	8002de2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002dee:	b480      	push	{r7}
 8002df0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002df2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dfc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e00:	d101      	bne.n	8002e06 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e14:	b590      	push	{r4, r7, lr}
 8002e16:	b08d      	sub	sp, #52	@ 0x34
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e363      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0320 	and.w	r3, r3, #32
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 808d 	beq.w	8002f4e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e34:	f7ff fe89 	bl	8002b4a <LL_RCC_GetSysClkSource>
 8002e38:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e3a:	f7ff ff82 	bl	8002d42 <LL_RCC_PLL_GetMainSource>
 8002e3e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d005      	beq.n	8002e52 <HAL_RCC_OscConfig+0x3e>
 8002e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e48:	2b0c      	cmp	r3, #12
 8002e4a:	d147      	bne.n	8002edc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d144      	bne.n	8002edc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e347      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8002e62:	f7ff fe34 	bl	8002ace <LL_RCC_MSI_GetRange>
 8002e66:	4603      	mov	r3, r0
 8002e68:	429c      	cmp	r4, r3
 8002e6a:	d914      	bls.n	8002e96 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 fd2f 	bl	80038d4 <RCC_SetFlashLatencyFromMSIRange>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e336      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff fe0e 	bl	8002aa6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff fe32 	bl	8002af8 <LL_RCC_MSI_SetCalibTrimming>
 8002e94:	e013      	b.n	8002ebe <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fe03 	bl	8002aa6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff fe27 	bl	8002af8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fd10 	bl	80038d4 <RCC_SetFlashLatencyFromMSIRange>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e317      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002ebe:	f000 fcc9 	bl	8003854 <HAL_RCC_GetHCLKFreq>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	4aa4      	ldr	r2, [pc, #656]	@ (8003158 <HAL_RCC_OscConfig+0x344>)
 8002ec6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ec8:	4ba4      	ldr	r3, [pc, #656]	@ (800315c <HAL_RCC_OscConfig+0x348>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fe ffb7 	bl	8001e40 <HAL_InitTick>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d039      	beq.n	8002f4c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e308      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d01e      	beq.n	8002f22 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ee4:	f7ff fdb0 	bl	8002a48 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ee8:	f7fe fff8 	bl	8001edc <HAL_GetTick>
 8002eec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ef0:	f7fe fff4 	bl	8001edc <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e2f5      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002f02:	f7ff fdbf 	bl	8002a84 <LL_RCC_MSI_IsReady>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f1      	beq.n	8002ef0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff fdc8 	bl	8002aa6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fdec 	bl	8002af8 <LL_RCC_MSI_SetCalibTrimming>
 8002f20:	e015      	b.n	8002f4e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f22:	f7ff fda0 	bl	8002a66 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f26:	f7fe ffd9 	bl	8001edc <HAL_GetTick>
 8002f2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f2e:	f7fe ffd5 	bl	8001edc <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e2d6      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002f40:	f7ff fda0 	bl	8002a84 <LL_RCC_MSI_IsReady>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f1      	bne.n	8002f2e <HAL_RCC_OscConfig+0x11a>
 8002f4a:	e000      	b.n	8002f4e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002f4c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d047      	beq.n	8002fea <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f5a:	f7ff fdf6 	bl	8002b4a <LL_RCC_GetSysClkSource>
 8002f5e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f60:	f7ff feef 	bl	8002d42 <LL_RCC_PLL_GetMainSource>
 8002f64:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d005      	beq.n	8002f78 <HAL_RCC_OscConfig+0x164>
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	2b0c      	cmp	r3, #12
 8002f70:	d108      	bne.n	8002f84 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d105      	bne.n	8002f84 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d134      	bne.n	8002fea <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e2b4      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f8c:	d102      	bne.n	8002f94 <HAL_RCC_OscConfig+0x180>
 8002f8e:	f7ff fbdd 	bl	800274c <LL_RCC_HSE_Enable>
 8002f92:	e001      	b.n	8002f98 <HAL_RCC_OscConfig+0x184>
 8002f94:	f7ff fbe9 	bl	800276a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d012      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7fe ff9c 	bl	8001edc <HAL_GetTick>
 8002fa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa8:	f7fe ff98 	bl	8001edc <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b64      	cmp	r3, #100	@ 0x64
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e299      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002fba:	f7ff fbe5 	bl	8002788 <LL_RCC_HSE_IsReady>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f1      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x194>
 8002fc4:	e011      	b.n	8002fea <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc6:	f7fe ff89 	bl	8001edc <HAL_GetTick>
 8002fca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fce:	f7fe ff85 	bl	8001edc <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b64      	cmp	r3, #100	@ 0x64
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e286      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002fe0:	f7ff fbd2 	bl	8002788 <LL_RCC_HSE_IsReady>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f1      	bne.n	8002fce <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d04c      	beq.n	8003090 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ff6:	f7ff fda8 	bl	8002b4a <LL_RCC_GetSysClkSource>
 8002ffa:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ffc:	f7ff fea1 	bl	8002d42 <LL_RCC_PLL_GetMainSource>
 8003000:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	2b04      	cmp	r3, #4
 8003006:	d005      	beq.n	8003014 <HAL_RCC_OscConfig+0x200>
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	2b0c      	cmp	r3, #12
 800300c:	d10e      	bne.n	800302c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2b02      	cmp	r3, #2
 8003012:	d10b      	bne.n	800302c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e266      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff fbf1 	bl	800280c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800302a:	e031      	b.n	8003090 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d019      	beq.n	8003068 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003034:	f7ff fbba 	bl	80027ac <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003038:	f7fe ff50 	bl	8001edc <HAL_GetTick>
 800303c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003040:	f7fe ff4c 	bl	8001edc <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e24d      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003052:	f7ff fbc9 	bl	80027e8 <LL_RCC_HSI_IsReady>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f1      	beq.n	8003040 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff fbd3 	bl	800280c <LL_RCC_HSI_SetCalibTrimming>
 8003066:	e013      	b.n	8003090 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003068:	f7ff fbaf 	bl	80027ca <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fe ff36 	bl	8001edc <HAL_GetTick>
 8003070:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003074:	f7fe ff32 	bl	8001edc <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e233      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003086:	f7ff fbaf 	bl	80027e8 <LL_RCC_HSI_IsReady>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1f1      	bne.n	8003074 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b00      	cmp	r3, #0
 800309a:	d106      	bne.n	80030aa <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 80a3 	beq.w	80031f0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d076      	beq.n	80031a0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0310 	and.w	r3, r3, #16
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d046      	beq.n	800314c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80030be:	f7ff fc66 	bl	800298e <LL_RCC_LSI1_IsReady>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d113      	bne.n	80030f0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80030c8:	f7ff fc3f 	bl	800294a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030cc:	f7fe ff06 	bl	8001edc <HAL_GetTick>
 80030d0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80030d4:	f7fe ff02 	bl	8001edc <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e203      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80030e6:	f7ff fc52 	bl	800298e <LL_RCC_LSI1_IsReady>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0f1      	beq.n	80030d4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80030f0:	f7ff fc5f 	bl	80029b2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f4:	f7fe fef2 	bl	8001edc <HAL_GetTick>
 80030f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80030fc:	f7fe feee 	bl	8001edc <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b03      	cmp	r3, #3
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e1ef      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800310e:	f7ff fc72 	bl	80029f6 <LL_RCC_LSI2_IsReady>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f1      	beq.n	80030fc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff fc7c 	bl	8002a1a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003122:	f7ff fc23 	bl	800296c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003126:	f7fe fed9 	bl	8001edc <HAL_GetTick>
 800312a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800312e:	f7fe fed5 	bl	8001edc <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e1d6      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003140:	f7ff fc25 	bl	800298e <LL_RCC_LSI1_IsReady>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f1      	bne.n	800312e <HAL_RCC_OscConfig+0x31a>
 800314a:	e051      	b.n	80031f0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800314c:	f7ff fbfd 	bl	800294a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003150:	f7fe fec4 	bl	8001edc <HAL_GetTick>
 8003154:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003156:	e00c      	b.n	8003172 <HAL_RCC_OscConfig+0x35e>
 8003158:	20000008 	.word	0x20000008
 800315c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003160:	f7fe febc 	bl	8001edc <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e1bd      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003172:	f7ff fc0c 	bl	800298e <LL_RCC_LSI1_IsReady>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f1      	beq.n	8003160 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800317c:	f7ff fc2a 	bl	80029d4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003182:	f7fe feab 	bl	8001edc <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b03      	cmp	r3, #3
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e1ac      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003194:	f7ff fc2f 	bl	80029f6 <LL_RCC_LSI2_IsReady>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f1      	bne.n	8003182 <HAL_RCC_OscConfig+0x36e>
 800319e:	e027      	b.n	80031f0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80031a0:	f7ff fc18 	bl	80029d4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a4:	f7fe fe9a 	bl	8001edc <HAL_GetTick>
 80031a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80031ac:	f7fe fe96 	bl	8001edc <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e197      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80031be:	f7ff fc1a 	bl	80029f6 <LL_RCC_LSI2_IsReady>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f1      	bne.n	80031ac <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80031c8:	f7ff fbd0 	bl	800296c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031cc:	f7fe fe86 	bl	8001edc <HAL_GetTick>
 80031d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80031d4:	f7fe fe82 	bl	8001edc <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e183      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80031e6:	f7ff fbd2 	bl	800298e <LL_RCC_LSI1_IsReady>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f1      	bne.n	80031d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d05b      	beq.n	80032b4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031fc:	4ba7      	ldr	r3, [pc, #668]	@ (800349c <HAL_RCC_OscConfig+0x688>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003204:	2b00      	cmp	r3, #0
 8003206:	d114      	bne.n	8003232 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003208:	f7ff fa70 	bl	80026ec <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800320c:	f7fe fe66 	bl	8001edc <HAL_GetTick>
 8003210:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003214:	f7fe fe62 	bl	8001edc <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e163      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003226:	4b9d      	ldr	r3, [pc, #628]	@ (800349c <HAL_RCC_OscConfig+0x688>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0f0      	beq.n	8003214 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d102      	bne.n	8003240 <HAL_RCC_OscConfig+0x42c>
 800323a:	f7ff fb30 	bl	800289e <LL_RCC_LSE_Enable>
 800323e:	e00c      	b.n	800325a <HAL_RCC_OscConfig+0x446>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b05      	cmp	r3, #5
 8003246:	d104      	bne.n	8003252 <HAL_RCC_OscConfig+0x43e>
 8003248:	f7ff fb4b 	bl	80028e2 <LL_RCC_LSE_EnableBypass>
 800324c:	f7ff fb27 	bl	800289e <LL_RCC_LSE_Enable>
 8003250:	e003      	b.n	800325a <HAL_RCC_OscConfig+0x446>
 8003252:	f7ff fb35 	bl	80028c0 <LL_RCC_LSE_Disable>
 8003256:	f7ff fb55 	bl	8002904 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d014      	beq.n	800328c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003262:	f7fe fe3b 	bl	8001edc <HAL_GetTick>
 8003266:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003268:	e00a      	b.n	8003280 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326a:	f7fe fe37 	bl	8001edc <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003278:	4293      	cmp	r3, r2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e136      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003280:	f7ff fb51 	bl	8002926 <LL_RCC_LSE_IsReady>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0ef      	beq.n	800326a <HAL_RCC_OscConfig+0x456>
 800328a:	e013      	b.n	80032b4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328c:	f7fe fe26 	bl	8001edc <HAL_GetTick>
 8003290:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003292:	e00a      	b.n	80032aa <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003294:	f7fe fe22 	bl	8001edc <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e121      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80032aa:	f7ff fb3c 	bl	8002926 <LL_RCC_LSE_IsReady>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1ef      	bne.n	8003294 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d02c      	beq.n	800331a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d014      	beq.n	80032f2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032c8:	f7ff fab5 	bl	8002836 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032cc:	f7fe fe06 	bl	8001edc <HAL_GetTick>
 80032d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032d4:	f7fe fe02 	bl	8001edc <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e103      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80032e6:	f7ff fac8 	bl	800287a <LL_RCC_HSI48_IsReady>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f1      	beq.n	80032d4 <HAL_RCC_OscConfig+0x4c0>
 80032f0:	e013      	b.n	800331a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032f2:	f7ff fab1 	bl	8002858 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f6:	f7fe fdf1 	bl	8001edc <HAL_GetTick>
 80032fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032fe:	f7fe fded 	bl	8001edc <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e0ee      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003310:	f7ff fab3 	bl	800287a <LL_RCC_HSI48_IsReady>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f1      	bne.n	80032fe <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 80e4 	beq.w	80034ec <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003324:	f7ff fc11 	bl	8002b4a <LL_RCC_GetSysClkSource>
 8003328:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800332a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003336:	2b02      	cmp	r3, #2
 8003338:	f040 80b4 	bne.w	80034a4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f003 0203 	and.w	r2, r3, #3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003346:	429a      	cmp	r2, r3
 8003348:	d123      	bne.n	8003392 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d11c      	bne.n	8003392 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	0a1b      	lsrs	r3, r3, #8
 800335c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003364:	429a      	cmp	r2, r3
 8003366:	d114      	bne.n	8003392 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003372:	429a      	cmp	r2, r3
 8003374:	d10d      	bne.n	8003392 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003380:	429a      	cmp	r2, r3
 8003382:	d106      	bne.n	8003392 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800338e:	429a      	cmp	r2, r3
 8003390:	d05d      	beq.n	800344e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	2b0c      	cmp	r3, #12
 8003396:	d058      	beq.n	800344a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003398:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e0a1      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033aa:	f7ff fc84 	bl	8002cb6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033ae:	f7fe fd95 	bl	8001edc <HAL_GetTick>
 80033b2:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b6:	f7fe fd91 	bl	8001edc <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e092      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1ef      	bne.n	80033b6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	4b30      	ldr	r3, [pc, #192]	@ (80034a0 <HAL_RCC_OscConfig+0x68c>)
 80033de:	4013      	ands	r3, r2
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80033e8:	4311      	orrs	r1, r2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033ee:	0212      	lsls	r2, r2, #8
 80033f0:	4311      	orrs	r1, r2
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033f6:	4311      	orrs	r1, r2
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80033fc:	4311      	orrs	r1, r2
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003402:	430a      	orrs	r2, r1
 8003404:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003408:	4313      	orrs	r3, r2
 800340a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800340c:	f7ff fc44 	bl	8002c98 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800341a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800341e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003420:	f7fe fd5c 	bl	8001edc <HAL_GetTick>
 8003424:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003428:	f7fe fd58 	bl	8001edc <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e059      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800343a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0ef      	beq.n	8003428 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003448:	e050      	b.n	80034ec <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e04f      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800344e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d147      	bne.n	80034ec <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800345c:	f7ff fc1c 	bl	8002c98 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003460:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800346a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800346e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003470:	f7fe fd34 	bl	8001edc <HAL_GetTick>
 8003474:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003478:	f7fe fd30 	bl	8001edc <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e031      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0ef      	beq.n	8003478 <HAL_RCC_OscConfig+0x664>
 8003498:	e028      	b.n	80034ec <HAL_RCC_OscConfig+0x6d8>
 800349a:	bf00      	nop
 800349c:	58000400 	.word	0x58000400
 80034a0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	2b0c      	cmp	r3, #12
 80034a8:	d01e      	beq.n	80034e8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034aa:	f7ff fc04 	bl	8002cb6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ae:	f7fe fd15 	bl	8001edc <HAL_GetTick>
 80034b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b6:	f7fe fd11 	bl	8001edc <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e012      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1ef      	bne.n	80034b6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80034d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034e0:	4b05      	ldr	r3, [pc, #20]	@ (80034f8 <HAL_RCC_OscConfig+0x6e4>)
 80034e2:	4013      	ands	r3, r2
 80034e4:	60cb      	str	r3, [r1, #12]
 80034e6:	e001      	b.n	80034ec <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3734      	adds	r7, #52	@ 0x34
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd90      	pop	{r4, r7, pc}
 80034f6:	bf00      	nop
 80034f8:	eefefffc 	.word	0xeefefffc

080034fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e12d      	b.n	800376c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003510:	4b98      	ldr	r3, [pc, #608]	@ (8003774 <HAL_RCC_ClockConfig+0x278>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d91b      	bls.n	8003556 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351e:	4b95      	ldr	r3, [pc, #596]	@ (8003774 <HAL_RCC_ClockConfig+0x278>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f023 0207 	bic.w	r2, r3, #7
 8003526:	4993      	ldr	r1, [pc, #588]	@ (8003774 <HAL_RCC_ClockConfig+0x278>)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	4313      	orrs	r3, r2
 800352c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800352e:	f7fe fcd5 	bl	8001edc <HAL_GetTick>
 8003532:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003534:	e008      	b.n	8003548 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003536:	f7fe fcd1 	bl	8001edc <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e111      	b.n	800376c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003548:	4b8a      	ldr	r3, [pc, #552]	@ (8003774 <HAL_RCC_ClockConfig+0x278>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d1ef      	bne.n	8003536 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d016      	beq.n	8003590 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff fafb 	bl	8002b62 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800356c:	f7fe fcb6 	bl	8001edc <HAL_GetTick>
 8003570:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003572:	e008      	b.n	8003586 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003574:	f7fe fcb2 	bl	8001edc <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e0f2      	b.n	800376c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003586:	f7ff fbe8 	bl	8002d5a <LL_RCC_IsActiveFlag_HPRE>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f1      	beq.n	8003574 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0320 	and.w	r3, r3, #32
 8003598:	2b00      	cmp	r3, #0
 800359a:	d016      	beq.n	80035ca <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff faf2 	bl	8002b8a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035a6:	f7fe fc99 	bl	8001edc <HAL_GetTick>
 80035aa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035ae:	f7fe fc95 	bl	8001edc <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e0d5      	b.n	800376c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80035c0:	f7ff fbdd 	bl	8002d7e <LL_RCC_IsActiveFlag_C2HPRE>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f1      	beq.n	80035ae <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d016      	beq.n	8003604 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff faeb 	bl	8002bb6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035e0:	f7fe fc7c 	bl	8001edc <HAL_GetTick>
 80035e4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035e8:	f7fe fc78 	bl	8001edc <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e0b8      	b.n	800376c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80035fa:	f7ff fbd3 	bl	8002da4 <LL_RCC_IsActiveFlag_SHDHPRE>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0f1      	beq.n	80035e8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d016      	beq.n	800363e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff fae5 	bl	8002be4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800361a:	f7fe fc5f 	bl	8001edc <HAL_GetTick>
 800361e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003620:	e008      	b.n	8003634 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003622:	f7fe fc5b 	bl	8001edc <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e09b      	b.n	800376c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003634:	f7ff fbc9 	bl	8002dca <LL_RCC_IsActiveFlag_PPRE1>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0f1      	beq.n	8003622 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d017      	beq.n	800367a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff fadb 	bl	8002c0c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003656:	f7fe fc41 	bl	8001edc <HAL_GetTick>
 800365a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800365c:	e008      	b.n	8003670 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800365e:	f7fe fc3d 	bl	8001edc <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e07d      	b.n	800376c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003670:	f7ff fbbd 	bl	8002dee <LL_RCC_IsActiveFlag_PPRE2>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f1      	beq.n	800365e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d043      	beq.n	800370e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d106      	bne.n	800369c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800368e:	f7ff f87b 	bl	8002788 <LL_RCC_HSE_IsReady>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d11e      	bne.n	80036d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e067      	b.n	800376c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d106      	bne.n	80036b2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80036a4:	f7ff fb16 	bl	8002cd4 <LL_RCC_PLL_IsReady>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d113      	bne.n	80036d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e05c      	b.n	800376c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d106      	bne.n	80036c8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80036ba:	f7ff f9e3 	bl	8002a84 <LL_RCC_MSI_IsReady>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d108      	bne.n	80036d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e051      	b.n	800376c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80036c8:	f7ff f88e 	bl	80027e8 <LL_RCC_HSI_IsReady>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e04a      	b.n	800376c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff fa21 	bl	8002b22 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036e0:	f7fe fbfc 	bl	8001edc <HAL_GetTick>
 80036e4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e6:	e00a      	b.n	80036fe <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e8:	f7fe fbf8 	bl	8001edc <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e036      	b.n	800376c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fe:	f7ff fa24 	bl	8002b4a <LL_RCC_GetSysClkSource>
 8003702:	4602      	mov	r2, r0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	429a      	cmp	r2, r3
 800370c:	d1ec      	bne.n	80036e8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800370e:	4b19      	ldr	r3, [pc, #100]	@ (8003774 <HAL_RCC_ClockConfig+0x278>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d21b      	bcs.n	8003754 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371c:	4b15      	ldr	r3, [pc, #84]	@ (8003774 <HAL_RCC_ClockConfig+0x278>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f023 0207 	bic.w	r2, r3, #7
 8003724:	4913      	ldr	r1, [pc, #76]	@ (8003774 <HAL_RCC_ClockConfig+0x278>)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	4313      	orrs	r3, r2
 800372a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800372c:	f7fe fbd6 	bl	8001edc <HAL_GetTick>
 8003730:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003732:	e008      	b.n	8003746 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003734:	f7fe fbd2 	bl	8001edc <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e012      	b.n	800376c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003746:	4b0b      	ldr	r3, [pc, #44]	@ (8003774 <HAL_RCC_ClockConfig+0x278>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d1ef      	bne.n	8003734 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003754:	f000 f87e 	bl	8003854 <HAL_RCC_GetHCLKFreq>
 8003758:	4603      	mov	r3, r0
 800375a:	4a07      	ldr	r2, [pc, #28]	@ (8003778 <HAL_RCC_ClockConfig+0x27c>)
 800375c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800375e:	f7fe fbc9 	bl	8001ef4 <HAL_GetTickPrio>
 8003762:	4603      	mov	r3, r0
 8003764:	4618      	mov	r0, r3
 8003766:	f7fe fb6b 	bl	8001e40 <HAL_InitTick>
 800376a:	4603      	mov	r3, r0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	58004000 	.word	0x58004000
 8003778:	20000008 	.word	0x20000008

0800377c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800377c:	b590      	push	{r4, r7, lr}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003782:	f7ff f9e2 	bl	8002b4a <LL_RCC_GetSysClkSource>
 8003786:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10a      	bne.n	80037a4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800378e:	f7ff f99e 	bl	8002ace <LL_RCC_MSI_GetRange>
 8003792:	4603      	mov	r3, r0
 8003794:	091b      	lsrs	r3, r3, #4
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	4a2b      	ldr	r2, [pc, #172]	@ (8003848 <HAL_RCC_GetSysClockFreq+0xcc>)
 800379c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	e04b      	b.n	800383c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d102      	bne.n	80037b0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037aa:	4b28      	ldr	r3, [pc, #160]	@ (800384c <HAL_RCC_GetSysClockFreq+0xd0>)
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	e045      	b.n	800383c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d10a      	bne.n	80037cc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80037b6:	f7fe ffb7 	bl	8002728 <LL_RCC_HSE_IsEnabledDiv2>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d102      	bne.n	80037c6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80037c0:	4b22      	ldr	r3, [pc, #136]	@ (800384c <HAL_RCC_GetSysClockFreq+0xd0>)
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	e03a      	b.n	800383c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80037c6:	4b22      	ldr	r3, [pc, #136]	@ (8003850 <HAL_RCC_GetSysClockFreq+0xd4>)
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	e037      	b.n	800383c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80037cc:	f7ff fab9 	bl	8002d42 <LL_RCC_PLL_GetMainSource>
 80037d0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d003      	beq.n	80037e0 <HAL_RCC_GetSysClockFreq+0x64>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	2b03      	cmp	r3, #3
 80037dc:	d003      	beq.n	80037e6 <HAL_RCC_GetSysClockFreq+0x6a>
 80037de:	e00d      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80037e0:	4b1a      	ldr	r3, [pc, #104]	@ (800384c <HAL_RCC_GetSysClockFreq+0xd0>)
 80037e2:	60bb      	str	r3, [r7, #8]
        break;
 80037e4:	e015      	b.n	8003812 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80037e6:	f7fe ff9f 	bl	8002728 <LL_RCC_HSE_IsEnabledDiv2>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d102      	bne.n	80037f6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80037f0:	4b16      	ldr	r3, [pc, #88]	@ (800384c <HAL_RCC_GetSysClockFreq+0xd0>)
 80037f2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80037f4:	e00d      	b.n	8003812 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80037f6:	4b16      	ldr	r3, [pc, #88]	@ (8003850 <HAL_RCC_GetSysClockFreq+0xd4>)
 80037f8:	60bb      	str	r3, [r7, #8]
        break;
 80037fa:	e00a      	b.n	8003812 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80037fc:	f7ff f967 	bl	8002ace <LL_RCC_MSI_GetRange>
 8003800:	4603      	mov	r3, r0
 8003802:	091b      	lsrs	r3, r3, #4
 8003804:	f003 030f 	and.w	r3, r3, #15
 8003808:	4a0f      	ldr	r2, [pc, #60]	@ (8003848 <HAL_RCC_GetSysClockFreq+0xcc>)
 800380a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800380e:	60bb      	str	r3, [r7, #8]
        break;
 8003810:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003812:	f7ff fa71 	bl	8002cf8 <LL_RCC_PLL_GetN>
 8003816:	4602      	mov	r2, r0
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	fb03 f402 	mul.w	r4, r3, r2
 800381e:	f7ff fa84 	bl	8002d2a <LL_RCC_PLL_GetDivider>
 8003822:	4603      	mov	r3, r0
 8003824:	091b      	lsrs	r3, r3, #4
 8003826:	3301      	adds	r3, #1
 8003828:	fbb4 f4f3 	udiv	r4, r4, r3
 800382c:	f7ff fa71 	bl	8002d12 <LL_RCC_PLL_GetR>
 8003830:	4603      	mov	r3, r0
 8003832:	0f5b      	lsrs	r3, r3, #29
 8003834:	3301      	adds	r3, #1
 8003836:	fbb4 f3f3 	udiv	r3, r4, r3
 800383a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800383c:	68fb      	ldr	r3, [r7, #12]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	bd90      	pop	{r4, r7, pc}
 8003846:	bf00      	nop
 8003848:	08008d30 	.word	0x08008d30
 800384c:	00f42400 	.word	0x00f42400
 8003850:	01e84800 	.word	0x01e84800

08003854 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003854:	b598      	push	{r3, r4, r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003858:	f7ff ff90 	bl	800377c <HAL_RCC_GetSysClockFreq>
 800385c:	4604      	mov	r4, r0
 800385e:	f7ff f9e9 	bl	8002c34 <LL_RCC_GetAHBPrescaler>
 8003862:	4603      	mov	r3, r0
 8003864:	091b      	lsrs	r3, r3, #4
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	4a03      	ldr	r2, [pc, #12]	@ (8003878 <HAL_RCC_GetHCLKFreq+0x24>)
 800386c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003870:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003874:	4618      	mov	r0, r3
 8003876:	bd98      	pop	{r3, r4, r7, pc}
 8003878:	08008cd0 	.word	0x08008cd0

0800387c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800387c:	b598      	push	{r3, r4, r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003880:	f7ff ffe8 	bl	8003854 <HAL_RCC_GetHCLKFreq>
 8003884:	4604      	mov	r4, r0
 8003886:	f7ff f9ef 	bl	8002c68 <LL_RCC_GetAPB1Prescaler>
 800388a:	4603      	mov	r3, r0
 800388c:	0a1b      	lsrs	r3, r3, #8
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	4a04      	ldr	r2, [pc, #16]	@ (80038a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	fa24 f303 	lsr.w	r3, r4, r3
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	bd98      	pop	{r3, r4, r7, pc}
 80038a4:	08008d10 	.word	0x08008d10

080038a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038a8:	b598      	push	{r3, r4, r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80038ac:	f7ff ffd2 	bl	8003854 <HAL_RCC_GetHCLKFreq>
 80038b0:	4604      	mov	r4, r0
 80038b2:	f7ff f9e5 	bl	8002c80 <LL_RCC_GetAPB2Prescaler>
 80038b6:	4603      	mov	r3, r0
 80038b8:	0adb      	lsrs	r3, r3, #11
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	4a04      	ldr	r2, [pc, #16]	@ (80038d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c4:	f003 031f 	and.w	r3, r3, #31
 80038c8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd98      	pop	{r3, r4, r7, pc}
 80038d0:	08008d10 	.word	0x08008d10

080038d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80038d4:	b590      	push	{r4, r7, lr}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2bb0      	cmp	r3, #176	@ 0xb0
 80038e0:	d903      	bls.n	80038ea <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80038e2:	4b15      	ldr	r3, [pc, #84]	@ (8003938 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80038e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	e007      	b.n	80038fa <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	091b      	lsrs	r3, r3, #4
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	4a11      	ldr	r2, [pc, #68]	@ (8003938 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80038f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80038fa:	f7ff f9a7 	bl	8002c4c <LL_RCC_GetAHB4Prescaler>
 80038fe:	4603      	mov	r3, r0
 8003900:	091b      	lsrs	r3, r3, #4
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	4a0d      	ldr	r2, [pc, #52]	@ (800393c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003912:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	4a0a      	ldr	r2, [pc, #40]	@ (8003940 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003918:	fba2 2303 	umull	r2, r3, r2, r3
 800391c:	0c9c      	lsrs	r4, r3, #18
 800391e:	f7fe fef5 	bl	800270c <HAL_PWREx_GetVoltageRange>
 8003922:	4603      	mov	r3, r0
 8003924:	4619      	mov	r1, r3
 8003926:	4620      	mov	r0, r4
 8003928:	f000 f80c 	bl	8003944 <RCC_SetFlashLatency>
 800392c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	bd90      	pop	{r4, r7, pc}
 8003936:	bf00      	nop
 8003938:	08008d30 	.word	0x08008d30
 800393c:	08008cd0 	.word	0x08008cd0
 8003940:	431bde83 	.word	0x431bde83

08003944 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003944:	b590      	push	{r4, r7, lr}
 8003946:	b093      	sub	sp, #76	@ 0x4c
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800394e:	4b37      	ldr	r3, [pc, #220]	@ (8003a2c <RCC_SetFlashLatency+0xe8>)
 8003950:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003954:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003956:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800395a:	4a35      	ldr	r2, [pc, #212]	@ (8003a30 <RCC_SetFlashLatency+0xec>)
 800395c:	f107 031c 	add.w	r3, r7, #28
 8003960:	ca07      	ldmia	r2, {r0, r1, r2}
 8003962:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003966:	4b33      	ldr	r3, [pc, #204]	@ (8003a34 <RCC_SetFlashLatency+0xf0>)
 8003968:	f107 040c 	add.w	r4, r7, #12
 800396c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800396e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003972:	2300      	movs	r3, #0
 8003974:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800397c:	d11a      	bne.n	80039b4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800397e:	2300      	movs	r3, #0
 8003980:	643b      	str	r3, [r7, #64]	@ 0x40
 8003982:	e013      	b.n	80039ac <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003984:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	3348      	adds	r3, #72	@ 0x48
 800398a:	443b      	add	r3, r7
 800398c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	429a      	cmp	r2, r3
 8003994:	d807      	bhi.n	80039a6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003996:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	3348      	adds	r3, #72	@ 0x48
 800399c:	443b      	add	r3, r7
 800399e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80039a2:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80039a4:	e020      	b.n	80039e8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80039a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039a8:	3301      	adds	r3, #1
 80039aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80039ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	d9e8      	bls.n	8003984 <RCC_SetFlashLatency+0x40>
 80039b2:	e019      	b.n	80039e8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80039b4:	2300      	movs	r3, #0
 80039b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039b8:	e013      	b.n	80039e2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80039ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	3348      	adds	r3, #72	@ 0x48
 80039c0:	443b      	add	r3, r7
 80039c2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d807      	bhi.n	80039dc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80039cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	3348      	adds	r3, #72	@ 0x48
 80039d2:	443b      	add	r3, r7
 80039d4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80039d8:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80039da:	e005      	b.n	80039e8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80039dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039de:	3301      	adds	r3, #1
 80039e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d9e8      	bls.n	80039ba <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80039e8:	4b13      	ldr	r3, [pc, #76]	@ (8003a38 <RCC_SetFlashLatency+0xf4>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f023 0207 	bic.w	r2, r3, #7
 80039f0:	4911      	ldr	r1, [pc, #68]	@ (8003a38 <RCC_SetFlashLatency+0xf4>)
 80039f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039f4:	4313      	orrs	r3, r2
 80039f6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80039f8:	f7fe fa70 	bl	8001edc <HAL_GetTick>
 80039fc:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80039fe:	e008      	b.n	8003a12 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a00:	f7fe fa6c 	bl	8001edc <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e007      	b.n	8003a22 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003a12:	4b09      	ldr	r3, [pc, #36]	@ (8003a38 <RCC_SetFlashLatency+0xf4>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d1ef      	bne.n	8003a00 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	374c      	adds	r7, #76	@ 0x4c
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd90      	pop	{r4, r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	08008b2c 	.word	0x08008b2c
 8003a30:	08008b3c 	.word	0x08008b3c
 8003a34:	08008b48 	.word	0x08008b48
 8003a38:	58004000 	.word	0x58004000

08003a3c <LL_RCC_LSE_IsEnabled>:
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003a40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d101      	bne.n	8003a54 <LL_RCC_LSE_IsEnabled+0x18>
 8003a50:	2301      	movs	r3, #1
 8003a52:	e000      	b.n	8003a56 <LL_RCC_LSE_IsEnabled+0x1a>
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <LL_RCC_LSE_IsReady>:
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003a64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d101      	bne.n	8003a78 <LL_RCC_LSE_IsReady+0x18>
 8003a74:	2301      	movs	r3, #1
 8003a76:	e000      	b.n	8003a7a <LL_RCC_LSE_IsReady+0x1a>
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <LL_RCC_SetRFWKPClockSource>:
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003a8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a94:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <LL_RCC_SetSMPSClockSource>:
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003ab8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abe:	f023 0203 	bic.w	r2, r3, #3
 8003ac2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <LL_RCC_SetSMPSPrescaler>:
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003ae0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003aea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <LL_RCC_SetUSARTClockSource>:
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b10:	f023 0203 	bic.w	r2, r3, #3
 8003b14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <LL_RCC_SetLPUARTClockSource>:
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003b34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b3c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <LL_RCC_SetI2CClockSource>:
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003b60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b64:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	091b      	lsrs	r3, r3, #4
 8003b6c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003b70:	43db      	mvns	r3, r3
 8003b72:	401a      	ands	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003b7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <LL_RCC_SetLPTIMClockSource>:
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003b9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	0c1b      	lsrs	r3, r3, #16
 8003ba6:	041b      	lsls	r3, r3, #16
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	401a      	ands	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	041b      	lsls	r3, r3, #16
 8003bb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <LL_RCC_SetSAIClockSource>:
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003bce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003bda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <LL_RCC_SetRNGClockSource>:
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003bfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c02:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003c06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <LL_RCC_SetCLK48ClockSource>:
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003c26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c2e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <LL_RCC_SetUSBClockSource>:
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b082      	sub	sp, #8
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff ffe3 	bl	8003c1e <LL_RCC_SetCLK48ClockSource>
}
 8003c58:	bf00      	nop
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <LL_RCC_SetADCClockSource>:
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003c68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c70:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003c74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <LL_RCC_SetRTCClockSource>:
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003c94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ca0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <LL_RCC_GetRTCClockSource>:
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003cbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <LL_RCC_ForceBackupDomainReset>:
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003cd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ce2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ce6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003cea:	bf00      	nop
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003cf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003d0c:	bf00      	nop
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <LL_RCC_PLLSAI1_Enable>:
{
 8003d16:	b480      	push	{r7}
 8003d18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003d1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d24:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d28:	6013      	str	r3, [r2, #0]
}
 8003d2a:	bf00      	nop
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <LL_RCC_PLLSAI1_Disable>:
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003d38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d46:	6013      	str	r3, [r2, #0]
}
 8003d48:	bf00      	nop
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <LL_RCC_PLLSAI1_IsReady>:
{
 8003d52:	b480      	push	{r7}
 8003d54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003d56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d64:	d101      	bne.n	8003d6a <LL_RCC_PLLSAI1_IsReady+0x18>
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b088      	sub	sp, #32
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003d7e:	2300      	movs	r3, #0
 8003d80:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003d82:	2300      	movs	r3, #0
 8003d84:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d034      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d96:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d9a:	d021      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003d9c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003da0:	d81b      	bhi.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003da2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003da6:	d01d      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003da8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003dac:	d815      	bhi.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00b      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003db2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003db6:	d110      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003dc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dc6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003dc8:	e00d      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 f947 	bl	8004062 <RCCEx_PLLSAI1_ConfigNP>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003dd8:	e005      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	77fb      	strb	r3, [r7, #31]
        break;
 8003dde:	e002      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003de0:	bf00      	nop
 8003de2:	e000      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003de4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de6:	7ffb      	ldrb	r3, [r7, #31]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d105      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff fee8 	bl	8003bc6 <LL_RCC_SetSAIClockSource>
 8003df6:	e001      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df8:	7ffb      	ldrb	r3, [r7, #31]
 8003dfa:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d046      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003e08:	f7ff ff56 	bl	8003cb8 <LL_RCC_GetRTCClockSource>
 8003e0c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d03c      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003e18:	f7fe fc68 	bl	80026ec <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d105      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff ff30 	bl	8003c8c <LL_RCC_SetRTCClockSource>
 8003e2c:	e02e      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003e2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e36:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003e38:	f7ff ff4b 	bl	8003cd2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003e3c:	f7ff ff5a 	bl	8003cf4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003e4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003e58:	f7ff fdf0 	bl	8003a3c <LL_RCC_LSE_IsEnabled>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d114      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e62:	f7fe f83b 	bl	8001edc <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003e68:	e00b      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6a:	f7fe f837 	bl	8001edc <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d902      	bls.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	77fb      	strb	r3, [r7, #31]
              break;
 8003e80:	e004      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003e82:	f7ff fded 	bl	8003a60 <LL_RCC_LSE_IsReady>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d1ee      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003e8c:	7ffb      	ldrb	r3, [r7, #31]
 8003e8e:	77bb      	strb	r3, [r7, #30]
 8003e90:	e001      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e92:	7ffb      	ldrb	r3, [r7, #31]
 8003e94:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d004      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff fe2a 	bl	8003b00 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d004      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	69db      	ldr	r3, [r3, #28]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff fe35 	bl	8003b2c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0310 	and.w	r3, r3, #16
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d004      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff fe5d 	bl	8003b92 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0320 	and.w	r3, r3, #32
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d004      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff fe52 	bl	8003b92 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d004      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff fe2a 	bl	8003b58 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d004      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff fe1f 	bl	8003b58 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d022      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff fe8d 	bl	8003c4a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f38:	d107      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003f3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f44:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f48:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f52:	d10b      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3304      	adds	r3, #4
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 f8dd 	bl	8004118 <RCCEx_PLLSAI1_ConfigNQ>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003f62:	7ffb      	ldrb	r3, [r7, #31]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003f68:	7ffb      	ldrb	r3, [r7, #31]
 8003f6a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d02b      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f80:	d008      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f8a:	d003      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d105      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff fe2a 	bl	8003bf2 <LL_RCC_SetRNGClockSource>
 8003f9e:	e00a      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	2000      	movs	r0, #0
 8003fac:	f7ff fe21 	bl	8003bf2 <LL_RCC_SetRNGClockSource>
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f7ff fe34 	bl	8003c1e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fba:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003fbe:	d107      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d022      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff fe3d 	bl	8003c60 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fee:	d107      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ff0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ffa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ffe:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004004:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004008:	d10b      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3304      	adds	r3, #4
 800400e:	4618      	mov	r0, r3
 8004010:	f000 f8dd 	bl	80041ce <RCCEx_PLLSAI1_ConfigNR>
 8004014:	4603      	mov	r3, r0
 8004016:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004018:	7ffb      	ldrb	r3, [r7, #31]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800401e:	7ffb      	ldrb	r3, [r7, #31]
 8004020:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d004      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004032:	4618      	mov	r0, r3
 8004034:	f7ff fd26 	bl	8003a84 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d009      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff fd45 	bl	8003ad8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff fd2c 	bl	8003ab0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004058:	7fbb      	ldrb	r3, [r7, #30]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3720      	adds	r7, #32
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800406a:	2300      	movs	r3, #0
 800406c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800406e:	f7ff fe61 	bl	8003d34 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004072:	f7fd ff33 	bl	8001edc <HAL_GetTick>
 8004076:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004078:	e009      	b.n	800408e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800407a:	f7fd ff2f 	bl	8001edc <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d902      	bls.n	800408e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	73fb      	strb	r3, [r7, #15]
      break;
 800408c:	e004      	b.n	8004098 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800408e:	f7ff fe60 	bl	8003d52 <LL_RCC_PLLSAI1_IsReady>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1f0      	bne.n	800407a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d137      	bne.n	800410e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800409e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	021b      	lsls	r3, r3, #8
 80040ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040b2:	4313      	orrs	r3, r2
 80040b4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80040b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040c8:	4313      	orrs	r3, r2
 80040ca:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80040cc:	f7ff fe23 	bl	8003d16 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040d0:	f7fd ff04 	bl	8001edc <HAL_GetTick>
 80040d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80040d6:	e009      	b.n	80040ec <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040d8:	f7fd ff00 	bl	8001edc <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d902      	bls.n	80040ec <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	73fb      	strb	r3, [r7, #15]
        break;
 80040ea:	e004      	b.n	80040f6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80040ec:	f7ff fe31 	bl	8003d52 <LL_RCC_PLLSAI1_IsReady>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d1f0      	bne.n	80040d8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d108      	bne.n	800410e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80040fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004100:	691a      	ldr	r2, [r3, #16]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800410a:	4313      	orrs	r3, r2
 800410c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800410e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004120:	2300      	movs	r3, #0
 8004122:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004124:	f7ff fe06 	bl	8003d34 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004128:	f7fd fed8 	bl	8001edc <HAL_GetTick>
 800412c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800412e:	e009      	b.n	8004144 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004130:	f7fd fed4 	bl	8001edc <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d902      	bls.n	8004144 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	73fb      	strb	r3, [r7, #15]
      break;
 8004142:	e004      	b.n	800414e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004144:	f7ff fe05 	bl	8003d52 <LL_RCC_PLLSAI1_IsReady>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1f0      	bne.n	8004130 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800414e:	7bfb      	ldrb	r3, [r7, #15]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d137      	bne.n	80041c4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004154:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	021b      	lsls	r3, r3, #8
 8004164:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004168:	4313      	orrs	r3, r2
 800416a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800416c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800417e:	4313      	orrs	r3, r2
 8004180:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004182:	f7ff fdc8 	bl	8003d16 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004186:	f7fd fea9 	bl	8001edc <HAL_GetTick>
 800418a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800418c:	e009      	b.n	80041a2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800418e:	f7fd fea5 	bl	8001edc <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d902      	bls.n	80041a2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	73fb      	strb	r3, [r7, #15]
        break;
 80041a0:	e004      	b.n	80041ac <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80041a2:	f7ff fdd6 	bl	8003d52 <LL_RCC_PLLSAI1_IsReady>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d1f0      	bne.n	800418e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d108      	bne.n	80041c4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80041b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80041c0:	4313      	orrs	r3, r2
 80041c2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80041da:	f7ff fdab 	bl	8003d34 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80041de:	f7fd fe7d 	bl	8001edc <HAL_GetTick>
 80041e2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80041e4:	e009      	b.n	80041fa <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041e6:	f7fd fe79 	bl	8001edc <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d902      	bls.n	80041fa <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	73fb      	strb	r3, [r7, #15]
      break;
 80041f8:	e004      	b.n	8004204 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80041fa:	f7ff fdaa 	bl	8003d52 <LL_RCC_PLLSAI1_IsReady>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1f0      	bne.n	80041e6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d137      	bne.n	800427a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800420a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	021b      	lsls	r3, r3, #8
 800421a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800421e:	4313      	orrs	r3, r2
 8004220:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004234:	4313      	orrs	r3, r2
 8004236:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004238:	f7ff fd6d 	bl	8003d16 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800423c:	f7fd fe4e 	bl	8001edc <HAL_GetTick>
 8004240:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004242:	e009      	b.n	8004258 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004244:	f7fd fe4a 	bl	8001edc <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d902      	bls.n	8004258 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	73fb      	strb	r3, [r7, #15]
        break;
 8004256:	e004      	b.n	8004262 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004258:	f7ff fd7b 	bl	8003d52 <LL_RCC_PLLSAI1_IsReady>
 800425c:	4603      	mov	r3, r0
 800425e:	2b01      	cmp	r3, #1
 8004260:	d1f0      	bne.n	8004244 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004262:	7bfb      	ldrb	r3, [r7, #15]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d108      	bne.n	800427a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004268:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800426c:	691a      	ldr	r2, [r3, #16]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004276:	4313      	orrs	r3, r2
 8004278:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800427a:	7bfb      	ldrb	r3, [r7, #15]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e09f      	b.n	80043d6 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fd fb08 	bl	80018c0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80042b8:	4b49      	ldr	r3, [pc, #292]	@ (80043e0 <HAL_RTC_Init+0x15c>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f003 0310 	and.w	r3, r3, #16
 80042c0:	2b10      	cmp	r3, #16
 80042c2:	d07e      	beq.n	80043c2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	22ca      	movs	r2, #202	@ 0xca
 80042ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2253      	movs	r2, #83	@ 0x53
 80042d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f8ab 	bl	8004430 <RTC_EnterInitMode>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00a      	beq.n	80042f6 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	22ff      	movs	r2, #255	@ 0xff
 80042e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2204      	movs	r2, #4
 80042ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	73fb      	strb	r3, [r7, #15]
 80042f4:	e067      	b.n	80043c6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6812      	ldr	r2, [r2, #0]
 8004300:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004304:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004308:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6899      	ldr	r1, [r3, #8]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	431a      	orrs	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	68d2      	ldr	r2, [r2, #12]
 8004330:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6919      	ldr	r1, [r3, #16]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	041a      	lsls	r2, r3, #16
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004354:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0203 	bic.w	r2, r2, #3
 8004364:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	69da      	ldr	r2, [r3, #28]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 0320 	and.w	r3, r3, #32
 8004388:	2b00      	cmp	r3, #0
 800438a:	d113      	bne.n	80043b4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f829 	bl	80043e4 <HAL_RTC_WaitForSynchro>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00d      	beq.n	80043b4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	22ff      	movs	r2, #255	@ 0xff
 800439e:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2204      	movs	r2, #4
 80043a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e010      	b.n	80043d6 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	22ff      	movs	r2, #255	@ 0xff
 80043ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 80043bc:	2300      	movs	r3, #0
 80043be:	73fb      	strb	r3, [r7, #15]
 80043c0:	e001      	b.n	80043c6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80043c2:	2300      	movs	r3, #0
 80043c4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80043c6:	7bfb      	ldrb	r3, [r7, #15]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d103      	bne.n	80043d4 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40002800 	.word	0x40002800

080043e4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80043fa:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80043fc:	f7fd fd6e 	bl	8001edc <HAL_GetTick>
 8004400:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004402:	e009      	b.n	8004418 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004404:	f7fd fd6a 	bl	8001edc <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004412:	d901      	bls.n	8004418 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e007      	b.n	8004428 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f003 0320 	and.w	r3, r3, #32
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0ee      	beq.n	8004404 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004442:	2b00      	cmp	r3, #0
 8004444:	d119      	bne.n	800447a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f04f 32ff 	mov.w	r2, #4294967295
 800444e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004450:	f7fd fd44 	bl	8001edc <HAL_GetTick>
 8004454:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004456:	e009      	b.n	800446c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004458:	f7fd fd40 	bl	8001edc <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004466:	d901      	bls.n	800446c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e007      	b.n	800447c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0ee      	beq.n	8004458 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d101      	bne.n	800449e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800449a:	2302      	movs	r3, #2
 800449c:	e0a8      	b.n	80045f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2202      	movs	r2, #2
 80044aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	22ca      	movs	r2, #202	@ 0xca
 80044b4:	625a      	str	r2, [r3, #36]	@ 0x24
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2253      	movs	r2, #83	@ 0x53
 80044bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d020      	beq.n	800450e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80044cc:	f7fd fd06 	bl	8001edc <HAL_GetTick>
 80044d0:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80044d2:	e015      	b.n	8004500 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044d4:	f7fd fd02 	bl	8001edc <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80044e2:	d90d      	bls.n	8004500 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	22ff      	movs	r2, #255	@ 0xff
 80044ea:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2203      	movs	r2, #3
 80044f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e077      	b.n	80045f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f003 0304 	and.w	r3, r3, #4
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1e2      	bne.n	80044d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800451c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	b2da      	uxtb	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800452e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004530:	f7fd fcd4 	bl	8001edc <HAL_GetTick>
 8004534:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004536:	e015      	b.n	8004564 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004538:	f7fd fcd0 	bl	8001edc <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004546:	d90d      	bls.n	8004564 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	22ff      	movs	r2, #255	@ 0xff
 800454e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2203      	movs	r2, #3
 8004554:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e045      	b.n	80045f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0e2      	beq.n	8004538 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0207 	bic.w	r2, r2, #7
 8004588:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6899      	ldr	r1, [r3, #8]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	430a      	orrs	r2, r1
 8004598:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800459a:	4b17      	ldr	r3, [pc, #92]	@ (80045f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800459c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045a0:	4a15      	ldr	r2, [pc, #84]	@ (80045f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80045a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80045a6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80045aa:	4b13      	ldr	r3, [pc, #76]	@ (80045f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a12      	ldr	r2, [pc, #72]	@ (80045f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80045b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80045b4:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045c4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045d4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	22ff      	movs	r2, #255	@ 0xff
 80045dc:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	58000800 	.word	0x58000800

080045fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e095      	b.n	800473a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004612:	2b00      	cmp	r3, #0
 8004614:	d108      	bne.n	8004628 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800461e:	d009      	beq.n	8004634 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	61da      	str	r2, [r3, #28]
 8004626:	e005      	b.n	8004634 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d106      	bne.n	8004654 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7fd f9da 	bl	8001a08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800466a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004674:	d902      	bls.n	800467c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	e002      	b.n	8004682 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800467c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004680:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800468a:	d007      	beq.n	800469c <HAL_SPI_Init+0xa0>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004694:	d002      	beq.n	800469c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80046ac:	431a      	orrs	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	431a      	orrs	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046d4:	431a      	orrs	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046de:	ea42 0103 	orr.w	r1, r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	0c1b      	lsrs	r3, r3, #16
 80046f8:	f003 0204 	and.w	r2, r3, #4
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004700:	f003 0310 	and.w	r3, r3, #16
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004718:	ea42 0103 	orr.w	r1, r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <LL_RCC_GetUSARTClockSource>:
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800474a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800474e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4013      	ands	r3, r2
}
 8004756:	4618      	mov	r0, r3
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <LL_RCC_GetLPUARTClockSource>:
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800476a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800476e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4013      	ands	r3, r2
}
 8004776:	4618      	mov	r0, r3
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b082      	sub	sp, #8
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e042      	b.n	800481a <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7fd faaa 	bl	8001d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2224      	movs	r2, #36	@ 0x24
 80047b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 0201 	bic.w	r2, r2, #1
 80047c2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 fa51 	bl	8004c74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f826 	bl	8004824 <UART_SetConfig>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d101      	bne.n	80047e2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e01b      	b.n	800481a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004800:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f042 0201 	orr.w	r2, r2, #1
 8004810:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 fad0 	bl	8004db8 <UART_CheckIdleState>
 8004818:	4603      	mov	r3, r0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004828:	b08c      	sub	sp, #48	@ 0x30
 800482a:	af00      	add	r7, sp, #0
 800482c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	431a      	orrs	r2, r3
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	431a      	orrs	r2, r3
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	4313      	orrs	r3, r2
 800484a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	4baf      	ldr	r3, [pc, #700]	@ (8004b10 <UART_SetConfig+0x2ec>)
 8004854:	4013      	ands	r3, r2
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	6812      	ldr	r2, [r2, #0]
 800485a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800485c:	430b      	orrs	r3, r1
 800485e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4aa4      	ldr	r2, [pc, #656]	@ (8004b14 <UART_SetConfig+0x2f0>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d004      	beq.n	8004890 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800488c:	4313      	orrs	r3, r2
 800488e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800489a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	6812      	ldr	r2, [r2, #0]
 80048a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048a4:	430b      	orrs	r3, r1
 80048a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ae:	f023 010f 	bic.w	r1, r3, #15
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a95      	ldr	r2, [pc, #596]	@ (8004b18 <UART_SetConfig+0x2f4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d125      	bne.n	8004914 <UART_SetConfig+0xf0>
 80048c8:	2003      	movs	r0, #3
 80048ca:	f7ff ff3a 	bl	8004742 <LL_RCC_GetUSARTClockSource>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b03      	cmp	r3, #3
 80048d2:	d81b      	bhi.n	800490c <UART_SetConfig+0xe8>
 80048d4:	a201      	add	r2, pc, #4	@ (adr r2, 80048dc <UART_SetConfig+0xb8>)
 80048d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048da:	bf00      	nop
 80048dc:	080048ed 	.word	0x080048ed
 80048e0:	080048fd 	.word	0x080048fd
 80048e4:	080048f5 	.word	0x080048f5
 80048e8:	08004905 	.word	0x08004905
 80048ec:	2301      	movs	r3, #1
 80048ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048f2:	e042      	b.n	800497a <UART_SetConfig+0x156>
 80048f4:	2302      	movs	r3, #2
 80048f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048fa:	e03e      	b.n	800497a <UART_SetConfig+0x156>
 80048fc:	2304      	movs	r3, #4
 80048fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004902:	e03a      	b.n	800497a <UART_SetConfig+0x156>
 8004904:	2308      	movs	r3, #8
 8004906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800490a:	e036      	b.n	800497a <UART_SetConfig+0x156>
 800490c:	2310      	movs	r3, #16
 800490e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004912:	e032      	b.n	800497a <UART_SetConfig+0x156>
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a7e      	ldr	r2, [pc, #504]	@ (8004b14 <UART_SetConfig+0x2f0>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d12a      	bne.n	8004974 <UART_SetConfig+0x150>
 800491e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8004922:	f7ff ff1e 	bl	8004762 <LL_RCC_GetLPUARTClockSource>
 8004926:	4603      	mov	r3, r0
 8004928:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800492c:	d01a      	beq.n	8004964 <UART_SetConfig+0x140>
 800492e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004932:	d81b      	bhi.n	800496c <UART_SetConfig+0x148>
 8004934:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004938:	d00c      	beq.n	8004954 <UART_SetConfig+0x130>
 800493a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800493e:	d815      	bhi.n	800496c <UART_SetConfig+0x148>
 8004940:	2b00      	cmp	r3, #0
 8004942:	d003      	beq.n	800494c <UART_SetConfig+0x128>
 8004944:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004948:	d008      	beq.n	800495c <UART_SetConfig+0x138>
 800494a:	e00f      	b.n	800496c <UART_SetConfig+0x148>
 800494c:	2300      	movs	r3, #0
 800494e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004952:	e012      	b.n	800497a <UART_SetConfig+0x156>
 8004954:	2302      	movs	r3, #2
 8004956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800495a:	e00e      	b.n	800497a <UART_SetConfig+0x156>
 800495c:	2304      	movs	r3, #4
 800495e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004962:	e00a      	b.n	800497a <UART_SetConfig+0x156>
 8004964:	2308      	movs	r3, #8
 8004966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800496a:	e006      	b.n	800497a <UART_SetConfig+0x156>
 800496c:	2310      	movs	r3, #16
 800496e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004972:	e002      	b.n	800497a <UART_SetConfig+0x156>
 8004974:	2310      	movs	r3, #16
 8004976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a65      	ldr	r2, [pc, #404]	@ (8004b14 <UART_SetConfig+0x2f0>)
 8004980:	4293      	cmp	r3, r2
 8004982:	f040 8097 	bne.w	8004ab4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004986:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800498a:	2b08      	cmp	r3, #8
 800498c:	d823      	bhi.n	80049d6 <UART_SetConfig+0x1b2>
 800498e:	a201      	add	r2, pc, #4	@ (adr r2, 8004994 <UART_SetConfig+0x170>)
 8004990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004994:	080049b9 	.word	0x080049b9
 8004998:	080049d7 	.word	0x080049d7
 800499c:	080049c1 	.word	0x080049c1
 80049a0:	080049d7 	.word	0x080049d7
 80049a4:	080049c7 	.word	0x080049c7
 80049a8:	080049d7 	.word	0x080049d7
 80049ac:	080049d7 	.word	0x080049d7
 80049b0:	080049d7 	.word	0x080049d7
 80049b4:	080049cf 	.word	0x080049cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049b8:	f7fe ff60 	bl	800387c <HAL_RCC_GetPCLK1Freq>
 80049bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049be:	e010      	b.n	80049e2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049c0:	4b56      	ldr	r3, [pc, #344]	@ (8004b1c <UART_SetConfig+0x2f8>)
 80049c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80049c4:	e00d      	b.n	80049e2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049c6:	f7fe fed9 	bl	800377c <HAL_RCC_GetSysClockFreq>
 80049ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049cc:	e009      	b.n	80049e2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80049d4:	e005      	b.n	80049e2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80049e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 812b 	beq.w	8004c40 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ee:	4a4c      	ldr	r2, [pc, #304]	@ (8004b20 <UART_SetConfig+0x2fc>)
 80049f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049f4:	461a      	mov	r2, r3
 80049f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80049fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	4413      	add	r3, r2
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d305      	bcc.n	8004a1a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d903      	bls.n	8004a22 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004a20:	e10e      	b.n	8004c40 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a24:	2200      	movs	r2, #0
 8004a26:	60bb      	str	r3, [r7, #8]
 8004a28:	60fa      	str	r2, [r7, #12]
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2e:	4a3c      	ldr	r2, [pc, #240]	@ (8004b20 <UART_SetConfig+0x2fc>)
 8004a30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	2200      	movs	r2, #0
 8004a38:	603b      	str	r3, [r7, #0]
 8004a3a:	607a      	str	r2, [r7, #4]
 8004a3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a44:	f7fb fba2 	bl	800018c <__aeabi_uldivmod>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	4619      	mov	r1, r3
 8004a50:	f04f 0200 	mov.w	r2, #0
 8004a54:	f04f 0300 	mov.w	r3, #0
 8004a58:	020b      	lsls	r3, r1, #8
 8004a5a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a5e:	0202      	lsls	r2, r0, #8
 8004a60:	6979      	ldr	r1, [r7, #20]
 8004a62:	6849      	ldr	r1, [r1, #4]
 8004a64:	0849      	lsrs	r1, r1, #1
 8004a66:	2000      	movs	r0, #0
 8004a68:	460c      	mov	r4, r1
 8004a6a:	4605      	mov	r5, r0
 8004a6c:	eb12 0804 	adds.w	r8, r2, r4
 8004a70:	eb43 0905 	adc.w	r9, r3, r5
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	469a      	mov	sl, r3
 8004a7c:	4693      	mov	fp, r2
 8004a7e:	4652      	mov	r2, sl
 8004a80:	465b      	mov	r3, fp
 8004a82:	4640      	mov	r0, r8
 8004a84:	4649      	mov	r1, r9
 8004a86:	f7fb fb81 	bl	800018c <__aeabi_uldivmod>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	4613      	mov	r3, r2
 8004a90:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a98:	d308      	bcc.n	8004aac <UART_SetConfig+0x288>
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004aa0:	d204      	bcs.n	8004aac <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6a3a      	ldr	r2, [r7, #32]
 8004aa8:	60da      	str	r2, [r3, #12]
 8004aaa:	e0c9      	b.n	8004c40 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004ab2:	e0c5      	b.n	8004c40 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	69db      	ldr	r3, [r3, #28]
 8004ab8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004abc:	d16d      	bne.n	8004b9a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004abe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	2b07      	cmp	r3, #7
 8004ac6:	d82d      	bhi.n	8004b24 <UART_SetConfig+0x300>
 8004ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad0 <UART_SetConfig+0x2ac>)
 8004aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ace:	bf00      	nop
 8004ad0:	08004af1 	.word	0x08004af1
 8004ad4:	08004af9 	.word	0x08004af9
 8004ad8:	08004b25 	.word	0x08004b25
 8004adc:	08004aff 	.word	0x08004aff
 8004ae0:	08004b25 	.word	0x08004b25
 8004ae4:	08004b25 	.word	0x08004b25
 8004ae8:	08004b25 	.word	0x08004b25
 8004aec:	08004b07 	.word	0x08004b07
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004af0:	f7fe feda 	bl	80038a8 <HAL_RCC_GetPCLK2Freq>
 8004af4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004af6:	e01b      	b.n	8004b30 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004af8:	4b08      	ldr	r3, [pc, #32]	@ (8004b1c <UART_SetConfig+0x2f8>)
 8004afa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004afc:	e018      	b.n	8004b30 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004afe:	f7fe fe3d 	bl	800377c <HAL_RCC_GetSysClockFreq>
 8004b02:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b04:	e014      	b.n	8004b30 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b0c:	e010      	b.n	8004b30 <UART_SetConfig+0x30c>
 8004b0e:	bf00      	nop
 8004b10:	cfff69f3 	.word	0xcfff69f3
 8004b14:	40008000 	.word	0x40008000
 8004b18:	40013800 	.word	0x40013800
 8004b1c:	00f42400 	.word	0x00f42400
 8004b20:	08008d70 	.word	0x08008d70
      default:
        pclk = 0U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004b2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 8084 	beq.w	8004c40 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3c:	4a4b      	ldr	r2, [pc, #300]	@ (8004c6c <UART_SetConfig+0x448>)
 8004b3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b42:	461a      	mov	r2, r3
 8004b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b46:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b4a:	005a      	lsls	r2, r3, #1
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	085b      	lsrs	r3, r3, #1
 8004b52:	441a      	add	r2, r3
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	2b0f      	cmp	r3, #15
 8004b62:	d916      	bls.n	8004b92 <UART_SetConfig+0x36e>
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b6a:	d212      	bcs.n	8004b92 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	f023 030f 	bic.w	r3, r3, #15
 8004b74:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	085b      	lsrs	r3, r3, #1
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	8bfb      	ldrh	r3, [r7, #30]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	8bfa      	ldrh	r2, [r7, #30]
 8004b8e:	60da      	str	r2, [r3, #12]
 8004b90:	e056      	b.n	8004c40 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004b98:	e052      	b.n	8004c40 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b9a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	2b07      	cmp	r3, #7
 8004ba2:	d822      	bhi.n	8004bea <UART_SetConfig+0x3c6>
 8004ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bac <UART_SetConfig+0x388>)
 8004ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004baa:	bf00      	nop
 8004bac:	08004bcd 	.word	0x08004bcd
 8004bb0:	08004bd5 	.word	0x08004bd5
 8004bb4:	08004beb 	.word	0x08004beb
 8004bb8:	08004bdb 	.word	0x08004bdb
 8004bbc:	08004beb 	.word	0x08004beb
 8004bc0:	08004beb 	.word	0x08004beb
 8004bc4:	08004beb 	.word	0x08004beb
 8004bc8:	08004be3 	.word	0x08004be3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bcc:	f7fe fe6c 	bl	80038a8 <HAL_RCC_GetPCLK2Freq>
 8004bd0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bd2:	e010      	b.n	8004bf6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bd4:	4b26      	ldr	r3, [pc, #152]	@ (8004c70 <UART_SetConfig+0x44c>)
 8004bd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004bd8:	e00d      	b.n	8004bf6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bda:	f7fe fdcf 	bl	800377c <HAL_RCC_GetSysClockFreq>
 8004bde:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004be0:	e009      	b.n	8004bf6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004be2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004be6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004be8:	e005      	b.n	8004bf6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004bea:	2300      	movs	r3, #0
 8004bec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004bf4:	bf00      	nop
    }

    if (pclk != 0U)
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d021      	beq.n	8004c40 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c00:	4a1a      	ldr	r2, [pc, #104]	@ (8004c6c <UART_SetConfig+0x448>)
 8004c02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c06:	461a      	mov	r2, r3
 8004c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	085b      	lsrs	r3, r3, #1
 8004c14:	441a      	add	r2, r3
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	2b0f      	cmp	r3, #15
 8004c24:	d909      	bls.n	8004c3a <UART_SetConfig+0x416>
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c2c:	d205      	bcs.n	8004c3a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	60da      	str	r2, [r3, #12]
 8004c38:	e002      	b.n	8004c40 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	2200      	movs	r2, #0
 8004c54:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004c5c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3730      	adds	r7, #48	@ 0x30
 8004c64:	46bd      	mov	sp, r7
 8004c66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c6a:	bf00      	nop
 8004c6c:	08008d70 	.word	0x08008d70
 8004c70:	00f42400 	.word	0x00f42400

08004c74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00a      	beq.n	8004c9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00a      	beq.n	8004cc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00a      	beq.n	8004ce2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d08:	f003 0310 	and.w	r3, r3, #16
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00a      	beq.n	8004d26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2a:	f003 0320 	and.w	r3, r3, #32
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01a      	beq.n	8004d8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d72:	d10a      	bne.n	8004d8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	605a      	str	r2, [r3, #4]
  }
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b098      	sub	sp, #96	@ 0x60
 8004dbc:	af02      	add	r7, sp, #8
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dc8:	f7fd f888 	bl	8001edc <HAL_GetTick>
 8004dcc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d12f      	bne.n	8004e3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ddc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004de4:	2200      	movs	r2, #0
 8004de6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f88e 	bl	8004f0c <UART_WaitOnFlagUntilTimeout>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d022      	beq.n	8004e3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dfe:	e853 3f00 	ldrex	r3, [r3]
 8004e02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	461a      	mov	r2, r3
 8004e12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e14:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e16:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e1c:	e841 2300 	strex	r3, r2, [r1]
 8004e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1e6      	bne.n	8004df6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e063      	b.n	8004f04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0304 	and.w	r3, r3, #4
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d149      	bne.n	8004ede <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e4a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e52:	2200      	movs	r2, #0
 8004e54:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f857 	bl	8004f0c <UART_WaitOnFlagUntilTimeout>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d03c      	beq.n	8004ede <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6c:	e853 3f00 	ldrex	r3, [r3]
 8004e70:	623b      	str	r3, [r7, #32]
   return(result);
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e82:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e84:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e8a:	e841 2300 	strex	r3, r2, [r1]
 8004e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1e6      	bne.n	8004e64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	3308      	adds	r3, #8
 8004e9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	e853 3f00 	ldrex	r3, [r3]
 8004ea4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f023 0301 	bic.w	r3, r3, #1
 8004eac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	3308      	adds	r3, #8
 8004eb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004eb6:	61fa      	str	r2, [r7, #28]
 8004eb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eba:	69b9      	ldr	r1, [r7, #24]
 8004ebc:	69fa      	ldr	r2, [r7, #28]
 8004ebe:	e841 2300 	strex	r3, r2, [r1]
 8004ec2:	617b      	str	r3, [r7, #20]
   return(result);
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1e5      	bne.n	8004e96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e012      	b.n	8004f04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3758      	adds	r7, #88	@ 0x58
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f1c:	e04f      	b.n	8004fbe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f24:	d04b      	beq.n	8004fbe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f26:	f7fc ffd9 	bl	8001edc <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d302      	bcc.n	8004f3c <UART_WaitOnFlagUntilTimeout+0x30>
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e04e      	b.n	8004fde <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d037      	beq.n	8004fbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	2b80      	cmp	r3, #128	@ 0x80
 8004f52:	d034      	beq.n	8004fbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2b40      	cmp	r3, #64	@ 0x40
 8004f58:	d031      	beq.n	8004fbe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	f003 0308 	and.w	r3, r3, #8
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d110      	bne.n	8004f8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2208      	movs	r2, #8
 8004f6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 f838 	bl	8004fe6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2208      	movs	r2, #8
 8004f7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e029      	b.n	8004fde <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f98:	d111      	bne.n	8004fbe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004fa2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 f81e 	bl	8004fe6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2220      	movs	r2, #32
 8004fae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e00f      	b.n	8004fde <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69da      	ldr	r2, [r3, #28]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	bf0c      	ite	eq
 8004fce:	2301      	moveq	r3, #1
 8004fd0:	2300      	movne	r3, #0
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	79fb      	ldrb	r3, [r7, #7]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d0a0      	beq.n	8004f1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b095      	sub	sp, #84	@ 0x54
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ff6:	e853 3f00 	ldrex	r3, [r3]
 8004ffa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005002:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	461a      	mov	r2, r3
 800500a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800500c:	643b      	str	r3, [r7, #64]	@ 0x40
 800500e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005010:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005012:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005014:	e841 2300 	strex	r3, r2, [r1]
 8005018:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800501a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1e6      	bne.n	8004fee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	3308      	adds	r3, #8
 8005026:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	e853 3f00 	ldrex	r3, [r3]
 800502e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005036:	f023 0301 	bic.w	r3, r3, #1
 800503a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	3308      	adds	r3, #8
 8005042:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005044:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005046:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005048:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800504a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800504c:	e841 2300 	strex	r3, r2, [r1]
 8005050:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1e3      	bne.n	8005020 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800505c:	2b01      	cmp	r3, #1
 800505e:	d118      	bne.n	8005092 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	e853 3f00 	ldrex	r3, [r3]
 800506c:	60bb      	str	r3, [r7, #8]
   return(result);
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	f023 0310 	bic.w	r3, r3, #16
 8005074:	647b      	str	r3, [r7, #68]	@ 0x44
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	461a      	mov	r2, r3
 800507c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800507e:	61bb      	str	r3, [r7, #24]
 8005080:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005082:	6979      	ldr	r1, [r7, #20]
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	e841 2300 	strex	r3, r2, [r1]
 800508a:	613b      	str	r3, [r7, #16]
   return(result);
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1e6      	bne.n	8005060 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80050a6:	bf00      	nop
 80050a8:	3754      	adds	r7, #84	@ 0x54
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b085      	sub	sp, #20
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d101      	bne.n	80050c8 <HAL_UARTEx_DisableFifoMode+0x16>
 80050c4:	2302      	movs	r3, #2
 80050c6:	e027      	b.n	8005118 <HAL_UARTEx_DisableFifoMode+0x66>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2224      	movs	r2, #36	@ 0x24
 80050d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0201 	bic.w	r2, r2, #1
 80050ee:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80050f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005138:	2302      	movs	r3, #2
 800513a:	e02d      	b.n	8005198 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2224      	movs	r2, #36	@ 0x24
 8005148:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0201 	bic.w	r2, r2, #1
 8005162:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 f84f 	bl	800521c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2220      	movs	r2, #32
 800518a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e02d      	b.n	8005214 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2224      	movs	r2, #36	@ 0x24
 80051c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0201 	bic.w	r2, r2, #1
 80051de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f811 	bl	800521c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2220      	movs	r2, #32
 8005206:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005228:	2b00      	cmp	r3, #0
 800522a:	d108      	bne.n	800523e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800523c:	e031      	b.n	80052a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800523e:	2308      	movs	r3, #8
 8005240:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005242:	2308      	movs	r3, #8
 8005244:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	0e5b      	lsrs	r3, r3, #25
 800524e:	b2db      	uxtb	r3, r3
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	0f5b      	lsrs	r3, r3, #29
 800525e:	b2db      	uxtb	r3, r3
 8005260:	f003 0307 	and.w	r3, r3, #7
 8005264:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005266:	7bbb      	ldrb	r3, [r7, #14]
 8005268:	7b3a      	ldrb	r2, [r7, #12]
 800526a:	4911      	ldr	r1, [pc, #68]	@ (80052b0 <UARTEx_SetNbDataToProcess+0x94>)
 800526c:	5c8a      	ldrb	r2, [r1, r2]
 800526e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005272:	7b3a      	ldrb	r2, [r7, #12]
 8005274:	490f      	ldr	r1, [pc, #60]	@ (80052b4 <UARTEx_SetNbDataToProcess+0x98>)
 8005276:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005278:	fb93 f3f2 	sdiv	r3, r3, r2
 800527c:	b29a      	uxth	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005284:	7bfb      	ldrb	r3, [r7, #15]
 8005286:	7b7a      	ldrb	r2, [r7, #13]
 8005288:	4909      	ldr	r1, [pc, #36]	@ (80052b0 <UARTEx_SetNbDataToProcess+0x94>)
 800528a:	5c8a      	ldrb	r2, [r1, r2]
 800528c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005290:	7b7a      	ldrb	r2, [r7, #13]
 8005292:	4908      	ldr	r1, [pc, #32]	@ (80052b4 <UARTEx_SetNbDataToProcess+0x98>)
 8005294:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005296:	fb93 f3f2 	sdiv	r3, r3, r2
 800529a:	b29a      	uxth	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80052a2:	bf00      	nop
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	08008d88 	.word	0x08008d88
 80052b4:	08008d90 	.word	0x08008d90

080052b8 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b088      	sub	sp, #32
 80052bc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80052be:	2300      	movs	r3, #0
 80052c0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80052c2:	f107 0308 	add.w	r3, r7, #8
 80052c6:	2218      	movs	r2, #24
 80052c8:	2100      	movs	r1, #0
 80052ca:	4618      	mov	r0, r3
 80052cc:	f001 f9f0 	bl	80066b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80052d0:	233f      	movs	r3, #63	@ 0x3f
 80052d2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80052d4:	2381      	movs	r3, #129	@ 0x81
 80052d6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80052d8:	1dfb      	adds	r3, r7, #7
 80052da:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80052dc:	2301      	movs	r3, #1
 80052de:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80052e0:	f107 0308 	add.w	r3, r7, #8
 80052e4:	2100      	movs	r1, #0
 80052e6:	4618      	mov	r0, r3
 80052e8:	f001 fc6c 	bl	8006bc4 <hci_send_req>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	da01      	bge.n	80052f6 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80052f2:	23ff      	movs	r3, #255	@ 0xff
 80052f4:	e000      	b.n	80052f8 <aci_gap_set_non_discoverable+0x40>
  return status;
 80052f6:	79fb      	ldrb	r3, [r7, #7]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3720      	adds	r7, #32
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8005300:	b5b0      	push	{r4, r5, r7, lr}
 8005302:	b0ce      	sub	sp, #312	@ 0x138
 8005304:	af00      	add	r7, sp, #0
 8005306:	4605      	mov	r5, r0
 8005308:	460c      	mov	r4, r1
 800530a:	4610      	mov	r0, r2
 800530c:	4619      	mov	r1, r3
 800530e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005312:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005316:	462a      	mov	r2, r5
 8005318:	701a      	strb	r2, [r3, #0]
 800531a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800531e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005322:	4622      	mov	r2, r4
 8005324:	801a      	strh	r2, [r3, #0]
 8005326:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800532a:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800532e:	4602      	mov	r2, r0
 8005330:	801a      	strh	r2, [r3, #0]
 8005332:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005336:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800533a:	460a      	mov	r2, r1
 800533c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800533e:	f107 0310 	add.w	r3, r7, #16
 8005342:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8005346:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800534a:	3308      	adds	r3, #8
 800534c:	f107 0210 	add.w	r2, r7, #16
 8005350:	4413      	add	r3, r2
 8005352:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8005356:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800535a:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800535e:	4413      	add	r3, r2
 8005360:	3309      	adds	r3, #9
 8005362:	f107 0210 	add.w	r2, r7, #16
 8005366:	4413      	add	r3, r2
 8005368:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800536c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005370:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005374:	2200      	movs	r2, #0
 8005376:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005378:	2300      	movs	r3, #0
 800537a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800537e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005382:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005386:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800538a:	7812      	ldrb	r2, [r2, #0]
 800538c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800538e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005392:	3301      	adds	r3, #1
 8005394:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8005398:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800539c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80053a0:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80053a4:	8812      	ldrh	r2, [r2, #0]
 80053a6:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80053aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80053ae:	3302      	adds	r3, #2
 80053b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80053b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80053b8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80053bc:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 80053c0:	8812      	ldrh	r2, [r2, #0]
 80053c2:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80053c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80053ca:	3302      	adds	r3, #2
 80053cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80053d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80053d4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80053d8:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80053dc:	7812      	ldrb	r2, [r2, #0]
 80053de:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80053e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80053e4:	3301      	adds	r3, #1
 80053e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80053ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80053ee:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80053f2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80053f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80053f8:	3301      	adds	r3, #1
 80053fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80053fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005402:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8005406:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8005408:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800540c:	3301      	adds	r3, #1
 800540e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8005412:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005416:	3308      	adds	r3, #8
 8005418:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800541c:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8005420:	4618      	mov	r0, r3
 8005422:	f001 f935 	bl	8006690 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8005426:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800542a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800542e:	4413      	add	r3, r2
 8005430:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8005434:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005438:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800543c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800543e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005442:	3301      	adds	r3, #1
 8005444:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8005448:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800544c:	3301      	adds	r3, #1
 800544e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8005452:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8005456:	4618      	mov	r0, r3
 8005458:	f001 f91a 	bl	8006690 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800545c:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8005460:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005464:	4413      	add	r3, r2
 8005466:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800546a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800546e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8005472:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005474:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005478:	3302      	adds	r3, #2
 800547a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800547e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005482:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8005486:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8005488:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800548c:	3302      	adds	r3, #2
 800548e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005492:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005496:	2218      	movs	r2, #24
 8005498:	2100      	movs	r1, #0
 800549a:	4618      	mov	r0, r3
 800549c:	f001 f908 	bl	80066b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80054a0:	233f      	movs	r3, #63	@ 0x3f
 80054a2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 80054a6:	2383      	movs	r3, #131	@ 0x83
 80054a8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80054ac:	f107 0310 	add.w	r3, r7, #16
 80054b0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80054b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80054b8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80054bc:	f107 030f 	add.w	r3, r7, #15
 80054c0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80054c4:	2301      	movs	r3, #1
 80054c6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80054ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80054ce:	2100      	movs	r1, #0
 80054d0:	4618      	mov	r0, r3
 80054d2:	f001 fb77 	bl	8006bc4 <hci_send_req>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	da01      	bge.n	80054e0 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80054dc:	23ff      	movs	r3, #255	@ 0xff
 80054de:	e004      	b.n	80054ea <aci_gap_set_discoverable+0x1ea>
  return status;
 80054e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80054e4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80054e8:	781b      	ldrb	r3, [r3, #0]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bdb0      	pop	{r4, r5, r7, pc}

080054f4 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b0cc      	sub	sp, #304	@ 0x130
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	4602      	mov	r2, r0
 80054fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005500:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005504:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8005506:	f107 0310 	add.w	r3, r7, #16
 800550a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800550e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005512:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005516:	2200      	movs	r2, #0
 8005518:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800551a:	2300      	movs	r3, #0
 800551c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8005520:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005524:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005528:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800552c:	7812      	ldrb	r2, [r2, #0]
 800552e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005530:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005534:	3301      	adds	r3, #1
 8005536:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800553a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800553e:	2218      	movs	r2, #24
 8005540:	2100      	movs	r1, #0
 8005542:	4618      	mov	r0, r3
 8005544:	f001 f8b4 	bl	80066b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005548:	233f      	movs	r3, #63	@ 0x3f
 800554a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800554e:	2385      	movs	r3, #133	@ 0x85
 8005550:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005554:	f107 0310 	add.w	r3, r7, #16
 8005558:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800555c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005560:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005564:	f107 030f 	add.w	r3, r7, #15
 8005568:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800556c:	2301      	movs	r3, #1
 800556e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005572:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005576:	2100      	movs	r1, #0
 8005578:	4618      	mov	r0, r3
 800557a:	f001 fb23 	bl	8006bc4 <hci_send_req>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	da01      	bge.n	8005588 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8005584:	23ff      	movs	r3, #255	@ 0xff
 8005586:	e004      	b.n	8005592 <aci_gap_set_io_capability+0x9e>
  return status;
 8005588:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800558c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005590:	781b      	ldrb	r3, [r3, #0]
}
 8005592:	4618      	mov	r0, r3
 8005594:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800559c:	b5b0      	push	{r4, r5, r7, lr}
 800559e:	b0cc      	sub	sp, #304	@ 0x130
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	4605      	mov	r5, r0
 80055a4:	460c      	mov	r4, r1
 80055a6:	4610      	mov	r0, r2
 80055a8:	4619      	mov	r1, r3
 80055aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80055ae:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80055b2:	462a      	mov	r2, r5
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80055ba:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80055be:	4622      	mov	r2, r4
 80055c0:	701a      	strb	r2, [r3, #0]
 80055c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80055c6:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80055ca:	4602      	mov	r2, r0
 80055cc:	701a      	strb	r2, [r3, #0]
 80055ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80055d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80055d6:	460a      	mov	r2, r1
 80055d8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80055da:	f107 0310 	add.w	r3, r7, #16
 80055de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80055e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80055e6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80055ea:	2200      	movs	r2, #0
 80055ec:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80055ee:	2300      	movs	r3, #0
 80055f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80055f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80055f8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80055fc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005600:	7812      	ldrb	r2, [r2, #0]
 8005602:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005604:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005608:	3301      	adds	r3, #1
 800560a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800560e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005612:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005616:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800561a:	7812      	ldrb	r2, [r2, #0]
 800561c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800561e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005622:	3301      	adds	r3, #1
 8005624:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8005628:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800562c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005630:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005634:	7812      	ldrb	r2, [r2, #0]
 8005636:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005638:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800563c:	3301      	adds	r3, #1
 800563e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8005642:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005646:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800564a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800564e:	7812      	ldrb	r2, [r2, #0]
 8005650:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8005652:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005656:	3301      	adds	r3, #1
 8005658:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800565c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005660:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8005664:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005666:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800566a:	3301      	adds	r3, #1
 800566c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8005670:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005674:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8005678:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800567a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800567e:	3301      	adds	r3, #1
 8005680:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8005684:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005688:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800568c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800568e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005692:	3301      	adds	r3, #1
 8005694:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8005698:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800569c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80056a0:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80056a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80056a8:	3304      	adds	r3, #4
 80056aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80056ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80056b2:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 80056b6:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80056b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80056bc:	3301      	adds	r3, #1
 80056be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80056c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80056c6:	2218      	movs	r2, #24
 80056c8:	2100      	movs	r1, #0
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 fff0 	bl	80066b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80056d0:	233f      	movs	r3, #63	@ 0x3f
 80056d2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 80056d6:	2386      	movs	r3, #134	@ 0x86
 80056d8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80056dc:	f107 0310 	add.w	r3, r7, #16
 80056e0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80056e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80056e8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80056ec:	f107 030f 	add.w	r3, r7, #15
 80056f0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80056f4:	2301      	movs	r3, #1
 80056f6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80056fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80056fe:	2100      	movs	r1, #0
 8005700:	4618      	mov	r0, r3
 8005702:	f001 fa5f 	bl	8006bc4 <hci_send_req>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	da01      	bge.n	8005710 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800570c:	23ff      	movs	r3, #255	@ 0xff
 800570e:	e004      	b.n	800571a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8005710:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005714:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005718:	781b      	ldrb	r3, [r3, #0]
}
 800571a:	4618      	mov	r0, r3
 800571c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005720:	46bd      	mov	sp, r7
 8005722:	bdb0      	pop	{r4, r5, r7, pc}

08005724 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b0cc      	sub	sp, #304	@ 0x130
 8005728:	af00      	add	r7, sp, #0
 800572a:	4602      	mov	r2, r0
 800572c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005730:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005734:	6019      	str	r1, [r3, #0]
 8005736:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800573a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800573e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8005740:	f107 0310 	add.w	r3, r7, #16
 8005744:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005748:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800574c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005750:	2200      	movs	r2, #0
 8005752:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005754:	2300      	movs	r3, #0
 8005756:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800575a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800575e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005762:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005766:	8812      	ldrh	r2, [r2, #0]
 8005768:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800576a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800576e:	3302      	adds	r3, #2
 8005770:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8005774:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005778:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800577c:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8005780:	6812      	ldr	r2, [r2, #0]
 8005782:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8005786:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800578a:	3304      	adds	r3, #4
 800578c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005790:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005794:	2218      	movs	r2, #24
 8005796:	2100      	movs	r1, #0
 8005798:	4618      	mov	r0, r3
 800579a:	f000 ff89 	bl	80066b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800579e:	233f      	movs	r3, #63	@ 0x3f
 80057a0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 80057a4:	2388      	movs	r3, #136	@ 0x88
 80057a6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80057aa:	f107 0310 	add.w	r3, r7, #16
 80057ae:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80057b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80057b6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80057ba:	f107 030f 	add.w	r3, r7, #15
 80057be:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80057c2:	2301      	movs	r3, #1
 80057c4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80057c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80057cc:	2100      	movs	r1, #0
 80057ce:	4618      	mov	r0, r3
 80057d0:	f001 f9f8 	bl	8006bc4 <hci_send_req>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	da01      	bge.n	80057de <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80057da:	23ff      	movs	r3, #255	@ 0xff
 80057dc:	e004      	b.n	80057e8 <aci_gap_pass_key_resp+0xc4>
  return status;
 80057de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80057e2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80057e6:	781b      	ldrb	r3, [r3, #0]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80057f2:	b590      	push	{r4, r7, lr}
 80057f4:	b0cd      	sub	sp, #308	@ 0x134
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	4604      	mov	r4, r0
 80057fa:	4608      	mov	r0, r1
 80057fc:	4611      	mov	r1, r2
 80057fe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005802:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800580c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005810:	4622      	mov	r2, r4
 8005812:	701a      	strb	r2, [r3, #0]
 8005814:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005818:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800581c:	4602      	mov	r2, r0
 800581e:	701a      	strb	r2, [r3, #0]
 8005820:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005824:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005828:	460a      	mov	r2, r1
 800582a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800582c:	f107 0310 	add.w	r3, r7, #16
 8005830:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005834:	f107 0308 	add.w	r3, r7, #8
 8005838:	2207      	movs	r2, #7
 800583a:	2100      	movs	r1, #0
 800583c:	4618      	mov	r0, r3
 800583e:	f000 ff37 	bl	80066b0 <Osal_MemSet>
  int index_input = 0;
 8005842:	2300      	movs	r3, #0
 8005844:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8005848:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800584c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005850:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005854:	7812      	ldrb	r2, [r2, #0]
 8005856:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005858:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800585c:	3301      	adds	r3, #1
 800585e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8005862:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005866:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800586a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800586e:	7812      	ldrb	r2, [r2, #0]
 8005870:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005872:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005876:	3301      	adds	r3, #1
 8005878:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800587c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005880:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005884:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005888:	7812      	ldrb	r2, [r2, #0]
 800588a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800588c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005890:	3301      	adds	r3, #1
 8005892:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005896:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800589a:	2218      	movs	r2, #24
 800589c:	2100      	movs	r1, #0
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 ff06 	bl	80066b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80058a4:	233f      	movs	r3, #63	@ 0x3f
 80058a6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 80058aa:	238a      	movs	r3, #138	@ 0x8a
 80058ac:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80058b0:	f107 0310 	add.w	r3, r7, #16
 80058b4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80058b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80058bc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80058c0:	f107 0308 	add.w	r3, r7, #8
 80058c4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80058c8:	2307      	movs	r3, #7
 80058ca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80058ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80058d2:	2100      	movs	r1, #0
 80058d4:	4618      	mov	r0, r3
 80058d6:	f001 f975 	bl	8006bc4 <hci_send_req>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	da01      	bge.n	80058e4 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80058e0:	23ff      	movs	r3, #255	@ 0xff
 80058e2:	e02e      	b.n	8005942 <aci_gap_init+0x150>
  if ( resp.Status )
 80058e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80058e8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d005      	beq.n	80058fe <aci_gap_init+0x10c>
    return resp.Status;
 80058f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80058f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	e021      	b.n	8005942 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80058fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005902:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005906:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800590a:	b29a      	uxth	r2, r3
 800590c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005910:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8005918:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800591c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005920:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005924:	b29a      	uxth	r2, r3
 8005926:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800592a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800592c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005930:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005934:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8005938:	b29a      	uxth	r2, r3
 800593a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800593e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8005948:	46bd      	mov	sp, r7
 800594a:	bd90      	pop	{r4, r7, pc}

0800594c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b0cc      	sub	sp, #304	@ 0x130
 8005950:	af00      	add	r7, sp, #0
 8005952:	4602      	mov	r2, r0
 8005954:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005958:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800595c:	6019      	str	r1, [r3, #0]
 800595e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005962:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005966:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8005968:	f107 0310 	add.w	r3, r7, #16
 800596c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005970:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005974:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005978:	2200      	movs	r2, #0
 800597a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800597c:	2300      	movs	r3, #0
 800597e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8005982:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005986:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800598a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800598e:	7812      	ldrb	r2, [r2, #0]
 8005990:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005992:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005996:	3301      	adds	r3, #1
 8005998:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800599c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80059a0:	1c58      	adds	r0, r3, #1
 80059a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80059a6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80059aa:	781a      	ldrb	r2, [r3, #0]
 80059ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80059b0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80059b4:	6819      	ldr	r1, [r3, #0]
 80059b6:	f000 fe6b 	bl	8006690 <Osal_MemCpy>
  index_input += AdvDataLen;
 80059ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80059be:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80059c8:	4413      	add	r3, r2
 80059ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80059ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80059d2:	2218      	movs	r2, #24
 80059d4:	2100      	movs	r1, #0
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 fe6a 	bl	80066b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80059dc:	233f      	movs	r3, #63	@ 0x3f
 80059de:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 80059e2:	238e      	movs	r3, #142	@ 0x8e
 80059e4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80059e8:	f107 0310 	add.w	r3, r7, #16
 80059ec:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80059f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80059f4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80059f8:	f107 030f 	add.w	r3, r7, #15
 80059fc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005a00:	2301      	movs	r3, #1
 8005a02:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005a06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f001 f8d9 	bl	8006bc4 <hci_send_req>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	da01      	bge.n	8005a1c <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8005a18:	23ff      	movs	r3, #255	@ 0xff
 8005a1a:	e004      	b.n	8005a26 <aci_gap_update_adv_data+0xda>
  return status;
 8005a1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a20:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005a24:	781b      	ldrb	r3, [r3, #0]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005a36:	2300      	movs	r3, #0
 8005a38:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005a3a:	f107 0308 	add.w	r3, r7, #8
 8005a3e:	2218      	movs	r2, #24
 8005a40:	2100      	movs	r1, #0
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fe34 	bl	80066b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005a48:	233f      	movs	r3, #63	@ 0x3f
 8005a4a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8005a4c:	2392      	movs	r3, #146	@ 0x92
 8005a4e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005a50:	1dfb      	adds	r3, r7, #7
 8005a52:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005a54:	2301      	movs	r3, #1
 8005a56:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005a58:	f107 0308 	add.w	r3, r7, #8
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f001 f8b0 	bl	8006bc4 <hci_send_req>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	da01      	bge.n	8005a6e <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005a6a:	23ff      	movs	r3, #255	@ 0xff
 8005a6c:	e000      	b.n	8005a70 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8005a6e:	79fb      	ldrb	r3, [r7, #7]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3720      	adds	r7, #32
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b0cc      	sub	sp, #304	@ 0x130
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	4602      	mov	r2, r0
 8005a80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a84:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005a88:	801a      	strh	r2, [r3, #0]
 8005a8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a8e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005a92:	460a      	mov	r2, r1
 8005a94:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8005a96:	f107 0310 	add.w	r3, r7, #16
 8005a9a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005a9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005aa2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8005ab0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005ab4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005ab8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005abc:	8812      	ldrh	r2, [r2, #0]
 8005abe:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005ac0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005ac4:	3302      	adds	r3, #2
 8005ac6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8005aca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005ace:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005ad2:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005ad6:	7812      	ldrb	r2, [r2, #0]
 8005ad8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005ada:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005ade:	3301      	adds	r3, #1
 8005ae0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005ae4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005ae8:	2218      	movs	r2, #24
 8005aea:	2100      	movs	r1, #0
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 fddf 	bl	80066b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005af2:	233f      	movs	r3, #63	@ 0x3f
 8005af4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8005af8:	23a5      	movs	r3, #165	@ 0xa5
 8005afa:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005afe:	f107 0310 	add.w	r3, r7, #16
 8005b02:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005b06:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b0a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005b0e:	f107 030f 	add.w	r3, r7, #15
 8005b12:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005b16:	2301      	movs	r3, #1
 8005b18:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005b1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005b20:	2100      	movs	r1, #0
 8005b22:	4618      	mov	r0, r3
 8005b24:	f001 f84e 	bl	8006bc4 <hci_send_req>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	da01      	bge.n	8005b32 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8005b2e:	23ff      	movs	r3, #255	@ 0xff
 8005b30:	e004      	b.n	8005b3c <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8005b32:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b36:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005b3a:	781b      	ldrb	r3, [r3, #0]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b088      	sub	sp, #32
 8005b4a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005b50:	f107 0308 	add.w	r3, r7, #8
 8005b54:	2218      	movs	r2, #24
 8005b56:	2100      	movs	r1, #0
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 fda9 	bl	80066b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005b5e:	233f      	movs	r3, #63	@ 0x3f
 8005b60:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8005b62:	f240 1301 	movw	r3, #257	@ 0x101
 8005b66:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005b68:	1dfb      	adds	r3, r7, #7
 8005b6a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005b70:	f107 0308 	add.w	r3, r7, #8
 8005b74:	2100      	movs	r1, #0
 8005b76:	4618      	mov	r0, r3
 8005b78:	f001 f824 	bl	8006bc4 <hci_send_req>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	da01      	bge.n	8005b86 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8005b82:	23ff      	movs	r3, #255	@ 0xff
 8005b84:	e000      	b.n	8005b88 <aci_gatt_init+0x42>
  return status;
 8005b86:	79fb      	ldrb	r3, [r7, #7]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3720      	adds	r7, #32
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8005b90:	b590      	push	{r4, r7, lr}
 8005b92:	b0cf      	sub	sp, #316	@ 0x13c
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	4604      	mov	r4, r0
 8005b98:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8005b9c:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8005ba0:	6001      	str	r1, [r0, #0]
 8005ba2:	4610      	mov	r0, r2
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005baa:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005bae:	4622      	mov	r2, r4
 8005bb0:	701a      	strb	r2, [r3, #0]
 8005bb2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005bb6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8005bba:	4602      	mov	r2, r0
 8005bbc:	701a      	strb	r2, [r3, #0]
 8005bbe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005bc2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005bc6:	460a      	mov	r2, r1
 8005bc8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8005bca:	f107 0310 	add.w	r3, r7, #16
 8005bce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8005bd2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005bd6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d00a      	beq.n	8005bf6 <aci_gatt_add_service+0x66>
 8005be0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005be4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d101      	bne.n	8005bf2 <aci_gatt_add_service+0x62>
 8005bee:	2311      	movs	r3, #17
 8005bf0:	e002      	b.n	8005bf8 <aci_gatt_add_service+0x68>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e000      	b.n	8005bf8 <aci_gatt_add_service+0x68>
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	f107 0210 	add.w	r2, r7, #16
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005c02:	f107 030c 	add.w	r3, r7, #12
 8005c06:	2203      	movs	r2, #3
 8005c08:	2100      	movs	r1, #0
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 fd50 	bl	80066b0 <Osal_MemSet>
  int index_input = 0;
 8005c10:	2300      	movs	r3, #0
 8005c12:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8005c16:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005c1a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005c1e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8005c22:	7812      	ldrb	r2, [r2, #0]
 8005c24:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005c26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8005c30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005c34:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d002      	beq.n	8005c44 <aci_gatt_add_service+0xb4>
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d004      	beq.n	8005c4c <aci_gatt_add_service+0xbc>
 8005c42:	e007      	b.n	8005c54 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8005c44:	2302      	movs	r3, #2
 8005c46:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8005c4a:	e005      	b.n	8005c58 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8005c4c:	2310      	movs	r3, #16
 8005c4e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8005c52:	e001      	b.n	8005c58 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8005c54:	2397      	movs	r3, #151	@ 0x97
 8005c56:	e06c      	b.n	8005d32 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8005c58:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005c5c:	1c58      	adds	r0, r3, #1
 8005c5e:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8005c62:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005c66:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005c6a:	6819      	ldr	r1, [r3, #0]
 8005c6c:	f000 fd10 	bl	8006690 <Osal_MemCpy>
    index_input += size;
 8005c70:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8005c74:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005c78:	4413      	add	r3, r2
 8005c7a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8005c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c82:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005c86:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8005c8a:	7812      	ldrb	r2, [r2, #0]
 8005c8c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005c8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c92:	3301      	adds	r3, #1
 8005c94:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8005c98:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c9c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005ca0:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8005ca4:	7812      	ldrb	r2, [r2, #0]
 8005ca6:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8005ca8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005cac:	3301      	adds	r3, #1
 8005cae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005cb2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005cb6:	2218      	movs	r2, #24
 8005cb8:	2100      	movs	r1, #0
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 fcf8 	bl	80066b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005cc0:	233f      	movs	r3, #63	@ 0x3f
 8005cc2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8005cc6:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005cca:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005cce:	f107 0310 	add.w	r3, r7, #16
 8005cd2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005cd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005cda:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8005cde:	f107 030c 	add.w	r3, r7, #12
 8005ce2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005cec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 ff66 	bl	8006bc4 <hci_send_req>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	da01      	bge.n	8005d02 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8005cfe:	23ff      	movs	r3, #255	@ 0xff
 8005d00:	e017      	b.n	8005d32 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8005d02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005d06:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d005      	beq.n	8005d1c <aci_gatt_add_service+0x18c>
    return resp.Status;
 8005d10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005d14:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	e00a      	b.n	8005d32 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8005d1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005d20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005d24:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8005d2e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd90      	pop	{r4, r7, pc}

08005d3c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8005d3c:	b590      	push	{r4, r7, lr}
 8005d3e:	b0d1      	sub	sp, #324	@ 0x144
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	4604      	mov	r4, r0
 8005d44:	4608      	mov	r0, r1
 8005d46:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8005d4a:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8005d4e:	600a      	str	r2, [r1, #0]
 8005d50:	4619      	mov	r1, r3
 8005d52:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005d56:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8005d5a:	4622      	mov	r2, r4
 8005d5c:	801a      	strh	r2, [r3, #0]
 8005d5e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005d62:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005d66:	4602      	mov	r2, r0
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005d6e:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8005d72:	460a      	mov	r2, r1
 8005d74:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8005d76:	f107 0318 	add.w	r3, r7, #24
 8005d7a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8005d7e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005d82:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d00a      	beq.n	8005da2 <aci_gatt_add_char+0x66>
 8005d8c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005d90:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d101      	bne.n	8005d9e <aci_gatt_add_char+0x62>
 8005d9a:	2313      	movs	r3, #19
 8005d9c:	e002      	b.n	8005da4 <aci_gatt_add_char+0x68>
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e000      	b.n	8005da4 <aci_gatt_add_char+0x68>
 8005da2:	2305      	movs	r3, #5
 8005da4:	f107 0218 	add.w	r2, r7, #24
 8005da8:	4413      	add	r3, r2
 8005daa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005dae:	f107 0314 	add.w	r3, r7, #20
 8005db2:	2203      	movs	r2, #3
 8005db4:	2100      	movs	r1, #0
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 fc7a 	bl	80066b0 <Osal_MemSet>
  int index_input = 0;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8005dc2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005dc6:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005dca:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8005dce:	8812      	ldrh	r2, [r2, #0]
 8005dd0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005dd2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005dd6:	3302      	adds	r3, #2
 8005dd8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8005ddc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005de0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005de4:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8005de8:	7812      	ldrb	r2, [r2, #0]
 8005dea:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005dec:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005df0:	3301      	adds	r3, #1
 8005df2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8005df6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005dfa:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d002      	beq.n	8005e0a <aci_gatt_add_char+0xce>
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d004      	beq.n	8005e12 <aci_gatt_add_char+0xd6>
 8005e08:	e007      	b.n	8005e1a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8005e10:	e005      	b.n	8005e1e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8005e12:	2310      	movs	r3, #16
 8005e14:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8005e18:	e001      	b.n	8005e1e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8005e1a:	2397      	movs	r3, #151	@ 0x97
 8005e1c:	e091      	b.n	8005f42 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8005e1e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005e22:	1cd8      	adds	r0, r3, #3
 8005e24:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8005e28:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005e2c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005e30:	6819      	ldr	r1, [r3, #0]
 8005e32:	f000 fc2d 	bl	8006690 <Osal_MemCpy>
    index_input += size;
 8005e36:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8005e3a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8005e3e:	4413      	add	r3, r2
 8005e40:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8005e44:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005e48:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005e4c:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8005e50:	8812      	ldrh	r2, [r2, #0]
 8005e52:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005e54:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005e58:	3302      	adds	r3, #2
 8005e5a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8005e5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005e62:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8005e66:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8005e68:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8005e72:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005e76:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8005e7a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8005e7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005e80:	3301      	adds	r3, #1
 8005e82:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8005e86:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005e8a:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8005e8e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8005e90:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005e94:	3301      	adds	r3, #1
 8005e96:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8005e9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005e9e:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8005ea2:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8005ea4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8005eae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005eb2:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8005eb6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8005eb8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005ec2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005ec6:	2218      	movs	r2, #24
 8005ec8:	2100      	movs	r1, #0
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 fbf0 	bl	80066b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005ed0:	233f      	movs	r3, #63	@ 0x3f
 8005ed2:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8005ed6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005eda:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8005ede:	f107 0318 	add.w	r3, r7, #24
 8005ee2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8005ee6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005eea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8005eee:	f107 0314 	add.w	r3, r7, #20
 8005ef2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005efc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005f00:	2100      	movs	r1, #0
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 fe5e 	bl	8006bc4 <hci_send_req>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	da01      	bge.n	8005f12 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8005f0e:	23ff      	movs	r3, #255	@ 0xff
 8005f10:	e017      	b.n	8005f42 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8005f12:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005f16:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d005      	beq.n	8005f2c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8005f20:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005f24:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	e00a      	b.n	8005f42 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8005f2c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005f30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005f34:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8005f3e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd90      	pop	{r4, r7, pc}

08005f4c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8005f4c:	b5b0      	push	{r4, r5, r7, lr}
 8005f4e:	b0cc      	sub	sp, #304	@ 0x130
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	4605      	mov	r5, r0
 8005f54:	460c      	mov	r4, r1
 8005f56:	4610      	mov	r0, r2
 8005f58:	4619      	mov	r1, r3
 8005f5a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f5e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005f62:	462a      	mov	r2, r5
 8005f64:	801a      	strh	r2, [r3, #0]
 8005f66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f6a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005f6e:	4622      	mov	r2, r4
 8005f70:	801a      	strh	r2, [r3, #0]
 8005f72:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f76:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	701a      	strb	r2, [r3, #0]
 8005f7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f82:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8005f86:	460a      	mov	r2, r1
 8005f88:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8005f8a:	f107 0310 	add.w	r3, r7, #16
 8005f8e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005f92:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f96:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8005fa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005fa8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005fac:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005fb0:	8812      	ldrh	r2, [r2, #0]
 8005fb2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005fb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005fb8:	3302      	adds	r3, #2
 8005fba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8005fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005fc2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005fc6:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8005fca:	8812      	ldrh	r2, [r2, #0]
 8005fcc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005fce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005fd2:	3302      	adds	r3, #2
 8005fd4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8005fd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005fdc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005fe0:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8005fe4:	7812      	ldrb	r2, [r2, #0]
 8005fe6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005fe8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005fec:	3301      	adds	r3, #1
 8005fee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8005ff2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005ff6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005ffa:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8005ffe:	7812      	ldrb	r2, [r2, #0]
 8006000:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006002:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006006:	3301      	adds	r3, #1
 8006008:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800600c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006010:	1d98      	adds	r0, r3, #6
 8006012:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006016:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	461a      	mov	r2, r3
 800601e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8006022:	f000 fb35 	bl	8006690 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8006026:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800602a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006034:	4413      	add	r3, r2
 8006036:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800603a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800603e:	2218      	movs	r2, #24
 8006040:	2100      	movs	r1, #0
 8006042:	4618      	mov	r0, r3
 8006044:	f000 fb34 	bl	80066b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006048:	233f      	movs	r3, #63	@ 0x3f
 800604a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800604e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8006052:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006056:	f107 0310 	add.w	r3, r7, #16
 800605a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800605e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006062:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006066:	f107 030f 	add.w	r3, r7, #15
 800606a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800606e:	2301      	movs	r3, #1
 8006070:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006074:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006078:	2100      	movs	r1, #0
 800607a:	4618      	mov	r0, r3
 800607c:	f000 fda2 	bl	8006bc4 <hci_send_req>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	da01      	bge.n	800608a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8006086:	23ff      	movs	r3, #255	@ 0xff
 8006088:	e004      	b.n	8006094 <aci_gatt_update_char_value+0x148>
  return status;
 800608a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800608e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006092:	781b      	ldrb	r3, [r3, #0]
}
 8006094:	4618      	mov	r0, r3
 8006096:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800609a:	46bd      	mov	sp, r7
 800609c:	bdb0      	pop	{r4, r5, r7, pc}

0800609e <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b0cc      	sub	sp, #304	@ 0x130
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	4602      	mov	r2, r0
 80060a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060aa:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80060ae:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 80060b0:	f107 0310 	add.w	r3, r7, #16
 80060b4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80060b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060bc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80060c0:	2200      	movs	r2, #0
 80060c2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80060c4:	2300      	movs	r3, #0
 80060c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80060ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80060ce:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80060d2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80060d6:	8812      	ldrh	r2, [r2, #0]
 80060d8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80060da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80060de:	3302      	adds	r3, #2
 80060e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80060e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80060e8:	2218      	movs	r2, #24
 80060ea:	2100      	movs	r1, #0
 80060ec:	4618      	mov	r0, r3
 80060ee:	f000 fadf 	bl	80066b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80060f2:	233f      	movs	r3, #63	@ 0x3f
 80060f4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 80060f8:	f240 1325 	movw	r3, #293	@ 0x125
 80060fc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006100:	f107 0310 	add.w	r3, r7, #16
 8006104:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006108:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800610c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006110:	f107 030f 	add.w	r3, r7, #15
 8006114:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006118:	2301      	movs	r3, #1
 800611a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800611e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006122:	2100      	movs	r1, #0
 8006124:	4618      	mov	r0, r3
 8006126:	f000 fd4d 	bl	8006bc4 <hci_send_req>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	da01      	bge.n	8006134 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8006130:	23ff      	movs	r3, #255	@ 0xff
 8006132:	e004      	b.n	800613e <aci_gatt_confirm_indication+0xa0>
  return status;
 8006134:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006138:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800613c:	781b      	ldrb	r3, [r3, #0]
}
 800613e:	4618      	mov	r0, r3
 8006140:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <aci_gatt_update_char_value_ext>:
                                           uint8_t Update_Type,
                                           uint16_t Char_Length,
                                           uint16_t Value_Offset,
                                           uint8_t Value_Length,
                                           const uint8_t* Value )
{
 8006148:	b5b0      	push	{r4, r5, r7, lr}
 800614a:	b0cc      	sub	sp, #304	@ 0x130
 800614c:	af00      	add	r7, sp, #0
 800614e:	4605      	mov	r5, r0
 8006150:	460c      	mov	r4, r1
 8006152:	4610      	mov	r0, r2
 8006154:	4619      	mov	r1, r3
 8006156:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800615a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800615e:	462a      	mov	r2, r5
 8006160:	801a      	strh	r2, [r3, #0]
 8006162:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006166:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800616a:	4622      	mov	r2, r4
 800616c:	801a      	strh	r2, [r3, #0]
 800616e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006172:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8006176:	4602      	mov	r2, r0
 8006178:	801a      	strh	r2, [r3, #0]
 800617a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800617e:	f2a3 132f 	subw	r3, r3, #303	@ 0x12f
 8006182:	460a      	mov	r2, r1
 8006184:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_ext_cp0 *cp0 = (aci_gatt_update_char_value_ext_cp0*)(cmd_buffer);
 8006186:	f107 0310 	add.w	r3, r7, #16
 800618a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800618e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006192:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006196:	2200      	movs	r2, #0
 8006198:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800619a:	2300      	movs	r3, #0
 800619c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Handle_To_Notify = Conn_Handle_To_Notify;
 80061a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80061a4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80061a8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80061ac:	8812      	ldrh	r2, [r2, #0]
 80061ae:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80061b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80061b4:	3302      	adds	r3, #2
 80061b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 80061ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80061be:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80061c2:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80061c6:	8812      	ldrh	r2, [r2, #0]
 80061c8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80061ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80061ce:	3302      	adds	r3, #2
 80061d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 80061d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80061d8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80061dc:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80061e0:	8812      	ldrh	r2, [r2, #0]
 80061e2:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80061e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80061e8:	3302      	adds	r3, #2
 80061ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Update_Type = Update_Type;
 80061ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80061f2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80061f6:	f2a2 122f 	subw	r2, r2, #303	@ 0x12f
 80061fa:	7812      	ldrb	r2, [r2, #0]
 80061fc:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80061fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006202:	3301      	adds	r3, #1
 8006204:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Length = Char_Length;
 8006208:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800620c:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 8006210:	f8a3 2007 	strh.w	r2, [r3, #7]
  index_input += 2;
 8006214:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006218:	3302      	adds	r3, #2
 800621a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Value_Offset = Value_Offset;
 800621e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006222:	f8b7 2144 	ldrh.w	r2, [r7, #324]	@ 0x144
 8006226:	f8a3 2009 	strh.w	r2, [r3, #9]
  index_input += 2;
 800622a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800622e:	3302      	adds	r3, #2
 8006230:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Value_Length = Value_Length;
 8006234:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006238:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800623c:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800623e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006242:	3301      	adds	r3, #1
 8006244:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Value_Length );
 8006248:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800624c:	330c      	adds	r3, #12
 800624e:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8006252:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 8006256:	4618      	mov	r0, r3
 8006258:	f000 fa1a 	bl	8006690 <Osal_MemCpy>
  index_input += Value_Length;
 800625c:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
 8006260:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006264:	4413      	add	r3, r2
 8006266:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800626a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800626e:	2218      	movs	r2, #24
 8006270:	2100      	movs	r1, #0
 8006272:	4618      	mov	r0, r3
 8006274:	f000 fa1c 	bl	80066b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006278:	233f      	movs	r3, #63	@ 0x3f
 800627a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x12c;
 800627e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8006282:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006286:	f107 0310 	add.w	r3, r7, #16
 800628a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800628e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006292:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006296:	f107 030f 	add.w	r3, r7, #15
 800629a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800629e:	2301      	movs	r3, #1
 80062a0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80062a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80062a8:	2100      	movs	r1, #0
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 fc8a 	bl	8006bc4 <hci_send_req>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	da01      	bge.n	80062ba <aci_gatt_update_char_value_ext+0x172>
    return BLE_STATUS_TIMEOUT;
 80062b6:	23ff      	movs	r3, #255	@ 0xff
 80062b8:	e004      	b.n	80062c4 <aci_gatt_update_char_value_ext+0x17c>
  return status;
 80062ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80062be:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80062c2:	781b      	ldrb	r3, [r3, #0]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bdb0      	pop	{r4, r5, r7, pc}

080062ce <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b0cc      	sub	sp, #304	@ 0x130
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80062d8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80062e2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80062e6:	4602      	mov	r2, r0
 80062e8:	701a      	strb	r2, [r3, #0]
 80062ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80062ee:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80062f2:	460a      	mov	r2, r1
 80062f4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80062f6:	f107 0310 	add.w	r3, r7, #16
 80062fa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80062fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006302:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006306:	2200      	movs	r2, #0
 8006308:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800630a:	2300      	movs	r3, #0
 800630c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8006310:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006314:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006318:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800631c:	7812      	ldrb	r2, [r2, #0]
 800631e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006320:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006324:	3301      	adds	r3, #1
 8006326:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800632a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800632e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006332:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006336:	7812      	ldrb	r2, [r2, #0]
 8006338:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800633a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800633e:	3301      	adds	r3, #1
 8006340:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8006344:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006348:	1c98      	adds	r0, r3, #2
 800634a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800634e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006352:	781a      	ldrb	r2, [r3, #0]
 8006354:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006358:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800635c:	6819      	ldr	r1, [r3, #0]
 800635e:	f000 f997 	bl	8006690 <Osal_MemCpy>
  index_input += Length;
 8006362:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006366:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006370:	4413      	add	r3, r2
 8006372:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006376:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800637a:	2218      	movs	r2, #24
 800637c:	2100      	movs	r1, #0
 800637e:	4618      	mov	r0, r3
 8006380:	f000 f996 	bl	80066b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006384:	233f      	movs	r3, #63	@ 0x3f
 8006386:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800638a:	230c      	movs	r3, #12
 800638c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006390:	f107 0310 	add.w	r3, r7, #16
 8006394:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006398:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800639c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80063a0:	f107 030f 	add.w	r3, r7, #15
 80063a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80063a8:	2301      	movs	r3, #1
 80063aa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80063ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80063b2:	2100      	movs	r1, #0
 80063b4:	4618      	mov	r0, r3
 80063b6:	f000 fc05 	bl	8006bc4 <hci_send_req>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	da01      	bge.n	80063c4 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80063c0:	23ff      	movs	r3, #255	@ 0xff
 80063c2:	e004      	b.n	80063ce <aci_hal_write_config_data+0x100>
  return status;
 80063c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80063c8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80063cc:	781b      	ldrb	r3, [r3, #0]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b0cc      	sub	sp, #304	@ 0x130
 80063dc:	af00      	add	r7, sp, #0
 80063de:	4602      	mov	r2, r0
 80063e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80063e4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80063e8:	701a      	strb	r2, [r3, #0]
 80063ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80063ee:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80063f2:	460a      	mov	r2, r1
 80063f4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80063f6:	f107 0310 	add.w	r3, r7, #16
 80063fa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80063fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006402:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006406:	2200      	movs	r2, #0
 8006408:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800640a:	2300      	movs	r3, #0
 800640c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8006410:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006414:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006418:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800641c:	7812      	ldrb	r2, [r2, #0]
 800641e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006420:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006424:	3301      	adds	r3, #1
 8006426:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800642a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800642e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006432:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006436:	7812      	ldrb	r2, [r2, #0]
 8006438:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800643a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800643e:	3301      	adds	r3, #1
 8006440:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006444:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006448:	2218      	movs	r2, #24
 800644a:	2100      	movs	r1, #0
 800644c:	4618      	mov	r0, r3
 800644e:	f000 f92f 	bl	80066b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006452:	233f      	movs	r3, #63	@ 0x3f
 8006454:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8006458:	230f      	movs	r3, #15
 800645a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800645e:	f107 0310 	add.w	r3, r7, #16
 8006462:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006466:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800646a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800646e:	f107 030f 	add.w	r3, r7, #15
 8006472:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006476:	2301      	movs	r3, #1
 8006478:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800647c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006480:	2100      	movs	r1, #0
 8006482:	4618      	mov	r0, r3
 8006484:	f000 fb9e 	bl	8006bc4 <hci_send_req>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	da01      	bge.n	8006492 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800648e:	23ff      	movs	r3, #255	@ 0xff
 8006490:	e004      	b.n	800649c <aci_hal_set_tx_power_level+0xc4>
  return status;
 8006492:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006496:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800649a:	781b      	ldrb	r3, [r3, #0]
}
 800649c:	4618      	mov	r0, r3
 800649e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b0cc      	sub	sp, #304	@ 0x130
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	4602      	mov	r2, r0
 80064ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80064b2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80064b6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80064b8:	f107 0310 	add.w	r3, r7, #16
 80064bc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80064c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80064c4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80064c8:	2200      	movs	r2, #0
 80064ca:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80064cc:	2300      	movs	r3, #0
 80064ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80064d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80064d6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80064da:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80064de:	8812      	ldrh	r2, [r2, #0]
 80064e0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80064e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80064e6:	3302      	adds	r3, #2
 80064e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80064ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80064f0:	2218      	movs	r2, #24
 80064f2:	2100      	movs	r1, #0
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 f8db 	bl	80066b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80064fa:	233f      	movs	r3, #63	@ 0x3f
 80064fc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8006500:	2318      	movs	r3, #24
 8006502:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006506:	f107 0310 	add.w	r3, r7, #16
 800650a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800650e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006512:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006516:	f107 030f 	add.w	r3, r7, #15
 800651a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800651e:	2301      	movs	r3, #1
 8006520:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006524:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006528:	2100      	movs	r1, #0
 800652a:	4618      	mov	r0, r3
 800652c:	f000 fb4a 	bl	8006bc4 <hci_send_req>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	da01      	bge.n	800653a <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8006536:	23ff      	movs	r3, #255	@ 0xff
 8006538:	e004      	b.n	8006544 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800653a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800653e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006542:	781b      	ldrb	r3, [r3, #0]
}
 8006544:	4618      	mov	r0, r3
 8006546:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b088      	sub	sp, #32
 8006552:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006554:	2300      	movs	r3, #0
 8006556:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006558:	f107 0308 	add.w	r3, r7, #8
 800655c:	2218      	movs	r2, #24
 800655e:	2100      	movs	r1, #0
 8006560:	4618      	mov	r0, r3
 8006562:	f000 f8a5 	bl	80066b0 <Osal_MemSet>
  rq.ogf = 0x03;
 8006566:	2303      	movs	r3, #3
 8006568:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800656a:	2303      	movs	r3, #3
 800656c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800656e:	1dfb      	adds	r3, r7, #7
 8006570:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006572:	2301      	movs	r3, #1
 8006574:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006576:	f107 0308 	add.w	r3, r7, #8
 800657a:	2100      	movs	r1, #0
 800657c:	4618      	mov	r0, r3
 800657e:	f000 fb21 	bl	8006bc4 <hci_send_req>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	da01      	bge.n	800658c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006588:	23ff      	movs	r3, #255	@ 0xff
 800658a:	e000      	b.n	800658e <hci_reset+0x40>
  return status;
 800658c:	79fb      	ldrb	r3, [r7, #7]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3720      	adds	r7, #32
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8006596:	b590      	push	{r4, r7, lr}
 8006598:	b0cd      	sub	sp, #308	@ 0x134
 800659a:	af00      	add	r7, sp, #0
 800659c:	4604      	mov	r4, r0
 800659e:	4608      	mov	r0, r1
 80065a0:	4611      	mov	r1, r2
 80065a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065a6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80065aa:	4622      	mov	r2, r4
 80065ac:	701a      	strb	r2, [r3, #0]
 80065ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065b2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80065b6:	4602      	mov	r2, r0
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065be:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80065c2:	460a      	mov	r2, r1
 80065c4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80065c6:	f107 0310 	add.w	r3, r7, #16
 80065ca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80065ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065d2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80065d6:	2200      	movs	r2, #0
 80065d8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80065da:	2300      	movs	r3, #0
 80065dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80065e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80065e4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80065e8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80065ec:	7812      	ldrb	r2, [r2, #0]
 80065ee:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80065f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80065f4:	3301      	adds	r3, #1
 80065f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 80065fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80065fe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006602:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006606:	7812      	ldrb	r2, [r2, #0]
 8006608:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800660a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800660e:	3301      	adds	r3, #1
 8006610:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8006614:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006618:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800661c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006620:	7812      	ldrb	r2, [r2, #0]
 8006622:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006624:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006628:	3301      	adds	r3, #1
 800662a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800662e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006632:	2218      	movs	r2, #24
 8006634:	2100      	movs	r1, #0
 8006636:	4618      	mov	r0, r3
 8006638:	f000 f83a 	bl	80066b0 <Osal_MemSet>
  rq.ogf = 0x08;
 800663c:	2308      	movs	r3, #8
 800663e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8006642:	2331      	movs	r3, #49	@ 0x31
 8006644:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006648:	f107 0310 	add.w	r3, r7, #16
 800664c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006650:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006654:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006658:	f107 030f 	add.w	r3, r7, #15
 800665c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006660:	2301      	movs	r3, #1
 8006662:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006666:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800666a:	2100      	movs	r1, #0
 800666c:	4618      	mov	r0, r3
 800666e:	f000 faa9 	bl	8006bc4 <hci_send_req>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	da01      	bge.n	800667c <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8006678:	23ff      	movs	r3, #255	@ 0xff
 800667a:	e004      	b.n	8006686 <hci_le_set_default_phy+0xf0>
  return status;
 800667c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006680:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006684:	781b      	ldrb	r3, [r3, #0]
}
 8006686:	4618      	mov	r0, r3
 8006688:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800668c:	46bd      	mov	sp, r7
 800668e:	bd90      	pop	{r4, r7, pc}

08006690 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	68b9      	ldr	r1, [r7, #8]
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f002 fa1b 	bl	8008adc <memcpy>
 80066a6:	4603      	mov	r3, r0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	68b9      	ldr	r1, [r7, #8]
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f002 f9df 	bl	8008a84 <memset>
 80066c6:	4603      	mov	r3, r0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80066d0:	b480      	push	{r7}
 80066d2:	af00      	add	r7, sp, #0
  return;
 80066d4:	bf00      	nop
}
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80066de:	b480      	push	{r7}
 80066e0:	af00      	add	r7, sp, #0
  return;
 80066e2:	bf00      	nop
}
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
  return;
 80066f0:	bf00      	nop
}
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80066fa:	b480      	push	{r7}
 80066fc:	af00      	add	r7, sp, #0
  return;
 80066fe:	bf00      	nop
}
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8006708:	b480      	push	{r7}
 800670a:	af00      	add	r7, sp, #0
  return;
 800670c:	bf00      	nop
}
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8006716:	b480      	push	{r7}
 8006718:	af00      	add	r7, sp, #0
  return;
 800671a:	bf00      	nop
}
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8006724:	b480      	push	{r7}
 8006726:	af00      	add	r7, sp, #0
  return;
 8006728:	bf00      	nop
}
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8006732:	b480      	push	{r7}
 8006734:	af00      	add	r7, sp, #0
  return;
 8006736:	bf00      	nop
}
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8006740:	b480      	push	{r7}
 8006742:	af00      	add	r7, sp, #0
  return;
 8006744:	bf00      	nop
}
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800674e:	b480      	push	{r7}
 8006750:	af00      	add	r7, sp, #0
  return;
 8006752:	bf00      	nop
}
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800675c:	b480      	push	{r7}
 800675e:	af00      	add	r7, sp, #0
  return;
 8006760:	bf00      	nop
}
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800676a:	b480      	push	{r7}
 800676c:	af00      	add	r7, sp, #0
  return;
 800676e:	bf00      	nop
}
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8006778:	b480      	push	{r7}
 800677a:	af00      	add	r7, sp, #0
  return;
 800677c:	bf00      	nop
}
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8006786:	b480      	push	{r7}
 8006788:	af00      	add	r7, sp, #0
  return;
 800678a:	bf00      	nop
}
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8006794:	b480      	push	{r7}
 8006796:	af00      	add	r7, sp, #0
  return;
 8006798:	bf00      	nop
}
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80067a2:	b480      	push	{r7}
 80067a4:	af00      	add	r7, sp, #0
  return;
 80067a6:	bf00      	nop
}
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80067b0:	b480      	push	{r7}
 80067b2:	af00      	add	r7, sp, #0
  return;
 80067b4:	bf00      	nop
}
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
	...

080067c0 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80067c4:	4b04      	ldr	r3, [pc, #16]	@ (80067d8 <SVCCTL_Init+0x18>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80067ca:	4b04      	ldr	r3, [pc, #16]	@ (80067dc <SVCCTL_Init+0x1c>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80067d0:	f000 f806 	bl	80067e0 <SVCCTL_SvcInit>

  return;
 80067d4:	bf00      	nop
}
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	2000002c 	.word	0x2000002c
 80067dc:	2000004c 	.word	0x2000004c

080067e0 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0
  BAS_Init();
 80067e4:	f7ff ff74 	bl	80066d0 <BAS_Init>

  BLS_Init();
 80067e8:	f7ff ff79 	bl	80066de <BLS_Init>

  CRS_STM_Init();
 80067ec:	f7ff ff7e 	bl	80066ec <CRS_STM_Init>

  DIS_Init();
 80067f0:	f7ff ff83 	bl	80066fa <DIS_Init>

  EDS_STM_Init();
 80067f4:	f7ff ff88 	bl	8006708 <EDS_STM_Init>

  HIDS_Init();
 80067f8:	f7ff ff8d 	bl	8006716 <HIDS_Init>

  HRS_Init();
 80067fc:	f7ff ff92 	bl	8006724 <HRS_Init>

  HTS_Init();
 8006800:	f7ff ff97 	bl	8006732 <HTS_Init>

  IAS_Init();
 8006804:	f7ff ff9c 	bl	8006740 <IAS_Init>

  LLS_Init();
 8006808:	f7ff ffa1 	bl	800674e <LLS_Init>

  TPS_Init();
 800680c:	f7ff ffa6 	bl	800675c <TPS_Init>

  MOTENV_STM_Init();
 8006810:	f7ff ffab 	bl	800676a <MOTENV_STM_Init>

  P2PS_STM_Init();
 8006814:	f7ff ffb0 	bl	8006778 <P2PS_STM_Init>

  ZDD_STM_Init();
 8006818:	f7ff ffb5 	bl	8006786 <ZDD_STM_Init>

  OTAS_STM_Init();
 800681c:	f7ff ffba 	bl	8006794 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8006820:	f7ff ffc6 	bl	80067b0 <BVOPUS_STM_Init>

  MESH_Init();
 8006824:	f7ff ffbd 	bl	80067a2 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8006828:	f001 fb66 	bl	8007ef8 <SVCCTL_InitCustomSvc>
  
  return;
 800682c:	bf00      	nop
}
 800682e:	bd80      	pop	{r7, pc}

08006830 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8006838:	4b09      	ldr	r3, [pc, #36]	@ (8006860 <SVCCTL_RegisterSvcHandler+0x30>)
 800683a:	7f1b      	ldrb	r3, [r3, #28]
 800683c:	4619      	mov	r1, r3
 800683e:	4a08      	ldr	r2, [pc, #32]	@ (8006860 <SVCCTL_RegisterSvcHandler+0x30>)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8006846:	4b06      	ldr	r3, [pc, #24]	@ (8006860 <SVCCTL_RegisterSvcHandler+0x30>)
 8006848:	7f1b      	ldrb	r3, [r3, #28]
 800684a:	3301      	adds	r3, #1
 800684c:	b2da      	uxtb	r2, r3
 800684e:	4b04      	ldr	r3, [pc, #16]	@ (8006860 <SVCCTL_RegisterSvcHandler+0x30>)
 8006850:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8006852:	bf00      	nop
}
 8006854:	370c      	adds	r7, #12
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	2000002c 	.word	0x2000002c

08006864 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	3301      	adds	r3, #1
 8006870:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8006872:	2300      	movs	r3, #0
 8006874:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	2bff      	cmp	r3, #255	@ 0xff
 800687c:	d125      	bne.n	80068ca <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	3302      	adds	r3, #2
 8006882:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	881b      	ldrh	r3, [r3, #0]
 8006888:	b29b      	uxth	r3, r3
 800688a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800688e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006892:	d118      	bne.n	80068c6 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006894:	2300      	movs	r3, #0
 8006896:	757b      	strb	r3, [r7, #21]
 8006898:	e00d      	b.n	80068b6 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800689a:	7d7b      	ldrb	r3, [r7, #21]
 800689c:	4a1a      	ldr	r2, [pc, #104]	@ (8006908 <SVCCTL_UserEvtRx+0xa4>)
 800689e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	4798      	blx	r3
 80068a6:	4603      	mov	r3, r0
 80068a8:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80068aa:	7dfb      	ldrb	r3, [r7, #23]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d108      	bne.n	80068c2 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80068b0:	7d7b      	ldrb	r3, [r7, #21]
 80068b2:	3301      	adds	r3, #1
 80068b4:	757b      	strb	r3, [r7, #21]
 80068b6:	4b14      	ldr	r3, [pc, #80]	@ (8006908 <SVCCTL_UserEvtRx+0xa4>)
 80068b8:	7f1b      	ldrb	r3, [r3, #28]
 80068ba:	7d7a      	ldrb	r2, [r7, #21]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d3ec      	bcc.n	800689a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80068c0:	e002      	b.n	80068c8 <SVCCTL_UserEvtRx+0x64>
              break;
 80068c2:	bf00      	nop
          break;
 80068c4:	e000      	b.n	80068c8 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80068c6:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80068c8:	e000      	b.n	80068cc <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80068ca:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 80068cc:	7dfb      	ldrb	r3, [r7, #23]
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d00f      	beq.n	80068f2 <SVCCTL_UserEvtRx+0x8e>
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	dc10      	bgt.n	80068f8 <SVCCTL_UserEvtRx+0x94>
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <SVCCTL_UserEvtRx+0x7c>
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d006      	beq.n	80068ec <SVCCTL_UserEvtRx+0x88>
 80068de:	e00b      	b.n	80068f8 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 ff8f 	bl	8007804 <SVCCTL_App_Notification>
 80068e6:	4603      	mov	r3, r0
 80068e8:	75bb      	strb	r3, [r7, #22]
      break;
 80068ea:	e008      	b.n	80068fe <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80068ec:	2301      	movs	r3, #1
 80068ee:	75bb      	strb	r3, [r7, #22]
      break;
 80068f0:	e005      	b.n	80068fe <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80068f2:	2300      	movs	r3, #0
 80068f4:	75bb      	strb	r3, [r7, #22]
      break;
 80068f6:	e002      	b.n	80068fe <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80068f8:	2301      	movs	r3, #1
 80068fa:	75bb      	strb	r3, [r7, #22]
      break;
 80068fc:	bf00      	nop
  }

  return (return_status);
 80068fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3718      	adds	r7, #24
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	2000002c 	.word	0x2000002c

0800690c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b088      	sub	sp, #32
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006914:	f107 030c 	add.w	r3, r7, #12
 8006918:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	212e      	movs	r1, #46	@ 0x2e
 8006924:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8006928:	f000 fae8 	bl	8006efc <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	330b      	adds	r3, #11
 8006930:	78db      	ldrb	r3, [r3, #3]
}
 8006932:	4618      	mov	r0, r3
 8006934:	3720      	adds	r7, #32
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b088      	sub	sp, #32
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006942:	f107 030c 	add.w	r3, r7, #12
 8006946:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	210f      	movs	r1, #15
 8006952:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8006956:	f000 fad1 	bl	8006efc <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	330b      	adds	r3, #11
 800695e:	78db      	ldrb	r3, [r3, #3]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3720      	adds	r7, #32
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b088      	sub	sp, #32
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006970:	f107 030c 	add.w	r3, r7, #12
 8006974:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	2110      	movs	r1, #16
 800697c:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8006980:	f000 fabc 	bl	8006efc <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	330b      	adds	r3, #11
 8006988:	78db      	ldrb	r3, [r3, #3]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3720      	adds	r7, #32
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
	...

08006994 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8006994:	b480      	push	{r7}
 8006996:	b08b      	sub	sp, #44	@ 0x2c
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800699c:	2300      	movs	r3, #0
 800699e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80069a0:	2300      	movs	r3, #0
 80069a2:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80069a4:	2300      	movs	r3, #0
 80069a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80069a8:	2300      	movs	r3, #0
 80069aa:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80069ac:	2300      	movs	r3, #0
 80069ae:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80069b0:	2300      	movs	r3, #0
 80069b2:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80069b4:	2300      	movs	r3, #0
 80069b6:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80069b8:	2300      	movs	r3, #0
 80069ba:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80069bc:	4b4a      	ldr	r3, [pc, #296]	@ (8006ae8 <SHCI_GetWirelessFwInfo+0x154>)
 80069be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80069c4:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80069ce:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a44      	ldr	r2, [pc, #272]	@ (8006aec <SHCI_GetWirelessFwInfo+0x158>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d10f      	bne.n	8006a00 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	695b      	ldr	r3, [r3, #20]
 80069e4:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	69db      	ldr	r3, [r3, #28]
 80069f0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	617b      	str	r3, [r7, #20]
 80069fe:	e01a      	b.n	8006a36 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006a08:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8006a0c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a38:	0e1b      	lsrs	r3, r3, #24
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a42:	0c1b      	lsrs	r3, r3, #16
 8006a44:	b2da      	uxtb	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4c:	0a1b      	lsrs	r3, r3, #8
 8006a4e:	b2da      	uxtb	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8006a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a56:	091b      	lsrs	r3, r3, #4
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	f003 030f 	and.w	r3, r3, #15
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8006a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	f003 030f 	and.w	r3, r3, #15
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	0e1b      	lsrs	r3, r3, #24
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	0c1b      	lsrs	r3, r3, #16
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	0a1b      	lsrs	r3, r3, #8
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006a90:	6a3b      	ldr	r3, [r7, #32]
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	b2da      	uxtb	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	0e1b      	lsrs	r3, r3, #24
 8006aa4:	b2da      	uxtb	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	0c1b      	lsrs	r3, r3, #16
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	0a1b      	lsrs	r3, r3, #8
 8006ab8:	b2da      	uxtb	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	0e1b      	lsrs	r3, r3, #24
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	0c1b      	lsrs	r3, r3, #16
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	372c      	adds	r7, #44	@ 0x2c
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr
 8006ae8:	58004000 	.word	0x58004000
 8006aec:	a94656b9 	.word	0xa94656b9

08006af0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	4a08      	ldr	r2, [pc, #32]	@ (8006b20 <hci_init+0x30>)
 8006b00:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8006b02:	4a08      	ldr	r2, [pc, #32]	@ (8006b24 <hci_init+0x34>)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8006b08:	4806      	ldr	r0, [pc, #24]	@ (8006b24 <hci_init+0x34>)
 8006b0a:	f000 f979 	bl	8006e00 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 f8da 	bl	8006ccc <TlInit>

  return;
 8006b18:	bf00      	nop
}
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	200002b8 	.word	0x200002b8
 8006b24:	20000290 	.word	0x20000290

08006b28 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006b2e:	4822      	ldr	r0, [pc, #136]	@ (8006bb8 <hci_user_evt_proc+0x90>)
 8006b30:	f000 fd32 	bl	8007598 <LST_is_empty>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d12b      	bne.n	8006b92 <hci_user_evt_proc+0x6a>
 8006b3a:	4b20      	ldr	r3, [pc, #128]	@ (8006bbc <hci_user_evt_proc+0x94>)
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d027      	beq.n	8006b92 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006b42:	f107 030c 	add.w	r3, r7, #12
 8006b46:	4619      	mov	r1, r3
 8006b48:	481b      	ldr	r0, [pc, #108]	@ (8006bb8 <hci_user_evt_proc+0x90>)
 8006b4a:	f000 fdb4 	bl	80076b6 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8006b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8006bc0 <hci_user_evt_proc+0x98>)
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00c      	beq.n	8006b70 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006b5e:	4b18      	ldr	r3, [pc, #96]	@ (8006bc0 <hci_user_evt_proc+0x98>)
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	1d3a      	adds	r2, r7, #4
 8006b64:	4610      	mov	r0, r2
 8006b66:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8006b68:	793a      	ldrb	r2, [r7, #4]
 8006b6a:	4b14      	ldr	r3, [pc, #80]	@ (8006bbc <hci_user_evt_proc+0x94>)
 8006b6c:	701a      	strb	r2, [r3, #0]
 8006b6e:	e002      	b.n	8006b76 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006b70:	4b12      	ldr	r3, [pc, #72]	@ (8006bbc <hci_user_evt_proc+0x94>)
 8006b72:	2201      	movs	r2, #1
 8006b74:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8006b76:	4b11      	ldr	r3, [pc, #68]	@ (8006bbc <hci_user_evt_proc+0x94>)
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d004      	beq.n	8006b88 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	4618      	mov	r0, r3
 8006b82:	f000 fc0d 	bl	80073a0 <TL_MM_EvtDone>
 8006b86:	e004      	b.n	8006b92 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	480a      	ldr	r0, [pc, #40]	@ (8006bb8 <hci_user_evt_proc+0x90>)
 8006b8e:	f000 fd25 	bl	80075dc <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006b92:	4809      	ldr	r0, [pc, #36]	@ (8006bb8 <hci_user_evt_proc+0x90>)
 8006b94:	f000 fd00 	bl	8007598 <LST_is_empty>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d107      	bne.n	8006bae <hci_user_evt_proc+0x86>
 8006b9e:	4b07      	ldr	r3, [pc, #28]	@ (8006bbc <hci_user_evt_proc+0x94>)
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d003      	beq.n	8006bae <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8006ba6:	4804      	ldr	r0, [pc, #16]	@ (8006bb8 <hci_user_evt_proc+0x90>)
 8006ba8:	f001 f852 	bl	8007c50 <hci_notify_asynch_evt>
  }


  return;
 8006bac:	bf00      	nop
 8006bae:	bf00      	nop
}
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	20000054 	.word	0x20000054
 8006bbc:	20000060 	.word	0x20000060
 8006bc0:	20000290 	.word	0x20000290

08006bc4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b088      	sub	sp, #32
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	460b      	mov	r3, r1
 8006bce:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8006bd0:	2000      	movs	r0, #0
 8006bd2:	f000 f8d1 	bl	8006d78 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	885b      	ldrh	r3, [r3, #2]
 8006bde:	b21b      	sxth	r3, r3
 8006be0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006be4:	b21a      	sxth	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	029b      	lsls	r3, r3, #10
 8006bec:	b21b      	sxth	r3, r3
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	b21b      	sxth	r3, r3
 8006bf2:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8006bf4:	4b33      	ldr	r3, [pc, #204]	@ (8006cc4 <hci_send_req+0x100>)
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	b2d9      	uxtb	r1, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	689a      	ldr	r2, [r3, #8]
 8006c04:	8bbb      	ldrh	r3, [r7, #28]
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 f890 	bl	8006d2c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8006c0c:	e04e      	b.n	8006cac <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8006c0e:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8006c12:	f001 f834 	bl	8007c7e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006c16:	e043      	b.n	8006ca0 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8006c18:	f107 030c 	add.w	r3, r7, #12
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	482a      	ldr	r0, [pc, #168]	@ (8006cc8 <hci_send_req+0x104>)
 8006c20:	f000 fd49 	bl	80076b6 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	7a5b      	ldrb	r3, [r3, #9]
 8006c28:	2b0f      	cmp	r3, #15
 8006c2a:	d114      	bne.n	8006c56 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	330b      	adds	r3, #11
 8006c30:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	885b      	ldrh	r3, [r3, #2]
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	8bba      	ldrh	r2, [r7, #28]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d104      	bne.n	8006c48 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	7812      	ldrb	r2, [r2, #0]
 8006c46:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	785b      	ldrb	r3, [r3, #1]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d027      	beq.n	8006ca0 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006c50:	2301      	movs	r3, #1
 8006c52:	77fb      	strb	r3, [r7, #31]
 8006c54:	e024      	b.n	8006ca0 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	330b      	adds	r3, #11
 8006c5a:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	8bba      	ldrh	r2, [r7, #28]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d114      	bne.n	8006c94 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	7a9b      	ldrb	r3, [r3, #10]
 8006c6e:	3b03      	subs	r3, #3
 8006c70:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	695a      	ldr	r2, [r3, #20]
 8006c76:	7dfb      	ldrb	r3, [r7, #23]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	bfa8      	it	ge
 8006c7c:	461a      	movge	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6918      	ldr	r0, [r3, #16]
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	1cd9      	adds	r1, r3, #3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	f001 ff24 	bl	8008adc <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d001      	beq.n	8006ca0 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006ca0:	4809      	ldr	r0, [pc, #36]	@ (8006cc8 <hci_send_req+0x104>)
 8006ca2:	f000 fc79 	bl	8007598 <LST_is_empty>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d0b5      	beq.n	8006c18 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8006cac:	7ffb      	ldrb	r3, [r7, #31]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d0ad      	beq.n	8006c0e <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8006cb2:	2001      	movs	r0, #1
 8006cb4:	f000 f860 	bl	8006d78 <NotifyCmdStatus>

  return 0;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3720      	adds	r7, #32
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	200002bc 	.word	0x200002bc
 8006cc8:	200002b0 	.word	0x200002b0

08006ccc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8006cd4:	480f      	ldr	r0, [pc, #60]	@ (8006d14 <TlInit+0x48>)
 8006cd6:	f000 fc4f 	bl	8007578 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8006cda:	4a0f      	ldr	r2, [pc, #60]	@ (8006d18 <TlInit+0x4c>)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8006ce0:	480e      	ldr	r0, [pc, #56]	@ (8006d1c <TlInit+0x50>)
 8006ce2:	f000 fc49 	bl	8007578 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8006d20 <TlInit+0x54>)
 8006ce8:	2201      	movs	r2, #1
 8006cea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8006cec:	4b0d      	ldr	r3, [pc, #52]	@ (8006d24 <TlInit+0x58>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00a      	beq.n	8006d0a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8006cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8006d28 <TlInit+0x5c>)
 8006cfa:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8006cfc:	4b09      	ldr	r3, [pc, #36]	@ (8006d24 <TlInit+0x58>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f107 0208 	add.w	r2, r7, #8
 8006d04:	4610      	mov	r0, r2
 8006d06:	4798      	blx	r3
  }

  return;
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
}
 8006d0c:	3718      	adds	r7, #24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	200002b0 	.word	0x200002b0
 8006d18:	2000005c 	.word	0x2000005c
 8006d1c:	20000054 	.word	0x20000054
 8006d20:	20000060 	.word	0x20000060
 8006d24:	20000290 	.word	0x20000290
 8006d28:	08006db9 	.word	0x08006db9

08006d2c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	4603      	mov	r3, r0
 8006d34:	603a      	str	r2, [r7, #0]
 8006d36:	80fb      	strh	r3, [r7, #6]
 8006d38:	460b      	mov	r3, r1
 8006d3a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8006d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8006d70 <SendCmd+0x44>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	88fa      	ldrh	r2, [r7, #6]
 8006d42:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8006d46:	4b0a      	ldr	r3, [pc, #40]	@ (8006d70 <SendCmd+0x44>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	797a      	ldrb	r2, [r7, #5]
 8006d4c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8006d4e:	4b08      	ldr	r3, [pc, #32]	@ (8006d70 <SendCmd+0x44>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	330c      	adds	r3, #12
 8006d54:	797a      	ldrb	r2, [r7, #5]
 8006d56:	6839      	ldr	r1, [r7, #0]
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f001 febf 	bl	8008adc <memcpy>

  hciContext.io.Send(0,0);
 8006d5e:	4b05      	ldr	r3, [pc, #20]	@ (8006d74 <SendCmd+0x48>)
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	2100      	movs	r1, #0
 8006d64:	2000      	movs	r0, #0
 8006d66:	4798      	blx	r3

  return;
 8006d68:	bf00      	nop
}
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	2000005c 	.word	0x2000005c
 8006d74:	20000290 	.word	0x20000290

08006d78 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	4603      	mov	r3, r0
 8006d80:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8006d82:	79fb      	ldrb	r3, [r7, #7]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d108      	bne.n	8006d9a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8006d88:	4b0a      	ldr	r3, [pc, #40]	@ (8006db4 <NotifyCmdStatus+0x3c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00d      	beq.n	8006dac <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8006d90:	4b08      	ldr	r3, [pc, #32]	@ (8006db4 <NotifyCmdStatus+0x3c>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2000      	movs	r0, #0
 8006d96:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8006d98:	e008      	b.n	8006dac <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8006d9a:	4b06      	ldr	r3, [pc, #24]	@ (8006db4 <NotifyCmdStatus+0x3c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d004      	beq.n	8006dac <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8006da2:	4b04      	ldr	r3, [pc, #16]	@ (8006db4 <NotifyCmdStatus+0x3c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2001      	movs	r0, #1
 8006da8:	4798      	blx	r3
  return;
 8006daa:	bf00      	nop
 8006dac:	bf00      	nop
}
 8006dae:	3708      	adds	r7, #8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	200002b8 	.word	0x200002b8

08006db8 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	7a5b      	ldrb	r3, [r3, #9]
 8006dc4:	2b0f      	cmp	r3, #15
 8006dc6:	d003      	beq.n	8006dd0 <TlEvtReceived+0x18>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	7a5b      	ldrb	r3, [r3, #9]
 8006dcc:	2b0e      	cmp	r3, #14
 8006dce:	d107      	bne.n	8006de0 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8006dd0:	6879      	ldr	r1, [r7, #4]
 8006dd2:	4809      	ldr	r0, [pc, #36]	@ (8006df8 <TlEvtReceived+0x40>)
 8006dd4:	f000 fc28 	bl	8007628 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8006dd8:	2000      	movs	r0, #0
 8006dda:	f000 ff45 	bl	8007c68 <hci_cmd_resp_release>
 8006dde:	e006      	b.n	8006dee <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	4806      	ldr	r0, [pc, #24]	@ (8006dfc <TlEvtReceived+0x44>)
 8006de4:	f000 fc20 	bl	8007628 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006de8:	4804      	ldr	r0, [pc, #16]	@ (8006dfc <TlEvtReceived+0x44>)
 8006dea:	f000 ff31 	bl	8007c50 <hci_notify_asynch_evt>
  }

  return;
 8006dee:	bf00      	nop
}
 8006df0:	3708      	adds	r7, #8
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	200002b0 	.word	0x200002b0
 8006dfc:	20000054 	.word	0x20000054

08006e00 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a05      	ldr	r2, [pc, #20]	@ (8006e20 <hci_register_io_bus+0x20>)
 8006e0c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a04      	ldr	r2, [pc, #16]	@ (8006e24 <hci_register_io_bus+0x24>)
 8006e12:	611a      	str	r2, [r3, #16]

  return;
 8006e14:	bf00      	nop
}
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	08007119 	.word	0x08007119
 8006e24:	08007181 	.word	0x08007181

08006e28 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	4a08      	ldr	r2, [pc, #32]	@ (8006e58 <shci_init+0x30>)
 8006e38:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8006e3a:	4a08      	ldr	r2, [pc, #32]	@ (8006e5c <shci_init+0x34>)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8006e40:	4806      	ldr	r0, [pc, #24]	@ (8006e5c <shci_init+0x34>)
 8006e42:	f000 f915 	bl	8007070 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 f898 	bl	8006f80 <TlInit>

  return;
 8006e50:	bf00      	nop
}
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	200002e0 	.word	0x200002e0
 8006e5c:	200002c0 	.word	0x200002c0

08006e60 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006e66:	4822      	ldr	r0, [pc, #136]	@ (8006ef0 <shci_user_evt_proc+0x90>)
 8006e68:	f000 fb96 	bl	8007598 <LST_is_empty>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d12b      	bne.n	8006eca <shci_user_evt_proc+0x6a>
 8006e72:	4b20      	ldr	r3, [pc, #128]	@ (8006ef4 <shci_user_evt_proc+0x94>)
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d027      	beq.n	8006eca <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006e7a:	f107 030c 	add.w	r3, r7, #12
 8006e7e:	4619      	mov	r1, r3
 8006e80:	481b      	ldr	r0, [pc, #108]	@ (8006ef0 <shci_user_evt_proc+0x90>)
 8006e82:	f000 fc18 	bl	80076b6 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8006e86:	4b1c      	ldr	r3, [pc, #112]	@ (8006ef8 <shci_user_evt_proc+0x98>)
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00c      	beq.n	8006ea8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8006e92:	2301      	movs	r3, #1
 8006e94:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006e96:	4b18      	ldr	r3, [pc, #96]	@ (8006ef8 <shci_user_evt_proc+0x98>)
 8006e98:	69db      	ldr	r3, [r3, #28]
 8006e9a:	1d3a      	adds	r2, r7, #4
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8006ea0:	793a      	ldrb	r2, [r7, #4]
 8006ea2:	4b14      	ldr	r3, [pc, #80]	@ (8006ef4 <shci_user_evt_proc+0x94>)
 8006ea4:	701a      	strb	r2, [r3, #0]
 8006ea6:	e002      	b.n	8006eae <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006ea8:	4b12      	ldr	r3, [pc, #72]	@ (8006ef4 <shci_user_evt_proc+0x94>)
 8006eaa:	2201      	movs	r2, #1
 8006eac:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8006eae:	4b11      	ldr	r3, [pc, #68]	@ (8006ef4 <shci_user_evt_proc+0x94>)
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d004      	beq.n	8006ec0 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 fa71 	bl	80073a0 <TL_MM_EvtDone>
 8006ebe:	e004      	b.n	8006eca <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	480a      	ldr	r0, [pc, #40]	@ (8006ef0 <shci_user_evt_proc+0x90>)
 8006ec6:	f000 fb89 	bl	80075dc <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006eca:	4809      	ldr	r0, [pc, #36]	@ (8006ef0 <shci_user_evt_proc+0x90>)
 8006ecc:	f000 fb64 	bl	8007598 <LST_is_empty>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d107      	bne.n	8006ee6 <shci_user_evt_proc+0x86>
 8006ed6:	4b07      	ldr	r3, [pc, #28]	@ (8006ef4 <shci_user_evt_proc+0x94>)
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8006ede:	4804      	ldr	r0, [pc, #16]	@ (8006ef0 <shci_user_evt_proc+0x90>)
 8006ee0:	f7f9 fce7 	bl	80008b2 <shci_notify_asynch_evt>
  }


  return;
 8006ee4:	bf00      	nop
 8006ee6:	bf00      	nop
}
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	20000064 	.word	0x20000064
 8006ef4:	20000074 	.word	0x20000074
 8006ef8:	200002c0 	.word	0x200002c0

08006efc <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60ba      	str	r2, [r7, #8]
 8006f04:	607b      	str	r3, [r7, #4]
 8006f06:	4603      	mov	r3, r0
 8006f08:	81fb      	strh	r3, [r7, #14]
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8006f0e:	2000      	movs	r0, #0
 8006f10:	f000 f868 	bl	8006fe4 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8006f14:	4b17      	ldr	r3, [pc, #92]	@ (8006f74 <shci_send+0x78>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	89fa      	ldrh	r2, [r7, #14]
 8006f1a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8006f1e:	4b15      	ldr	r3, [pc, #84]	@ (8006f74 <shci_send+0x78>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	7b7a      	ldrb	r2, [r7, #13]
 8006f24:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8006f26:	4b13      	ldr	r3, [pc, #76]	@ (8006f74 <shci_send+0x78>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	330c      	adds	r3, #12
 8006f2c:	7b7a      	ldrb	r2, [r7, #13]
 8006f2e:	68b9      	ldr	r1, [r7, #8]
 8006f30:	4618      	mov	r0, r3
 8006f32:	f001 fdd3 	bl	8008adc <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8006f36:	4b10      	ldr	r3, [pc, #64]	@ (8006f78 <shci_send+0x7c>)
 8006f38:	2201      	movs	r2, #1
 8006f3a:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8006f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8006f7c <shci_send+0x80>)
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	2100      	movs	r1, #0
 8006f42:	2000      	movs	r0, #0
 8006f44:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8006f46:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8006f4a:	f7f9 fcc9 	bl	80008e0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f103 0008 	add.w	r0, r3, #8
 8006f54:	4b07      	ldr	r3, [pc, #28]	@ (8006f74 <shci_send+0x78>)
 8006f56:	6819      	ldr	r1, [r3, #0]
 8006f58:	4b06      	ldr	r3, [pc, #24]	@ (8006f74 <shci_send+0x78>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	789b      	ldrb	r3, [r3, #2]
 8006f5e:	3303      	adds	r3, #3
 8006f60:	461a      	mov	r2, r3
 8006f62:	f001 fdbb 	bl	8008adc <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8006f66:	2001      	movs	r0, #1
 8006f68:	f000 f83c 	bl	8006fe4 <Cmd_SetStatus>

  return;
 8006f6c:	bf00      	nop
}
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	20000070 	.word	0x20000070
 8006f78:	200002e4 	.word	0x200002e4
 8006f7c:	200002c0 	.word	0x200002c0

08006f80 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8006f88:	4a10      	ldr	r2, [pc, #64]	@ (8006fcc <TlInit+0x4c>)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8006f8e:	4810      	ldr	r0, [pc, #64]	@ (8006fd0 <TlInit+0x50>)
 8006f90:	f000 faf2 	bl	8007578 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8006f94:	2001      	movs	r0, #1
 8006f96:	f000 f825 	bl	8006fe4 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8006fd4 <TlInit+0x54>)
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8006fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8006fd8 <TlInit+0x58>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00c      	beq.n	8006fc2 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8006fac:	4b0b      	ldr	r3, [pc, #44]	@ (8006fdc <TlInit+0x5c>)
 8006fae:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8006fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8006fe0 <TlInit+0x60>)
 8006fb2:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8006fb4:	4b08      	ldr	r3, [pc, #32]	@ (8006fd8 <TlInit+0x58>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f107 020c 	add.w	r2, r7, #12
 8006fbc:	4610      	mov	r0, r2
 8006fbe:	4798      	blx	r3
  }

  return;
 8006fc0:	bf00      	nop
 8006fc2:	bf00      	nop
}
 8006fc4:	3718      	adds	r7, #24
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20000070 	.word	0x20000070
 8006fd0:	20000064 	.word	0x20000064
 8006fd4:	20000074 	.word	0x20000074
 8006fd8:	200002c0 	.word	0x200002c0
 8006fdc:	08007035 	.word	0x08007035
 8006fe0:	0800704d 	.word	0x0800704d

08006fe4 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	4603      	mov	r3, r0
 8006fec:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8006fee:	79fb      	ldrb	r3, [r7, #7]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10b      	bne.n	800700c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8006ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800702c <Cmd_SetStatus+0x48>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d003      	beq.n	8007004 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8006ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800702c <Cmd_SetStatus+0x48>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2000      	movs	r0, #0
 8007002:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8007004:	4b0a      	ldr	r3, [pc, #40]	@ (8007030 <Cmd_SetStatus+0x4c>)
 8007006:	2200      	movs	r2, #0
 8007008:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800700a:	e00b      	b.n	8007024 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800700c:	4b08      	ldr	r3, [pc, #32]	@ (8007030 <Cmd_SetStatus+0x4c>)
 800700e:	2201      	movs	r2, #1
 8007010:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8007012:	4b06      	ldr	r3, [pc, #24]	@ (800702c <Cmd_SetStatus+0x48>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d004      	beq.n	8007024 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800701a:	4b04      	ldr	r3, [pc, #16]	@ (800702c <Cmd_SetStatus+0x48>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2001      	movs	r0, #1
 8007020:	4798      	blx	r3
  return;
 8007022:	bf00      	nop
 8007024:	bf00      	nop
}
 8007026:	3708      	adds	r7, #8
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	200002e0 	.word	0x200002e0
 8007030:	2000006c 	.word	0x2000006c

08007034 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800703c:	2000      	movs	r0, #0
 800703e:	f7f9 fc44 	bl	80008ca <shci_cmd_resp_release>

  return;
 8007042:	bf00      	nop
}
 8007044:	3708      	adds	r7, #8
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
	...

0800704c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8007054:	6879      	ldr	r1, [r7, #4]
 8007056:	4805      	ldr	r0, [pc, #20]	@ (800706c <TlUserEvtReceived+0x20>)
 8007058:	f000 fae6 	bl	8007628 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800705c:	4803      	ldr	r0, [pc, #12]	@ (800706c <TlUserEvtReceived+0x20>)
 800705e:	f7f9 fc28 	bl	80008b2 <shci_notify_asynch_evt>

  return;
 8007062:	bf00      	nop
}
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	20000064 	.word	0x20000064

08007070 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a05      	ldr	r2, [pc, #20]	@ (8007090 <shci_register_io_bus+0x20>)
 800707c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a04      	ldr	r2, [pc, #16]	@ (8007094 <shci_register_io_bus+0x24>)
 8007082:	611a      	str	r2, [r3, #16]

  return;
 8007084:	bf00      	nop
}
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	0800722d 	.word	0x0800722d
 8007094:	08007281 	.word	0x08007281

08007098 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8007098:	b580      	push	{r7, lr}
 800709a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800709c:	f001 f9a4 	bl	80083e8 <HW_IPCC_Enable>

  return;
 80070a0:	bf00      	nop
}
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <TL_Init>:


void TL_Init( void )
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80070a8:	4b10      	ldr	r3, [pc, #64]	@ (80070ec <TL_Init+0x48>)
 80070aa:	4a11      	ldr	r2, [pc, #68]	@ (80070f0 <TL_Init+0x4c>)
 80070ac:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80070ae:	4b0f      	ldr	r3, [pc, #60]	@ (80070ec <TL_Init+0x48>)
 80070b0:	4a10      	ldr	r2, [pc, #64]	@ (80070f4 <TL_Init+0x50>)
 80070b2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80070b4:	4b0d      	ldr	r3, [pc, #52]	@ (80070ec <TL_Init+0x48>)
 80070b6:	4a10      	ldr	r2, [pc, #64]	@ (80070f8 <TL_Init+0x54>)
 80070b8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80070ba:	4b0c      	ldr	r3, [pc, #48]	@ (80070ec <TL_Init+0x48>)
 80070bc:	4a0f      	ldr	r2, [pc, #60]	@ (80070fc <TL_Init+0x58>)
 80070be:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80070c0:	4b0a      	ldr	r3, [pc, #40]	@ (80070ec <TL_Init+0x48>)
 80070c2:	4a0f      	ldr	r2, [pc, #60]	@ (8007100 <TL_Init+0x5c>)
 80070c4:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80070c6:	4b09      	ldr	r3, [pc, #36]	@ (80070ec <TL_Init+0x48>)
 80070c8:	4a0e      	ldr	r2, [pc, #56]	@ (8007104 <TL_Init+0x60>)
 80070ca:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80070cc:	4b07      	ldr	r3, [pc, #28]	@ (80070ec <TL_Init+0x48>)
 80070ce:	4a0e      	ldr	r2, [pc, #56]	@ (8007108 <TL_Init+0x64>)
 80070d0:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80070d2:	4b06      	ldr	r3, [pc, #24]	@ (80070ec <TL_Init+0x48>)
 80070d4:	4a0d      	ldr	r2, [pc, #52]	@ (800710c <TL_Init+0x68>)
 80070d6:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80070d8:	4b04      	ldr	r3, [pc, #16]	@ (80070ec <TL_Init+0x48>)
 80070da:	4a0d      	ldr	r2, [pc, #52]	@ (8007110 <TL_Init+0x6c>)
 80070dc:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80070de:	4b03      	ldr	r3, [pc, #12]	@ (80070ec <TL_Init+0x48>)
 80070e0:	4a0c      	ldr	r2, [pc, #48]	@ (8007114 <TL_Init+0x70>)
 80070e2:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80070e4:	f001 f994 	bl	8008410 <HW_IPCC_Init>

  return;
 80070e8:	bf00      	nop
}
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	20030000 	.word	0x20030000
 80070f0:	20030028 	.word	0x20030028
 80070f4:	20030048 	.word	0x20030048
 80070f8:	20030058 	.word	0x20030058
 80070fc:	20030068 	.word	0x20030068
 8007100:	20030070 	.word	0x20030070
 8007104:	20030078 	.word	0x20030078
 8007108:	20030080 	.word	0x20030080
 800710c:	2003009c 	.word	0x2003009c
 8007110:	200300a0 	.word	0x200300a0
 8007114:	200300ac 	.word	0x200300ac

08007118 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8007124:	4811      	ldr	r0, [pc, #68]	@ (800716c <TL_BLE_Init+0x54>)
 8007126:	f000 fa27 	bl	8007578 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800712a:	4b11      	ldr	r3, [pc, #68]	@ (8007170 <TL_BLE_Init+0x58>)
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	689a      	ldr	r2, [r3, #8]
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	68da      	ldr	r2, [r3, #12]
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	4a0c      	ldr	r2, [pc, #48]	@ (8007174 <TL_BLE_Init+0x5c>)
 8007144:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	4a08      	ldr	r2, [pc, #32]	@ (800716c <TL_BLE_Init+0x54>)
 800714a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800714c:	f001 f976 	bl	800843c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a08      	ldr	r2, [pc, #32]	@ (8007178 <TL_BLE_Init+0x60>)
 8007156:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	4a07      	ldr	r2, [pc, #28]	@ (800717c <TL_BLE_Init+0x64>)
 800715e:	6013      	str	r3, [r2, #0]

  return 0;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	200300c8 	.word	0x200300c8
 8007170:	20030000 	.word	0x20030000
 8007174:	20030a58 	.word	0x20030a58
 8007178:	200002f0 	.word	0x200002f0
 800717c:	200002f4 	.word	0x200002f4

08007180 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	460b      	mov	r3, r1
 800718a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800718c:	4b09      	ldr	r3, [pc, #36]	@ (80071b4 <TL_BLE_SendCmd+0x34>)
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2201      	movs	r2, #1
 8007194:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8007196:	4b07      	ldr	r3, [pc, #28]	@ (80071b4 <TL_BLE_SendCmd+0x34>)
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4619      	mov	r1, r3
 800719e:	2001      	movs	r0, #1
 80071a0:	f000 f96c 	bl	800747c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80071a4:	f001 f954 	bl	8008450 <HW_IPCC_BLE_SendCmd>

  return 0;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3708      	adds	r7, #8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	20030000 	.word	0x20030000

080071b8 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80071be:	e01c      	b.n	80071fa <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80071c0:	1d3b      	adds	r3, r7, #4
 80071c2:	4619      	mov	r1, r3
 80071c4:	4812      	ldr	r0, [pc, #72]	@ (8007210 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80071c6:	f000 fa76 	bl	80076b6 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	7a5b      	ldrb	r3, [r3, #9]
 80071ce:	2b0f      	cmp	r3, #15
 80071d0:	d003      	beq.n	80071da <HW_IPCC_BLE_RxEvtNot+0x22>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	7a5b      	ldrb	r3, [r3, #9]
 80071d6:	2b0e      	cmp	r3, #14
 80071d8:	d105      	bne.n	80071e6 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4619      	mov	r1, r3
 80071de:	2002      	movs	r0, #2
 80071e0:	f000 f94c 	bl	800747c <OutputDbgTrace>
 80071e4:	e004      	b.n	80071f0 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4619      	mov	r1, r3
 80071ea:	2003      	movs	r0, #3
 80071ec:	f000 f946 	bl	800747c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80071f0:	4b08      	ldr	r3, [pc, #32]	@ (8007214 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	4610      	mov	r0, r2
 80071f8:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80071fa:	4805      	ldr	r0, [pc, #20]	@ (8007210 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80071fc:	f000 f9cc 	bl	8007598 <LST_is_empty>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0dc      	beq.n	80071c0 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8007206:	bf00      	nop
}
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	200300c8 	.word	0x200300c8
 8007214:	200002f0 	.word	0x200002f0

08007218 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800721c:	4b02      	ldr	r3, [pc, #8]	@ (8007228 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4798      	blx	r3

  return;
 8007222:	bf00      	nop
}
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	200002f4 	.word	0x200002f4

0800722c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8007238:	480d      	ldr	r0, [pc, #52]	@ (8007270 <TL_SYS_Init+0x44>)
 800723a:	f000 f99d 	bl	8007578 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800723e:	4b0d      	ldr	r3, [pc, #52]	@ (8007274 <TL_SYS_Init+0x48>)
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	4a08      	ldr	r2, [pc, #32]	@ (8007270 <TL_SYS_Init+0x44>)
 8007250:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8007252:	f001 f91f 	bl	8008494 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a07      	ldr	r2, [pc, #28]	@ (8007278 <TL_SYS_Init+0x4c>)
 800725c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	4a06      	ldr	r2, [pc, #24]	@ (800727c <TL_SYS_Init+0x50>)
 8007264:	6013      	str	r3, [r2, #0]

  return 0;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	200300d0 	.word	0x200300d0
 8007274:	20030000 	.word	0x20030000
 8007278:	200002f8 	.word	0x200002f8
 800727c:	200002fc 	.word	0x200002fc

08007280 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	460b      	mov	r3, r1
 800728a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800728c:	4b09      	ldr	r3, [pc, #36]	@ (80072b4 <TL_SYS_SendCmd+0x34>)
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2210      	movs	r2, #16
 8007294:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8007296:	4b07      	ldr	r3, [pc, #28]	@ (80072b4 <TL_SYS_SendCmd+0x34>)
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4619      	mov	r1, r3
 800729e:	2004      	movs	r0, #4
 80072a0:	f000 f8ec 	bl	800747c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80072a4:	f001 f900 	bl	80084a8 <HW_IPCC_SYS_SendCmd>

  return 0;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	20030000 	.word	0x20030000

080072b8 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80072bc:	4b07      	ldr	r3, [pc, #28]	@ (80072dc <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4619      	mov	r1, r3
 80072c4:	2005      	movs	r0, #5
 80072c6:	f000 f8d9 	bl	800747c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80072ca:	4b05      	ldr	r3, [pc, #20]	@ (80072e0 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a03      	ldr	r2, [pc, #12]	@ (80072dc <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80072d0:	68d2      	ldr	r2, [r2, #12]
 80072d2:	6812      	ldr	r2, [r2, #0]
 80072d4:	4610      	mov	r0, r2
 80072d6:	4798      	blx	r3

  return;
 80072d8:	bf00      	nop
}
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	20030000 	.word	0x20030000
 80072e0:	200002f8 	.word	0x200002f8

080072e4 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80072ea:	e00e      	b.n	800730a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80072ec:	1d3b      	adds	r3, r7, #4
 80072ee:	4619      	mov	r1, r3
 80072f0:	480b      	ldr	r0, [pc, #44]	@ (8007320 <HW_IPCC_SYS_EvtNot+0x3c>)
 80072f2:	f000 f9e0 	bl	80076b6 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4619      	mov	r1, r3
 80072fa:	2006      	movs	r0, #6
 80072fc:	f000 f8be 	bl	800747c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8007300:	4b08      	ldr	r3, [pc, #32]	@ (8007324 <HW_IPCC_SYS_EvtNot+0x40>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	4610      	mov	r0, r2
 8007308:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800730a:	4805      	ldr	r0, [pc, #20]	@ (8007320 <HW_IPCC_SYS_EvtNot+0x3c>)
 800730c:	f000 f944 	bl	8007598 <LST_is_empty>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d0ea      	beq.n	80072ec <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8007316:	bf00      	nop
}
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	200300d0 	.word	0x200300d0
 8007324:	200002fc 	.word	0x200002fc

08007328 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8007330:	4817      	ldr	r0, [pc, #92]	@ (8007390 <TL_MM_Init+0x68>)
 8007332:	f000 f921 	bl	8007578 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8007336:	4817      	ldr	r0, [pc, #92]	@ (8007394 <TL_MM_Init+0x6c>)
 8007338:	f000 f91e 	bl	8007578 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800733c:	4b16      	ldr	r3, [pc, #88]	@ (8007398 <TL_MM_Init+0x70>)
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	4a16      	ldr	r2, [pc, #88]	@ (800739c <TL_MM_Init+0x74>)
 8007342:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8007344:	4b15      	ldr	r3, [pc, #84]	@ (800739c <TL_MM_Init+0x74>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	6892      	ldr	r2, [r2, #8]
 800734c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800734e:	4b13      	ldr	r3, [pc, #76]	@ (800739c <TL_MM_Init+0x74>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	68d2      	ldr	r2, [r2, #12]
 8007356:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8007358:	4b10      	ldr	r3, [pc, #64]	@ (800739c <TL_MM_Init+0x74>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a0c      	ldr	r2, [pc, #48]	@ (8007390 <TL_MM_Init+0x68>)
 800735e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8007360:	4b0e      	ldr	r3, [pc, #56]	@ (800739c <TL_MM_Init+0x74>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	6812      	ldr	r2, [r2, #0]
 8007368:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800736a:	4b0c      	ldr	r3, [pc, #48]	@ (800739c <TL_MM_Init+0x74>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	6852      	ldr	r2, [r2, #4]
 8007372:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8007374:	4b09      	ldr	r3, [pc, #36]	@ (800739c <TL_MM_Init+0x74>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	6912      	ldr	r2, [r2, #16]
 800737c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800737e:	4b07      	ldr	r3, [pc, #28]	@ (800739c <TL_MM_Init+0x74>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	6952      	ldr	r2, [r2, #20]
 8007386:	619a      	str	r2, [r3, #24]

  return;
 8007388:	bf00      	nop
}
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	200300b8 	.word	0x200300b8
 8007394:	200002e8 	.word	0x200002e8
 8007398:	20030000 	.word	0x20030000
 800739c:	20000300 	.word	0x20000300

080073a0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80073a8:	6879      	ldr	r1, [r7, #4]
 80073aa:	4807      	ldr	r0, [pc, #28]	@ (80073c8 <TL_MM_EvtDone+0x28>)
 80073ac:	f000 f93c 	bl	8007628 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80073b0:	6879      	ldr	r1, [r7, #4]
 80073b2:	2000      	movs	r0, #0
 80073b4:	f000 f862 	bl	800747c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80073b8:	4804      	ldr	r0, [pc, #16]	@ (80073cc <TL_MM_EvtDone+0x2c>)
 80073ba:	f001 f89b 	bl	80084f4 <HW_IPCC_MM_SendFreeBuf>

  return;
 80073be:	bf00      	nop
}
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	200002e8 	.word	0x200002e8
 80073cc:	080073d1 	.word	0x080073d1

080073d0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80073d6:	e00c      	b.n	80073f2 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80073d8:	1d3b      	adds	r3, r7, #4
 80073da:	4619      	mov	r1, r3
 80073dc:	480a      	ldr	r0, [pc, #40]	@ (8007408 <SendFreeBuf+0x38>)
 80073de:	f000 f96a 	bl	80076b6 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80073e2:	4b0a      	ldr	r3, [pc, #40]	@ (800740c <SendFreeBuf+0x3c>)
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	4611      	mov	r1, r2
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 f91b 	bl	8007628 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80073f2:	4805      	ldr	r0, [pc, #20]	@ (8007408 <SendFreeBuf+0x38>)
 80073f4:	f000 f8d0 	bl	8007598 <LST_is_empty>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d0ec      	beq.n	80073d8 <SendFreeBuf+0x8>
  }

  return;
 80073fe:	bf00      	nop
}
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	200002e8 	.word	0x200002e8
 800740c:	20030000 	.word	0x20030000

08007410 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8007414:	4805      	ldr	r0, [pc, #20]	@ (800742c <TL_TRACES_Init+0x1c>)
 8007416:	f000 f8af 	bl	8007578 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800741a:	4b05      	ldr	r3, [pc, #20]	@ (8007430 <TL_TRACES_Init+0x20>)
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	4a03      	ldr	r2, [pc, #12]	@ (800742c <TL_TRACES_Init+0x1c>)
 8007420:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8007422:	f001 f89d 	bl	8008560 <HW_IPCC_TRACES_Init>

  return;
 8007426:	bf00      	nop
}
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	200300c0 	.word	0x200300c0
 8007430:	20030000 	.word	0x20030000

08007434 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800743a:	e008      	b.n	800744e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800743c:	1d3b      	adds	r3, r7, #4
 800743e:	4619      	mov	r1, r3
 8007440:	4808      	ldr	r0, [pc, #32]	@ (8007464 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007442:	f000 f938 	bl	80076b6 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4618      	mov	r0, r3
 800744a:	f000 f80d 	bl	8007468 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800744e:	4805      	ldr	r0, [pc, #20]	@ (8007464 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007450:	f000 f8a2 	bl	8007598 <LST_is_empty>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d0f0      	beq.n	800743c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800745a:	bf00      	nop
}
 800745c:	3708      	adds	r7, #8
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	200300c0 	.word	0x200300c0

08007468 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	4603      	mov	r3, r0
 8007484:	6039      	str	r1, [r7, #0]
 8007486:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8007488:	79fb      	ldrb	r3, [r7, #7]
 800748a:	2b06      	cmp	r3, #6
 800748c:	d845      	bhi.n	800751a <OutputDbgTrace+0x9e>
 800748e:	a201      	add	r2, pc, #4	@ (adr r2, 8007494 <OutputDbgTrace+0x18>)
 8007490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007494:	080074b1 	.word	0x080074b1
 8007498:	080074d5 	.word	0x080074d5
 800749c:	080074db 	.word	0x080074db
 80074a0:	080074ef 	.word	0x080074ef
 80074a4:	080074fb 	.word	0x080074fb
 80074a8:	08007501 	.word	0x08007501
 80074ac:	0800750f 	.word	0x0800750f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	7a5b      	ldrb	r3, [r3, #9]
 80074b8:	2bff      	cmp	r3, #255	@ 0xff
 80074ba:	d005      	beq.n	80074c8 <OutputDbgTrace+0x4c>
 80074bc:	2bff      	cmp	r3, #255	@ 0xff
 80074be:	dc05      	bgt.n	80074cc <OutputDbgTrace+0x50>
 80074c0:	2b0e      	cmp	r3, #14
 80074c2:	d005      	beq.n	80074d0 <OutputDbgTrace+0x54>
 80074c4:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80074c6:	e001      	b.n	80074cc <OutputDbgTrace+0x50>
          break;
 80074c8:	bf00      	nop
 80074ca:	e027      	b.n	800751c <OutputDbgTrace+0xa0>
          break;
 80074cc:	bf00      	nop
 80074ce:	e025      	b.n	800751c <OutputDbgTrace+0xa0>
          break;
 80074d0:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80074d2:	e023      	b.n	800751c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80074d8:	e020      	b.n	800751c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	7a5b      	ldrb	r3, [r3, #9]
 80074e2:	2b0e      	cmp	r3, #14
 80074e4:	d001      	beq.n	80074ea <OutputDbgTrace+0x6e>
 80074e6:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80074e8:	e000      	b.n	80074ec <OutputDbgTrace+0x70>
          break;
 80074ea:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80074ec:	e016      	b.n	800751c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	7a5b      	ldrb	r3, [r3, #9]
 80074f6:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80074f8:	e010      	b.n	800751c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80074fe:	e00d      	b.n	800751c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	7a5b      	ldrb	r3, [r3, #9]
 8007508:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800750a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800750c:	e006      	b.n	800751c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	7a5b      	ldrb	r3, [r3, #9]
 8007516:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007518:	e000      	b.n	800751c <OutputDbgTrace+0xa0>

    default:
      break;
 800751a:	bf00      	nop
  }

  return;
 800751c:	bf00      	nop
}
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	4603      	mov	r3, r0
 8007530:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8007532:	4b0f      	ldr	r3, [pc, #60]	@ (8007570 <OTP_Read+0x48>)
 8007534:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007536:	e002      	b.n	800753e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	3b08      	subs	r3, #8
 800753c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3307      	adds	r3, #7
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	79fa      	ldrb	r2, [r7, #7]
 8007546:	429a      	cmp	r2, r3
 8007548:	d003      	beq.n	8007552 <OTP_Read+0x2a>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	4a09      	ldr	r2, [pc, #36]	@ (8007574 <OTP_Read+0x4c>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d1f2      	bne.n	8007538 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	3307      	adds	r3, #7
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	79fa      	ldrb	r2, [r7, #7]
 800755a:	429a      	cmp	r2, r3
 800755c:	d001      	beq.n	8007562 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800755e:	2300      	movs	r3, #0
 8007560:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8007562:	68fb      	ldr	r3, [r7, #12]
}
 8007564:	4618      	mov	r0, r3
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr
 8007570:	1fff73f8 	.word	0x1fff73f8
 8007574:	1fff7000 	.word	0x1fff7000

08007578 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	605a      	str	r2, [r3, #4]
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075a0:	f3ef 8310 	mrs	r3, PRIMASK
 80075a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80075a6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80075a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80075aa:	b672      	cpsid	i
}
 80075ac:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d102      	bne.n	80075be <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80075b8:	2301      	movs	r3, #1
 80075ba:	75fb      	strb	r3, [r7, #23]
 80075bc:	e001      	b.n	80075c2 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80075be:	2300      	movs	r3, #0
 80075c0:	75fb      	strb	r3, [r7, #23]
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	f383 8810 	msr	PRIMASK, r3
}
 80075cc:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80075ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	371c      	adds	r7, #28
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80075dc:	b480      	push	{r7}
 80075de:	b087      	sub	sp, #28
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075e6:	f3ef 8310 	mrs	r3, PRIMASK
 80075ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80075ec:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80075ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80075f0:	b672      	cpsid	i
}
 80075f2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	683a      	ldr	r2, [r7, #0]
 8007606:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	683a      	ldr	r2, [r7, #0]
 800760e:	605a      	str	r2, [r3, #4]
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	f383 8810 	msr	PRIMASK, r3
}
 800761a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800761c:	bf00      	nop
 800761e:	371c      	adds	r7, #28
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8007628:	b480      	push	{r7}
 800762a:	b087      	sub	sp, #28
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007632:	f3ef 8310 	mrs	r3, PRIMASK
 8007636:	60fb      	str	r3, [r7, #12]
  return(result);
 8007638:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800763a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800763c:	b672      	cpsid	i
}
 800763e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	685a      	ldr	r2, [r3, #4]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	683a      	ldr	r2, [r7, #0]
 8007652:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	683a      	ldr	r2, [r7, #0]
 800765a:	601a      	str	r2, [r3, #0]
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f383 8810 	msr	PRIMASK, r3
}
 8007666:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007668:	bf00      	nop
 800766a:	371c      	adds	r7, #28
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8007674:	b480      	push	{r7}
 8007676:	b087      	sub	sp, #28
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800767c:	f3ef 8310 	mrs	r3, PRIMASK
 8007680:	60fb      	str	r3, [r7, #12]
  return(result);
 8007682:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007684:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007686:	b672      	cpsid	i
}
 8007688:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	6812      	ldr	r2, [r2, #0]
 8007692:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	6852      	ldr	r2, [r2, #4]
 800769c:	605a      	str	r2, [r3, #4]
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	f383 8810 	msr	PRIMASK, r3
}
 80076a8:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80076aa:	bf00      	nop
 80076ac:	371c      	adds	r7, #28
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b086      	sub	sp, #24
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076c0:	f3ef 8310 	mrs	r3, PRIMASK
 80076c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80076c6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80076c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80076ca:	b672      	cpsid	i
}
 80076cc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4618      	mov	r0, r3
 80076dc:	f7ff ffca 	bl	8007674 <LST_remove_node>
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	f383 8810 	msr	PRIMASK, r3
}
 80076ea:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80076ec:	bf00      	nop
 80076ee:	3718      	adds	r7, #24
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80076f4:	b480      	push	{r7}
 80076f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80076f8:	4b03      	ldr	r3, [pc, #12]	@ (8007708 <LL_FLASH_GetUDN+0x14>)
 80076fa:	681b      	ldr	r3, [r3, #0]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	1fff7580 	.word	0x1fff7580

0800770c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800770c:	b480      	push	{r7}
 800770e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8007710:	4b03      	ldr	r3, [pc, #12]	@ (8007720 <LL_FLASH_GetDeviceID+0x14>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	b2db      	uxtb	r3, r3
}
 8007716:	4618      	mov	r0, r3
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr
 8007720:	1fff7584 	.word	0x1fff7584

08007724 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8007724:	b480      	push	{r7}
 8007726:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8007728:	4b03      	ldr	r3, [pc, #12]	@ (8007738 <LL_FLASH_GetSTCompanyID+0x14>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	0a1b      	lsrs	r3, r3, #8
}
 800772e:	4618      	mov	r0, r3
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	1fff7584 	.word	0x1fff7584

0800773c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800773c:	b5b0      	push	{r4, r5, r7, lr}
 800773e:	b090      	sub	sp, #64	@ 0x40
 8007740:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007742:	2392      	movs	r3, #146	@ 0x92
 8007744:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_MY_TASK, UTIL_SEQ_RFU, myTask);
 8007748:	4a29      	ldr	r2, [pc, #164]	@ (80077f0 <APP_BLE_Init+0xb4>)
 800774a:	2100      	movs	r1, #0
 800774c:	2004      	movs	r0, #4
 800774e:	f001 f85b 	bl	8008808 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 8007752:	2100      	movs	r1, #0
 8007754:	2004      	movs	r0, #4
 8007756:	f001 f879 	bl	800884c <UTIL_SEQ_SetTask>
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800775a:	4b26      	ldr	r3, [pc, #152]	@ (80077f4 <APP_BLE_Init+0xb8>)
 800775c:	1d3c      	adds	r4, r7, #4
 800775e:	461d      	mov	r5, r3
 8007760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800776a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800776c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007770:	c403      	stmia	r4!, {r0, r1}
 8007772:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8007774:	f000 f914 	bl	80079a0 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8007778:	2101      	movs	r1, #1
 800777a:	2002      	movs	r0, #2
 800777c:	f000 ff18 	bl	80085b0 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8007780:	4a1d      	ldr	r2, [pc, #116]	@ (80077f8 <APP_BLE_Init+0xbc>)
 8007782:	2100      	movs	r1, #0
 8007784:	2002      	movs	r0, #2
 8007786:	f001 f83f 	bl	8008808 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800778a:	1d3b      	adds	r3, r7, #4
 800778c:	4618      	mov	r0, r3
 800778e:	f7ff f8bd 	bl	800690c <SHCI_C2_BLE_Init>
 8007792:	4603      	mov	r3, r0
 8007794:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8007798:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800779c:	2b00      	cmp	r3, #0
 800779e:	d001      	beq.n	80077a4 <APP_BLE_Init+0x68>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80077a0:	f7fa f822 	bl	80017e8 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80077a4:	f000 f912 	bl	80079cc <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80077a8:	f7ff f80a 	bl	80067c0 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80077ac:	4b13      	ldr	r3, [pc, #76]	@ (80077fc <APP_BLE_Init+0xc0>)
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80077b4:	4b11      	ldr	r3, [pc, #68]	@ (80077fc <APP_BLE_Init+0xc0>)
 80077b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80077ba:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80077bc:	4a10      	ldr	r2, [pc, #64]	@ (8007800 <APP_BLE_Init+0xc4>)
 80077be:	2100      	movs	r1, #0
 80077c0:	2001      	movs	r0, #1
 80077c2:	f001 f821 	bl	8008808 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 80077c6:	2006      	movs	r0, #6
 80077c8:	f7fe fe6d 	bl	80064a6 <aci_hal_set_radio_activity_mask>
 80077cc:	4603      	mov	r3, r0
 80077ce:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80077d2:	f000 fad9 	bl	8007d88 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80077d6:	4b09      	ldr	r3, [pc, #36]	@ (80077fc <APP_BLE_Init+0xc0>)
 80077d8:	2200      	movs	r2, #0
 80077da:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80077dc:	4b07      	ldr	r3, [pc, #28]	@ (80077fc <APP_BLE_Init+0xc0>)
 80077de:	2200      	movs	r2, #0
 80077e0:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 80077e2:	2001      	movs	r0, #1
 80077e4:	f000 f9a6 	bl	8007b34 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 80077e8:	bf00      	nop
}
 80077ea:	3740      	adds	r7, #64	@ 0x40
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bdb0      	pop	{r4, r5, r7, pc}
 80077f0:	08007d05 	.word	0x08007d05
 80077f4:	08008b58 	.word	0x08008b58
 80077f8:	08006b29 	.word	0x08006b29
 80077fc:	2000030c 	.word	0x2000030c
 8007800:	08007c1d 	.word	0x08007c1d

08007804 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b08a      	sub	sp, #40	@ 0x28
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800780c:	2392      	movs	r3, #146	@ 0x92
 800780e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	3301      	adds	r3, #1
 8007816:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8007818:	6a3b      	ldr	r3, [r7, #32]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	2bff      	cmp	r3, #255	@ 0xff
 800781e:	d053      	beq.n	80078c8 <SVCCTL_App_Notification+0xc4>
 8007820:	2bff      	cmp	r3, #255	@ 0xff
 8007822:	f300 80af 	bgt.w	8007984 <SVCCTL_App_Notification+0x180>
 8007826:	2b05      	cmp	r3, #5
 8007828:	d002      	beq.n	8007830 <SVCCTL_App_Notification+0x2c>
 800782a:	2b3e      	cmp	r3, #62	@ 0x3e
 800782c:	d020      	beq.n	8007870 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800782e:	e0a9      	b.n	8007984 <SVCCTL_App_Notification+0x180>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8007830:	6a3b      	ldr	r3, [r7, #32]
 8007832:	3302      	adds	r3, #2
 8007834:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800783c:	b29a      	uxth	r2, r3
 800783e:	4b55      	ldr	r3, [pc, #340]	@ (8007994 <SVCCTL_App_Notification+0x190>)
 8007840:	8adb      	ldrh	r3, [r3, #22]
 8007842:	429a      	cmp	r2, r3
 8007844:	d106      	bne.n	8007854 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8007846:	4b53      	ldr	r3, [pc, #332]	@ (8007994 <SVCCTL_App_Notification+0x190>)
 8007848:	2200      	movs	r2, #0
 800784a:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800784c:	4b51      	ldr	r3, [pc, #324]	@ (8007994 <SVCCTL_App_Notification+0x190>)
 800784e:	2200      	movs	r2, #0
 8007850:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8007854:	2001      	movs	r0, #1
 8007856:	f000 f96d 	bl	8007b34 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800785a:	4b4f      	ldr	r3, [pc, #316]	@ (8007998 <SVCCTL_App_Notification+0x194>)
 800785c:	2201      	movs	r2, #1
 800785e:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007860:	4b4c      	ldr	r3, [pc, #304]	@ (8007994 <SVCCTL_App_Notification+0x190>)
 8007862:	8ada      	ldrh	r2, [r3, #22]
 8007864:	4b4c      	ldr	r3, [pc, #304]	@ (8007998 <SVCCTL_App_Notification+0x194>)
 8007866:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8007868:	484b      	ldr	r0, [pc, #300]	@ (8007998 <SVCCTL_App_Notification+0x194>)
 800786a:	f000 fa79 	bl	8007d60 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800786e:	e08c      	b.n	800798a <SVCCTL_App_Notification+0x186>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8007870:	6a3b      	ldr	r3, [r7, #32]
 8007872:	3302      	adds	r3, #2
 8007874:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d001      	beq.n	8007882 <SVCCTL_App_Notification+0x7e>
 800787e:	2b03      	cmp	r3, #3
          break;
 8007880:	e021      	b.n	80078c6 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	3301      	adds	r3, #1
 8007886:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8007888:	4b42      	ldr	r3, [pc, #264]	@ (8007994 <SVCCTL_App_Notification+0x190>)
 800788a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800788e:	2b04      	cmp	r3, #4
 8007890:	d104      	bne.n	800789c <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8007892:	4b40      	ldr	r3, [pc, #256]	@ (8007994 <SVCCTL_App_Notification+0x190>)
 8007894:	2206      	movs	r2, #6
 8007896:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800789a:	e003      	b.n	80078a4 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800789c:	4b3d      	ldr	r3, [pc, #244]	@ (8007994 <SVCCTL_App_Notification+0x190>)
 800789e:	2205      	movs	r2, #5
 80078a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	4b39      	ldr	r3, [pc, #228]	@ (8007994 <SVCCTL_App_Notification+0x190>)
 80078ae:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80078b0:	4b39      	ldr	r3, [pc, #228]	@ (8007998 <SVCCTL_App_Notification+0x194>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80078b6:	4b37      	ldr	r3, [pc, #220]	@ (8007994 <SVCCTL_App_Notification+0x190>)
 80078b8:	8ada      	ldrh	r2, [r3, #22]
 80078ba:	4b37      	ldr	r3, [pc, #220]	@ (8007998 <SVCCTL_App_Notification+0x194>)
 80078bc:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 80078be:	4836      	ldr	r0, [pc, #216]	@ (8007998 <SVCCTL_App_Notification+0x194>)
 80078c0:	f000 fa4e 	bl	8007d60 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80078c4:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80078c6:	e060      	b.n	800798a <SVCCTL_App_Notification+0x186>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	3302      	adds	r3, #2
 80078cc:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	881b      	ldrh	r3, [r3, #0]
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80078d8:	4293      	cmp	r3, r2
 80078da:	d047      	beq.n	800796c <SVCCTL_App_Notification+0x168>
 80078dc:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80078e0:	4293      	cmp	r3, r2
 80078e2:	dc51      	bgt.n	8007988 <SVCCTL_App_Notification+0x184>
 80078e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078e8:	d046      	beq.n	8007978 <SVCCTL_App_Notification+0x174>
 80078ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078ee:	dc4b      	bgt.n	8007988 <SVCCTL_App_Notification+0x184>
 80078f0:	2b04      	cmp	r3, #4
 80078f2:	d043      	beq.n	800797c <SVCCTL_App_Notification+0x178>
 80078f4:	2b04      	cmp	r3, #4
 80078f6:	db47      	blt.n	8007988 <SVCCTL_App_Notification+0x184>
 80078f8:	f240 420a 	movw	r2, #1034	@ 0x40a
 80078fc:	4293      	cmp	r3, r2
 80078fe:	dc43      	bgt.n	8007988 <SVCCTL_App_Notification+0x184>
 8007900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007904:	dd40      	ble.n	8007988 <SVCCTL_App_Notification+0x184>
 8007906:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800790a:	2b09      	cmp	r3, #9
 800790c:	d83c      	bhi.n	8007988 <SVCCTL_App_Notification+0x184>
 800790e:	a201      	add	r2, pc, #4	@ (adr r2, 8007914 <SVCCTL_App_Notification+0x110>)
 8007910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007914:	08007965 	.word	0x08007965
 8007918:	0800793d 	.word	0x0800793d
 800791c:	08007989 	.word	0x08007989
 8007920:	08007989 	.word	0x08007989
 8007924:	08007989 	.word	0x08007989
 8007928:	08007989 	.word	0x08007989
 800792c:	08007981 	.word	0x08007981
 8007930:	08007989 	.word	0x08007989
 8007934:	08007951 	.word	0x08007951
 8007938:	08007981 	.word	0x08007981
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800793c:	4b15      	ldr	r3, [pc, #84]	@ (8007994 <SVCCTL_App_Notification+0x190>)
 800793e:	8adb      	ldrh	r3, [r3, #22]
 8007940:	4916      	ldr	r1, [pc, #88]	@ (800799c <SVCCTL_App_Notification+0x198>)
 8007942:	4618      	mov	r0, r3
 8007944:	f7fd feee 	bl	8005724 <aci_gap_pass_key_resp>
 8007948:	4603      	mov	r3, r0
 800794a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800794e:	e018      	b.n	8007982 <SVCCTL_App_Notification+0x17e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8007950:	4b10      	ldr	r3, [pc, #64]	@ (8007994 <SVCCTL_App_Notification+0x190>)
 8007952:	8adb      	ldrh	r3, [r3, #22]
 8007954:	2101      	movs	r1, #1
 8007956:	4618      	mov	r0, r3
 8007958:	f7fe f88e 	bl	8005a78 <aci_gap_numeric_comparison_value_confirm_yesno>
 800795c:	4603      	mov	r3, r0
 800795e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 8007962:	e00e      	b.n	8007982 <SVCCTL_App_Notification+0x17e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	3302      	adds	r3, #2
 8007968:	61bb      	str	r3, [r7, #24]
          break;
 800796a:	e00a      	b.n	8007982 <SVCCTL_App_Notification+0x17e>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800796c:	4b09      	ldr	r3, [pc, #36]	@ (8007994 <SVCCTL_App_Notification+0x190>)
 800796e:	8adb      	ldrh	r3, [r3, #22]
 8007970:	4618      	mov	r0, r3
 8007972:	f7fe fb94 	bl	800609e <aci_gatt_confirm_indication>
        break;
 8007976:	e004      	b.n	8007982 <SVCCTL_App_Notification+0x17e>
          break;
 8007978:	bf00      	nop
 800797a:	e005      	b.n	8007988 <SVCCTL_App_Notification+0x184>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800797c:	bf00      	nop
 800797e:	e003      	b.n	8007988 <SVCCTL_App_Notification+0x184>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8007980:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007982:	e001      	b.n	8007988 <SVCCTL_App_Notification+0x184>
      break;
 8007984:	bf00      	nop
 8007986:	e000      	b.n	800798a <SVCCTL_App_Notification+0x186>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007988:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800798a:	2301      	movs	r3, #1
}
 800798c:	4618      	mov	r0, r3
 800798e:	3728      	adds	r7, #40	@ 0x28
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	2000030c 	.word	0x2000030c
 8007998:	20000390 	.word	0x20000390
 800799c:	0001b207 	.word	0x0001b207

080079a0 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80079a6:	4b06      	ldr	r3, [pc, #24]	@ (80079c0 <Ble_Tl_Init+0x20>)
 80079a8:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80079aa:	4b06      	ldr	r3, [pc, #24]	@ (80079c4 <Ble_Tl_Init+0x24>)
 80079ac:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80079ae:	463b      	mov	r3, r7
 80079b0:	4619      	mov	r1, r3
 80079b2:	4805      	ldr	r0, [pc, #20]	@ (80079c8 <Ble_Tl_Init+0x28>)
 80079b4:	f7ff f89c 	bl	8006af0 <hci_init>

  return;
 80079b8:	bf00      	nop
}
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	200300d8 	.word	0x200300d8
 80079c4:	08007ccd 	.word	0x08007ccd
 80079c8:	08007c95 	.word	0x08007c95

080079cc <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80079cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079ce:	b08d      	sub	sp, #52	@ 0x34
 80079d0:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80079d2:	2300      	movs	r3, #0
 80079d4:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80079d6:	2392      	movs	r3, #146	@ 0x92
 80079d8:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80079da:	f7fe fdb8 	bl	800654e <hci_reset>
 80079de:	4603      	mov	r3, r0
 80079e0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 80079e2:	f000 f8d7 	bl	8007b94 <BleGetBdAddress>
 80079e6:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	2106      	movs	r1, #6
 80079ec:	2000      	movs	r0, #0
 80079ee:	f7fe fc6e 	bl	80062ce <aci_hal_write_config_data>
 80079f2:	4603      	mov	r3, r0
 80079f4:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80079f6:	4a4a      	ldr	r2, [pc, #296]	@ (8007b20 <Ble_Hci_Gap_Gatt_Init+0x154>)
 80079f8:	2110      	movs	r1, #16
 80079fa:	2018      	movs	r0, #24
 80079fc:	f7fe fc67 	bl	80062ce <aci_hal_write_config_data>
 8007a00:	4603      	mov	r3, r0
 8007a02:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8007a04:	4a47      	ldr	r2, [pc, #284]	@ (8007b24 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8007a06:	2110      	movs	r1, #16
 8007a08:	2008      	movs	r0, #8
 8007a0a:	f7fe fc60 	bl	80062ce <aci_hal_write_config_data>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8007a12:	2118      	movs	r1, #24
 8007a14:	2001      	movs	r0, #1
 8007a16:	f7fe fcdf 	bl	80063d8 <aci_hal_set_tx_power_level>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8007a1e:	f7fe f892 	bl	8005b46 <aci_gatt_init>
 8007a22:	4603      	mov	r3, r0
 8007a24:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8007a26:	2300      	movs	r3, #0
 8007a28:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8007a2a:	7bfb      	ldrb	r3, [r7, #15]
 8007a2c:	f043 0301 	orr.w	r3, r3, #1
 8007a30:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8007a32:	7bfb      	ldrb	r3, [r7, #15]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d01f      	beq.n	8007a78 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8007a38:	4b3b      	ldr	r3, [pc, #236]	@ (8007b28 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8007a3a:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8007a3c:	1dba      	adds	r2, r7, #6
 8007a3e:	7bf8      	ldrb	r0, [r7, #15]
 8007a40:	1cbb      	adds	r3, r7, #2
 8007a42:	9301      	str	r3, [sp, #4]
 8007a44:	1d3b      	adds	r3, r7, #4
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	4613      	mov	r3, r2
 8007a4a:	2208      	movs	r2, #8
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	f7fd fed0 	bl	80057f2 <aci_gap_init>
 8007a52:	4603      	mov	r3, r0
 8007a54:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8007a56:	88fc      	ldrh	r4, [r7, #6]
 8007a58:	88bd      	ldrh	r5, [r7, #4]
 8007a5a:	68b8      	ldr	r0, [r7, #8]
 8007a5c:	f7f8 fb8e 	bl	800017c <strlen>
 8007a60:	4603      	mov	r3, r0
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	4613      	mov	r3, r2
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	4629      	mov	r1, r5
 8007a6e:	4620      	mov	r0, r4
 8007a70:	f7fe fa6c 	bl	8005f4c <aci_gatt_update_char_value>
 8007a74:	4603      	mov	r3, r0
 8007a76:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8007a78:	88f8      	ldrh	r0, [r7, #6]
 8007a7a:	8879      	ldrh	r1, [r7, #2]
 8007a7c:	463b      	mov	r3, r7
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	2302      	movs	r3, #2
 8007a82:	2200      	movs	r2, #0
 8007a84:	f7fe fa62 	bl	8005f4c <aci_gatt_update_char_value>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8007a8c:	2202      	movs	r2, #2
 8007a8e:	2102      	movs	r1, #2
 8007a90:	2000      	movs	r0, #0
 8007a92:	f7fe fd80 	bl	8006596 <hci_le_set_default_phy>
 8007a96:	4603      	mov	r3, r0
 8007a98:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8007a9a:	4b24      	ldr	r3, [pc, #144]	@ (8007b2c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8007aa0:	4b22      	ldr	r3, [pc, #136]	@ (8007b2c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7fd fd25 	bl	80054f4 <aci_gap_set_io_capability>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8007aae:	4b1f      	ldr	r3, [pc, #124]	@ (8007b2c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8007ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8007b2c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007ab6:	2208      	movs	r2, #8
 8007ab8:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8007aba:	4b1c      	ldr	r3, [pc, #112]	@ (8007b2c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007abc:	2210      	movs	r2, #16
 8007abe:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8007ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8007b2c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8007ac6:	4b19      	ldr	r3, [pc, #100]	@ (8007b2c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007ac8:	4a19      	ldr	r2, [pc, #100]	@ (8007b30 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8007aca:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8007acc:	4b17      	ldr	r3, [pc, #92]	@ (8007b2c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007ace:	2200      	movs	r2, #0
 8007ad0:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8007ad2:	4b16      	ldr	r3, [pc, #88]	@ (8007b2c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007ad4:	789c      	ldrb	r4, [r3, #2]
 8007ad6:	4b15      	ldr	r3, [pc, #84]	@ (8007b2c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007ad8:	785d      	ldrb	r5, [r3, #1]
 8007ada:	4b14      	ldr	r3, [pc, #80]	@ (8007b2c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007adc:	791b      	ldrb	r3, [r3, #4]
 8007ade:	4a13      	ldr	r2, [pc, #76]	@ (8007b2c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007ae0:	7952      	ldrb	r2, [r2, #5]
 8007ae2:	4912      	ldr	r1, [pc, #72]	@ (8007b2c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007ae4:	78c9      	ldrb	r1, [r1, #3]
 8007ae6:	4811      	ldr	r0, [pc, #68]	@ (8007b2c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007ae8:	6880      	ldr	r0, [r0, #8]
 8007aea:	2600      	movs	r6, #0
 8007aec:	9604      	str	r6, [sp, #16]
 8007aee:	9003      	str	r0, [sp, #12]
 8007af0:	9102      	str	r1, [sp, #8]
 8007af2:	9201      	str	r2, [sp, #4]
 8007af4:	9300      	str	r3, [sp, #0]
 8007af6:	2300      	movs	r3, #0
 8007af8:	2201      	movs	r2, #1
 8007afa:	4629      	mov	r1, r5
 8007afc:	4620      	mov	r0, r4
 8007afe:	f7fd fd4d 	bl	800559c <aci_gap_set_authentication_requirement>
 8007b02:	4603      	mov	r3, r0
 8007b04:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8007b06:	4b09      	ldr	r3, [pc, #36]	@ (8007b2c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007b08:	789b      	ldrb	r3, [r3, #2]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d003      	beq.n	8007b16 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8007b0e:	f7fd ff8f 	bl	8005a30 <aci_gap_configure_filter_accept_list>
 8007b12:	4603      	mov	r3, r0
 8007b14:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8007b16:	bf00      	nop
 8007b18:	371c      	adds	r7, #28
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	08008da0 	.word	0x08008da0
 8007b24:	08008db0 	.word	0x08008db0
 8007b28:	08008b94 	.word	0x08008b94
 8007b2c:	2000030c 	.word	0x2000030c
 8007b30:	0001b207 	.word	0x0001b207

08007b34 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b08c      	sub	sp, #48	@ 0x30
 8007b38:	af08      	add	r7, sp, #32
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007b3e:	2392      	movs	r3, #146	@ 0x92
 8007b40:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8007b42:	4a12      	ldr	r2, [pc, #72]	@ (8007b8c <Adv_Request+0x58>)
 8007b44:	79fb      	ldrb	r3, [r7, #7]
 8007b46:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	9306      	str	r3, [sp, #24]
 8007b4e:	2300      	movs	r3, #0
 8007b50:	9305      	str	r3, [sp, #20]
 8007b52:	2300      	movs	r3, #0
 8007b54:	9304      	str	r3, [sp, #16]
 8007b56:	2300      	movs	r3, #0
 8007b58:	9303      	str	r3, [sp, #12]
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	9302      	str	r3, [sp, #8]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	9301      	str	r3, [sp, #4]
 8007b62:	2300      	movs	r3, #0
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	2300      	movs	r3, #0
 8007b68:	22a0      	movs	r2, #160	@ 0xa0
 8007b6a:	2180      	movs	r1, #128	@ 0x80
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	f7fd fbc7 	bl	8005300 <aci_gap_set_discoverable>
 8007b72:	4603      	mov	r3, r0
 8007b74:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8007b76:	4906      	ldr	r1, [pc, #24]	@ (8007b90 <Adv_Request+0x5c>)
 8007b78:	200b      	movs	r0, #11
 8007b7a:	f7fd fee7 	bl	800594c <aci_gap_update_adv_data>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8007b82:	bf00      	nop
}
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	2000030c 	.word	0x2000030c
 8007b90:	20000014 	.word	0x20000014

08007b94 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8007b9a:	f7ff fdab 	bl	80076f4 <LL_FLASH_GetUDN>
 8007b9e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba6:	d023      	beq.n	8007bf0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8007ba8:	f7ff fdbc 	bl	8007724 <LL_FLASH_GetSTCompanyID>
 8007bac:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8007bae:	f7ff fdad 	bl	800770c <LL_FLASH_GetDeviceID>
 8007bb2:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	b2da      	uxtb	r2, r3
 8007bb8:	4b16      	ldr	r3, [pc, #88]	@ (8007c14 <BleGetBdAddress+0x80>)
 8007bba:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	0a1b      	lsrs	r3, r3, #8
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	4b14      	ldr	r3, [pc, #80]	@ (8007c14 <BleGetBdAddress+0x80>)
 8007bc4:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	4b12      	ldr	r3, [pc, #72]	@ (8007c14 <BleGetBdAddress+0x80>)
 8007bcc:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	4b10      	ldr	r3, [pc, #64]	@ (8007c14 <BleGetBdAddress+0x80>)
 8007bd4:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	0a1b      	lsrs	r3, r3, #8
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8007c14 <BleGetBdAddress+0x80>)
 8007bde:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	0c1b      	lsrs	r3, r3, #16
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	4b0b      	ldr	r3, [pc, #44]	@ (8007c14 <BleGetBdAddress+0x80>)
 8007be8:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8007bea:	4b0a      	ldr	r3, [pc, #40]	@ (8007c14 <BleGetBdAddress+0x80>)
 8007bec:	617b      	str	r3, [r7, #20]
 8007bee:	e00b      	b.n	8007c08 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8007bf0:	2000      	movs	r0, #0
 8007bf2:	f7ff fc99 	bl	8007528 <OTP_Read>
 8007bf6:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d002      	beq.n	8007c04 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	617b      	str	r3, [r7, #20]
 8007c02:	e001      	b.n	8007c08 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8007c04:	4b04      	ldr	r3, [pc, #16]	@ (8007c18 <BleGetBdAddress+0x84>)
 8007c06:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8007c08:	697b      	ldr	r3, [r7, #20]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3718      	adds	r7, #24
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	20000304 	.word	0x20000304
 8007c18:	08008d98 	.word	0x08008d98

08007c1c <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8007c22:	4b0a      	ldr	r3, [pc, #40]	@ (8007c4c <Adv_Cancel+0x30>)
 8007c24:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007c28:	2b05      	cmp	r3, #5
 8007c2a:	d00a      	beq.n	8007c42 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007c2c:	2392      	movs	r3, #146	@ 0x92
 8007c2e:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8007c30:	f7fd fb42 	bl	80052b8 <aci_gap_set_non_discoverable>
 8007c34:	4603      	mov	r3, r0
 8007c36:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007c38:	4b04      	ldr	r3, [pc, #16]	@ (8007c4c <Adv_Cancel+0x30>)
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8007c40:	bf00      	nop
 8007c42:	bf00      	nop
}
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	2000030c 	.word	0x2000030c

08007c50 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8007c58:	2100      	movs	r1, #0
 8007c5a:	2002      	movs	r0, #2
 8007c5c:	f000 fdf6 	bl	800884c <UTIL_SEQ_SetTask>

  return;
 8007c60:	bf00      	nop
}
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007c70:	2001      	movs	r0, #1
 8007c72:	f000 fe57 	bl	8008924 <UTIL_SEQ_SetEvt>

  return;
 8007c76:	bf00      	nop
}
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b082      	sub	sp, #8
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007c86:	2001      	movs	r0, #1
 8007c88:	f000 fe6c 	bl	8008964 <UTIL_SEQ_WaitEvt>

  return;
 8007c8c:	bf00      	nop
}
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	3308      	adds	r3, #8
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fe fddc 	bl	8006864 <SVCCTL_UserEvtRx>
 8007cac:	4603      	mov	r3, r0
 8007cae:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8007cb0:	7afb      	ldrb	r3, [r7, #11]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d003      	beq.n	8007cbe <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8007cbc:	e003      	b.n	8007cc6 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	701a      	strb	r2, [r3, #0]
  return;
 8007cc4:	bf00      	nop
}
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8007cd6:	79fb      	ldrb	r3, [r7, #7]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d002      	beq.n	8007ce2 <BLE_StatusNot+0x16>
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d006      	beq.n	8007cee <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8007ce0:	e00b      	b.n	8007cfa <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007ce2:	2307      	movs	r3, #7
 8007ce4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f000 fddc 	bl	80088a4 <UTIL_SEQ_PauseTask>
      break;
 8007cec:	e005      	b.n	8007cfa <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007cee:	2307      	movs	r3, #7
 8007cf0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f000 fdf6 	bl	80088e4 <UTIL_SEQ_ResumeTask>
      break;
 8007cf8:	bf00      	nop
  }

  return;
 8007cfa:	bf00      	nop
}
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
	...

08007d04 <myTask>:
static void Custom_Mycharnotify_Update_Char(void);
static void Custom_Mycharnotify_Send_Notification(void);

/* USER CODE BEGIN PFP */
void myTask(void)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	af00      	add	r7, sp, #0
   UpdateCharData[0] =UpdateCharData[0]+0x1;
 8007d08:	4b06      	ldr	r3, [pc, #24]	@ (8007d24 <myTask+0x20>)
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	4b04      	ldr	r3, [pc, #16]	@ (8007d24 <myTask+0x20>)
 8007d12:	701a      	strb	r2, [r3, #0]
   Custom_Mycharnotify_Update_Char();
 8007d14:	f000 f840 	bl	8007d98 <Custom_Mycharnotify_Update_Char>
   //printf("%d\n",UpdateCharData[0]);

   UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 8007d18:	2100      	movs	r1, #0
 8007d1a:	2004      	movs	r0, #4
 8007d1c:	f000 fd96 	bl	800884c <UTIL_SEQ_SetTask>
}
 8007d20:	bf00      	nop
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	20000394 	.word	0x20000394

08007d28 <Custom_STM_App_Notification>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d006      	beq.n	8007d46 <Custom_STM_App_Notification+0x1e>
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	dc06      	bgt.n	8007d4a <Custom_STM_App_Notification+0x22>
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d006      	beq.n	8007d4e <Custom_STM_App_Notification+0x26>
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d006      	beq.n	8007d52 <Custom_STM_App_Notification+0x2a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8007d44:	e001      	b.n	8007d4a <Custom_STM_App_Notification+0x22>
      break;
 8007d46:	bf00      	nop
 8007d48:	e004      	b.n	8007d54 <Custom_STM_App_Notification+0x2c>
      break;
 8007d4a:	bf00      	nop
 8007d4c:	e002      	b.n	8007d54 <Custom_STM_App_Notification+0x2c>
      break;
 8007d4e:	bf00      	nop
 8007d50:	e000      	b.n	8007d54 <Custom_STM_App_Notification+0x2c>
      break;
 8007d52:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8007d54:	bf00      	nop
}
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d002      	beq.n	8007d76 <Custom_APP_Notification+0x16>
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d002      	beq.n	8007d7a <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8007d74:	e002      	b.n	8007d7c <Custom_APP_Notification+0x1c>
      break;
 8007d76:	bf00      	nop
 8007d78:	e000      	b.n	8007d7c <Custom_APP_Notification+0x1c>
      break;
 8007d7a:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8007d7c:	bf00      	nop
}
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8007d8c:	bf00      	nop
}
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
	...

08007d98 <Custom_Mycharnotify_Update_Char>:
 *
 *************************************************************/

/* mySVC */
__USED void Custom_Mycharnotify_Update_Char(void) /* Property Read */
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Mycharnotify_UC_1*/
  updateflag = 1;
 8007da2:	2301      	movs	r3, #1
 8007da4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END Mycharnotify_UC_1*/

  if (updateflag != 0)
 8007da6:	79fb      	ldrb	r3, [r7, #7]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d007      	beq.n	8007dbc <Custom_Mycharnotify_Update_Char+0x24>
  {
	Custom_STM_App_Update_Char_Ext(Connection_Handle, CUSTOM_STM_MYCHARNOTIFY, (uint8_t *)UpdateCharData);
 8007dac:	4b05      	ldr	r3, [pc, #20]	@ (8007dc4 <Custom_Mycharnotify_Update_Char+0x2c>)
 8007dae:	881b      	ldrh	r3, [r3, #0]
 8007db0:	4a05      	ldr	r2, [pc, #20]	@ (8007dc8 <Custom_Mycharnotify_Update_Char+0x30>)
 8007db2:	2100      	movs	r1, #0
 8007db4:	4618      	mov	r0, r3
 8007db6:	f000 f915 	bl	8007fe4 <Custom_STM_App_Update_Char_Ext>
  }

  /* USER CODE BEGIN Mycharnotify_UC_Last*/

  /* USER CODE END Mycharnotify_UC_Last*/
  return;
 8007dba:	bf00      	nop
 8007dbc:	bf00      	nop
}
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	20000594 	.word	0x20000594
 8007dc8:	20000394 	.word	0x20000394

08007dcc <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b08c      	sub	sp, #48	@ 0x30
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 8007de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	2bff      	cmp	r3, #255	@ 0xff
 8007de6:	d17d      	bne.n	8007ee4 <Custom_STM_Event_Handler+0x118>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8007de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dea:	3302      	adds	r3, #2
 8007dec:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 8007dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df0:	881b      	ldrh	r3, [r3, #0]
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 8007df8:	2b1a      	cmp	r3, #26
 8007dfa:	d86f      	bhi.n	8007edc <Custom_STM_Event_Handler+0x110>
 8007dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8007e04 <Custom_STM_Event_Handler+0x38>)
 8007dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e02:	bf00      	nop
 8007e04:	08007e71 	.word	0x08007e71
 8007e08:	08007edd 	.word	0x08007edd
 8007e0c:	08007edd 	.word	0x08007edd
 8007e10:	08007edd 	.word	0x08007edd
 8007e14:	08007edd 	.word	0x08007edd
 8007e18:	08007edd 	.word	0x08007edd
 8007e1c:	08007edd 	.word	0x08007edd
 8007e20:	08007edd 	.word	0x08007edd
 8007e24:	08007edd 	.word	0x08007edd
 8007e28:	08007edd 	.word	0x08007edd
 8007e2c:	08007edd 	.word	0x08007edd
 8007e30:	08007edd 	.word	0x08007edd
 8007e34:	08007edd 	.word	0x08007edd
 8007e38:	08007edd 	.word	0x08007edd
 8007e3c:	08007edd 	.word	0x08007edd
 8007e40:	08007edd 	.word	0x08007edd
 8007e44:	08007edd 	.word	0x08007edd
 8007e48:	08007edd 	.word	0x08007edd
 8007e4c:	08007edd 	.word	0x08007edd
 8007e50:	08007edd 	.word	0x08007edd
 8007e54:	08007edd 	.word	0x08007edd
 8007e58:	08007edd 	.word	0x08007edd
 8007e5c:	08007edd 	.word	0x08007edd
 8007e60:	08007edd 	.word	0x08007edd
 8007e64:	08007edd 	.word	0x08007edd
 8007e68:	08007edd 	.word	0x08007edd
 8007e6c:	08007ebf 	.word	0x08007ebf
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8007e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e72:	3302      	adds	r3, #2
 8007e74:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	885b      	ldrh	r3, [r3, #2]
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ef4 <Custom_STM_Event_Handler+0x128>)
 8007e80:	885b      	ldrh	r3, [r3, #2]
 8007e82:	3302      	adds	r3, #2
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d12b      	bne.n	8007ee0 <Custom_STM_Event_Handler+0x114>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	7a1b      	ldrb	r3, [r3, #8]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d002      	beq.n	8007e9c <Custom_STM_Event_Handler+0xd0>
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d008      	beq.n	8007eac <Custom_STM_Event_Handler+0xe0>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_1_default */
              break;
 8007e9a:	e00f      	b.n	8007ebc <Custom_STM_Event_Handler+0xf0>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8007ea0:	f107 0308 	add.w	r3, r7, #8
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7ff ff3f 	bl	8007d28 <Custom_STM_App_Notification>
                break;
 8007eaa:	e007      	b.n	8007ebc <Custom_STM_Event_Handler+0xf0>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT;
 8007eac:	2300      	movs	r3, #0
 8007eae:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8007eb0:	f107 0308 	add.w	r3, r7, #8
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7ff ff37 	bl	8007d28 <Custom_STM_App_Notification>
                break;
 8007eba:	bf00      	nop
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 8007ebc:	e010      	b.n	8007ee0 <Custom_STM_Event_Handler+0x114>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec0:	3302      	adds	r3, #2
 8007ec2:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8007ec8:	6a3b      	ldr	r3, [r7, #32]
 8007eca:	881b      	ldrh	r3, [r3, #0]
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 8007ed0:	f107 0308 	add.w	r3, r7, #8
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7ff ff27 	bl	8007d28 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8007eda:	e002      	b.n	8007ee2 <Custom_STM_Event_Handler+0x116>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8007edc:	bf00      	nop
 8007ede:	e002      	b.n	8007ee6 <Custom_STM_Event_Handler+0x11a>
          break;
 8007ee0:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007ee2:	e000      	b.n	8007ee6 <Custom_STM_Event_Handler+0x11a>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8007ee4:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8007ee6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 8007eea:	4618      	mov	r0, r3
 8007eec:	3730      	adds	r7, #48	@ 0x30
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20000598 	.word	0x20000598

08007ef8 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b08c      	sub	sp, #48	@ 0x30
 8007efc:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007efe:	2392      	movs	r3, #146	@ 0x92
 8007f00:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8007f02:	4834      	ldr	r0, [pc, #208]	@ (8007fd4 <SVCCTL_InitCustomSvc+0xdc>)
 8007f04:	f7fe fc94 	bl	8006830 <SVCCTL_RegisterSvcHandler>
   *                              = 4
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 4;
 8007f08:	2304      	movs	r3, #4
 8007f0a:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 8007f0c:	238f      	movs	r3, #143	@ 0x8f
 8007f0e:	713b      	strb	r3, [r7, #4]
 8007f10:	23e5      	movs	r3, #229	@ 0xe5
 8007f12:	717b      	strb	r3, [r7, #5]
 8007f14:	23b3      	movs	r3, #179	@ 0xb3
 8007f16:	71bb      	strb	r3, [r7, #6]
 8007f18:	23d5      	movs	r3, #213	@ 0xd5
 8007f1a:	71fb      	strb	r3, [r7, #7]
 8007f1c:	232e      	movs	r3, #46	@ 0x2e
 8007f1e:	723b      	strb	r3, [r7, #8]
 8007f20:	237f      	movs	r3, #127	@ 0x7f
 8007f22:	727b      	strb	r3, [r7, #9]
 8007f24:	234a      	movs	r3, #74	@ 0x4a
 8007f26:	72bb      	strb	r3, [r7, #10]
 8007f28:	2398      	movs	r3, #152	@ 0x98
 8007f2a:	72fb      	strb	r3, [r7, #11]
 8007f2c:	232a      	movs	r3, #42	@ 0x2a
 8007f2e:	733b      	strb	r3, [r7, #12]
 8007f30:	2348      	movs	r3, #72	@ 0x48
 8007f32:	737b      	strb	r3, [r7, #13]
 8007f34:	237a      	movs	r3, #122	@ 0x7a
 8007f36:	73bb      	strb	r3, [r7, #14]
 8007f38:	23cc      	movs	r3, #204	@ 0xcc
 8007f3a:	73fb      	strb	r3, [r7, #15]
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	743b      	strb	r3, [r7, #16]
 8007f40:	2300      	movs	r3, #0
 8007f42:	747b      	strb	r3, [r7, #17]
 8007f44:	2300      	movs	r3, #0
 8007f46:	74bb      	strb	r3, [r7, #18]
 8007f48:	2300      	movs	r3, #0
 8007f4a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8007f4c:	7dbb      	ldrb	r3, [r7, #22]
 8007f4e:	1d39      	adds	r1, r7, #4
 8007f50:	4a21      	ldr	r2, [pc, #132]	@ (8007fd8 <SVCCTL_InitCustomSvc+0xe0>)
 8007f52:	9200      	str	r2, [sp, #0]
 8007f54:	2201      	movs	r2, #1
 8007f56:	2002      	movs	r0, #2
 8007f58:	f7fd fe1a 	bl	8005b90 <aci_gatt_add_service>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharNotify
   */
  COPY_MYCHARNOTIFY_UUID(uuid.Char_UUID_128);
 8007f60:	2319      	movs	r3, #25
 8007f62:	713b      	strb	r3, [r7, #4]
 8007f64:	23ed      	movs	r3, #237	@ 0xed
 8007f66:	717b      	strb	r3, [r7, #5]
 8007f68:	2382      	movs	r3, #130	@ 0x82
 8007f6a:	71bb      	strb	r3, [r7, #6]
 8007f6c:	23ae      	movs	r3, #174	@ 0xae
 8007f6e:	71fb      	strb	r3, [r7, #7]
 8007f70:	23ed      	movs	r3, #237	@ 0xed
 8007f72:	723b      	strb	r3, [r7, #8]
 8007f74:	2321      	movs	r3, #33	@ 0x21
 8007f76:	727b      	strb	r3, [r7, #9]
 8007f78:	234c      	movs	r3, #76	@ 0x4c
 8007f7a:	72bb      	strb	r3, [r7, #10]
 8007f7c:	239d      	movs	r3, #157	@ 0x9d
 8007f7e:	72fb      	strb	r3, [r7, #11]
 8007f80:	2341      	movs	r3, #65	@ 0x41
 8007f82:	733b      	strb	r3, [r7, #12]
 8007f84:	2345      	movs	r3, #69	@ 0x45
 8007f86:	737b      	strb	r3, [r7, #13]
 8007f88:	2322      	movs	r3, #34	@ 0x22
 8007f8a:	73bb      	strb	r3, [r7, #14]
 8007f8c:	238e      	movs	r3, #142	@ 0x8e
 8007f8e:	73fb      	strb	r3, [r7, #15]
 8007f90:	2300      	movs	r3, #0
 8007f92:	743b      	strb	r3, [r7, #16]
 8007f94:	2300      	movs	r3, #0
 8007f96:	747b      	strb	r3, [r7, #17]
 8007f98:	2300      	movs	r3, #0
 8007f9a:	74bb      	strb	r3, [r7, #18]
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 8007fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8007fd8 <SVCCTL_InitCustomSvc+0xe0>)
 8007fa2:	8818      	ldrh	r0, [r3, #0]
 8007fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8007fdc <SVCCTL_InitCustomSvc+0xe4>)
 8007fa6:	881b      	ldrh	r3, [r3, #0]
 8007fa8:	1d3a      	adds	r2, r7, #4
 8007faa:	490d      	ldr	r1, [pc, #52]	@ (8007fe0 <SVCCTL_InitCustomSvc+0xe8>)
 8007fac:	9105      	str	r1, [sp, #20]
 8007fae:	2100      	movs	r1, #0
 8007fb0:	9104      	str	r1, [sp, #16]
 8007fb2:	2110      	movs	r1, #16
 8007fb4:	9103      	str	r1, [sp, #12]
 8007fb6:	2107      	movs	r1, #7
 8007fb8:	9102      	str	r1, [sp, #8]
 8007fba:	2100      	movs	r1, #0
 8007fbc:	9101      	str	r1, [sp, #4]
 8007fbe:	2110      	movs	r1, #16
 8007fc0:	9100      	str	r1, [sp, #0]
 8007fc2:	2102      	movs	r1, #2
 8007fc4:	f7fd feba 	bl	8005d3c <aci_gatt_add_char>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8007fcc:	bf00      	nop
}
 8007fce:	3718      	adds	r7, #24
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	08007dcd 	.word	0x08007dcd
 8007fd8:	20000598 	.word	0x20000598
 8007fdc:	20000020 	.word	0x20000020
 8007fe0:	2000059a 	.word	0x2000059a

08007fe4 <Custom_STM_App_Update_Char_Ext>:
 * @param  CharOpcode: Characteristic identifier
 * @param  pPayload: Characteristic value
 *
 */
tBleStatus Custom_STM_App_Update_Char_Ext(uint16_t Connection_Handle, Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8007fe4:	b590      	push	{r4, r7, lr}
 8007fe6:	b087      	sub	sp, #28
 8007fe8:	af02      	add	r7, sp, #8
 8007fea:	4603      	mov	r3, r0
 8007fec:	603a      	str	r2, [r7, #0]
 8007fee:	80fb      	strh	r3, [r7, #6]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	717b      	strb	r3, [r7, #5]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007ff4:	2392      	movs	r3, #146	@ 0x92
 8007ff6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_Ext_1 */

  /* USER CODE END Custom_STM_App_Update_Char_Ext_1 */

  switch (CharOpcode)
 8007ff8:	797b      	ldrb	r3, [r7, #5]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10c      	bne.n	8008018 <Custom_STM_App_Update_Char_Ext+0x34>

    case CUSTOM_STM_MYCHARNOTIFY:
      /* USER CODE BEGIN Updated_Length_Service_1_Char_1*/

      /* USER CODE END Updated_Length_Service_1_Char_1*/
	  Generic_STM_App_Update_Char_Ext(Connection_Handle, CustomContext.CustomMysvcHdle, CustomContext.CustomMycharnotifyHdle, SizeMycharnotify, pPayload);
 8007ffe:	4b09      	ldr	r3, [pc, #36]	@ (8008024 <Custom_STM_App_Update_Char_Ext+0x40>)
 8008000:	8819      	ldrh	r1, [r3, #0]
 8008002:	4b08      	ldr	r3, [pc, #32]	@ (8008024 <Custom_STM_App_Update_Char_Ext+0x40>)
 8008004:	885a      	ldrh	r2, [r3, #2]
 8008006:	4b08      	ldr	r3, [pc, #32]	@ (8008028 <Custom_STM_App_Update_Char_Ext+0x44>)
 8008008:	881c      	ldrh	r4, [r3, #0]
 800800a:	88f8      	ldrh	r0, [r7, #6]
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	9300      	str	r3, [sp, #0]
 8008010:	4623      	mov	r3, r4
 8008012:	f000 f80b 	bl	800802c <Generic_STM_App_Update_Char_Ext>

      break;
 8008016:	e000      	b.n	800801a <Custom_STM_App_Update_Char_Ext+0x36>

    default:
      break;
 8008018:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_Ext_2 */

  /* USER CODE END Custom_STM_App_Update_Char_Ext_2 */

  return ret;
 800801a:	7bfb      	ldrb	r3, [r7, #15]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	bd90      	pop	{r4, r7, pc}
 8008024:	20000598 	.word	0x20000598
 8008028:	20000020 	.word	0x20000020

0800802c <Generic_STM_App_Update_Char_Ext>:

static tBleStatus Generic_STM_App_Update_Char_Ext(uint16_t ConnectionHandle, uint16_t ServiceHandle, uint16_t CharHandle, uint16_t CharValueLen, uint8_t *pPayload)
{
 800802c:	b590      	push	{r4, r7, lr}
 800802e:	b089      	sub	sp, #36	@ 0x24
 8008030:	af04      	add	r7, sp, #16
 8008032:	4604      	mov	r4, r0
 8008034:	4608      	mov	r0, r1
 8008036:	4611      	mov	r1, r2
 8008038:	461a      	mov	r2, r3
 800803a:	4623      	mov	r3, r4
 800803c:	80fb      	strh	r3, [r7, #6]
 800803e:	4603      	mov	r3, r0
 8008040:	80bb      	strh	r3, [r7, #4]
 8008042:	460b      	mov	r3, r1
 8008044:	807b      	strh	r3, [r7, #2]
 8008046:	4613      	mov	r3, r2
 8008048:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800804a:	2392      	movs	r3, #146	@ 0x92
 800804c:	73fb      	strb	r3, [r7, #15]

  ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 800804e:	887a      	ldrh	r2, [r7, #2]
 8008050:	88b9      	ldrh	r1, [r7, #4]
 8008052:	88f8      	ldrh	r0, [r7, #6]
 8008054:	6a3b      	ldr	r3, [r7, #32]
 8008056:	9303      	str	r3, [sp, #12]
 8008058:	23f3      	movs	r3, #243	@ 0xf3
 800805a:	9302      	str	r3, [sp, #8]
 800805c:	2300      	movs	r3, #0
 800805e:	9301      	str	r3, [sp, #4]
 8008060:	883b      	ldrh	r3, [r7, #0]
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	2300      	movs	r3, #0
 8008066:	f7fe f86f 	bl	8006148 <aci_gatt_update_char_value_ext>
 800806a:	4603      	mov	r3, r0
 800806c:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("  Success: aci_gatt_update_char_value_ext command, part 1\n\r");
  }
  /* USER CODE BEGIN Custom_STM_App_Update_Char_Ext_Service_1_Char_1*/

  if (CharValueLen-243<=243)
 800806e:	883b      	ldrh	r3, [r7, #0]
 8008070:	f5b3 7ff3 	cmp.w	r3, #486	@ 0x1e6
 8008074:	d815      	bhi.n	80080a2 <Generic_STM_App_Update_Char_Ext+0x76>
  {
    ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 8008076:	883b      	ldrh	r3, [r7, #0]
 8008078:	b2db      	uxtb	r3, r3
 800807a:	330d      	adds	r3, #13
 800807c:	b2db      	uxtb	r3, r3
                                         CharHandle,
                                         1, /* update type:0 do not notify, 1 notify, 2 indicate */
                                         CharValueLen, /* charValueLen */
                                         243, /* value offset */
                                         CharValueLen-243, /* value length */
                                         (uint8_t *)  ((pPayload)+243));
 800807e:	6a3a      	ldr	r2, [r7, #32]
 8008080:	32f3      	adds	r2, #243	@ 0xf3
    ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 8008082:	887c      	ldrh	r4, [r7, #2]
 8008084:	88b9      	ldrh	r1, [r7, #4]
 8008086:	88f8      	ldrh	r0, [r7, #6]
 8008088:	9203      	str	r2, [sp, #12]
 800808a:	9302      	str	r3, [sp, #8]
 800808c:	23f3      	movs	r3, #243	@ 0xf3
 800808e:	9301      	str	r3, [sp, #4]
 8008090:	883b      	ldrh	r3, [r7, #0]
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	2301      	movs	r3, #1
 8008096:	4622      	mov	r2, r4
 8008098:	f7fe f856 	bl	8006148 <aci_gatt_update_char_value_ext>
 800809c:	4603      	mov	r3, r0
 800809e:	73fb      	strb	r3, [r7, #15]
 80080a0:	e027      	b.n	80080f2 <Generic_STM_App_Update_Char_Ext+0xc6>
                                         CharHandle,
                                         0, /* update type:0 do not notify, 1 notify, 2 indicate */
                                         CharValueLen, /* charValueLen */
                                         243, /* value offset */
                                         243, /* value length */
                                         (uint8_t *)  ((pPayload)+243));
 80080a2:	6a3b      	ldr	r3, [r7, #32]
 80080a4:	33f3      	adds	r3, #243	@ 0xf3
    ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 80080a6:	887a      	ldrh	r2, [r7, #2]
 80080a8:	88b9      	ldrh	r1, [r7, #4]
 80080aa:	88f8      	ldrh	r0, [r7, #6]
 80080ac:	9303      	str	r3, [sp, #12]
 80080ae:	23f3      	movs	r3, #243	@ 0xf3
 80080b0:	9302      	str	r3, [sp, #8]
 80080b2:	23f3      	movs	r3, #243	@ 0xf3
 80080b4:	9301      	str	r3, [sp, #4]
 80080b6:	883b      	ldrh	r3, [r7, #0]
 80080b8:	9300      	str	r3, [sp, #0]
 80080ba:	2300      	movs	r3, #0
 80080bc:	f7fe f844 	bl	8006148 <aci_gatt_update_char_value_ext>
 80080c0:	4603      	mov	r3, r0
 80080c2:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gatt_update_char_value_ext command, part 3\n\r");
    }
    ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 80080c4:	883b      	ldrh	r3, [r7, #0]
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	331a      	adds	r3, #26
 80080ca:	b2db      	uxtb	r3, r3
                                         CharHandle,
                                         1, /* update type:0 do not notify, 1 notify, 2 indicate */
                                         CharValueLen, /* charValueLen */
                                         243+243, /* value offset */
                                         CharValueLen-243-243, /* value length */
                                         (uint8_t *)  ((pPayload)+243+243));
 80080cc:	6a3a      	ldr	r2, [r7, #32]
 80080ce:	f502 72f3 	add.w	r2, r2, #486	@ 0x1e6
    ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 80080d2:	887c      	ldrh	r4, [r7, #2]
 80080d4:	88b9      	ldrh	r1, [r7, #4]
 80080d6:	88f8      	ldrh	r0, [r7, #6]
 80080d8:	9203      	str	r2, [sp, #12]
 80080da:	9302      	str	r3, [sp, #8]
 80080dc:	f44f 73f3 	mov.w	r3, #486	@ 0x1e6
 80080e0:	9301      	str	r3, [sp, #4]
 80080e2:	883b      	ldrh	r3, [r7, #0]
 80080e4:	9300      	str	r3, [sp, #0]
 80080e6:	2301      	movs	r3, #1
 80080e8:	4622      	mov	r2, r4
 80080ea:	f7fe f82d 	bl	8006148 <aci_gatt_update_char_value_ext>
 80080ee:	4603      	mov	r3, r0
 80080f0:	73fb      	strb	r3, [r7, #15]
    else
    {
      APP_DBG_MSG("  Success: aci_gatt_update_char_value_ext command, part 4\n\r");
    }
  }
  return ret;
 80080f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3714      	adds	r7, #20
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd90      	pop	{r4, r7, pc}

080080fc <LL_PWR_EnableBootC2>:
{
 80080fc:	b480      	push	{r7}
 80080fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8008100:	4b05      	ldr	r3, [pc, #20]	@ (8008118 <LL_PWR_EnableBootC2+0x1c>)
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	4a04      	ldr	r2, [pc, #16]	@ (8008118 <LL_PWR_EnableBootC2+0x1c>)
 8008106:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800810a:	60d3      	str	r3, [r2, #12]
}
 800810c:	bf00      	nop
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop
 8008118:	58000400 	.word	0x58000400

0800811c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8008124:	4b06      	ldr	r3, [pc, #24]	@ (8008140 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008126:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800812a:	4905      	ldr	r1, [pc, #20]	@ (8008140 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4313      	orrs	r3, r2
 8008130:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	58000800 	.word	0x58000800

08008144 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800814c:	4b05      	ldr	r3, [pc, #20]	@ (8008164 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800814e:	6a1a      	ldr	r2, [r3, #32]
 8008150:	4904      	ldr	r1, [pc, #16]	@ (8008164 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4313      	orrs	r3, r2
 8008156:	620b      	str	r3, [r1, #32]
}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	58000800 	.word	0x58000800

08008168 <LL_AHB3_GRP1_EnableClock>:
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8008170:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008174:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008176:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4313      	orrs	r3, r2
 800817e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8008180:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008184:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4013      	ands	r3, r2
 800818a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800818c:	68fb      	ldr	r3, [r7, #12]
}
 800818e:	bf00      	nop
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800819a:	b480      	push	{r7}
 800819c:	b085      	sub	sp, #20
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80081a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081a6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80081aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80081b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081ba:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4013      	ands	r3, r2
 80081c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80081c4:	68fb      	ldr	r3, [r7, #12]
}
 80081c6:	bf00      	nop
 80081c8:	3714      	adds	r7, #20
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 80081d2:	b480      	push	{r7}
 80081d4:	b083      	sub	sp, #12
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	601a      	str	r2, [r3, #0]
}
 80081e6:	bf00      	nop
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 80081f2:	b480      	push	{r7}
 80081f4:	b083      	sub	sp, #12
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f043 0201 	orr.w	r2, r3, #1
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	601a      	str	r2, [r3, #0]
}
 8008206:	bf00      	nop
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008212:	b480      	push	{r7}
 8008214:	b083      	sub	sp, #12
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	685a      	ldr	r2, [r3, #4]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	041b      	lsls	r3, r3, #16
 8008224:	43db      	mvns	r3, r3
 8008226:	401a      	ands	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	605a      	str	r2, [r3, #4]
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	685a      	ldr	r2, [r3, #4]
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	041b      	lsls	r3, r3, #16
 800824a:	431a      	orrs	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	605a      	str	r2, [r3, #4]
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	685a      	ldr	r2, [r3, #4]
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	43db      	mvns	r3, r3
 800826e:	401a      	ands	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	605a      	str	r2, [r3, #4]
}
 8008274:	bf00      	nop
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	683a      	ldr	r2, [r7, #0]
 800828e:	609a      	str	r2, [r3, #8]
}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	041a      	lsls	r2, r3, #16
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	609a      	str	r2, [r3, #8]
}
 80082ae:	bf00      	nop
 80082b0:	370c      	adds	r7, #12
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b083      	sub	sp, #12
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	68da      	ldr	r2, [r3, #12]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	4013      	ands	r3, r2
 80082cc:	683a      	ldr	r2, [r7, #0]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d101      	bne.n	80082d6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80082d2:	2301      	movs	r3, #1
 80082d4:	e000      	b.n	80082d8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	69da      	ldr	r2, [r3, #28]
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	4013      	ands	r3, r2
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d101      	bne.n	8008300 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80082fc:	2301      	movs	r3, #1
 80082fe:	e000      	b.n	8008302 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	370c      	adds	r7, #12
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
	...

08008310 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8008310:	b580      	push	{r7, lr}
 8008312:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8008314:	2102      	movs	r1, #2
 8008316:	4818      	ldr	r0, [pc, #96]	@ (8008378 <HW_IPCC_Rx_Handler+0x68>)
 8008318:	f7ff ffe4 	bl	80082e4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d008      	beq.n	8008334 <HW_IPCC_Rx_Handler+0x24>
 8008322:	4b15      	ldr	r3, [pc, #84]	@ (8008378 <HW_IPCC_Rx_Handler+0x68>)
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	f003 0302 	and.w	r3, r3, #2
 800832a:	2b00      	cmp	r3, #0
 800832c:	d102      	bne.n	8008334 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800832e:	f000 f8d5 	bl	80084dc <HW_IPCC_SYS_EvtHandler>
 8008332:	e01e      	b.n	8008372 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8008334:	2101      	movs	r1, #1
 8008336:	4810      	ldr	r0, [pc, #64]	@ (8008378 <HW_IPCC_Rx_Handler+0x68>)
 8008338:	f7ff ffd4 	bl	80082e4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d008      	beq.n	8008354 <HW_IPCC_Rx_Handler+0x44>
 8008342:	4b0d      	ldr	r3, [pc, #52]	@ (8008378 <HW_IPCC_Rx_Handler+0x68>)
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	f003 0301 	and.w	r3, r3, #1
 800834a:	2b00      	cmp	r3, #0
 800834c:	d102      	bne.n	8008354 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800834e:	f000 f889 	bl	8008464 <HW_IPCC_BLE_EvtHandler>
 8008352:	e00e      	b.n	8008372 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8008354:	2108      	movs	r1, #8
 8008356:	4808      	ldr	r0, [pc, #32]	@ (8008378 <HW_IPCC_Rx_Handler+0x68>)
 8008358:	f7ff ffc4 	bl	80082e4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d008      	beq.n	8008374 <HW_IPCC_Rx_Handler+0x64>
 8008362:	4b05      	ldr	r3, [pc, #20]	@ (8008378 <HW_IPCC_Rx_Handler+0x68>)
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	f003 0308 	and.w	r3, r3, #8
 800836a:	2b00      	cmp	r3, #0
 800836c:	d102      	bne.n	8008374 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800836e:	f000 f901 	bl	8008574 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8008372:	bf00      	nop
 8008374:	bf00      	nop
}
 8008376:	bd80      	pop	{r7, pc}
 8008378:	58000c00 	.word	0x58000c00

0800837c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800837c:	b580      	push	{r7, lr}
 800837e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8008380:	2102      	movs	r1, #2
 8008382:	4818      	ldr	r0, [pc, #96]	@ (80083e4 <HW_IPCC_Tx_Handler+0x68>)
 8008384:	f7ff ff99 	bl	80082ba <LL_C1_IPCC_IsActiveFlag_CHx>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d108      	bne.n	80083a0 <HW_IPCC_Tx_Handler+0x24>
 800838e:	4b15      	ldr	r3, [pc, #84]	@ (80083e4 <HW_IPCC_Tx_Handler+0x68>)
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008396:	2b00      	cmp	r3, #0
 8008398:	d102      	bne.n	80083a0 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800839a:	f000 f893 	bl	80084c4 <HW_IPCC_SYS_CmdEvtHandler>
 800839e:	e01e      	b.n	80083de <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80083a0:	2108      	movs	r1, #8
 80083a2:	4810      	ldr	r0, [pc, #64]	@ (80083e4 <HW_IPCC_Tx_Handler+0x68>)
 80083a4:	f7ff ff89 	bl	80082ba <LL_C1_IPCC_IsActiveFlag_CHx>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d108      	bne.n	80083c0 <HW_IPCC_Tx_Handler+0x44>
 80083ae:	4b0d      	ldr	r3, [pc, #52]	@ (80083e4 <HW_IPCC_Tx_Handler+0x68>)
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d102      	bne.n	80083c0 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 80083ba:	f000 f8bd 	bl	8008538 <HW_IPCC_MM_FreeBufHandler>
 80083be:	e00e      	b.n	80083de <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80083c0:	2120      	movs	r1, #32
 80083c2:	4808      	ldr	r0, [pc, #32]	@ (80083e4 <HW_IPCC_Tx_Handler+0x68>)
 80083c4:	f7ff ff79 	bl	80082ba <LL_C1_IPCC_IsActiveFlag_CHx>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d108      	bne.n	80083e0 <HW_IPCC_Tx_Handler+0x64>
 80083ce:	4b05      	ldr	r3, [pc, #20]	@ (80083e4 <HW_IPCC_Tx_Handler+0x68>)
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d102      	bne.n	80083e0 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80083da:	f000 f84f 	bl	800847c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80083de:	bf00      	nop
 80083e0:	bf00      	nop
}
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	58000c00 	.word	0x58000c00

080083e8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80083ec:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80083f0:	f7ff fed3 	bl	800819a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80083f4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80083f8:	f7ff fea4 	bl	8008144 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80083fc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008400:	f7ff fe8c 	bl	800811c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8008404:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8008406:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8008408:	f7ff fe78 	bl	80080fc <LL_PWR_EnableBootC2>

  return;
 800840c:	bf00      	nop
}
 800840e:	bd80      	pop	{r7, pc}

08008410 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8008414:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8008418:	f7ff fea6 	bl	8008168 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800841c:	4806      	ldr	r0, [pc, #24]	@ (8008438 <HW_IPCC_Init+0x28>)
 800841e:	f7ff fee8 	bl	80081f2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8008422:	4805      	ldr	r0, [pc, #20]	@ (8008438 <HW_IPCC_Init+0x28>)
 8008424:	f7ff fed5 	bl	80081d2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8008428:	202c      	movs	r0, #44	@ 0x2c
 800842a:	f7f9 fec4 	bl	80021b6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800842e:	202d      	movs	r0, #45	@ 0x2d
 8008430:	f7f9 fec1 	bl	80021b6 <HAL_NVIC_EnableIRQ>

  return;
 8008434:	bf00      	nop
}
 8008436:	bd80      	pop	{r7, pc}
 8008438:	58000c00 	.word	0x58000c00

0800843c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008440:	2101      	movs	r1, #1
 8008442:	4802      	ldr	r0, [pc, #8]	@ (800844c <HW_IPCC_BLE_Init+0x10>)
 8008444:	f7ff ff0a 	bl	800825c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008448:	bf00      	nop
}
 800844a:	bd80      	pop	{r7, pc}
 800844c:	58000c00 	.word	0x58000c00

08008450 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8008454:	2101      	movs	r1, #1
 8008456:	4802      	ldr	r0, [pc, #8]	@ (8008460 <HW_IPCC_BLE_SendCmd+0x10>)
 8008458:	f7ff ff20 	bl	800829c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800845c:	bf00      	nop
}
 800845e:	bd80      	pop	{r7, pc}
 8008460:	58000c00 	.word	0x58000c00

08008464 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8008468:	f7fe fea6 	bl	80071b8 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800846c:	2101      	movs	r1, #1
 800846e:	4802      	ldr	r0, [pc, #8]	@ (8008478 <HW_IPCC_BLE_EvtHandler+0x14>)
 8008470:	f7ff ff06 	bl	8008280 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008474:	bf00      	nop
}
 8008476:	bd80      	pop	{r7, pc}
 8008478:	58000c00 	.word	0x58000c00

0800847c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8008480:	2120      	movs	r1, #32
 8008482:	4803      	ldr	r0, [pc, #12]	@ (8008490 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8008484:	f7ff fed8 	bl	8008238 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8008488:	f7fe fec6 	bl	8007218 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800848c:	bf00      	nop
}
 800848e:	bd80      	pop	{r7, pc}
 8008490:	58000c00 	.word	0x58000c00

08008494 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008498:	2102      	movs	r1, #2
 800849a:	4802      	ldr	r0, [pc, #8]	@ (80084a4 <HW_IPCC_SYS_Init+0x10>)
 800849c:	f7ff fede 	bl	800825c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80084a0:	bf00      	nop
}
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	58000c00 	.word	0x58000c00

080084a8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80084ac:	2102      	movs	r1, #2
 80084ae:	4804      	ldr	r0, [pc, #16]	@ (80084c0 <HW_IPCC_SYS_SendCmd+0x18>)
 80084b0:	f7ff fef4 	bl	800829c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80084b4:	2102      	movs	r1, #2
 80084b6:	4802      	ldr	r0, [pc, #8]	@ (80084c0 <HW_IPCC_SYS_SendCmd+0x18>)
 80084b8:	f7ff feab 	bl	8008212 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80084bc:	bf00      	nop
}
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	58000c00 	.word	0x58000c00

080084c4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80084c8:	2102      	movs	r1, #2
 80084ca:	4803      	ldr	r0, [pc, #12]	@ (80084d8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80084cc:	f7ff feb4 	bl	8008238 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80084d0:	f7fe fef2 	bl	80072b8 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80084d4:	bf00      	nop
}
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	58000c00 	.word	0x58000c00

080084dc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80084e0:	f7fe ff00 	bl	80072e4 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80084e4:	2102      	movs	r1, #2
 80084e6:	4802      	ldr	r0, [pc, #8]	@ (80084f0 <HW_IPCC_SYS_EvtHandler+0x14>)
 80084e8:	f7ff feca 	bl	8008280 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80084ec:	bf00      	nop
}
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	58000c00 	.word	0x58000c00

080084f4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80084fc:	2108      	movs	r1, #8
 80084fe:	480c      	ldr	r0, [pc, #48]	@ (8008530 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008500:	f7ff fedb 	bl	80082ba <LL_C1_IPCC_IsActiveFlag_CHx>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d007      	beq.n	800851a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800850a:	4a0a      	ldr	r2, [pc, #40]	@ (8008534 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008510:	2108      	movs	r1, #8
 8008512:	4807      	ldr	r0, [pc, #28]	@ (8008530 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008514:	f7ff fe7d 	bl	8008212 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8008518:	e006      	b.n	8008528 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800851e:	2108      	movs	r1, #8
 8008520:	4803      	ldr	r0, [pc, #12]	@ (8008530 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008522:	f7ff febb 	bl	800829c <LL_C1_IPCC_SetFlag_CHx>
  return;
 8008526:	bf00      	nop
}
 8008528:	3708      	adds	r7, #8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	58000c00 	.word	0x58000c00
 8008534:	2000059c 	.word	0x2000059c

08008538 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800853c:	2108      	movs	r1, #8
 800853e:	4806      	ldr	r0, [pc, #24]	@ (8008558 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008540:	f7ff fe7a 	bl	8008238 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8008544:	4b05      	ldr	r3, [pc, #20]	@ (800855c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800854a:	2108      	movs	r1, #8
 800854c:	4802      	ldr	r0, [pc, #8]	@ (8008558 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800854e:	f7ff fea5 	bl	800829c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008552:	bf00      	nop
}
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	58000c00 	.word	0x58000c00
 800855c:	2000059c 	.word	0x2000059c

08008560 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8008560:	b580      	push	{r7, lr}
 8008562:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008564:	2108      	movs	r1, #8
 8008566:	4802      	ldr	r0, [pc, #8]	@ (8008570 <HW_IPCC_TRACES_Init+0x10>)
 8008568:	f7ff fe78 	bl	800825c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800856c:	bf00      	nop
}
 800856e:	bd80      	pop	{r7, pc}
 8008570:	58000c00 	.word	0x58000c00

08008574 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8008574:	b580      	push	{r7, lr}
 8008576:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8008578:	f7fe ff5c 	bl	8007434 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800857c:	2108      	movs	r1, #8
 800857e:	4802      	ldr	r0, [pc, #8]	@ (8008588 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8008580:	f7ff fe7e 	bl	8008280 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008584:	bf00      	nop
}
 8008586:	bd80      	pop	{r7, pc}
 8008588:	58000c00 	.word	0x58000c00

0800858c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800858c:	b480      	push	{r7}
 800858e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8008590:	4b05      	ldr	r3, [pc, #20]	@ (80085a8 <UTIL_LPM_Init+0x1c>)
 8008592:	2200      	movs	r2, #0
 8008594:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8008596:	4b05      	ldr	r3, [pc, #20]	@ (80085ac <UTIL_LPM_Init+0x20>)
 8008598:	2200      	movs	r2, #0
 800859a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800859c:	bf00      	nop
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	200005a0 	.word	0x200005a0
 80085ac:	200005a4 	.word	0x200005a4

080085b0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80085b0:	b480      	push	{r7}
 80085b2:	b087      	sub	sp, #28
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	460b      	mov	r3, r1
 80085ba:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085bc:	f3ef 8310 	mrs	r3, PRIMASK
 80085c0:	613b      	str	r3, [r7, #16]
  return(result);
 80085c2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80085c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80085c6:	b672      	cpsid	i
}
 80085c8:	bf00      	nop
  
  switch(state)
 80085ca:	78fb      	ldrb	r3, [r7, #3]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d008      	beq.n	80085e2 <UTIL_LPM_SetOffMode+0x32>
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d10e      	bne.n	80085f2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80085d4:	4b0d      	ldr	r3, [pc, #52]	@ (800860c <UTIL_LPM_SetOffMode+0x5c>)
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4313      	orrs	r3, r2
 80085dc:	4a0b      	ldr	r2, [pc, #44]	@ (800860c <UTIL_LPM_SetOffMode+0x5c>)
 80085de:	6013      	str	r3, [r2, #0]
      break;
 80085e0:	e008      	b.n	80085f4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	43da      	mvns	r2, r3
 80085e6:	4b09      	ldr	r3, [pc, #36]	@ (800860c <UTIL_LPM_SetOffMode+0x5c>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4013      	ands	r3, r2
 80085ec:	4a07      	ldr	r2, [pc, #28]	@ (800860c <UTIL_LPM_SetOffMode+0x5c>)
 80085ee:	6013      	str	r3, [r2, #0]
      break;
 80085f0:	e000      	b.n	80085f4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80085f2:	bf00      	nop
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f383 8810 	msr	PRIMASK, r3
}
 80085fe:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8008600:	bf00      	nop
 8008602:	371c      	adds	r7, #28
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr
 800860c:	200005a4 	.word	0x200005a4

08008610 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b090      	sub	sp, #64	@ 0x40
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8008618:	4b73      	ldr	r3, [pc, #460]	@ (80087e8 <UTIL_SEQ_Run+0x1d8>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800861e:	4b72      	ldr	r3, [pc, #456]	@ (80087e8 <UTIL_SEQ_Run+0x1d8>)
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4013      	ands	r3, r2
 8008626:	4a70      	ldr	r2, [pc, #448]	@ (80087e8 <UTIL_SEQ_Run+0x1d8>)
 8008628:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800862a:	4b70      	ldr	r3, [pc, #448]	@ (80087ec <UTIL_SEQ_Run+0x1dc>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8008630:	4b6f      	ldr	r3, [pc, #444]	@ (80087f0 <UTIL_SEQ_Run+0x1e0>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8008636:	4b6f      	ldr	r3, [pc, #444]	@ (80087f4 <UTIL_SEQ_Run+0x1e4>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800863c:	4b6e      	ldr	r3, [pc, #440]	@ (80087f8 <UTIL_SEQ_Run+0x1e8>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8008642:	e08d      	b.n	8008760 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8008644:	2300      	movs	r3, #0
 8008646:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8008648:	e002      	b.n	8008650 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800864a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800864c:	3301      	adds	r3, #1
 800864e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8008650:	4a6a      	ldr	r2, [pc, #424]	@ (80087fc <UTIL_SEQ_Run+0x1ec>)
 8008652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008654:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865a:	401a      	ands	r2, r3
 800865c:	4b62      	ldr	r3, [pc, #392]	@ (80087e8 <UTIL_SEQ_Run+0x1d8>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4013      	ands	r3, r2
 8008662:	2b00      	cmp	r3, #0
 8008664:	d0f1      	beq.n	800864a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8008666:	4a65      	ldr	r2, [pc, #404]	@ (80087fc <UTIL_SEQ_Run+0x1ec>)
 8008668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800866a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800866e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008670:	401a      	ands	r2, r3
 8008672:	4b5d      	ldr	r3, [pc, #372]	@ (80087e8 <UTIL_SEQ_Run+0x1d8>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4013      	ands	r3, r2
 8008678:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800867a:	4a60      	ldr	r2, [pc, #384]	@ (80087fc <UTIL_SEQ_Run+0x1ec>)
 800867c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800867e:	00db      	lsls	r3, r3, #3
 8008680:	4413      	add	r3, r2
 8008682:	685a      	ldr	r2, [r3, #4]
 8008684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008686:	4013      	ands	r3, r2
 8008688:	2b00      	cmp	r3, #0
 800868a:	d106      	bne.n	800869a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800868c:	4a5b      	ldr	r2, [pc, #364]	@ (80087fc <UTIL_SEQ_Run+0x1ec>)
 800868e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008690:	00db      	lsls	r3, r3, #3
 8008692:	4413      	add	r3, r2
 8008694:	f04f 32ff 	mov.w	r2, #4294967295
 8008698:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800869a:	4a58      	ldr	r2, [pc, #352]	@ (80087fc <UTIL_SEQ_Run+0x1ec>)
 800869c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800869e:	00db      	lsls	r3, r3, #3
 80086a0:	4413      	add	r3, r2
 80086a2:	685a      	ldr	r2, [r3, #4]
 80086a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a6:	4013      	ands	r3, r2
 80086a8:	4618      	mov	r0, r3
 80086aa:	f000 f9b3 	bl	8008a14 <SEQ_BitPosition>
 80086ae:	4603      	mov	r3, r0
 80086b0:	461a      	mov	r2, r3
 80086b2:	4b53      	ldr	r3, [pc, #332]	@ (8008800 <UTIL_SEQ_Run+0x1f0>)
 80086b4:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80086b6:	4a51      	ldr	r2, [pc, #324]	@ (80087fc <UTIL_SEQ_Run+0x1ec>)
 80086b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086ba:	00db      	lsls	r3, r3, #3
 80086bc:	4413      	add	r3, r2
 80086be:	685a      	ldr	r2, [r3, #4]
 80086c0:	4b4f      	ldr	r3, [pc, #316]	@ (8008800 <UTIL_SEQ_Run+0x1f0>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2101      	movs	r1, #1
 80086c6:	fa01 f303 	lsl.w	r3, r1, r3
 80086ca:	43db      	mvns	r3, r3
 80086cc:	401a      	ands	r2, r3
 80086ce:	494b      	ldr	r1, [pc, #300]	@ (80087fc <UTIL_SEQ_Run+0x1ec>)
 80086d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086d2:	00db      	lsls	r3, r3, #3
 80086d4:	440b      	add	r3, r1
 80086d6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086d8:	f3ef 8310 	mrs	r3, PRIMASK
 80086dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80086de:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80086e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80086e2:	b672      	cpsid	i
}
 80086e4:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80086e6:	4b46      	ldr	r3, [pc, #280]	@ (8008800 <UTIL_SEQ_Run+0x1f0>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2201      	movs	r2, #1
 80086ec:	fa02 f303 	lsl.w	r3, r2, r3
 80086f0:	43da      	mvns	r2, r3
 80086f2:	4b3e      	ldr	r3, [pc, #248]	@ (80087ec <UTIL_SEQ_Run+0x1dc>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4013      	ands	r3, r2
 80086f8:	4a3c      	ldr	r2, [pc, #240]	@ (80087ec <UTIL_SEQ_Run+0x1dc>)
 80086fa:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80086fc:	2302      	movs	r3, #2
 80086fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008700:	e013      	b.n	800872a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8008702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008704:	3b01      	subs	r3, #1
 8008706:	4a3d      	ldr	r2, [pc, #244]	@ (80087fc <UTIL_SEQ_Run+0x1ec>)
 8008708:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800870c:	4b3c      	ldr	r3, [pc, #240]	@ (8008800 <UTIL_SEQ_Run+0x1f0>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2201      	movs	r2, #1
 8008712:	fa02 f303 	lsl.w	r3, r2, r3
 8008716:	43da      	mvns	r2, r3
 8008718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800871a:	3b01      	subs	r3, #1
 800871c:	400a      	ands	r2, r1
 800871e:	4937      	ldr	r1, [pc, #220]	@ (80087fc <UTIL_SEQ_Run+0x1ec>)
 8008720:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008726:	3b01      	subs	r3, #1
 8008728:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800872a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1e8      	bne.n	8008702 <UTIL_SEQ_Run+0xf2>
 8008730:	6a3b      	ldr	r3, [r7, #32]
 8008732:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	f383 8810 	msr	PRIMASK, r3
}
 800873a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800873c:	4b30      	ldr	r3, [pc, #192]	@ (8008800 <UTIL_SEQ_Run+0x1f0>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a30      	ldr	r2, [pc, #192]	@ (8008804 <UTIL_SEQ_Run+0x1f4>)
 8008742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008746:	4798      	blx	r3

    local_taskset = TaskSet;
 8008748:	4b28      	ldr	r3, [pc, #160]	@ (80087ec <UTIL_SEQ_Run+0x1dc>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800874e:	4b28      	ldr	r3, [pc, #160]	@ (80087f0 <UTIL_SEQ_Run+0x1e0>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8008754:	4b27      	ldr	r3, [pc, #156]	@ (80087f4 <UTIL_SEQ_Run+0x1e4>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800875a:	4b27      	ldr	r3, [pc, #156]	@ (80087f8 <UTIL_SEQ_Run+0x1e8>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8008760:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008764:	401a      	ands	r2, r3
 8008766:	4b20      	ldr	r3, [pc, #128]	@ (80087e8 <UTIL_SEQ_Run+0x1d8>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4013      	ands	r3, r2
 800876c:	2b00      	cmp	r3, #0
 800876e:	d005      	beq.n	800877c <UTIL_SEQ_Run+0x16c>
 8008770:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008774:	4013      	ands	r3, r2
 8008776:	2b00      	cmp	r3, #0
 8008778:	f43f af64 	beq.w	8008644 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800877c:	4b20      	ldr	r3, [pc, #128]	@ (8008800 <UTIL_SEQ_Run+0x1f0>)
 800877e:	f04f 32ff 	mov.w	r2, #4294967295
 8008782:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8008784:	f000 f938 	bl	80089f8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008788:	f3ef 8310 	mrs	r3, PRIMASK
 800878c:	613b      	str	r3, [r7, #16]
  return(result);
 800878e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8008790:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008792:	b672      	cpsid	i
}
 8008794:	bf00      	nop
  local_taskset = TaskSet;
 8008796:	4b15      	ldr	r3, [pc, #84]	@ (80087ec <UTIL_SEQ_Run+0x1dc>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800879c:	4b14      	ldr	r3, [pc, #80]	@ (80087f0 <UTIL_SEQ_Run+0x1e0>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80087a2:	4b14      	ldr	r3, [pc, #80]	@ (80087f4 <UTIL_SEQ_Run+0x1e4>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80087a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ac:	401a      	ands	r2, r3
 80087ae:	4b0e      	ldr	r3, [pc, #56]	@ (80087e8 <UTIL_SEQ_Run+0x1d8>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4013      	ands	r3, r2
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d107      	bne.n	80087c8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 80087b8:	4b0f      	ldr	r3, [pc, #60]	@ (80087f8 <UTIL_SEQ_Run+0x1e8>)
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087be:	4013      	ands	r3, r2
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80087c4:	f7f8 f861 	bl	800088a <UTIL_SEQ_Idle>
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f383 8810 	msr	PRIMASK, r3
}
 80087d2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80087d4:	f000 f917 	bl	8008a06 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80087d8:	4a03      	ldr	r2, [pc, #12]	@ (80087e8 <UTIL_SEQ_Run+0x1d8>)
 80087da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087dc:	6013      	str	r3, [r2, #0]

  return;
 80087de:	bf00      	nop
}
 80087e0:	3740      	adds	r7, #64	@ 0x40
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	20000028 	.word	0x20000028
 80087ec:	200005a8 	.word	0x200005a8
 80087f0:	200005ac 	.word	0x200005ac
 80087f4:	20000024 	.word	0x20000024
 80087f8:	200005b0 	.word	0x200005b0
 80087fc:	20000638 	.word	0x20000638
 8008800:	200005b4 	.word	0x200005b4
 8008804:	200005b8 	.word	0x200005b8

08008808 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b088      	sub	sp, #32
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008814:	f3ef 8310 	mrs	r3, PRIMASK
 8008818:	617b      	str	r3, [r7, #20]
  return(result);
 800881a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800881c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800881e:	b672      	cpsid	i
}
 8008820:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f000 f8f6 	bl	8008a14 <SEQ_BitPosition>
 8008828:	4603      	mov	r3, r0
 800882a:	4619      	mov	r1, r3
 800882c:	4a06      	ldr	r2, [pc, #24]	@ (8008848 <UTIL_SEQ_RegTask+0x40>)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	f383 8810 	msr	PRIMASK, r3
}
 800883e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8008840:	bf00      	nop
}
 8008842:	3720      	adds	r7, #32
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	200005b8 	.word	0x200005b8

0800884c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800884c:	b480      	push	{r7}
 800884e:	b087      	sub	sp, #28
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008856:	f3ef 8310 	mrs	r3, PRIMASK
 800885a:	60fb      	str	r3, [r7, #12]
  return(result);
 800885c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800885e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008860:	b672      	cpsid	i
}
 8008862:	bf00      	nop

  TaskSet |= TaskId_bm;
 8008864:	4b0d      	ldr	r3, [pc, #52]	@ (800889c <UTIL_SEQ_SetTask+0x50>)
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4313      	orrs	r3, r2
 800886c:	4a0b      	ldr	r2, [pc, #44]	@ (800889c <UTIL_SEQ_SetTask+0x50>)
 800886e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8008870:	4a0b      	ldr	r2, [pc, #44]	@ (80088a0 <UTIL_SEQ_SetTask+0x54>)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	431a      	orrs	r2, r3
 800887c:	4908      	ldr	r1, [pc, #32]	@ (80088a0 <UTIL_SEQ_SetTask+0x54>)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	f383 8810 	msr	PRIMASK, r3
}
 800888e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008890:	bf00      	nop
}
 8008892:	371c      	adds	r7, #28
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr
 800889c:	200005a8 	.word	0x200005a8
 80088a0:	20000638 	.word	0x20000638

080088a4 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80088a4:	b480      	push	{r7}
 80088a6:	b087      	sub	sp, #28
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088ac:	f3ef 8310 	mrs	r3, PRIMASK
 80088b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80088b2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80088b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80088b6:	b672      	cpsid	i
}
 80088b8:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	43da      	mvns	r2, r3
 80088be:	4b08      	ldr	r3, [pc, #32]	@ (80088e0 <UTIL_SEQ_PauseTask+0x3c>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4013      	ands	r3, r2
 80088c4:	4a06      	ldr	r2, [pc, #24]	@ (80088e0 <UTIL_SEQ_PauseTask+0x3c>)
 80088c6:	6013      	str	r3, [r2, #0]
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	f383 8810 	msr	PRIMASK, r3
}
 80088d2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80088d4:	bf00      	nop
}
 80088d6:	371c      	adds	r7, #28
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr
 80088e0:	20000024 	.word	0x20000024

080088e4 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80088e4:	b480      	push	{r7}
 80088e6:	b087      	sub	sp, #28
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088ec:	f3ef 8310 	mrs	r3, PRIMASK
 80088f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80088f2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80088f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80088f6:	b672      	cpsid	i
}
 80088f8:	bf00      	nop

  TaskMask |= TaskId_bm;
 80088fa:	4b09      	ldr	r3, [pc, #36]	@ (8008920 <UTIL_SEQ_ResumeTask+0x3c>)
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4313      	orrs	r3, r2
 8008902:	4a07      	ldr	r2, [pc, #28]	@ (8008920 <UTIL_SEQ_ResumeTask+0x3c>)
 8008904:	6013      	str	r3, [r2, #0]
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	f383 8810 	msr	PRIMASK, r3
}
 8008910:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008912:	bf00      	nop
}
 8008914:	371c      	adds	r7, #28
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	20000024 	.word	0x20000024

08008924 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8008924:	b480      	push	{r7}
 8008926:	b087      	sub	sp, #28
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800892c:	f3ef 8310 	mrs	r3, PRIMASK
 8008930:	60fb      	str	r3, [r7, #12]
  return(result);
 8008932:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008934:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008936:	b672      	cpsid	i
}
 8008938:	bf00      	nop

  EvtSet |= EvtId_bm;
 800893a:	4b09      	ldr	r3, [pc, #36]	@ (8008960 <UTIL_SEQ_SetEvt+0x3c>)
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4313      	orrs	r3, r2
 8008942:	4a07      	ldr	r2, [pc, #28]	@ (8008960 <UTIL_SEQ_SetEvt+0x3c>)
 8008944:	6013      	str	r3, [r2, #0]
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	f383 8810 	msr	PRIMASK, r3
}
 8008950:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008952:	bf00      	nop
}
 8008954:	371c      	adds	r7, #28
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	200005ac 	.word	0x200005ac

08008964 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b088      	sub	sp, #32
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800896c:	4b1f      	ldr	r3, [pc, #124]	@ (80089ec <UTIL_SEQ_WaitEvt+0x88>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8008972:	4b1e      	ldr	r3, [pc, #120]	@ (80089ec <UTIL_SEQ_WaitEvt+0x88>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897a:	d102      	bne.n	8008982 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800897c:	2300      	movs	r3, #0
 800897e:	61fb      	str	r3, [r7, #28]
 8008980:	e005      	b.n	800898e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8008982:	4b1a      	ldr	r3, [pc, #104]	@ (80089ec <UTIL_SEQ_WaitEvt+0x88>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2201      	movs	r2, #1
 8008988:	fa02 f303 	lsl.w	r3, r2, r3
 800898c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800898e:	4b18      	ldr	r3, [pc, #96]	@ (80089f0 <UTIL_SEQ_WaitEvt+0x8c>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8008994:	4a16      	ldr	r2, [pc, #88]	@ (80089f0 <UTIL_SEQ_WaitEvt+0x8c>)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800899a:	e003      	b.n	80089a4 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800899c:	6879      	ldr	r1, [r7, #4]
 800899e:	69f8      	ldr	r0, [r7, #28]
 80089a0:	f7f7 ff7a 	bl	8000898 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80089a4:	4b13      	ldr	r3, [pc, #76]	@ (80089f4 <UTIL_SEQ_WaitEvt+0x90>)
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4013      	ands	r3, r2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d0f5      	beq.n	800899c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80089b0:	4a0e      	ldr	r2, [pc, #56]	@ (80089ec <UTIL_SEQ_WaitEvt+0x88>)
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089b6:	f3ef 8310 	mrs	r3, PRIMASK
 80089ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80089bc:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80089be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80089c0:	b672      	cpsid	i
}
 80089c2:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	43da      	mvns	r2, r3
 80089c8:	4b0a      	ldr	r3, [pc, #40]	@ (80089f4 <UTIL_SEQ_WaitEvt+0x90>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4013      	ands	r3, r2
 80089ce:	4a09      	ldr	r2, [pc, #36]	@ (80089f4 <UTIL_SEQ_WaitEvt+0x90>)
 80089d0:	6013      	str	r3, [r2, #0]
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f383 8810 	msr	PRIMASK, r3
}
 80089dc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80089de:	4a04      	ldr	r2, [pc, #16]	@ (80089f0 <UTIL_SEQ_WaitEvt+0x8c>)
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	6013      	str	r3, [r2, #0]
  return;
 80089e4:	bf00      	nop
}
 80089e6:	3720      	adds	r7, #32
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	200005b4 	.word	0x200005b4
 80089f0:	200005b0 	.word	0x200005b0
 80089f4:	200005ac 	.word	0x200005ac

080089f8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80089f8:	b480      	push	{r7}
 80089fa:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80089fc:	bf00      	nop
}
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr

08008a06 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8008a06:	b480      	push	{r7}
 8008a08:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8008a0a:	bf00      	nop
}
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b085      	sub	sp, #20
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a2a:	d204      	bcs.n	8008a36 <SEQ_BitPosition+0x22>
 8008a2c:	2310      	movs	r3, #16
 8008a2e:	73fb      	strb	r3, [r7, #15]
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	041b      	lsls	r3, r3, #16
 8008a34:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a3c:	d205      	bcs.n	8008a4a <SEQ_BitPosition+0x36>
 8008a3e:	7bfb      	ldrb	r3, [r7, #15]
 8008a40:	3308      	adds	r3, #8
 8008a42:	73fb      	strb	r3, [r7, #15]
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	021b      	lsls	r3, r3, #8
 8008a48:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a50:	d205      	bcs.n	8008a5e <SEQ_BitPosition+0x4a>
 8008a52:	7bfb      	ldrb	r3, [r7, #15]
 8008a54:	3304      	adds	r3, #4
 8008a56:	73fb      	strb	r3, [r7, #15]
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	011b      	lsls	r3, r3, #4
 8008a5c:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	0f1b      	lsrs	r3, r3, #28
 8008a62:	4a07      	ldr	r2, [pc, #28]	@ (8008a80 <SEQ_BitPosition+0x6c>)
 8008a64:	5cd2      	ldrb	r2, [r2, r3]
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
 8008a68:	4413      	add	r3, r2
 8008a6a:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
 8008a6e:	f1c3 031f 	rsb	r3, r3, #31
 8008a72:	b2db      	uxtb	r3, r3
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3714      	adds	r7, #20
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr
 8008a80:	08008dc0 	.word	0x08008dc0

08008a84 <memset>:
 8008a84:	4402      	add	r2, r0
 8008a86:	4603      	mov	r3, r0
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d100      	bne.n	8008a8e <memset+0xa>
 8008a8c:	4770      	bx	lr
 8008a8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a92:	e7f9      	b.n	8008a88 <memset+0x4>

08008a94 <__libc_init_array>:
 8008a94:	b570      	push	{r4, r5, r6, lr}
 8008a96:	4d0d      	ldr	r5, [pc, #52]	@ (8008acc <__libc_init_array+0x38>)
 8008a98:	4c0d      	ldr	r4, [pc, #52]	@ (8008ad0 <__libc_init_array+0x3c>)
 8008a9a:	1b64      	subs	r4, r4, r5
 8008a9c:	10a4      	asrs	r4, r4, #2
 8008a9e:	2600      	movs	r6, #0
 8008aa0:	42a6      	cmp	r6, r4
 8008aa2:	d109      	bne.n	8008ab8 <__libc_init_array+0x24>
 8008aa4:	4d0b      	ldr	r5, [pc, #44]	@ (8008ad4 <__libc_init_array+0x40>)
 8008aa6:	4c0c      	ldr	r4, [pc, #48]	@ (8008ad8 <__libc_init_array+0x44>)
 8008aa8:	f000 f826 	bl	8008af8 <_init>
 8008aac:	1b64      	subs	r4, r4, r5
 8008aae:	10a4      	asrs	r4, r4, #2
 8008ab0:	2600      	movs	r6, #0
 8008ab2:	42a6      	cmp	r6, r4
 8008ab4:	d105      	bne.n	8008ac2 <__libc_init_array+0x2e>
 8008ab6:	bd70      	pop	{r4, r5, r6, pc}
 8008ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008abc:	4798      	blx	r3
 8008abe:	3601      	adds	r6, #1
 8008ac0:	e7ee      	b.n	8008aa0 <__libc_init_array+0xc>
 8008ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ac6:	4798      	blx	r3
 8008ac8:	3601      	adds	r6, #1
 8008aca:	e7f2      	b.n	8008ab2 <__libc_init_array+0x1e>
 8008acc:	08008dd8 	.word	0x08008dd8
 8008ad0:	08008dd8 	.word	0x08008dd8
 8008ad4:	08008dd8 	.word	0x08008dd8
 8008ad8:	08008ddc 	.word	0x08008ddc

08008adc <memcpy>:
 8008adc:	440a      	add	r2, r1
 8008ade:	4291      	cmp	r1, r2
 8008ae0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ae4:	d100      	bne.n	8008ae8 <memcpy+0xc>
 8008ae6:	4770      	bx	lr
 8008ae8:	b510      	push	{r4, lr}
 8008aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008af2:	4291      	cmp	r1, r2
 8008af4:	d1f9      	bne.n	8008aea <memcpy+0xe>
 8008af6:	bd10      	pop	{r4, pc}

08008af8 <_init>:
 8008af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008afa:	bf00      	nop
 8008afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008afe:	bc08      	pop	{r3}
 8008b00:	469e      	mov	lr, r3
 8008b02:	4770      	bx	lr

08008b04 <_fini>:
 8008b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b06:	bf00      	nop
 8008b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b0a:	bc08      	pop	{r3}
 8008b0c:	469e      	mov	lr, r3
 8008b0e:	4770      	bx	lr
