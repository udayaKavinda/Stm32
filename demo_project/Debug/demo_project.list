
demo_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fb0  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  080090ec  080090ec  0000a0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080093b8  080093b8  0000a3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080093c0  080093c0  0000a3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080093c4  080093c4  0000a3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000080  20000008  080093c8  0000b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000088  08009448  0000b088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000c0  0800947d  0000b0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b8  200000d4  0800948e  0000b0d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000078c  0800948e  0000b78c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000ba67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000c000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000c000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800948e  0000b1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0002b51c  00000000  00000000  0000ba97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000060df  00000000  00000000  00036fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002728  00000000  00000000  0003d098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001dc9  00000000  00000000  0003f7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002cfd9  00000000  00000000  00041589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002d920  00000000  00000000  0006e562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f8824  00000000  00000000  0009be82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001946a6  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000a7d0  00000000  00000000  001946ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000004c  00000000  00000000  0019eebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000d4 	.word	0x200000d4
 8000158:	00000000 	.word	0x00000000
 800015c:	080090d4 	.word	0x080090d4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000d8 	.word	0x200000d8
 8000178:	080090d4 	.word	0x080090d4

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b96a 	b.w	8000478 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9d08      	ldr	r5, [sp, #32]
 80001c2:	460c      	mov	r4, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d14e      	bne.n	8000266 <__udivmoddi4+0xaa>
 80001c8:	4694      	mov	ip, r2
 80001ca:	458c      	cmp	ip, r1
 80001cc:	4686      	mov	lr, r0
 80001ce:	fab2 f282 	clz	r2, r2
 80001d2:	d962      	bls.n	800029a <__udivmoddi4+0xde>
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x2e>
 80001d6:	f1c2 0320 	rsb	r3, r2, #32
 80001da:	4091      	lsls	r1, r2
 80001dc:	fa20 f303 	lsr.w	r3, r0, r3
 80001e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e4:	4319      	orrs	r1, r3
 80001e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001ee:	fa1f f68c 	uxth.w	r6, ip
 80001f2:	fbb1 f4f7 	udiv	r4, r1, r7
 80001f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001fa:	fb07 1114 	mls	r1, r7, r4, r1
 80001fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000202:	fb04 f106 	mul.w	r1, r4, r6
 8000206:	4299      	cmp	r1, r3
 8000208:	d90a      	bls.n	8000220 <__udivmoddi4+0x64>
 800020a:	eb1c 0303 	adds.w	r3, ip, r3
 800020e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000212:	f080 8112 	bcs.w	800043a <__udivmoddi4+0x27e>
 8000216:	4299      	cmp	r1, r3
 8000218:	f240 810f 	bls.w	800043a <__udivmoddi4+0x27e>
 800021c:	3c02      	subs	r4, #2
 800021e:	4463      	add	r3, ip
 8000220:	1a59      	subs	r1, r3, r1
 8000222:	fa1f f38e 	uxth.w	r3, lr
 8000226:	fbb1 f0f7 	udiv	r0, r1, r7
 800022a:	fb07 1110 	mls	r1, r7, r0, r1
 800022e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000232:	fb00 f606 	mul.w	r6, r0, r6
 8000236:	429e      	cmp	r6, r3
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0303 	adds.w	r3, ip, r3
 800023e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000242:	f080 80fc 	bcs.w	800043e <__udivmoddi4+0x282>
 8000246:	429e      	cmp	r6, r3
 8000248:	f240 80f9 	bls.w	800043e <__udivmoddi4+0x282>
 800024c:	4463      	add	r3, ip
 800024e:	3802      	subs	r0, #2
 8000250:	1b9b      	subs	r3, r3, r6
 8000252:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000256:	2100      	movs	r1, #0
 8000258:	b11d      	cbz	r5, 8000262 <__udivmoddi4+0xa6>
 800025a:	40d3      	lsrs	r3, r2
 800025c:	2200      	movs	r2, #0
 800025e:	e9c5 3200 	strd	r3, r2, [r5]
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d905      	bls.n	8000276 <__udivmoddi4+0xba>
 800026a:	b10d      	cbz	r5, 8000270 <__udivmoddi4+0xb4>
 800026c:	e9c5 0100 	strd	r0, r1, [r5]
 8000270:	2100      	movs	r1, #0
 8000272:	4608      	mov	r0, r1
 8000274:	e7f5      	b.n	8000262 <__udivmoddi4+0xa6>
 8000276:	fab3 f183 	clz	r1, r3
 800027a:	2900      	cmp	r1, #0
 800027c:	d146      	bne.n	800030c <__udivmoddi4+0x150>
 800027e:	42a3      	cmp	r3, r4
 8000280:	d302      	bcc.n	8000288 <__udivmoddi4+0xcc>
 8000282:	4290      	cmp	r0, r2
 8000284:	f0c0 80f0 	bcc.w	8000468 <__udivmoddi4+0x2ac>
 8000288:	1a86      	subs	r6, r0, r2
 800028a:	eb64 0303 	sbc.w	r3, r4, r3
 800028e:	2001      	movs	r0, #1
 8000290:	2d00      	cmp	r5, #0
 8000292:	d0e6      	beq.n	8000262 <__udivmoddi4+0xa6>
 8000294:	e9c5 6300 	strd	r6, r3, [r5]
 8000298:	e7e3      	b.n	8000262 <__udivmoddi4+0xa6>
 800029a:	2a00      	cmp	r2, #0
 800029c:	f040 8090 	bne.w	80003c0 <__udivmoddi4+0x204>
 80002a0:	eba1 040c 	sub.w	r4, r1, ip
 80002a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a8:	fa1f f78c 	uxth.w	r7, ip
 80002ac:	2101      	movs	r1, #1
 80002ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80002b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b6:	fb08 4416 	mls	r4, r8, r6, r4
 80002ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002be:	fb07 f006 	mul.w	r0, r7, r6
 80002c2:	4298      	cmp	r0, r3
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x11c>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 34ff 	add.w	r4, r6, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x11a>
 80002d0:	4298      	cmp	r0, r3
 80002d2:	f200 80cd 	bhi.w	8000470 <__udivmoddi4+0x2b4>
 80002d6:	4626      	mov	r6, r4
 80002d8:	1a1c      	subs	r4, r3, r0
 80002da:	fa1f f38e 	uxth.w	r3, lr
 80002de:	fbb4 f0f8 	udiv	r0, r4, r8
 80002e2:	fb08 4410 	mls	r4, r8, r0, r4
 80002e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ea:	fb00 f707 	mul.w	r7, r0, r7
 80002ee:	429f      	cmp	r7, r3
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0x148>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x146>
 80002fc:	429f      	cmp	r7, r3
 80002fe:	f200 80b0 	bhi.w	8000462 <__udivmoddi4+0x2a6>
 8000302:	4620      	mov	r0, r4
 8000304:	1bdb      	subs	r3, r3, r7
 8000306:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030a:	e7a5      	b.n	8000258 <__udivmoddi4+0x9c>
 800030c:	f1c1 0620 	rsb	r6, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 f706 	lsr.w	r7, r2, r6
 8000316:	431f      	orrs	r7, r3
 8000318:	fa20 fc06 	lsr.w	ip, r0, r6
 800031c:	fa04 f301 	lsl.w	r3, r4, r1
 8000320:	ea43 030c 	orr.w	r3, r3, ip
 8000324:	40f4      	lsrs	r4, r6
 8000326:	fa00 f801 	lsl.w	r8, r0, r1
 800032a:	0c38      	lsrs	r0, r7, #16
 800032c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000330:	fbb4 fef0 	udiv	lr, r4, r0
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fb00 441e 	mls	r4, r0, lr, r4
 800033c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000340:	fb0e f90c 	mul.w	r9, lr, ip
 8000344:	45a1      	cmp	r9, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x1a6>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000352:	f080 8084 	bcs.w	800045e <__udivmoddi4+0x2a2>
 8000356:	45a1      	cmp	r9, r4
 8000358:	f240 8081 	bls.w	800045e <__udivmoddi4+0x2a2>
 800035c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000360:	443c      	add	r4, r7
 8000362:	eba4 0409 	sub.w	r4, r4, r9
 8000366:	fa1f f983 	uxth.w	r9, r3
 800036a:	fbb4 f3f0 	udiv	r3, r4, r0
 800036e:	fb00 4413 	mls	r4, r0, r3, r4
 8000372:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000376:	fb03 fc0c 	mul.w	ip, r3, ip
 800037a:	45a4      	cmp	ip, r4
 800037c:	d907      	bls.n	800038e <__udivmoddi4+0x1d2>
 800037e:	193c      	adds	r4, r7, r4
 8000380:	f103 30ff 	add.w	r0, r3, #4294967295
 8000384:	d267      	bcs.n	8000456 <__udivmoddi4+0x29a>
 8000386:	45a4      	cmp	ip, r4
 8000388:	d965      	bls.n	8000456 <__udivmoddi4+0x29a>
 800038a:	3b02      	subs	r3, #2
 800038c:	443c      	add	r4, r7
 800038e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000392:	fba0 9302 	umull	r9, r3, r0, r2
 8000396:	eba4 040c 	sub.w	r4, r4, ip
 800039a:	429c      	cmp	r4, r3
 800039c:	46ce      	mov	lr, r9
 800039e:	469c      	mov	ip, r3
 80003a0:	d351      	bcc.n	8000446 <__udivmoddi4+0x28a>
 80003a2:	d04e      	beq.n	8000442 <__udivmoddi4+0x286>
 80003a4:	b155      	cbz	r5, 80003bc <__udivmoddi4+0x200>
 80003a6:	ebb8 030e 	subs.w	r3, r8, lr
 80003aa:	eb64 040c 	sbc.w	r4, r4, ip
 80003ae:	fa04 f606 	lsl.w	r6, r4, r6
 80003b2:	40cb      	lsrs	r3, r1
 80003b4:	431e      	orrs	r6, r3
 80003b6:	40cc      	lsrs	r4, r1
 80003b8:	e9c5 6400 	strd	r6, r4, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	e750      	b.n	8000262 <__udivmoddi4+0xa6>
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa24 f303 	lsr.w	r3, r4, r3
 80003d0:	4094      	lsls	r4, r2
 80003d2:	430c      	orrs	r4, r1
 80003d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d8:	fa00 fe02 	lsl.w	lr, r0, r2
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3110 	mls	r1, r8, r0, r3
 80003e8:	0c23      	lsrs	r3, r4, #16
 80003ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ee:	fb00 f107 	mul.w	r1, r0, r7
 80003f2:	4299      	cmp	r1, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x24c>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 36ff 	add.w	r6, r0, #4294967295
 80003fe:	d22c      	bcs.n	800045a <__udivmoddi4+0x29e>
 8000400:	4299      	cmp	r1, r3
 8000402:	d92a      	bls.n	800045a <__udivmoddi4+0x29e>
 8000404:	3802      	subs	r0, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a5b      	subs	r3, r3, r1
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000410:	fb08 3311 	mls	r3, r8, r1, r3
 8000414:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000418:	fb01 f307 	mul.w	r3, r1, r7
 800041c:	42a3      	cmp	r3, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x276>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f101 36ff 	add.w	r6, r1, #4294967295
 8000428:	d213      	bcs.n	8000452 <__udivmoddi4+0x296>
 800042a:	42a3      	cmp	r3, r4
 800042c:	d911      	bls.n	8000452 <__udivmoddi4+0x296>
 800042e:	3902      	subs	r1, #2
 8000430:	4464      	add	r4, ip
 8000432:	1ae4      	subs	r4, r4, r3
 8000434:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000438:	e739      	b.n	80002ae <__udivmoddi4+0xf2>
 800043a:	4604      	mov	r4, r0
 800043c:	e6f0      	b.n	8000220 <__udivmoddi4+0x64>
 800043e:	4608      	mov	r0, r1
 8000440:	e706      	b.n	8000250 <__udivmoddi4+0x94>
 8000442:	45c8      	cmp	r8, r9
 8000444:	d2ae      	bcs.n	80003a4 <__udivmoddi4+0x1e8>
 8000446:	ebb9 0e02 	subs.w	lr, r9, r2
 800044a:	eb63 0c07 	sbc.w	ip, r3, r7
 800044e:	3801      	subs	r0, #1
 8000450:	e7a8      	b.n	80003a4 <__udivmoddi4+0x1e8>
 8000452:	4631      	mov	r1, r6
 8000454:	e7ed      	b.n	8000432 <__udivmoddi4+0x276>
 8000456:	4603      	mov	r3, r0
 8000458:	e799      	b.n	800038e <__udivmoddi4+0x1d2>
 800045a:	4630      	mov	r0, r6
 800045c:	e7d4      	b.n	8000408 <__udivmoddi4+0x24c>
 800045e:	46d6      	mov	lr, sl
 8000460:	e77f      	b.n	8000362 <__udivmoddi4+0x1a6>
 8000462:	4463      	add	r3, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e74d      	b.n	8000304 <__udivmoddi4+0x148>
 8000468:	4606      	mov	r6, r0
 800046a:	4623      	mov	r3, r4
 800046c:	4608      	mov	r0, r1
 800046e:	e70f      	b.n	8000290 <__udivmoddi4+0xd4>
 8000470:	3e02      	subs	r6, #2
 8000472:	4463      	add	r3, ip
 8000474:	e730      	b.n	80002d8 <__udivmoddi4+0x11c>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800047c:	b5b0      	push	{r4, r5, r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000482:	4b0b      	ldr	r3, [pc, #44]	@ (80004b0 <APPD_EnableCPU2+0x34>)
 8000484:	1d3c      	adds	r4, r7, #4
 8000486:	461d      	mov	r5, r3
 8000488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800048a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800048c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000490:	c403      	stmia	r4!, {r0, r1}
 8000492:	8022      	strh	r2, [r4, #0]
 8000494:	3402      	adds	r4, #2
 8000496:	0c13      	lsrs	r3, r2, #16
 8000498:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800049a:	f006 fe8d 	bl	80071b8 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	4618      	mov	r0, r3
 80004a2:	f006 f91e 	bl	80066e2 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80004a6:	bf00      	nop
}
 80004a8:	3720      	adds	r7, #32
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bdb0      	pop	{r4, r5, r7, pc}
 80004ae:	bf00      	nop
 80004b0:	080090ec 	.word	0x080090ec

080004b4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80004bc:	4b07      	ldr	r3, [pc, #28]	@ (80004dc <LL_C2_PWR_SetPowerMode+0x28>)
 80004be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80004c2:	f023 0207 	bic.w	r2, r3, #7
 80004c6:	4905      	ldr	r1, [pc, #20]	@ (80004dc <LL_C2_PWR_SetPowerMode+0x28>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4313      	orrs	r3, r2
 80004cc:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	58000400 	.word	0x58000400

080004e0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80004e8:	4b06      	ldr	r3, [pc, #24]	@ (8000504 <LL_EXTI_EnableIT_32_63+0x24>)
 80004ea:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80004ee:	4905      	ldr	r1, [pc, #20]	@ (8000504 <LL_EXTI_EnableIT_32_63+0x24>)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4313      	orrs	r3, r2
 80004f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	58000800 	.word	0x58000800

08000508 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000514:	4a0a      	ldr	r2, [pc, #40]	@ (8000540 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000516:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800051a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800051e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000522:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	021b      	lsls	r3, r3, #8
 800052a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800052e:	4313      	orrs	r3, r2
 8000530:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	cafecafe 	.word	0xcafecafe

08000544 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800054c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000556:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4313      	orrs	r3, r2
 800055e:	608b      	str	r3, [r1, #8]
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000570:	4b04      	ldr	r3, [pc, #16]	@ (8000584 <LL_DBGMCU_GetDeviceID+0x18>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000578:	4618      	mov	r0, r3
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	e0042000 	.word	0xe0042000

08000588 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800058c:	4b04      	ldr	r3, [pc, #16]	@ (80005a0 <LL_DBGMCU_GetRevisionID+0x18>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	0c1b      	lsrs	r3, r3, #16
 8000592:	b29b      	uxth	r3, r3
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	e0042000 	.word	0xe0042000

080005a4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80005a8:	4b05      	ldr	r3, [pc, #20]	@ (80005c0 <LL_LPM_EnableSleep+0x1c>)
 80005aa:	691b      	ldr	r3, [r3, #16]
 80005ac:	4a04      	ldr	r2, [pc, #16]	@ (80005c0 <LL_LPM_EnableSleep+0x1c>)
 80005ae:	f023 0304 	bic.w	r3, r3, #4
 80005b2:	6113      	str	r3, [r2, #16]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	22ff      	movs	r2, #255	@ 0xff
 80005d0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80005de:	b480      	push	{r7}
 80005e0:	b083      	sub	sp, #12
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	22ca      	movs	r2, #202	@ 0xca
 80005ea:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2253      	movs	r2, #83	@ 0x53
 80005f0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80005fe:	b480      	push	{r7}
 8000600:	b083      	sub	sp, #12
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	f023 0207 	bic.w	r2, r3, #7
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	431a      	orrs	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	609a      	str	r2, [r3, #8]
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000628:	4b04      	ldr	r3, [pc, #16]	@ (800063c <MX_APPE_Config+0x18>)
 800062a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800062e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000630:	f000 f824 	bl	800067c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000634:	f000 f829 	bl	800068a <Config_HSE>

  return;
 8000638:	bf00      	nop
}
 800063a:	bd80      	pop	{r7, pc}
 800063c:	58004000 	.word	0x58004000

08000640 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000644:	f000 f835 	bl	80006b2 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000648:	f000 f84e 	bl	80006e8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800064c:	4903      	ldr	r1, [pc, #12]	@ (800065c <MX_APPE_Init+0x1c>)
 800064e:	2000      	movs	r0, #0
 8000650:	f000 fdbe 	bl	80011d0 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000654:	f000 f856 	bl	8000704 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000658:	bf00      	nop
}
 800065a:	bd80      	pop	{r7, pc}
 800065c:	200001cc 	.word	0x200001cc

08000660 <Init_Smps>:

void Init_Smps(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000664:	bf00      	nop
}
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <Init_Exti>:

void Init_Exti(void)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000672:	2050      	movs	r0, #80	@ 0x50
 8000674:	f7ff ff34 	bl	80004e0 <LL_EXTI_EnableIT_32_63>

  return;
 8000678:	bf00      	nop
}
 800067a:	bd80      	pop	{r7, pc}

0800067c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000680:	bf00      	nop
}
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b082      	sub	sp, #8
 800068e:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000690:	2000      	movs	r0, #0
 8000692:	f006 fe1d 	bl	80072d0 <OTP_Read>
 8000696:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d005      	beq.n	80006aa <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	799b      	ldrb	r3, [r3, #6]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff30 	bl	8000508 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
}
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <System_Init>:

static void System_Init(void)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	af00      	add	r7, sp, #0
  Init_Smps();
 80006b6:	f7ff ffd3 	bl	8000660 <Init_Smps>

  Init_Exti();
 80006ba:	f7ff ffd8 	bl	800066e <Init_Exti>

  Init_Rtc();
 80006be:	f000 f803 	bl	80006c8 <Init_Rtc>

  return;
 80006c2:	bf00      	nop
}
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <Init_Rtc>:

static void Init_Rtc(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80006cc:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <Init_Rtc+0x1c>)
 80006ce:	f7ff ff86 	bl	80005de <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80006d2:	2100      	movs	r1, #0
 80006d4:	4803      	ldr	r0, [pc, #12]	@ (80006e4 <Init_Rtc+0x1c>)
 80006d6:	f7ff ff92 	bl	80005fe <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80006da:	4802      	ldr	r0, [pc, #8]	@ (80006e4 <Init_Rtc+0x1c>)
 80006dc:	f7ff ff72 	bl	80005c4 <LL_RTC_EnableWriteProtection>

  return;
 80006e0:	bf00      	nop
}
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40002800 	.word	0x40002800

080006e8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80006ec:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80006f0:	f7ff ff28 	bl	8000544 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80006f4:	f007 fdb8 	bl	8008268 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80006f8:	2004      	movs	r0, #4
 80006fa:	f7ff fedb 	bl	80004b4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80006fe:	bf00      	nop
}
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800070a:	f006 fb9f 	bl	8006e4c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800070e:	4a11      	ldr	r2, [pc, #68]	@ (8000754 <appe_Tl_Init+0x50>)
 8000710:	2100      	movs	r1, #0
 8000712:	2008      	movs	r0, #8
 8000714:	f007 fee6 	bl	80084e4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000718:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <appe_Tl_Init+0x54>)
 800071a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800071c:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <appe_Tl_Init+0x58>)
 800071e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000720:	463b      	mov	r3, r7
 8000722:	4619      	mov	r1, r3
 8000724:	480e      	ldr	r0, [pc, #56]	@ (8000760 <appe_Tl_Init+0x5c>)
 8000726:	f006 fa53 	bl	8006bd0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800072a:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <appe_Tl_Init+0x60>)
 800072c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <appe_Tl_Init+0x64>)
 8000730:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <appe_Tl_Init+0x68>)
 8000734:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000736:	f240 533c 	movw	r3, #1340	@ 0x53c
 800073a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	4618      	mov	r0, r3
 8000742:	f006 fcc5 	bl	80070d0 <TL_MM_Init>

  TL_Enable();
 8000746:	f006 fb7b 	bl	8006e40 <TL_Enable>

  return;
 800074a:	bf00      	nop
}
 800074c:	3720      	adds	r7, #32
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	08006c09 	.word	0x08006c09
 8000758:	20030734 	.word	0x20030734
 800075c:	08000771 	.word	0x08000771
 8000760:	08000789 	.word	0x08000789
 8000764:	2003094c 	.word	0x2003094c
 8000768:	20030840 	.word	0x20030840
 800076c:	200301f8 	.word	0x200301f8

08000770 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800077a:	bf00      	nop
}
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
	...

08000788 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	330b      	adds	r3, #11
 8000796:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000798:	69fb      	ldr	r3, [r7, #28]
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	b29b      	uxth	r3, r3
 800079e:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 80007a2:	2b07      	cmp	r3, #7
 80007a4:	d81f      	bhi.n	80007e6 <APPE_SysUserEvtRx+0x5e>
 80007a6:	a201      	add	r2, pc, #4	@ (adr r2, 80007ac <APPE_SysUserEvtRx+0x24>)
 80007a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ac:	080007cd 	.word	0x080007cd
 80007b0:	080007df 	.word	0x080007df
 80007b4:	080007e7 	.word	0x080007e7
 80007b8:	080007e7 	.word	0x080007e7
 80007bc:	080007e7 	.word	0x080007e7
 80007c0:	080007e7 	.word	0x080007e7
 80007c4:	080007e7 	.word	0x080007e7
 80007c8:	080007e7 	.word	0x080007e7
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	4618      	mov	r0, r3
 80007d2:	f005 ffb3 	bl	800673c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f000 f81b 	bl	8000812 <APPE_SysEvtReadyProcessing>
    break;
 80007dc:	e004      	b.n	80007e8 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f000 f806 	bl	80007f0 <APPE_SysEvtError>
    break;
 80007e4:	e000      	b.n	80007e8 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80007e6:	bf00      	nop
  }

  return;
 80007e8:	bf00      	nop
}
 80007ea:	3720      	adds	r7, #32
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	330b      	adds	r3, #11
 80007fe:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	3302      	adds	r3, #2
 8000804:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000806:	bf00      	nop
}
 8000808:	3714      	adds	r7, #20
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b08a      	sub	sp, #40	@ 0x28
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	330b      	adds	r3, #11
 8000836:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	3302      	adds	r3, #2
 800083c:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800083e:	69bb      	ldr	r3, [r7, #24]
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d11d      	bne.n	8000882 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000846:	f7ff fe19 	bl	800047c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800084a:	230f      	movs	r3, #15
 800084c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800084e:	237f      	movs	r3, #127	@ 0x7f
 8000850:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000852:	f7ff fe99 	bl	8000588 <LL_DBGMCU_GetRevisionID>
 8000856:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800085a:	b29b      	uxth	r3, r3
 800085c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800085e:	f7ff fe85 	bl	800056c <LL_DBGMCU_GetDeviceID>
 8000862:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000864:	6a3b      	ldr	r3, [r7, #32]
 8000866:	b29b      	uxth	r3, r3
 8000868:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800086a:	f107 0308 	add.w	r3, r7, #8
 800086e:	4618      	mov	r0, r3
 8000870:	f005 ff4e 	bl	8006710 <SHCI_C2_Config>

    APP_BLE_Init();
 8000874:	f006 fe36 	bl	80074e4 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000878:	2100      	movs	r1, #0
 800087a:	2001      	movs	r0, #1
 800087c:	f007 fd06 	bl	800828c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000880:	e007      	b.n	8000892 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000882:	69bb      	ldr	r3, [r7, #24]
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d103      	bne.n	8000892 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]
  return;
 8000890:	bf00      	nop
 8000892:	bf00      	nop
}
 8000894:	3728      	adds	r7, #40	@ 0x28
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b084      	sub	sp, #16
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008a2:	f001 faf9 	bl	8001e98 <HAL_GetTick>
 80008a6:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b2:	d00a      	beq.n	80008ca <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80008b4:	f001 fb08 	bl	8001ec8 <HAL_GetTickFreq>
 80008b8:	4603      	mov	r3, r0
 80008ba:	461a      	mov	r2, r3
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	4413      	add	r3, r2
 80008c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008c2:	e002      	b.n	80008ca <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80008c4:	f7ff fe6e 	bl	80005a4 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 80008c8:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80008ca:	f001 fae5 	bl	8001e98 <HAL_GetTick>
 80008ce:	4602      	mov	r2, r0
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	1ad3      	subs	r3, r2, r3
 80008d4:	68fa      	ldr	r2, [r7, #12]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d8f4      	bhi.n	80008c4 <HAL_Delay+0x2a>
  }
}
 80008da:	bf00      	nop
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ec:	f007 fcfe 	bl	80082ec <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80008f8:	bf00      	nop
}
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
 800090a:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800090c:	f04f 30ff 	mov.w	r0, #4294967295
 8000910:	f007 fcec 	bl	80082ec <UTIL_SEQ_Run>
  return;
 8000914:	bf00      	nop
}
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000924:	2100      	movs	r1, #0
 8000926:	2008      	movs	r0, #8
 8000928:	f007 fdfe 	bl	8008528 <UTIL_SEQ_SetTask>
  return;
 800092c:	bf00      	nop
}
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800093c:	2002      	movs	r0, #2
 800093e:	f007 fe5f 	bl	8008600 <UTIL_SEQ_SetEvt>
  return;
 8000942:	bf00      	nop
}
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000952:	2002      	movs	r0, #2
 8000954:	f007 fe74 	bl	8008640 <UTIL_SEQ_WaitEvt>
  return;
 8000958:	bf00      	nop
}
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000968:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800096c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800096e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4313      	orrs	r3, r2
 8000976:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000978:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800097c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4013      	ands	r3, r2
 8000982:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000984:	68fb      	ldr	r3, [r7, #12]
}
 8000986:	bf00      	nop
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	2004      	movs	r0, #4
 8000998:	f7ff ffe2 	bl	8000960 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099c:	2002      	movs	r0, #2
 800099e:	f7ff ffdf 	bl	8000960 <LL_AHB2_GRP1_EnableClock>

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <LL_EXTI_EnableIT_0_31>:
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <LL_EXTI_EnableIT_0_31+0x24>)
 80009b2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80009b6:	4905      	ldr	r1, [pc, #20]	@ (80009cc <LL_EXTI_EnableIT_0_31+0x24>)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	58000800 	.word	0x58000800

080009d0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80009d8:	4b05      	ldr	r3, [pc, #20]	@ (80009f0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	4904      	ldr	r1, [pc, #16]	@ (80009f0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	600b      	str	r3, [r1, #0]

}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	58000800 	.word	0x58000800

080009f4 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80009fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000a30 <ReadRtcSsrValue+0x3c>)
 80009fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a02:	4b0b      	ldr	r3, [pc, #44]	@ (8000a30 <ReadRtcSsrValue+0x3c>)
 8000a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000a0a:	e005      	b.n	8000a18 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a10:	4b07      	ldr	r3, [pc, #28]	@ (8000a30 <ReadRtcSsrValue+0x3c>)
 8000a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d1f5      	bne.n	8000a0c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000a20:	683b      	ldr	r3, [r7, #0]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40002800 	.word	0x40002800

08000a34 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	460a      	mov	r2, r1
 8000a3e:	71fb      	strb	r3, [r7, #7]
 8000a40:	4613      	mov	r3, r2
 8000a42:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000a44:	79ba      	ldrb	r2, [r7, #6]
 8000a46:	491d      	ldr	r1, [pc, #116]	@ (8000abc <LinkTimerAfter+0x88>)
 8000a48:	4613      	mov	r3, r2
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	4413      	add	r3, r2
 8000a4e:	00db      	lsls	r3, r3, #3
 8000a50:	440b      	add	r3, r1
 8000a52:	3315      	adds	r3, #21
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	2b06      	cmp	r3, #6
 8000a5c:	d009      	beq.n	8000a72 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000a5e:	7bfa      	ldrb	r2, [r7, #15]
 8000a60:	4916      	ldr	r1, [pc, #88]	@ (8000abc <LinkTimerAfter+0x88>)
 8000a62:	4613      	mov	r3, r2
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	4413      	add	r3, r2
 8000a68:	00db      	lsls	r3, r3, #3
 8000a6a:	440b      	add	r3, r1
 8000a6c:	3314      	adds	r3, #20
 8000a6e:	79fa      	ldrb	r2, [r7, #7]
 8000a70:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000a72:	79fa      	ldrb	r2, [r7, #7]
 8000a74:	4911      	ldr	r1, [pc, #68]	@ (8000abc <LinkTimerAfter+0x88>)
 8000a76:	4613      	mov	r3, r2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	4413      	add	r3, r2
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	440b      	add	r3, r1
 8000a80:	3315      	adds	r3, #21
 8000a82:	7bfa      	ldrb	r2, [r7, #15]
 8000a84:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000a86:	79fa      	ldrb	r2, [r7, #7]
 8000a88:	490c      	ldr	r1, [pc, #48]	@ (8000abc <LinkTimerAfter+0x88>)
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	4413      	add	r3, r2
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	440b      	add	r3, r1
 8000a94:	3314      	adds	r3, #20
 8000a96:	79ba      	ldrb	r2, [r7, #6]
 8000a98:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000a9a:	79ba      	ldrb	r2, [r7, #6]
 8000a9c:	4907      	ldr	r1, [pc, #28]	@ (8000abc <LinkTimerAfter+0x88>)
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	4413      	add	r3, r2
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	440b      	add	r3, r1
 8000aa8:	3315      	adds	r3, #21
 8000aaa:	79fa      	ldrb	r2, [r7, #7]
 8000aac:	701a      	strb	r2, [r3, #0]

  return;
 8000aae:	bf00      	nop
}
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	200000f0 	.word	0x200000f0

08000ac0 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	460a      	mov	r2, r1
 8000aca:	71fb      	strb	r3, [r7, #7]
 8000acc:	4613      	mov	r3, r2
 8000ace:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000ad0:	4b29      	ldr	r3, [pc, #164]	@ (8000b78 <LinkTimerBefore+0xb8>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	79ba      	ldrb	r2, [r7, #6]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d032      	beq.n	8000b42 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000adc:	79ba      	ldrb	r2, [r7, #6]
 8000ade:	4927      	ldr	r1, [pc, #156]	@ (8000b7c <LinkTimerBefore+0xbc>)
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	4413      	add	r3, r2
 8000ae6:	00db      	lsls	r3, r3, #3
 8000ae8:	440b      	add	r3, r1
 8000aea:	3314      	adds	r3, #20
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000af0:	7bfa      	ldrb	r2, [r7, #15]
 8000af2:	4922      	ldr	r1, [pc, #136]	@ (8000b7c <LinkTimerBefore+0xbc>)
 8000af4:	4613      	mov	r3, r2
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	4413      	add	r3, r2
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	440b      	add	r3, r1
 8000afe:	3315      	adds	r3, #21
 8000b00:	79fa      	ldrb	r2, [r7, #7]
 8000b02:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b04:	79fa      	ldrb	r2, [r7, #7]
 8000b06:	491d      	ldr	r1, [pc, #116]	@ (8000b7c <LinkTimerBefore+0xbc>)
 8000b08:	4613      	mov	r3, r2
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	4413      	add	r3, r2
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	440b      	add	r3, r1
 8000b12:	3315      	adds	r3, #21
 8000b14:	79ba      	ldrb	r2, [r7, #6]
 8000b16:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000b18:	79fa      	ldrb	r2, [r7, #7]
 8000b1a:	4918      	ldr	r1, [pc, #96]	@ (8000b7c <LinkTimerBefore+0xbc>)
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	4413      	add	r3, r2
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	440b      	add	r3, r1
 8000b26:	3314      	adds	r3, #20
 8000b28:	7bfa      	ldrb	r2, [r7, #15]
 8000b2a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b2c:	79ba      	ldrb	r2, [r7, #6]
 8000b2e:	4913      	ldr	r1, [pc, #76]	@ (8000b7c <LinkTimerBefore+0xbc>)
 8000b30:	4613      	mov	r3, r2
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	4413      	add	r3, r2
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	440b      	add	r3, r1
 8000b3a:	3314      	adds	r3, #20
 8000b3c:	79fa      	ldrb	r2, [r7, #7]
 8000b3e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000b40:	e014      	b.n	8000b6c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b42:	79fa      	ldrb	r2, [r7, #7]
 8000b44:	490d      	ldr	r1, [pc, #52]	@ (8000b7c <LinkTimerBefore+0xbc>)
 8000b46:	4613      	mov	r3, r2
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	4413      	add	r3, r2
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	440b      	add	r3, r1
 8000b50:	3315      	adds	r3, #21
 8000b52:	79ba      	ldrb	r2, [r7, #6]
 8000b54:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b56:	79ba      	ldrb	r2, [r7, #6]
 8000b58:	4908      	ldr	r1, [pc, #32]	@ (8000b7c <LinkTimerBefore+0xbc>)
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	4413      	add	r3, r2
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	440b      	add	r3, r1
 8000b64:	3314      	adds	r3, #20
 8000b66:	79fa      	ldrb	r2, [r7, #7]
 8000b68:	701a      	strb	r2, [r3, #0]
  return;
 8000b6a:	bf00      	nop
}
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000180 	.word	0x20000180
 8000b7c:	200000f0 	.word	0x200000f0

08000b80 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b8a:	4b4e      	ldr	r3, [pc, #312]	@ (8000cc4 <linkTimer+0x144>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b06      	cmp	r3, #6
 8000b92:	d118      	bne.n	8000bc6 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000b94:	4b4b      	ldr	r3, [pc, #300]	@ (8000cc4 <linkTimer+0x144>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4b4b      	ldr	r3, [pc, #300]	@ (8000cc8 <linkTimer+0x148>)
 8000b9c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000b9e:	4a49      	ldr	r2, [pc, #292]	@ (8000cc4 <linkTimer+0x144>)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000ba4:	79fa      	ldrb	r2, [r7, #7]
 8000ba6:	4949      	ldr	r1, [pc, #292]	@ (8000ccc <linkTimer+0x14c>)
 8000ba8:	4613      	mov	r3, r2
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	4413      	add	r3, r2
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	440b      	add	r3, r1
 8000bb2:	3315      	adds	r3, #21
 8000bb4:	2206      	movs	r2, #6
 8000bb6:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000bb8:	4b45      	ldr	r3, [pc, #276]	@ (8000cd0 <linkTimer+0x150>)
 8000bba:	f04f 32ff 	mov.w	r2, #4294967295
 8000bbe:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	81fb      	strh	r3, [r7, #14]
 8000bc4:	e078      	b.n	8000cb8 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000bc6:	f000 f909 	bl	8000ddc <ReturnTimeElapsed>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000bce:	79fa      	ldrb	r2, [r7, #7]
 8000bd0:	493e      	ldr	r1, [pc, #248]	@ (8000ccc <linkTimer+0x14c>)
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	4413      	add	r3, r2
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	440b      	add	r3, r1
 8000bdc:	3308      	adds	r3, #8
 8000bde:	6819      	ldr	r1, [r3, #0]
 8000be0:	89fb      	ldrh	r3, [r7, #14]
 8000be2:	79fa      	ldrb	r2, [r7, #7]
 8000be4:	4419      	add	r1, r3
 8000be6:	4839      	ldr	r0, [pc, #228]	@ (8000ccc <linkTimer+0x14c>)
 8000be8:	4613      	mov	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4413      	add	r3, r2
 8000bee:	00db      	lsls	r3, r3, #3
 8000bf0:	4403      	add	r3, r0
 8000bf2:	3308      	adds	r3, #8
 8000bf4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000bf6:	79fa      	ldrb	r2, [r7, #7]
 8000bf8:	4934      	ldr	r1, [pc, #208]	@ (8000ccc <linkTimer+0x14c>)
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	4413      	add	r3, r2
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	440b      	add	r3, r1
 8000c04:	3308      	adds	r3, #8
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000c0a:	4b2e      	ldr	r3, [pc, #184]	@ (8000cc4 <linkTimer+0x144>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	4619      	mov	r1, r3
 8000c12:	4a2e      	ldr	r2, [pc, #184]	@ (8000ccc <linkTimer+0x14c>)
 8000c14:	460b      	mov	r3, r1
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	440b      	add	r3, r1
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	4413      	add	r3, r2
 8000c1e:	3308      	adds	r3, #8
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d337      	bcc.n	8000c98 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000c28:	4b26      	ldr	r3, [pc, #152]	@ (8000cc4 <linkTimer+0x144>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000c2e:	7b7a      	ldrb	r2, [r7, #13]
 8000c30:	4926      	ldr	r1, [pc, #152]	@ (8000ccc <linkTimer+0x14c>)
 8000c32:	4613      	mov	r3, r2
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	4413      	add	r3, r2
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	440b      	add	r3, r1
 8000c3c:	3315      	adds	r3, #21
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000c42:	e013      	b.n	8000c6c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000c44:	7b7a      	ldrb	r2, [r7, #13]
 8000c46:	4921      	ldr	r1, [pc, #132]	@ (8000ccc <linkTimer+0x14c>)
 8000c48:	4613      	mov	r3, r2
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	4413      	add	r3, r2
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	440b      	add	r3, r1
 8000c52:	3315      	adds	r3, #21
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000c58:	7b7a      	ldrb	r2, [r7, #13]
 8000c5a:	491c      	ldr	r1, [pc, #112]	@ (8000ccc <linkTimer+0x14c>)
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	4413      	add	r3, r2
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	440b      	add	r3, r1
 8000c66:	3315      	adds	r3, #21
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000c6c:	7b3b      	ldrb	r3, [r7, #12]
 8000c6e:	2b06      	cmp	r3, #6
 8000c70:	d00b      	beq.n	8000c8a <linkTimer+0x10a>
 8000c72:	7b3a      	ldrb	r2, [r7, #12]
 8000c74:	4915      	ldr	r1, [pc, #84]	@ (8000ccc <linkTimer+0x14c>)
 8000c76:	4613      	mov	r3, r2
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	4413      	add	r3, r2
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	440b      	add	r3, r1
 8000c80:	3308      	adds	r3, #8
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	68ba      	ldr	r2, [r7, #8]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d2dc      	bcs.n	8000c44 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000c8a:	7b7a      	ldrb	r2, [r7, #13]
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fecf 	bl	8000a34 <LinkTimerAfter>
 8000c96:	e00f      	b.n	8000cb8 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000c98:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <linkTimer+0x144>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff ff0c 	bl	8000ac0 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <linkTimer+0x144>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <linkTimer+0x148>)
 8000cb0:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000cb2:	4a04      	ldr	r2, [pc, #16]	@ (8000cc4 <linkTimer+0x144>)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000cb8:	89fb      	ldrh	r3, [r7, #14]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000180 	.word	0x20000180
 8000cc8:	20000181 	.word	0x20000181
 8000ccc:	200000f0 	.word	0x200000f0
 8000cd0:	20000184 	.word	0x20000184

08000cd4 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	460a      	mov	r2, r1
 8000cde:	71fb      	strb	r3, [r7, #7]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000ce4:	4b39      	ldr	r3, [pc, #228]	@ (8000dcc <UnlinkTimer+0xf8>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	79fa      	ldrb	r2, [r7, #7]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d111      	bne.n	8000d14 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000cf0:	4b36      	ldr	r3, [pc, #216]	@ (8000dcc <UnlinkTimer+0xf8>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4b36      	ldr	r3, [pc, #216]	@ (8000dd0 <UnlinkTimer+0xfc>)
 8000cf8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000cfa:	79fa      	ldrb	r2, [r7, #7]
 8000cfc:	4935      	ldr	r1, [pc, #212]	@ (8000dd4 <UnlinkTimer+0x100>)
 8000cfe:	4613      	mov	r3, r2
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	4413      	add	r3, r2
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	440b      	add	r3, r1
 8000d08:	3315      	adds	r3, #21
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000dcc <UnlinkTimer+0xf8>)
 8000d10:	701a      	strb	r2, [r3, #0]
 8000d12:	e03e      	b.n	8000d92 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000d14:	79fa      	ldrb	r2, [r7, #7]
 8000d16:	492f      	ldr	r1, [pc, #188]	@ (8000dd4 <UnlinkTimer+0x100>)
 8000d18:	4613      	mov	r3, r2
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	4413      	add	r3, r2
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	440b      	add	r3, r1
 8000d22:	3314      	adds	r3, #20
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000d28:	79fa      	ldrb	r2, [r7, #7]
 8000d2a:	492a      	ldr	r1, [pc, #168]	@ (8000dd4 <UnlinkTimer+0x100>)
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	4413      	add	r3, r2
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	440b      	add	r3, r1
 8000d36:	3315      	adds	r3, #21
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000d3c:	79f9      	ldrb	r1, [r7, #7]
 8000d3e:	7bfa      	ldrb	r2, [r7, #15]
 8000d40:	4824      	ldr	r0, [pc, #144]	@ (8000dd4 <UnlinkTimer+0x100>)
 8000d42:	460b      	mov	r3, r1
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	440b      	add	r3, r1
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	4403      	add	r3, r0
 8000d4c:	3315      	adds	r3, #21
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	b2d8      	uxtb	r0, r3
 8000d52:	4920      	ldr	r1, [pc, #128]	@ (8000dd4 <UnlinkTimer+0x100>)
 8000d54:	4613      	mov	r3, r2
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	4413      	add	r3, r2
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	440b      	add	r3, r1
 8000d5e:	3315      	adds	r3, #21
 8000d60:	4602      	mov	r2, r0
 8000d62:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d64:	7bbb      	ldrb	r3, [r7, #14]
 8000d66:	2b06      	cmp	r3, #6
 8000d68:	d013      	beq.n	8000d92 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000d6a:	79f9      	ldrb	r1, [r7, #7]
 8000d6c:	7bba      	ldrb	r2, [r7, #14]
 8000d6e:	4819      	ldr	r0, [pc, #100]	@ (8000dd4 <UnlinkTimer+0x100>)
 8000d70:	460b      	mov	r3, r1
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	440b      	add	r3, r1
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	4403      	add	r3, r0
 8000d7a:	3314      	adds	r3, #20
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	b2d8      	uxtb	r0, r3
 8000d80:	4914      	ldr	r1, [pc, #80]	@ (8000dd4 <UnlinkTimer+0x100>)
 8000d82:	4613      	mov	r3, r2
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	4413      	add	r3, r2
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	440b      	add	r3, r1
 8000d8c:	3314      	adds	r3, #20
 8000d8e:	4602      	mov	r2, r0
 8000d90:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000d92:	79fa      	ldrb	r2, [r7, #7]
 8000d94:	490f      	ldr	r1, [pc, #60]	@ (8000dd4 <UnlinkTimer+0x100>)
 8000d96:	4613      	mov	r3, r2
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	4413      	add	r3, r2
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	440b      	add	r3, r1
 8000da0:	330c      	adds	r3, #12
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000da6:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <UnlinkTimer+0xf8>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b06      	cmp	r3, #6
 8000dae:	d107      	bne.n	8000dc0 <UnlinkTimer+0xec>
 8000db0:	79bb      	ldrb	r3, [r7, #6]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d104      	bne.n	8000dc0 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000db6:	4b08      	ldr	r3, [pc, #32]	@ (8000dd8 <UnlinkTimer+0x104>)
 8000db8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dbc:	601a      	str	r2, [r3, #0]
  }

  return;
 8000dbe:	bf00      	nop
 8000dc0:	bf00      	nop
}
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	20000180 	.word	0x20000180
 8000dd0:	20000181 	.word	0x20000181
 8000dd4:	200000f0 	.word	0x200000f0
 8000dd8:	20000184 	.word	0x20000184

08000ddc <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000de2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e4c <ReturnTimeElapsed+0x70>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dea:	d026      	beq.n	8000e3a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000dec:	f7ff fe02 	bl	80009f4 <ReadRtcSsrValue>
 8000df0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000df2:	4b16      	ldr	r3, [pc, #88]	@ (8000e4c <ReturnTimeElapsed+0x70>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d805      	bhi.n	8000e08 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000dfc:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <ReturnTimeElapsed+0x70>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	e00a      	b.n	8000e1e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000e08:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <ReturnTimeElapsed+0x74>)
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000e14:	4b0d      	ldr	r3, [pc, #52]	@ (8000e4c <ReturnTimeElapsed+0x70>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	683a      	ldr	r2, [r7, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e54 <ReturnTimeElapsed+0x78>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	fb02 f303 	mul.w	r3, r2, r3
 8000e2a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <ReturnTimeElapsed+0x7c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	40d3      	lsrs	r3, r2
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	e001      	b.n	8000e3e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	b29b      	uxth	r3, r3
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000184 	.word	0x20000184
 8000e50:	2000018c 	.word	0x2000018c
 8000e54:	2000018a 	.word	0x2000018a
 8000e58:	20000189 	.word	0x20000189

08000e5c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000e66:	88fb      	ldrh	r3, [r7, #6]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d108      	bne.n	8000e7e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000e6c:	f7ff fdc2 	bl	80009f4 <ReadRtcSsrValue>
 8000e70:	4603      	mov	r3, r0
 8000e72:	4a21      	ldr	r2, [pc, #132]	@ (8000ef8 <RestartWakeupCounter+0x9c>)
 8000e74:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000e76:	2003      	movs	r0, #3
 8000e78:	f001 f9af 	bl	80021da <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000e7c:	e039      	b.n	8000ef2 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d803      	bhi.n	8000e8c <RestartWakeupCounter+0x30>
 8000e84:	4b1d      	ldr	r3, [pc, #116]	@ (8000efc <RestartWakeupCounter+0xa0>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d002      	beq.n	8000e92 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000e92:	bf00      	nop
 8000e94:	4b1a      	ldr	r3, [pc, #104]	@ (8000f00 <RestartWakeupCounter+0xa4>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d0f8      	beq.n	8000e94 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000ea2:	4b17      	ldr	r3, [pc, #92]	@ (8000f00 <RestartWakeupCounter+0xa4>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <RestartWakeupCounter+0xa4>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000eb2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000eb4:	4b13      	ldr	r3, [pc, #76]	@ (8000f04 <RestartWakeupCounter+0xa8>)
 8000eb6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000eba:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f001 f99a 	bl	80021f6 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000ec2:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <RestartWakeupCounter+0xac>)
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	0c1b      	lsrs	r3, r3, #16
 8000ec8:	041b      	lsls	r3, r3, #16
 8000eca:	88fa      	ldrh	r2, [r7, #6]
 8000ecc:	490e      	ldr	r1, [pc, #56]	@ (8000f08 <RestartWakeupCounter+0xac>)
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000ed2:	f7ff fd8f 	bl	80009f4 <ReadRtcSsrValue>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4a07      	ldr	r2, [pc, #28]	@ (8000ef8 <RestartWakeupCounter+0x9c>)
 8000eda:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000edc:	4b08      	ldr	r3, [pc, #32]	@ (8000f00 <RestartWakeupCounter+0xa4>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	4b07      	ldr	r3, [pc, #28]	@ (8000f00 <RestartWakeupCounter+0xa4>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000eea:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000eec:	f3af 8000 	nop.w
  return ;
 8000ef0:	bf00      	nop
}
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000184 	.word	0x20000184
 8000efc:	20000189 	.word	0x20000189
 8000f00:	200001cc 	.word	0x200001cc
 8000f04:	58000800 	.word	0x58000800
 8000f08:	40002800 	.word	0x40002800

08000f0c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000f12:	4b45      	ldr	r3, [pc, #276]	@ (8001028 <RescheduleTimerList+0x11c>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f1e:	d107      	bne.n	8000f30 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000f20:	bf00      	nop
 8000f22:	4b42      	ldr	r3, [pc, #264]	@ (800102c <RescheduleTimerList+0x120>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	f003 0304 	and.w	r3, r3, #4
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1f8      	bne.n	8000f22 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000f30:	4b3e      	ldr	r3, [pc, #248]	@ (800102c <RescheduleTimerList+0x120>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	689a      	ldr	r2, [r3, #8]
 8000f36:	4b3d      	ldr	r3, [pc, #244]	@ (800102c <RescheduleTimerList+0x120>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000f3e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000f40:	4b3b      	ldr	r3, [pc, #236]	@ (8001030 <RescheduleTimerList+0x124>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000f46:	7bfa      	ldrb	r2, [r7, #15]
 8000f48:	493a      	ldr	r1, [pc, #232]	@ (8001034 <RescheduleTimerList+0x128>)
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4413      	add	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	440b      	add	r3, r1
 8000f54:	3308      	adds	r3, #8
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000f5a:	f7ff ff3f 	bl	8000ddc <ReturnTimeElapsed>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	68ba      	ldr	r2, [r7, #8]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d205      	bcs.n	8000f76 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f6e:	4b32      	ldr	r3, [pc, #200]	@ (8001038 <RescheduleTimerList+0x12c>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	701a      	strb	r2, [r3, #0]
 8000f74:	e04d      	b.n	8001012 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	4a30      	ldr	r2, [pc, #192]	@ (800103c <RescheduleTimerList+0x130>)
 8000f7a:	8812      	ldrh	r2, [r2, #0]
 8000f7c:	b292      	uxth	r2, r2
 8000f7e:	4413      	add	r3, r2
 8000f80:	461a      	mov	r2, r3
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d906      	bls.n	8000f96 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000f88:	4b2c      	ldr	r3, [pc, #176]	@ (800103c <RescheduleTimerList+0x130>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000f8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001038 <RescheduleTimerList+0x12c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
 8000f94:	e03d      	b.n	8001012 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000fa0:	4b25      	ldr	r3, [pc, #148]	@ (8001038 <RescheduleTimerList+0x12c>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000fa6:	e034      	b.n	8001012 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000fa8:	7bfa      	ldrb	r2, [r7, #15]
 8000faa:	4922      	ldr	r1, [pc, #136]	@ (8001034 <RescheduleTimerList+0x128>)
 8000fac:	4613      	mov	r3, r2
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4413      	add	r3, r2
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	440b      	add	r3, r1
 8000fb6:	3308      	adds	r3, #8
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d20a      	bcs.n	8000fd6 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000fc0:	7bfa      	ldrb	r2, [r7, #15]
 8000fc2:	491c      	ldr	r1, [pc, #112]	@ (8001034 <RescheduleTimerList+0x128>)
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4413      	add	r3, r2
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	440b      	add	r3, r1
 8000fce:	3308      	adds	r3, #8
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	e013      	b.n	8000ffe <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000fd6:	7bfa      	ldrb	r2, [r7, #15]
 8000fd8:	4916      	ldr	r1, [pc, #88]	@ (8001034 <RescheduleTimerList+0x128>)
 8000fda:	4613      	mov	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	4413      	add	r3, r2
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	440b      	add	r3, r1
 8000fe4:	3308      	adds	r3, #8
 8000fe6:	6819      	ldr	r1, [r3, #0]
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	7bfa      	ldrb	r2, [r7, #15]
 8000fec:	1ac9      	subs	r1, r1, r3
 8000fee:	4811      	ldr	r0, [pc, #68]	@ (8001034 <RescheduleTimerList+0x128>)
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	4403      	add	r3, r0
 8000ffa:	3308      	adds	r3, #8
 8000ffc:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000ffe:	7bfa      	ldrb	r2, [r7, #15]
 8001000:	490c      	ldr	r1, [pc, #48]	@ (8001034 <RescheduleTimerList+0x128>)
 8001002:	4613      	mov	r3, r2
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	4413      	add	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	440b      	add	r3, r1
 800100c:	3315      	adds	r3, #21
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	2b06      	cmp	r3, #6
 8001016:	d1c7      	bne.n	8000fa8 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001018:	89bb      	ldrh	r3, [r7, #12]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff1e 	bl	8000e5c <RestartWakeupCounter>

  return ;
 8001020:	bf00      	nop
}
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40002800 	.word	0x40002800
 800102c:	200001cc 	.word	0x200001cc
 8001030:	20000180 	.word	0x20000180
 8001034:	200000f0 	.word	0x200000f0
 8001038:	20000188 	.word	0x20000188
 800103c:	2000018e 	.word	0x2000018e

08001040 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	@ 0x28
 8001044:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001046:	f3ef 8310 	mrs	r3, PRIMASK
 800104a:	617b      	str	r3, [r7, #20]
  return(result);
 800104c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800104e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001050:	b672      	cpsid	i
}
 8001052:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001054:	4b59      	ldr	r3, [pc, #356]	@ (80011bc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	22ca      	movs	r2, #202	@ 0xca
 800105a:	625a      	str	r2, [r3, #36]	@ 0x24
 800105c:	4b57      	ldr	r3, [pc, #348]	@ (80011bc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2253      	movs	r2, #83	@ 0x53
 8001062:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001064:	4b55      	ldr	r3, [pc, #340]	@ (80011bc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	4b54      	ldr	r3, [pc, #336]	@ (80011bc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001072:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001074:	4b52      	ldr	r3, [pc, #328]	@ (80011c0 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800107c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001080:	4950      	ldr	r1, [pc, #320]	@ (80011c4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001082:	4613      	mov	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	4413      	add	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	440b      	add	r3, r1
 800108c:	330c      	adds	r3, #12
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d16e      	bne.n	8001174 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001096:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800109a:	494a      	ldr	r1, [pc, #296]	@ (80011c4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800109c:	4613      	mov	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	4413      	add	r3, r2
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	440b      	add	r3, r1
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80010aa:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80010ae:	4945      	ldr	r1, [pc, #276]	@ (80011c4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	440b      	add	r3, r1
 80010ba:	3310      	adds	r3, #16
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80010c0:	4b41      	ldr	r3, [pc, #260]	@ (80011c8 <HW_TS_RTC_Wakeup_Handler+0x188>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d04c      	beq.n	8001164 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80010ca:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80010ce:	493d      	ldr	r1, [pc, #244]	@ (80011c4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80010d0:	4613      	mov	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4413      	add	r3, r2
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	440b      	add	r3, r1
 80010da:	330d      	adds	r3, #13
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d124      	bne.n	800112e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80010e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80010e8:	2101      	movs	r1, #1
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fdf2 	bl	8000cd4 <UnlinkTimer>
 80010f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f2:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	f383 8810 	msr	PRIMASK, r3
}
 80010fa:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80010fc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001100:	4930      	ldr	r1, [pc, #192]	@ (80011c4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001102:	4613      	mov	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	4413      	add	r3, r2
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	440b      	add	r3, r1
 800110c:	3304      	adds	r3, #4
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001114:	4611      	mov	r1, r2
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f9b8 	bl	800148c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800111c:	4b27      	ldr	r3, [pc, #156]	@ (80011bc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	22ca      	movs	r2, #202	@ 0xca
 8001122:	625a      	str	r2, [r3, #36]	@ 0x24
 8001124:	4b25      	ldr	r3, [pc, #148]	@ (80011bc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2253      	movs	r2, #83	@ 0x53
 800112a:	625a      	str	r2, [r3, #36]	@ 0x24
 800112c:	e012      	b.n	8001154 <HW_TS_RTC_Wakeup_Handler+0x114>
 800112e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001130:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f383 8810 	msr	PRIMASK, r3
}
 8001138:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800113a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800113e:	4618      	mov	r0, r3
 8001140:	f000 f920 	bl	8001384 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001144:	4b1d      	ldr	r3, [pc, #116]	@ (80011bc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	22ca      	movs	r2, #202	@ 0xca
 800114a:	625a      	str	r2, [r3, #36]	@ 0x24
 800114c:	4b1b      	ldr	r3, [pc, #108]	@ (80011bc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2253      	movs	r2, #83	@ 0x53
 8001152:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001154:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001158:	69fa      	ldr	r2, [r7, #28]
 800115a:	4619      	mov	r1, r3
 800115c:	69b8      	ldr	r0, [r7, #24]
 800115e:	f000 fa1b 	bl	8001598 <HW_TS_RTC_Int_AppNot>
 8001162:	e022      	b.n	80011aa <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001164:	f7ff fed2 	bl	8000f0c <RescheduleTimerList>
 8001168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	f383 8810 	msr	PRIMASK, r3
}
 8001172:	e01a      	b.n	80011aa <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001174:	bf00      	nop
 8001176:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0f8      	beq.n	8001176 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001184:	4b0d      	ldr	r3, [pc, #52]	@ (80011bc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	b2da      	uxtb	r2, r3
 800118c:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001194:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001196:	4b0d      	ldr	r3, [pc, #52]	@ (80011cc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001198:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f383 8810 	msr	PRIMASK, r3
}
 80011a8:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80011aa:	4b04      	ldr	r3, [pc, #16]	@ (80011bc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	22ff      	movs	r2, #255	@ 0xff
 80011b0:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 80011b2:	bf00      	nop
}
 80011b4:	3728      	adds	r7, #40	@ 0x28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200001cc 	.word	0x200001cc
 80011c0:	20000180 	.word	0x20000180
 80011c4:	200000f0 	.word	0x200000f0
 80011c8:	20000188 	.word	0x20000188
 80011cc:	58000800 	.word	0x58000800

080011d0 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80011dc:	4b5e      	ldr	r3, [pc, #376]	@ (8001358 <HW_TS_Init+0x188>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	22ca      	movs	r2, #202	@ 0xca
 80011e2:	625a      	str	r2, [r3, #36]	@ 0x24
 80011e4:	4b5c      	ldr	r3, [pc, #368]	@ (8001358 <HW_TS_Init+0x188>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2253      	movs	r2, #83	@ 0x53
 80011ea:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80011ec:	4b5b      	ldr	r3, [pc, #364]	@ (800135c <HW_TS_Init+0x18c>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	4a5a      	ldr	r2, [pc, #360]	@ (800135c <HW_TS_Init+0x18c>)
 80011f2:	f043 0320 	orr.w	r3, r3, #32
 80011f6:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80011f8:	4b58      	ldr	r3, [pc, #352]	@ (800135c <HW_TS_Init+0x18c>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	b2db      	uxtb	r3, r3
 8001204:	f1c3 0304 	rsb	r3, r3, #4
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4b55      	ldr	r3, [pc, #340]	@ (8001360 <HW_TS_Init+0x190>)
 800120c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800120e:	4b53      	ldr	r3, [pc, #332]	@ (800135c <HW_TS_Init+0x18c>)
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001216:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800121a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	fa92 f2a2 	rbit	r2, r2
 8001222:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	2a00      	cmp	r2, #0
 800122c:	d101      	bne.n	8001232 <HW_TS_Init+0x62>
  {
    return 32U;
 800122e:	2220      	movs	r2, #32
 8001230:	e003      	b.n	800123a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	fab2 f282 	clz	r2, r2
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	40d3      	lsrs	r3, r2
 800123c:	b2db      	uxtb	r3, r3
 800123e:	3301      	adds	r3, #1
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b48      	ldr	r3, [pc, #288]	@ (8001364 <HW_TS_Init+0x194>)
 8001244:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001246:	4b45      	ldr	r3, [pc, #276]	@ (800135c <HW_TS_Init+0x18c>)
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	b29b      	uxth	r3, r3
 800124c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001250:	b29b      	uxth	r3, r3
 8001252:	3301      	adds	r3, #1
 8001254:	b29a      	uxth	r2, r3
 8001256:	4b44      	ldr	r3, [pc, #272]	@ (8001368 <HW_TS_Init+0x198>)
 8001258:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800125a:	4b43      	ldr	r3, [pc, #268]	@ (8001368 <HW_TS_Init+0x198>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	3b01      	subs	r3, #1
 8001260:	4a40      	ldr	r2, [pc, #256]	@ (8001364 <HW_TS_Init+0x194>)
 8001262:	7812      	ldrb	r2, [r2, #0]
 8001264:	fb02 f303 	mul.w	r3, r2, r3
 8001268:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800126c:	4a3c      	ldr	r2, [pc, #240]	@ (8001360 <HW_TS_Init+0x190>)
 800126e:	7812      	ldrb	r2, [r2, #0]
 8001270:	40d3      	lsrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800127a:	4293      	cmp	r3, r2
 800127c:	d904      	bls.n	8001288 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800127e:	4b3b      	ldr	r3, [pc, #236]	@ (800136c <HW_TS_Init+0x19c>)
 8001280:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001284:	801a      	strh	r2, [r3, #0]
 8001286:	e003      	b.n	8001290 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	b29a      	uxth	r2, r3
 800128c:	4b37      	ldr	r3, [pc, #220]	@ (800136c <HW_TS_Init+0x19c>)
 800128e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001290:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001294:	f7ff fb9c 	bl	80009d0 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001298:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800129c:	f7ff fb84 	bl	80009a8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d13d      	bne.n	8001322 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80012a6:	4b32      	ldr	r3, [pc, #200]	@ (8001370 <HW_TS_Init+0x1a0>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80012ac:	4b31      	ldr	r3, [pc, #196]	@ (8001374 <HW_TS_Init+0x1a4>)
 80012ae:	f04f 32ff 	mov.w	r2, #4294967295
 80012b2:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	77fb      	strb	r3, [r7, #31]
 80012b8:	e00c      	b.n	80012d4 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80012ba:	7ffa      	ldrb	r2, [r7, #31]
 80012bc:	492e      	ldr	r1, [pc, #184]	@ (8001378 <HW_TS_Init+0x1a8>)
 80012be:	4613      	mov	r3, r2
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	4413      	add	r3, r2
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	440b      	add	r3, r1
 80012c8:	330c      	adds	r3, #12
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80012ce:	7ffb      	ldrb	r3, [r7, #31]
 80012d0:	3301      	adds	r3, #1
 80012d2:	77fb      	strb	r3, [r7, #31]
 80012d4:	7ffb      	ldrb	r3, [r7, #31]
 80012d6:	2b05      	cmp	r3, #5
 80012d8:	d9ef      	bls.n	80012ba <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80012da:	4b28      	ldr	r3, [pc, #160]	@ (800137c <HW_TS_Init+0x1ac>)
 80012dc:	2206      	movs	r2, #6
 80012de:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80012e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001358 <HW_TS_Init+0x188>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689a      	ldr	r2, [r3, #8]
 80012e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001358 <HW_TS_Init+0x188>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80012ee:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80012f0:	4b19      	ldr	r3, [pc, #100]	@ (8001358 <HW_TS_Init+0x188>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	4b17      	ldr	r3, [pc, #92]	@ (8001358 <HW_TS_Init+0x188>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001300:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001302:	4b1f      	ldr	r3, [pc, #124]	@ (8001380 <HW_TS_Init+0x1b0>)
 8001304:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001308:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800130a:	2003      	movs	r0, #3
 800130c:	f000 ff73 	bl	80021f6 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001310:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <HW_TS_Init+0x188>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	4b10      	ldr	r3, [pc, #64]	@ (8001358 <HW_TS_Init+0x188>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	e009      	b.n	8001336 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001322:	4b0d      	ldr	r3, [pc, #52]	@ (8001358 <HW_TS_Init+0x188>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001330:	2003      	movs	r0, #3
 8001332:	f000 ff52 	bl	80021da <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001336:	4b08      	ldr	r3, [pc, #32]	@ (8001358 <HW_TS_Init+0x188>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	22ff      	movs	r2, #255	@ 0xff
 800133c:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800133e:	2200      	movs	r2, #0
 8001340:	2103      	movs	r1, #3
 8001342:	2003      	movs	r0, #3
 8001344:	f000 ff07 	bl	8002156 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001348:	2003      	movs	r0, #3
 800134a:	f000 ff1e 	bl	800218a <HAL_NVIC_EnableIRQ>

  return;
 800134e:	bf00      	nop
}
 8001350:	3720      	adds	r7, #32
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200001cc 	.word	0x200001cc
 800135c:	40002800 	.word	0x40002800
 8001360:	20000189 	.word	0x20000189
 8001364:	2000018a 	.word	0x2000018a
 8001368:	2000018c 	.word	0x2000018c
 800136c:	2000018e 	.word	0x2000018e
 8001370:	20000188 	.word	0x20000188
 8001374:	20000184 	.word	0x20000184
 8001378:	200000f0 	.word	0x200000f0
 800137c:	20000180 	.word	0x20000180
 8001380:	58000800 	.word	0x58000800

08001384 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800138e:	f3ef 8310 	mrs	r3, PRIMASK
 8001392:	60fb      	str	r3, [r7, #12]
  return(result);
 8001394:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001396:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001398:	b672      	cpsid	i
}
 800139a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800139c:	2003      	movs	r0, #3
 800139e:	f000 ff02 	bl	80021a6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80013a2:	4b34      	ldr	r3, [pc, #208]	@ (8001474 <HW_TS_Stop+0xf0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	22ca      	movs	r2, #202	@ 0xca
 80013a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80013aa:	4b32      	ldr	r3, [pc, #200]	@ (8001474 <HW_TS_Stop+0xf0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2253      	movs	r2, #83	@ 0x53
 80013b0:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80013b2:	79fa      	ldrb	r2, [r7, #7]
 80013b4:	4930      	ldr	r1, [pc, #192]	@ (8001478 <HW_TS_Stop+0xf4>)
 80013b6:	4613      	mov	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	440b      	add	r3, r1
 80013c0:	330c      	adds	r3, #12
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d142      	bne.n	8001450 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fc80 	bl	8000cd4 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80013d4:	4b29      	ldr	r3, [pc, #164]	@ (800147c <HW_TS_Stop+0xf8>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80013da:	7cfb      	ldrb	r3, [r7, #19]
 80013dc:	2b06      	cmp	r3, #6
 80013de:	d12f      	bne.n	8001440 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80013e0:	4b27      	ldr	r3, [pc, #156]	@ (8001480 <HW_TS_Stop+0xfc>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013ec:	d107      	bne.n	80013fe <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80013ee:	bf00      	nop
 80013f0:	4b20      	ldr	r3, [pc, #128]	@ (8001474 <HW_TS_Stop+0xf0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f8      	bne.n	80013f0 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80013fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001474 <HW_TS_Stop+0xf0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	4b1b      	ldr	r3, [pc, #108]	@ (8001474 <HW_TS_Stop+0xf0>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800140c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800140e:	bf00      	nop
 8001410:	4b18      	ldr	r3, [pc, #96]	@ (8001474 <HW_TS_Stop+0xf0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f8      	beq.n	8001410 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800141e:	4b15      	ldr	r3, [pc, #84]	@ (8001474 <HW_TS_Stop+0xf0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <HW_TS_Stop+0xf0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800142e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001430:	4b14      	ldr	r3, [pc, #80]	@ (8001484 <HW_TS_Stop+0x100>)
 8001432:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001436:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001438:	2003      	movs	r0, #3
 800143a:	f000 fedc 	bl	80021f6 <HAL_NVIC_ClearPendingIRQ>
 800143e:	e007      	b.n	8001450 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001440:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <HW_TS_Stop+0x104>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	7cfa      	ldrb	r2, [r7, #19]
 8001448:	429a      	cmp	r2, r3
 800144a:	d001      	beq.n	8001450 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800144c:	f7ff fd5e 	bl	8000f0c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001450:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <HW_TS_Stop+0xf0>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	22ff      	movs	r2, #255	@ 0xff
 8001456:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001458:	2003      	movs	r0, #3
 800145a:	f000 fe96 	bl	800218a <HAL_NVIC_EnableIRQ>
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	f383 8810 	msr	PRIMASK, r3
}
 8001468:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800146a:	bf00      	nop
}
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200001cc 	.word	0x200001cc
 8001478:	200000f0 	.word	0x200000f0
 800147c:	20000180 	.word	0x20000180
 8001480:	40002800 	.word	0x40002800
 8001484:	58000800 	.word	0x58000800
 8001488:	20000181 	.word	0x20000181

0800148c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001498:	79fa      	ldrb	r2, [r7, #7]
 800149a:	493b      	ldr	r1, [pc, #236]	@ (8001588 <HW_TS_Start+0xfc>)
 800149c:	4613      	mov	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4413      	add	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	440b      	add	r3, r1
 80014a6:	330c      	adds	r3, #12
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d103      	bne.n	80014b8 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff66 	bl	8001384 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014b8:	f3ef 8310 	mrs	r3, PRIMASK
 80014bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80014be:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80014c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80014c2:	b672      	cpsid	i
}
 80014c4:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80014c6:	2003      	movs	r0, #3
 80014c8:	f000 fe6d 	bl	80021a6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80014cc:	4b2f      	ldr	r3, [pc, #188]	@ (800158c <HW_TS_Start+0x100>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	22ca      	movs	r2, #202	@ 0xca
 80014d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80014d4:	4b2d      	ldr	r3, [pc, #180]	@ (800158c <HW_TS_Start+0x100>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2253      	movs	r2, #83	@ 0x53
 80014da:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80014dc:	79fa      	ldrb	r2, [r7, #7]
 80014de:	492a      	ldr	r1, [pc, #168]	@ (8001588 <HW_TS_Start+0xfc>)
 80014e0:	4613      	mov	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	4413      	add	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	440b      	add	r3, r1
 80014ea:	330c      	adds	r3, #12
 80014ec:	2202      	movs	r2, #2
 80014ee:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80014f0:	79fa      	ldrb	r2, [r7, #7]
 80014f2:	4925      	ldr	r1, [pc, #148]	@ (8001588 <HW_TS_Start+0xfc>)
 80014f4:	4613      	mov	r3, r2
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	4413      	add	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	440b      	add	r3, r1
 80014fe:	3308      	adds	r3, #8
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001504:	79fa      	ldrb	r2, [r7, #7]
 8001506:	4920      	ldr	r1, [pc, #128]	@ (8001588 <HW_TS_Start+0xfc>)
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	440b      	add	r3, r1
 8001512:	3304      	adds	r3, #4
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fb30 	bl	8000b80 <linkTimer>
 8001520:	4603      	mov	r3, r0
 8001522:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001524:	4b1a      	ldr	r3, [pc, #104]	@ (8001590 <HW_TS_Start+0x104>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800152a:	4b1a      	ldr	r3, [pc, #104]	@ (8001594 <HW_TS_Start+0x108>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	7c7a      	ldrb	r2, [r7, #17]
 8001532:	429a      	cmp	r2, r3
 8001534:	d002      	beq.n	800153c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001536:	f7ff fce9 	bl	8000f0c <RescheduleTimerList>
 800153a:	e013      	b.n	8001564 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800153c:	79fa      	ldrb	r2, [r7, #7]
 800153e:	4912      	ldr	r1, [pc, #72]	@ (8001588 <HW_TS_Start+0xfc>)
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	440b      	add	r3, r1
 800154a:	3308      	adds	r3, #8
 800154c:	6819      	ldr	r1, [r3, #0]
 800154e:	8a7b      	ldrh	r3, [r7, #18]
 8001550:	79fa      	ldrb	r2, [r7, #7]
 8001552:	1ac9      	subs	r1, r1, r3
 8001554:	480c      	ldr	r0, [pc, #48]	@ (8001588 <HW_TS_Start+0xfc>)
 8001556:	4613      	mov	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4413      	add	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	4403      	add	r3, r0
 8001560:	3308      	adds	r3, #8
 8001562:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001564:	4b09      	ldr	r3, [pc, #36]	@ (800158c <HW_TS_Start+0x100>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	22ff      	movs	r2, #255	@ 0xff
 800156a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800156c:	2003      	movs	r0, #3
 800156e:	f000 fe0c 	bl	800218a <HAL_NVIC_EnableIRQ>
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	f383 8810 	msr	PRIMASK, r3
}
 800157c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800157e:	bf00      	nop
}
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200000f0 	.word	0x200000f0
 800158c:	200001cc 	.word	0x200001cc
 8001590:	20000180 	.word	0x20000180
 8001594:	20000181 	.word	0x20000181

08001598 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	460b      	mov	r3, r1
 80015a2:	607a      	str	r2, [r7, #4]
 80015a4:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4798      	blx	r3

  return;
 80015aa:	bf00      	nop
}
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b085      	sub	sp, #20
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80015ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80015ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4013      	ands	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015d6:	68fb      	ldr	r3, [r7, #12]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <MX_IPCC_Init+0x20>)
 80015ea:	4a07      	ldr	r2, [pc, #28]	@ (8001608 <MX_IPCC_Init+0x24>)
 80015ec:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80015ee:	4805      	ldr	r0, [pc, #20]	@ (8001604 <MX_IPCC_Init+0x20>)
 80015f0:	f000 ffa4 	bl	800253c <HAL_IPCC_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80015fa:	f000 f8f7 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000190 	.word	0x20000190
 8001608:	58000c00 	.word	0x58000c00

0800160c <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0d      	ldr	r2, [pc, #52]	@ (8001650 <HAL_IPCC_MspInit+0x44>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d113      	bne.n	8001646 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800161e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001622:	f7ff ffc6 	bl	80015b2 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	202c      	movs	r0, #44	@ 0x2c
 800162c:	f000 fd93 	bl	8002156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001630:	202c      	movs	r0, #44	@ 0x2c
 8001632:	f000 fdaa 	bl	800218a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	202d      	movs	r0, #45	@ 0x2d
 800163c:	f000 fd8b 	bl	8002156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001640:	202d      	movs	r0, #45	@ 0x2d
 8001642:	f000 fda2 	bl	800218a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	58000c00 	.word	0x58000c00

08001654 <LL_RCC_LSE_SetDriveCapability>:
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800165c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001664:	f023 0218 	bic.w	r2, r3, #24
 8001668:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4313      	orrs	r3, r2
 8001670:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
    (void)file;
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 0xFFFF);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	b29a      	uxth	r2, r3
 8001690:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001694:	68b9      	ldr	r1, [r7, #8]
 8001696:	4804      	ldr	r0, [pc, #16]	@ (80016a8 <_write+0x28>)
 8001698:	f002 ffce 	bl	8004638 <HAL_UART_Transmit>
    return len;
 800169c:	687b      	ldr	r3, [r7, #4]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200001f4 	.word	0x200001f4

080016ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b0:	f000 fb84 	bl	8001dbc <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80016b4:	f7fe ffb6 	bl	8000624 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b8:	f000 f81c 	bl	80016f4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80016bc:	f000 f876 	bl	80017ac <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80016c0:	f7ff ff90 	bl	80015e4 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c4:	f7ff f965 	bl	8000992 <MX_GPIO_Init>
  MX_RTC_Init();
 80016c8:	f000 f8c8 	bl	800185c <MX_RTC_Init>
  MX_USART1_UART_Init();
 80016cc:	f000 faaa 	bl	8001c24 <MX_USART1_UART_Init>
  MX_RF_Init();
 80016d0:	f000 f892 	bl	80017f8 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80016d4:	f7fe ffb4 	bl	8000640 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80016d8:	f7ff f904 	bl	80008e4 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    printf("hello world\n");
 80016dc:	4804      	ldr	r0, [pc, #16]	@ (80016f0 <main+0x44>)
 80016de:	f007 f957 	bl	8008990 <puts>
    HAL_Delay(1000);
 80016e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016e6:	f7ff f8d8 	bl	800089a <HAL_Delay>
    MX_APPE_Process();
 80016ea:	bf00      	nop
 80016ec:	e7f4      	b.n	80016d8 <main+0x2c>
 80016ee:	bf00      	nop
 80016f0:	08009108 	.word	0x08009108

080016f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b09a      	sub	sp, #104	@ 0x68
 80016f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016fa:	f107 0320 	add.w	r3, r7, #32
 80016fe:	2248      	movs	r2, #72	@ 0x48
 8001700:	2100      	movs	r1, #0
 8001702:	4618      	mov	r0, r3
 8001704:	f007 fa24 	bl	8008b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
 8001714:	611a      	str	r2, [r3, #16]
 8001716:	615a      	str	r2, [r3, #20]
 8001718:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800171a:	f000 ff95 	bl	8002648 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800171e:	2010      	movs	r0, #16
 8001720:	f7ff ff98 	bl	8001654 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001724:	4b20      	ldr	r3, [pc, #128]	@ (80017a8 <SystemClock_Config+0xb4>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800172c:	4a1e      	ldr	r2, [pc, #120]	@ (80017a8 <SystemClock_Config+0xb4>)
 800172e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	4b1c      	ldr	r3, [pc, #112]	@ (80017a8 <SystemClock_Config+0xb4>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800173c:	603b      	str	r3, [r7, #0]
 800173e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001740:	2307      	movs	r3, #7
 8001742:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001744:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001748:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800174a:	2301      	movs	r3, #1
 800174c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800174e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001752:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001754:	2340      	movs	r3, #64	@ 0x40
 8001756:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001758:	2300      	movs	r3, #0
 800175a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800175c:	f107 0320 	add.w	r3, r7, #32
 8001760:	4618      	mov	r0, r3
 8001762:	f001 fb05 	bl	8002d70 <HAL_RCC_OscConfig>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800176c:	f000 f83e 	bl	80017ec <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001770:	236f      	movs	r3, #111	@ 0x6f
 8001772:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001774:	2302      	movs	r3, #2
 8001776:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001784:	2300      	movs	r3, #0
 8001786:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	2101      	movs	r1, #1
 8001790:	4618      	mov	r0, r3
 8001792:	f001 fe61 	bl	8003458 <HAL_RCC_ClockConfig>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800179c:	f000 f826 	bl	80017ec <Error_Handler>
  }
}
 80017a0:	bf00      	nop
 80017a2:	3768      	adds	r7, #104	@ 0x68
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	58000400 	.word	0x58000400

080017ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b094      	sub	sp, #80	@ 0x50
 80017b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017b2:	463b      	mov	r3, r7
 80017b4:	2250      	movs	r2, #80	@ 0x50
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f007 f9c9 	bl	8008b50 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80017be:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80017c2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80017c4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017c8:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80017ca:	2302      	movs	r3, #2
 80017cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80017ce:	2310      	movs	r3, #16
 80017d0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017d2:	463b      	mov	r3, r7
 80017d4:	4618      	mov	r0, r3
 80017d6:	f002 fa7c 	bl	8003cd2 <HAL_RCCEx_PeriphCLKConfig>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80017e0:	f000 f804 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80017e4:	bf00      	nop
 80017e6:	3750      	adds	r7, #80	@ 0x50
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017f0:	b672      	cpsid	i
}
 80017f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <Error_Handler+0x8>

080017f8 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800180a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800180e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001812:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001816:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800181a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001830:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001834:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001836:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4313      	orrs	r3, r2
 800183e:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001844:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4013      	ands	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800184c:	68fb      	ldr	r3, [r7, #12]
}
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001860:	4b16      	ldr	r3, [pc, #88]	@ (80018bc <MX_RTC_Init+0x60>)
 8001862:	4a17      	ldr	r2, [pc, #92]	@ (80018c0 <MX_RTC_Init+0x64>)
 8001864:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001866:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <MX_RTC_Init+0x60>)
 8001868:	2200      	movs	r2, #0
 800186a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 800186c:	4b13      	ldr	r3, [pc, #76]	@ (80018bc <MX_RTC_Init+0x60>)
 800186e:	220f      	movs	r2, #15
 8001870:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001872:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <MX_RTC_Init+0x60>)
 8001874:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001878:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800187a:	4b10      	ldr	r3, [pc, #64]	@ (80018bc <MX_RTC_Init+0x60>)
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001880:	4b0e      	ldr	r3, [pc, #56]	@ (80018bc <MX_RTC_Init+0x60>)
 8001882:	2200      	movs	r2, #0
 8001884:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001886:	4b0d      	ldr	r3, [pc, #52]	@ (80018bc <MX_RTC_Init+0x60>)
 8001888:	2200      	movs	r2, #0
 800188a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800188c:	4b0b      	ldr	r3, [pc, #44]	@ (80018bc <MX_RTC_Init+0x60>)
 800188e:	2200      	movs	r2, #0
 8001890:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001892:	480a      	ldr	r0, [pc, #40]	@ (80018bc <MX_RTC_Init+0x60>)
 8001894:	f002 fca4 	bl	80041e0 <HAL_RTC_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800189e:	f7ff ffa5 	bl	80017ec <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	4805      	ldr	r0, [pc, #20]	@ (80018bc <MX_RTC_Init+0x60>)
 80018a8:	f002 fd9a 	bl	80043e0 <HAL_RTCEx_SetWakeUpTimer_IT>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80018b2:	f7ff ff9b 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200001cc 	.word	0x200001cc
 80018c0:	40002800 	.word	0x40002800

080018c4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b096      	sub	sp, #88	@ 0x58
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018cc:	f107 0308 	add.w	r3, r7, #8
 80018d0:	2250      	movs	r2, #80	@ 0x50
 80018d2:	2100      	movs	r1, #0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f007 f93b 	bl	8008b50 <memset>
  if(rtcHandle->Instance==RTC)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a12      	ldr	r2, [pc, #72]	@ (8001928 <HAL_RTC_MspInit+0x64>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d11d      	bne.n	8001920 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80018e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80018e8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80018ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018ee:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018f0:	f107 0308 	add.w	r3, r7, #8
 80018f4:	4618      	mov	r0, r3
 80018f6:	f002 f9ec 	bl	8003cd2 <HAL_RCCEx_PeriphCLKConfig>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001900:	f7ff ff74 	bl	80017ec <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001904:	f7ff ff7f 	bl	8001806 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001908:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800190c:	f7ff ff8c 	bl	8001828 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001910:	2200      	movs	r2, #0
 8001912:	2100      	movs	r1, #0
 8001914:	2003      	movs	r0, #3
 8001916:	f000 fc1e 	bl	8002156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800191a:	2003      	movs	r0, #3
 800191c:	f000 fc35 	bl	800218a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001920:	bf00      	nop
 8001922:	3758      	adds	r7, #88	@ 0x58
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40002800 	.word	0x40002800

0800192c <LL_AHB3_GRP1_EnableClock>:
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001934:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001938:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800193a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4313      	orrs	r3, r2
 8001942:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001944:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001948:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4013      	ands	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001950:	68fb      	ldr	r3, [r7, #12]
}
 8001952:	bf00      	nop
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001962:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001966:	f7ff ffe1 	bl	800192c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2100      	movs	r1, #0
 800196e:	202e      	movs	r0, #46	@ 0x2e
 8001970:	f000 fbf1 	bl	8002156 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001974:	202e      	movs	r0, #46	@ 0x2e
 8001976:	f000 fc08 	bl	800218a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}

0800197e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001982:	bf00      	nop
 8001984:	e7fd      	b.n	8001982 <NMI_Handler+0x4>

08001986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198a:	bf00      	nop
 800198c:	e7fd      	b.n	800198a <HardFault_Handler+0x4>

0800198e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001992:	bf00      	nop
 8001994:	e7fd      	b.n	8001992 <MemManage_Handler+0x4>

08001996 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800199a:	bf00      	nop
 800199c:	e7fd      	b.n	800199a <BusFault_Handler+0x4>

0800199e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a2:	bf00      	nop
 80019a4:	e7fd      	b.n	80019a2 <UsageFault_Handler+0x4>

080019a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d4:	f000 fa4c 	bl	8001e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}

080019dc <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80019e0:	f7ff fb2e 	bl	8001040 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80019ec:	f006 fafe 	bl	8007fec <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80019f8:	f006 fb2e 	bl	8008058 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001a04:	f000 fd76 	bl	80024f4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	e00a      	b.n	8001a34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a1e:	f3af 8000 	nop.w
 8001a22:	4601      	mov	r1, r0
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	60ba      	str	r2, [r7, #8]
 8001a2a:	b2ca      	uxtb	r2, r1
 8001a2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3301      	adds	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	dbf0      	blt.n	8001a1e <_read+0x12>
  }

  return len;
 8001a3c:	687b      	ldr	r3, [r7, #4]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a6e:	605a      	str	r2, [r3, #4]
  return 0;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <_isatty>:

int _isatty(int file)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a86:	2301      	movs	r3, #1
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab8:	4a14      	ldr	r2, [pc, #80]	@ (8001b0c <_sbrk+0x5c>)
 8001aba:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <_sbrk+0x60>)
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac4:	4b13      	ldr	r3, [pc, #76]	@ (8001b14 <_sbrk+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d102      	bne.n	8001ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001acc:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <_sbrk+0x64>)
 8001ace:	4a12      	ldr	r2, [pc, #72]	@ (8001b18 <_sbrk+0x68>)
 8001ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ad2:	4b10      	ldr	r3, [pc, #64]	@ (8001b14 <_sbrk+0x64>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d207      	bcs.n	8001af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae0:	f007 f884 	bl	8008bec <__errno>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
 8001aee:	e009      	b.n	8001b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af0:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <_sbrk+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001af6:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <_sbrk+0x64>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	4a05      	ldr	r2, [pc, #20]	@ (8001b14 <_sbrk+0x64>)
 8001b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b02:	68fb      	ldr	r3, [r7, #12]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20030000 	.word	0x20030000
 8001b10:	00000400 	.word	0x00000400
 8001b14:	200001f0 	.word	0x200001f0
 8001b18:	20000790 	.word	0x20000790

08001b1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001b20:	4b24      	ldr	r3, [pc, #144]	@ (8001bb4 <SystemInit+0x98>)
 8001b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b26:	4a23      	ldr	r2, [pc, #140]	@ (8001bb4 <SystemInit+0x98>)
 8001b28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001b40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b44:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001b48:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001b4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b54:	4b18      	ldr	r3, [pc, #96]	@ (8001bb8 <SystemInit+0x9c>)
 8001b56:	4013      	ands	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001b5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b66:	f023 0305 	bic.w	r3, r3, #5
 8001b6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001b6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b7a:	f023 0301 	bic.w	r3, r3, #1
 8001b7e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001b82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b86:	4a0d      	ldr	r2, [pc, #52]	@ (8001bbc <SystemInit+0xa0>)
 8001b88:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001b8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b8e:	4a0b      	ldr	r2, [pc, #44]	@ (8001bbc <SystemInit+0xa0>)
 8001b90:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ba0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ba2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	619a      	str	r2, [r3, #24]
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000ed00 	.word	0xe000ed00
 8001bb8:	faf6fefb 	.word	0xfaf6fefb
 8001bbc:	22041000 	.word	0x22041000

08001bc0 <LL_AHB2_GRP1_EnableClock>:
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bcc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001bce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001bd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bdc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4013      	ands	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001be4:	68fb      	ldr	r3, [r7, #12]
}
 8001be6:	bf00      	nop
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b085      	sub	sp, #20
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001bfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bfe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c0e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4013      	ands	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c16:	68fb      	ldr	r3, [r7, #12]
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c28:	4b22      	ldr	r3, [pc, #136]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001c2a:	4a23      	ldr	r2, [pc, #140]	@ (8001cb8 <MX_USART1_UART_Init+0x94>)
 8001c2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c2e:	4b21      	ldr	r3, [pc, #132]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001c30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c36:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c42:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c48:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c4e:	4b19      	ldr	r3, [pc, #100]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c54:	4b17      	ldr	r3, [pc, #92]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c5a:	4b16      	ldr	r3, [pc, #88]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c60:	4b14      	ldr	r3, [pc, #80]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c66:	4b13      	ldr	r3, [pc, #76]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c6c:	4811      	ldr	r0, [pc, #68]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001c6e:	f002 fc93 	bl	8004598 <HAL_UART_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c78:	f7ff fdb8 	bl	80017ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	480d      	ldr	r0, [pc, #52]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001c80:	f003 f9e8 	bl	8005054 <HAL_UARTEx_SetTxFifoThreshold>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c8a:	f7ff fdaf 	bl	80017ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4808      	ldr	r0, [pc, #32]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001c92:	f003 fa1d 	bl	80050d0 <HAL_UARTEx_SetRxFifoThreshold>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c9c:	f7ff fda6 	bl	80017ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ca0:	4804      	ldr	r0, [pc, #16]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001ca2:	f003 f99e 	bl	8004fe2 <HAL_UARTEx_DisableFifoMode>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001cac:	f7ff fd9e 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	200001f4 	.word	0x200001f4
 8001cb8:	40013800 	.word	0x40013800

08001cbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b09c      	sub	sp, #112	@ 0x70
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cd4:	f107 030c 	add.w	r3, r7, #12
 8001cd8:	2250      	movs	r2, #80	@ 0x50
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f006 ff37 	bl	8008b50 <memset>
  if(uartHandle->Instance==USART1)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a16      	ldr	r2, [pc, #88]	@ (8001d40 <HAL_UART_MspInit+0x84>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d124      	bne.n	8001d36 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001cec:	2301      	movs	r3, #1
 8001cee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cf4:	f107 030c 	add.w	r3, r7, #12
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f001 ffea 	bl	8003cd2 <HAL_RCCEx_PeriphCLKConfig>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d04:	f7ff fd72 	bl	80017ec <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d08:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001d0c:	f7ff ff71 	bl	8001bf2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d10:	2002      	movs	r0, #2
 8001d12:	f7ff ff55 	bl	8001bc0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d16:	23c0      	movs	r3, #192	@ 0xc0
 8001d18:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d26:	2307      	movs	r3, #7
 8001d28:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4804      	ldr	r0, [pc, #16]	@ (8001d44 <HAL_UART_MspInit+0x88>)
 8001d32:	f000 fa6f 	bl	8002214 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d36:	bf00      	nop
 8001d38:	3770      	adds	r7, #112	@ 0x70
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40013800 	.word	0x40013800
 8001d44:	48000400 	.word	0x48000400

08001d48 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001d48:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d4a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4c:	3304      	adds	r3, #4

08001d4e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d4e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d50:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001d52:	d3f9      	bcc.n	8001d48 <CopyDataInit>
  bx lr
 8001d54:	4770      	bx	lr

08001d56 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001d56:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001d58:	3004      	adds	r0, #4

08001d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001d5a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001d5c:	d3fb      	bcc.n	8001d56 <FillZerobss>
  bx lr
 8001d5e:	4770      	bx	lr

08001d60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d60:	480c      	ldr	r0, [pc, #48]	@ (8001d94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d62:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d64:	f7ff feda 	bl	8001b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001d68:	480b      	ldr	r0, [pc, #44]	@ (8001d98 <LoopForever+0x6>)
 8001d6a:	490c      	ldr	r1, [pc, #48]	@ (8001d9c <LoopForever+0xa>)
 8001d6c:	4a0c      	ldr	r2, [pc, #48]	@ (8001da0 <LoopForever+0xe>)
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f7ff ffed 	bl	8001d4e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001d74:	480b      	ldr	r0, [pc, #44]	@ (8001da4 <LoopForever+0x12>)
 8001d76:	490c      	ldr	r1, [pc, #48]	@ (8001da8 <LoopForever+0x16>)
 8001d78:	4a0c      	ldr	r2, [pc, #48]	@ (8001dac <LoopForever+0x1a>)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f7ff ffe7 	bl	8001d4e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001d80:	480b      	ldr	r0, [pc, #44]	@ (8001db0 <LoopForever+0x1e>)
 8001d82:	490c      	ldr	r1, [pc, #48]	@ (8001db4 <LoopForever+0x22>)
 8001d84:	2300      	movs	r3, #0
 8001d86:	f7ff ffe8 	bl	8001d5a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d8a:	f006 ff35 	bl	8008bf8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001d8e:	f7ff fc8d 	bl	80016ac <main>

08001d92 <LoopForever>:

LoopForever:
  b LoopForever
 8001d92:	e7fe      	b.n	8001d92 <LoopForever>
  ldr   r0, =_estack
 8001d94:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001d98:	20000008 	.word	0x20000008
 8001d9c:	20000088 	.word	0x20000088
 8001da0:	080093c8 	.word	0x080093c8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001da4:	200301e4 	.word	0x200301e4
 8001da8:	20030a67 	.word	0x20030a67
 8001dac:	0800948e 	.word	0x0800948e
  INIT_BSS _sbss, _ebss
 8001db0:	200000d4 	.word	0x200000d4
 8001db4:	2000078c 	.word	0x2000078c

08001db8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001db8:	e7fe      	b.n	8001db8 <ADC1_IRQHandler>
	...

08001dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001df8 <HAL_Init+0x3c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a0b      	ldr	r2, [pc, #44]	@ (8001df8 <HAL_Init+0x3c>)
 8001dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dd0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd2:	2003      	movs	r0, #3
 8001dd4:	f000 f9b4 	bl	8002140 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dd8:	200f      	movs	r0, #15
 8001dda:	f000 f80f 	bl	8001dfc <HAL_InitTick>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d002      	beq.n	8001dea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	71fb      	strb	r3, [r7, #7]
 8001de8:	e001      	b.n	8001dee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dea:	f7ff fdb8 	bl	800195e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dee:	79fb      	ldrb	r3, [r7, #7]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	58004000 	.word	0x58004000

08001dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e04:	2300      	movs	r3, #0
 8001e06:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001e08:	4b17      	ldr	r3, [pc, #92]	@ (8001e68 <HAL_InitTick+0x6c>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d024      	beq.n	8001e5a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e10:	f001 fcce 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 8001e14:	4602      	mov	r2, r0
 8001e16:	4b14      	ldr	r3, [pc, #80]	@ (8001e68 <HAL_InitTick+0x6c>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e20:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 f9ca 	bl	80021c2 <HAL_SYSTICK_Config>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10f      	bne.n	8001e54 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b0f      	cmp	r3, #15
 8001e38:	d809      	bhi.n	8001e4e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e42:	f000 f988 	bl	8002156 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e46:	4a09      	ldr	r2, [pc, #36]	@ (8001e6c <HAL_InitTick+0x70>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	e007      	b.n	8001e5e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	73fb      	strb	r3, [r7, #15]
 8001e52:	e004      	b.n	8001e5e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
 8001e58:	e001      	b.n	8001e5e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000010 	.word	0x20000010
 8001e6c:	2000000c 	.word	0x2000000c

08001e70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e74:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <HAL_IncTick+0x20>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b06      	ldr	r3, [pc, #24]	@ (8001e94 <HAL_IncTick+0x24>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a04      	ldr	r2, [pc, #16]	@ (8001e94 <HAL_IncTick+0x24>)
 8001e82:	6013      	str	r3, [r2, #0]
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000010 	.word	0x20000010
 8001e94:	20000288 	.word	0x20000288

08001e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e9c:	4b03      	ldr	r3, [pc, #12]	@ (8001eac <HAL_GetTick+0x14>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000288 	.word	0x20000288

08001eb0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001eb4:	4b03      	ldr	r3, [pc, #12]	@ (8001ec4 <HAL_GetTickPrio+0x14>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	2000000c 	.word	0x2000000c

08001ec8 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8001ecc:	4b03      	ldr	r3, [pc, #12]	@ (8001edc <HAL_GetTickFreq+0x14>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	20000010 	.word	0x20000010

08001ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f24 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001efc:	4013      	ands	r3, r2
 8001efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f12:	4a04      	ldr	r2, [pc, #16]	@ (8001f24 <__NVIC_SetPriorityGrouping+0x44>)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	60d3      	str	r3, [r2, #12]
}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f2c:	4b04      	ldr	r3, [pc, #16]	@ (8001f40 <__NVIC_GetPriorityGrouping+0x18>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	0a1b      	lsrs	r3, r3, #8
 8001f32:	f003 0307 	and.w	r3, r3, #7
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	db0b      	blt.n	8001f6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	f003 021f 	and.w	r2, r3, #31
 8001f5c:	4907      	ldr	r1, [pc, #28]	@ (8001f7c <__NVIC_EnableIRQ+0x38>)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	095b      	lsrs	r3, r3, #5
 8001f64:	2001      	movs	r0, #1
 8001f66:	fa00 f202 	lsl.w	r2, r0, r2
 8001f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000e100 	.word	0xe000e100

08001f80 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	db12      	blt.n	8001fb8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	f003 021f 	and.w	r2, r3, #31
 8001f98:	490a      	ldr	r1, [pc, #40]	@ (8001fc4 <__NVIC_DisableIRQ+0x44>)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa6:	3320      	adds	r3, #32
 8001fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001fac:	f3bf 8f4f 	dsb	sy
}
 8001fb0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001fb2:	f3bf 8f6f 	isb	sy
}
 8001fb6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000e100 	.word	0xe000e100

08001fc8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	db0c      	blt.n	8001ff4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	f003 021f 	and.w	r2, r3, #31
 8001fe0:	4907      	ldr	r1, [pc, #28]	@ (8002000 <__NVIC_SetPendingIRQ+0x38>)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	095b      	lsrs	r3, r3, #5
 8001fe8:	2001      	movs	r0, #1
 8001fea:	fa00 f202 	lsl.w	r2, r0, r2
 8001fee:	3340      	adds	r3, #64	@ 0x40
 8001ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000e100 	.word	0xe000e100

08002004 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	2b00      	cmp	r3, #0
 8002014:	db0c      	blt.n	8002030 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	f003 021f 	and.w	r2, r3, #31
 800201c:	4907      	ldr	r1, [pc, #28]	@ (800203c <__NVIC_ClearPendingIRQ+0x38>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	095b      	lsrs	r3, r3, #5
 8002024:	2001      	movs	r0, #1
 8002026:	fa00 f202 	lsl.w	r2, r0, r2
 800202a:	3360      	adds	r3, #96	@ 0x60
 800202c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000e100 	.word	0xe000e100

08002040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	6039      	str	r1, [r7, #0]
 800204a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	2b00      	cmp	r3, #0
 8002052:	db0a      	blt.n	800206a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	b2da      	uxtb	r2, r3
 8002058:	490c      	ldr	r1, [pc, #48]	@ (800208c <__NVIC_SetPriority+0x4c>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	0112      	lsls	r2, r2, #4
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	440b      	add	r3, r1
 8002064:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002068:	e00a      	b.n	8002080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4908      	ldr	r1, [pc, #32]	@ (8002090 <__NVIC_SetPriority+0x50>)
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	3b04      	subs	r3, #4
 8002078:	0112      	lsls	r2, r2, #4
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	440b      	add	r3, r1
 800207e:	761a      	strb	r2, [r3, #24]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000e100 	.word	0xe000e100
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002094:	b480      	push	{r7}
 8002096:	b089      	sub	sp, #36	@ 0x24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f1c3 0307 	rsb	r3, r3, #7
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	bf28      	it	cs
 80020b2:	2304      	movcs	r3, #4
 80020b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3304      	adds	r3, #4
 80020ba:	2b06      	cmp	r3, #6
 80020bc:	d902      	bls.n	80020c4 <NVIC_EncodePriority+0x30>
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3b03      	subs	r3, #3
 80020c2:	e000      	b.n	80020c6 <NVIC_EncodePriority+0x32>
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	f04f 32ff 	mov.w	r2, #4294967295
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43da      	mvns	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	401a      	ands	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020dc:	f04f 31ff 	mov.w	r1, #4294967295
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	fa01 f303 	lsl.w	r3, r1, r3
 80020e6:	43d9      	mvns	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ec:	4313      	orrs	r3, r2
         );
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3724      	adds	r7, #36	@ 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3b01      	subs	r3, #1
 8002108:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800210c:	d301      	bcc.n	8002112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210e:	2301      	movs	r3, #1
 8002110:	e00f      	b.n	8002132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002112:	4a0a      	ldr	r2, [pc, #40]	@ (800213c <SysTick_Config+0x40>)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3b01      	subs	r3, #1
 8002118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800211a:	210f      	movs	r1, #15
 800211c:	f04f 30ff 	mov.w	r0, #4294967295
 8002120:	f7ff ff8e 	bl	8002040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002124:	4b05      	ldr	r3, [pc, #20]	@ (800213c <SysTick_Config+0x40>)
 8002126:	2200      	movs	r2, #0
 8002128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800212a:	4b04      	ldr	r3, [pc, #16]	@ (800213c <SysTick_Config+0x40>)
 800212c:	2207      	movs	r2, #7
 800212e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	e000e010 	.word	0xe000e010

08002140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff fec9 	bl	8001ee0 <__NVIC_SetPriorityGrouping>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b086      	sub	sp, #24
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002164:	f7ff fee0 	bl	8001f28 <__NVIC_GetPriorityGrouping>
 8002168:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	6978      	ldr	r0, [r7, #20]
 8002170:	f7ff ff90 	bl	8002094 <NVIC_EncodePriority>
 8002174:	4602      	mov	r2, r0
 8002176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff5f 	bl	8002040 <__NVIC_SetPriority>
}
 8002182:	bf00      	nop
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	4603      	mov	r3, r0
 8002192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fed3 	bl	8001f44 <__NVIC_EnableIRQ>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	4603      	mov	r3, r0
 80021ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80021b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff fee3 	bl	8001f80 <__NVIC_DisableIRQ>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff ff96 	bl	80020fc <SysTick_Config>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4603      	mov	r3, r0
 80021e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80021e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff feed 	bl	8001fc8 <__NVIC_SetPendingIRQ>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fefd 	bl	8002004 <__NVIC_ClearPendingIRQ>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002222:	e14c      	b.n	80024be <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	2101      	movs	r1, #1
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	fa01 f303 	lsl.w	r3, r1, r3
 8002230:	4013      	ands	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 813e 	beq.w	80024b8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b01      	cmp	r3, #1
 8002246:	d005      	beq.n	8002254 <HAL_GPIO_Init+0x40>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d130      	bne.n	80022b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	2203      	movs	r2, #3
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4013      	ands	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800228a:	2201      	movs	r2, #1
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	091b      	lsrs	r3, r3, #4
 80022a0:	f003 0201 	and.w	r2, r3, #1
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d017      	beq.n	80022f2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	2203      	movs	r2, #3
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d123      	bne.n	8002346 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	08da      	lsrs	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3208      	adds	r2, #8
 8002306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800230a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	220f      	movs	r2, #15
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	4013      	ands	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	691a      	ldr	r2, [r3, #16]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	08da      	lsrs	r2, r3, #3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3208      	adds	r2, #8
 8002340:	6939      	ldr	r1, [r7, #16]
 8002342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	2203      	movs	r2, #3
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 0203 	and.w	r2, r3, #3
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 8098 	beq.w	80024b8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002388:	4a54      	ldr	r2, [pc, #336]	@ (80024dc <HAL_GPIO_Init+0x2c8>)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	089b      	lsrs	r3, r3, #2
 800238e:	3302      	adds	r3, #2
 8002390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002394:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	220f      	movs	r2, #15
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023b2:	d019      	beq.n	80023e8 <HAL_GPIO_Init+0x1d4>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a4a      	ldr	r2, [pc, #296]	@ (80024e0 <HAL_GPIO_Init+0x2cc>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d013      	beq.n	80023e4 <HAL_GPIO_Init+0x1d0>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a49      	ldr	r2, [pc, #292]	@ (80024e4 <HAL_GPIO_Init+0x2d0>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d00d      	beq.n	80023e0 <HAL_GPIO_Init+0x1cc>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a48      	ldr	r2, [pc, #288]	@ (80024e8 <HAL_GPIO_Init+0x2d4>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d007      	beq.n	80023dc <HAL_GPIO_Init+0x1c8>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a47      	ldr	r2, [pc, #284]	@ (80024ec <HAL_GPIO_Init+0x2d8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d101      	bne.n	80023d8 <HAL_GPIO_Init+0x1c4>
 80023d4:	2304      	movs	r3, #4
 80023d6:	e008      	b.n	80023ea <HAL_GPIO_Init+0x1d6>
 80023d8:	2307      	movs	r3, #7
 80023da:	e006      	b.n	80023ea <HAL_GPIO_Init+0x1d6>
 80023dc:	2303      	movs	r3, #3
 80023de:	e004      	b.n	80023ea <HAL_GPIO_Init+0x1d6>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e002      	b.n	80023ea <HAL_GPIO_Init+0x1d6>
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <HAL_GPIO_Init+0x1d6>
 80023e8:	2300      	movs	r3, #0
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	f002 0203 	and.w	r2, r2, #3
 80023f0:	0092      	lsls	r2, r2, #2
 80023f2:	4093      	lsls	r3, r2
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023fa:	4938      	ldr	r1, [pc, #224]	@ (80024dc <HAL_GPIO_Init+0x2c8>)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	3302      	adds	r3, #2
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002408:	4b39      	ldr	r3, [pc, #228]	@ (80024f0 <HAL_GPIO_Init+0x2dc>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	43db      	mvns	r3, r3
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800242c:	4a30      	ldr	r2, [pc, #192]	@ (80024f0 <HAL_GPIO_Init+0x2dc>)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002432:	4b2f      	ldr	r3, [pc, #188]	@ (80024f0 <HAL_GPIO_Init+0x2dc>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	43db      	mvns	r3, r3
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4013      	ands	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002456:	4a26      	ldr	r2, [pc, #152]	@ (80024f0 <HAL_GPIO_Init+0x2dc>)
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800245c:	4b24      	ldr	r3, [pc, #144]	@ (80024f0 <HAL_GPIO_Init+0x2dc>)
 800245e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	43db      	mvns	r3, r3
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002482:	4a1b      	ldr	r2, [pc, #108]	@ (80024f0 <HAL_GPIO_Init+0x2dc>)
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800248a:	4b19      	ldr	r3, [pc, #100]	@ (80024f0 <HAL_GPIO_Init+0x2dc>)
 800248c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	43db      	mvns	r3, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4013      	ands	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024b0:	4a0f      	ldr	r2, [pc, #60]	@ (80024f0 <HAL_GPIO_Init+0x2dc>)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	3301      	adds	r3, #1
 80024bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f47f aeab 	bne.w	8002224 <HAL_GPIO_Init+0x10>
  }
}
 80024ce:	bf00      	nop
 80024d0:	bf00      	nop
 80024d2:	371c      	adds	r7, #28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	40010000 	.word	0x40010000
 80024e0:	48000400 	.word	0x48000400
 80024e4:	48000800 	.word	0x48000800
 80024e8:	48000c00 	.word	0x48000c00
 80024ec:	48001000 	.word	0x48001000
 80024f0:	58000800 	.word	0x58000800

080024f4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80024fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002524 <HAL_HSEM_IRQHandler+0x30>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002500:	4b08      	ldr	r3, [pc, #32]	@ (8002524 <HAL_HSEM_IRQHandler+0x30>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	43db      	mvns	r3, r3
 8002508:	4906      	ldr	r1, [pc, #24]	@ (8002524 <HAL_HSEM_IRQHandler+0x30>)
 800250a:	4013      	ands	r3, r2
 800250c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800250e:	4a05      	ldr	r2, [pc, #20]	@ (8002524 <HAL_HSEM_IRQHandler+0x30>)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f807 	bl	8002528 <HAL_HSEM_FreeCallback>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	58001500 	.word	0x58001500

08002528 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d01e      	beq.n	800258c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800254e:	4b13      	ldr	r3, [pc, #76]	@ (800259c <HAL_IPCC_Init+0x60>)
 8002550:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d102      	bne.n	8002564 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff f854 	bl	800160c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002564:	68b8      	ldr	r0, [r7, #8]
 8002566:	f000 f85b 	bl	8002620 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f82c 	bl	80025d4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800258a:	e001      	b.n	8002590 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002590:	7bfb      	ldrb	r3, [r7, #15]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	58000c00 	.word	0x58000c00

080025a0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	4613      	mov	r3, r2
 80025ac:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80025ae:	bf00      	nop
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b085      	sub	sp, #20
 80025be:	af00      	add	r7, sp, #0
 80025c0:	60f8      	str	r0, [r7, #12]
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	4613      	mov	r3, r2
 80025c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80025c8:	bf00      	nop
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	e00f      	b.n	8002602 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	4a0b      	ldr	r2, [pc, #44]	@ (8002618 <IPCC_SetDefaultCallbacks+0x44>)
 80025ec:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	3306      	adds	r3, #6
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	4a08      	ldr	r2, [pc, #32]	@ (800261c <IPCC_SetDefaultCallbacks+0x48>)
 80025fa:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	3301      	adds	r3, #1
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2b05      	cmp	r3, #5
 8002606:	d9ec      	bls.n	80025e2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8002608:	bf00      	nop
 800260a:	bf00      	nop
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	080025a1 	.word	0x080025a1
 800261c:	080025bb 	.word	0x080025bb

08002620 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8002634:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	223f      	movs	r2, #63	@ 0x3f
 800263a:	609a      	str	r2, [r3, #8]
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800264c:	4b05      	ldr	r3, [pc, #20]	@ (8002664 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a04      	ldr	r2, [pc, #16]	@ (8002664 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002652:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002656:	6013      	str	r3, [r2, #0]
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	58000400 	.word	0x58000400

08002668 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800266c:	4b04      	ldr	r3, [pc, #16]	@ (8002680 <HAL_PWREx_GetVoltageRange+0x18>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002674:	4618      	mov	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	58000400 	.word	0x58000400

08002684 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002688:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002692:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002696:	d101      	bne.n	800269c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002698:	2301      	movs	r3, #1
 800269a:	e000      	b.n	800269e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <LL_RCC_HSE_Enable>:
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80026ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ba:	6013      	str	r3, [r2, #0]
}
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <LL_RCC_HSE_Disable>:
{
 80026c6:	b480      	push	{r7}
 80026c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80026ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026d8:	6013      	str	r3, [r2, #0]
}
 80026da:	bf00      	nop
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <LL_RCC_HSE_IsReady>:
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80026e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80026f6:	d101      	bne.n	80026fc <LL_RCC_HSE_IsReady+0x18>
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <LL_RCC_HSE_IsReady+0x1a>
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <LL_RCC_HSI_Enable>:
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800270c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002716:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800271a:	6013      	str	r3, [r2, #0]
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <LL_RCC_HSI_Disable>:
{
 8002726:	b480      	push	{r7}
 8002728:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800272a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002734:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002738:	6013      	str	r3, [r2, #0]
}
 800273a:	bf00      	nop
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <LL_RCC_HSI_IsReady>:
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002748:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002752:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002756:	d101      	bne.n	800275c <LL_RCC_HSI_IsReady+0x18>
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <LL_RCC_HSI_IsReady+0x1a>
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002770:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	061b      	lsls	r3, r3, #24
 800277e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002782:	4313      	orrs	r3, r2
 8002784:	604b      	str	r3, [r1, #4]
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <LL_RCC_HSI48_Enable>:
{
 8002792:	b480      	push	{r7}
 8002794:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002796:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800279a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800279e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80027aa:	bf00      	nop
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <LL_RCC_HSI48_Disable>:
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80027b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027c4:	f023 0301 	bic.w	r3, r3, #1
 80027c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <LL_RCC_HSI48_IsReady>:
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80027da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d101      	bne.n	80027ee <LL_RCC_HSI48_IsReady+0x18>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <LL_RCC_HSI48_IsReady+0x1a>
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <LL_RCC_LSE_Enable>:
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002806:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002812:	bf00      	nop
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <LL_RCC_LSE_Disable>:
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002828:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800282c:	f023 0301 	bic.w	r3, r3, #1
 8002830:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <LL_RCC_LSE_EnableBypass>:
{
 800283e:	b480      	push	{r7}
 8002840:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002842:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800284a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800284e:	f043 0304 	orr.w	r3, r3, #4
 8002852:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002856:	bf00      	nop
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <LL_RCC_LSE_DisableBypass>:
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002864:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002870:	f023 0304 	bic.w	r3, r3, #4
 8002874:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <LL_RCC_LSE_IsReady>:
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002886:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800288a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b02      	cmp	r3, #2
 8002894:	d101      	bne.n	800289a <LL_RCC_LSE_IsReady+0x18>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <LL_RCC_LSE_IsReady+0x1a>
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <LL_RCC_LSI1_Enable>:
{
 80028a6:	b480      	push	{r7}
 80028a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80028aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80028be:	bf00      	nop
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <LL_RCC_LSI1_Disable>:
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80028cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028d8:	f023 0301 	bic.w	r3, r3, #1
 80028dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80028e0:	bf00      	nop
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <LL_RCC_LSI1_IsReady>:
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80028ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d101      	bne.n	8002902 <LL_RCC_LSI1_IsReady+0x18>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <LL_RCC_LSI1_IsReady+0x1a>
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <LL_RCC_LSI2_Enable>:
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002912:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002916:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800291a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800291e:	f043 0304 	orr.w	r3, r3, #4
 8002922:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002926:	bf00      	nop
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <LL_RCC_LSI2_Disable>:
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002934:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002938:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800293c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002940:	f023 0304 	bic.w	r3, r3, #4
 8002944:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <LL_RCC_LSI2_IsReady>:
{
 8002952:	b480      	push	{r7}
 8002954:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002956:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800295a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b08      	cmp	r3, #8
 8002964:	d101      	bne.n	800296a <LL_RCC_LSI2_IsReady+0x18>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <LL_RCC_LSI2_IsReady+0x1a>
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <LL_RCC_LSI2_SetTrimming>:
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800297e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002982:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002986:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	021b      	lsls	r3, r3, #8
 800298e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <LL_RCC_MSI_Enable>:
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80029a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	6013      	str	r3, [r2, #0]
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <LL_RCC_MSI_Disable>:
{
 80029c2:	b480      	push	{r7}
 80029c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80029c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029d0:	f023 0301 	bic.w	r3, r3, #1
 80029d4:	6013      	str	r3, [r2, #0]
}
 80029d6:	bf00      	nop
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <LL_RCC_MSI_IsReady>:
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80029e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d101      	bne.n	80029f6 <LL_RCC_MSI_IsReady+0x16>
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <LL_RCC_MSI_IsReady+0x18>
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <LL_RCC_MSI_SetRange>:
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002a0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <LL_RCC_MSI_GetRange>:
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002a30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a3a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2bb0      	cmp	r3, #176	@ 0xb0
 8002a40:	d901      	bls.n	8002a46 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002a42:	23b0      	movs	r3, #176	@ 0xb0
 8002a44:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002a46:	687b      	ldr	r3, [r7, #4]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002a5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	021b      	lsls	r3, r3, #8
 8002a6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	604b      	str	r3, [r1, #4]
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <LL_RCC_SetSysClkSource>:
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002a86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f023 0203 	bic.w	r2, r3, #3
 8002a90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <LL_RCC_GetSysClkSource>:
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002aaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 030c 	and.w	r3, r3, #12
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <LL_RCC_SetAHBPrescaler>:
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002ac6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ad0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	608b      	str	r3, [r1, #8]
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002aee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002af2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002af6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002afa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <LL_RCC_SetAHB4Prescaler>:
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002b1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002b22:	f023 020f 	bic.w	r2, r3, #15
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LL_RCC_SetAPB1Prescaler>:
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002b48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	608b      	str	r3, [r1, #8]
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_RCC_SetAPB2Prescaler>:
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002b70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	608b      	str	r3, [r1, #8]
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <LL_RCC_GetAHBPrescaler>:
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002b94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <LL_RCC_GetAHB4Prescaler>:
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bb0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <LL_RCC_GetAPB1Prescaler>:
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002bc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <LL_RCC_GetAPB2Prescaler>:
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002bf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c06:	6013      	str	r3, [r2, #0]
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002c12:	b480      	push	{r7}
 8002c14:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002c16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c24:	6013      	str	r3, [r2, #0]
}
 8002c26:	bf00      	nop
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002c34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c42:	d101      	bne.n	8002c48 <LL_RCC_PLL_IsReady+0x18>
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <LL_RCC_PLL_IsReady+0x1a>
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002c58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	0a1b      	lsrs	r3, r3, #8
 8002c60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002c86:	b480      	push	{r7}
 8002c88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002c8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002ca2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f003 0303 	and.w	r3, r3, #3
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002cba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cc8:	d101      	bne.n	8002cce <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002cde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ce2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002cee:	d101      	bne.n	8002cf4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002d04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d08:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002d0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d14:	d101      	bne.n	8002d1a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002d26:	b480      	push	{r7}
 8002d28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002d2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d38:	d101      	bne.n	8002d3e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002d4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d5c:	d101      	bne.n	8002d62 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
	...

08002d70 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d70:	b590      	push	{r4, r7, lr}
 8002d72:	b08d      	sub	sp, #52	@ 0x34
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e363      	b.n	800344a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 808d 	beq.w	8002eaa <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d90:	f7ff fe89 	bl	8002aa6 <LL_RCC_GetSysClkSource>
 8002d94:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d96:	f7ff ff82 	bl	8002c9e <LL_RCC_PLL_GetMainSource>
 8002d9a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d005      	beq.n	8002dae <HAL_RCC_OscConfig+0x3e>
 8002da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002da4:	2b0c      	cmp	r3, #12
 8002da6:	d147      	bne.n	8002e38 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d144      	bne.n	8002e38 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e347      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8002dbe:	f7ff fe34 	bl	8002a2a <LL_RCC_MSI_GetRange>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	429c      	cmp	r4, r3
 8002dc6:	d914      	bls.n	8002df2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f000 fd2f 	bl	8003830 <RCC_SetFlashLatencyFromMSIRange>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e336      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff fe0e 	bl	8002a02 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff fe32 	bl	8002a54 <LL_RCC_MSI_SetCalibTrimming>
 8002df0:	e013      	b.n	8002e1a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fe03 	bl	8002a02 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fe27 	bl	8002a54 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fd10 	bl	8003830 <RCC_SetFlashLatencyFromMSIRange>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e317      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e1a:	f000 fcc9 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4aa4      	ldr	r2, [pc, #656]	@ (80030b4 <HAL_RCC_OscConfig+0x344>)
 8002e22:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e24:	4ba4      	ldr	r3, [pc, #656]	@ (80030b8 <HAL_RCC_OscConfig+0x348>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fe ffe7 	bl	8001dfc <HAL_InitTick>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d039      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e308      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d01e      	beq.n	8002e7e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e40:	f7ff fdb0 	bl	80029a4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e44:	f7ff f828 	bl	8001e98 <HAL_GetTick>
 8002e48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e4c:	f7ff f824 	bl	8001e98 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e2f5      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e5e:	f7ff fdbf 	bl	80029e0 <LL_RCC_MSI_IsReady>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f1      	beq.n	8002e4c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fdc8 	bl	8002a02 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff fdec 	bl	8002a54 <LL_RCC_MSI_SetCalibTrimming>
 8002e7c:	e015      	b.n	8002eaa <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e7e:	f7ff fda0 	bl	80029c2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e82:	f7ff f809 	bl	8001e98 <HAL_GetTick>
 8002e86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e8a:	f7ff f805 	bl	8001e98 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e2d6      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e9c:	f7ff fda0 	bl	80029e0 <LL_RCC_MSI_IsReady>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f1      	bne.n	8002e8a <HAL_RCC_OscConfig+0x11a>
 8002ea6:	e000      	b.n	8002eaa <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002ea8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d047      	beq.n	8002f46 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eb6:	f7ff fdf6 	bl	8002aa6 <LL_RCC_GetSysClkSource>
 8002eba:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ebc:	f7ff feef 	bl	8002c9e <LL_RCC_PLL_GetMainSource>
 8002ec0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	d005      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x164>
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	2b0c      	cmp	r3, #12
 8002ecc:	d108      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d105      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d134      	bne.n	8002f46 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e2b4      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ee8:	d102      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x180>
 8002eea:	f7ff fbdd 	bl	80026a8 <LL_RCC_HSE_Enable>
 8002eee:	e001      	b.n	8002ef4 <HAL_RCC_OscConfig+0x184>
 8002ef0:	f7ff fbe9 	bl	80026c6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d012      	beq.n	8002f22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efc:	f7fe ffcc 	bl	8001e98 <HAL_GetTick>
 8002f00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f04:	f7fe ffc8 	bl	8001e98 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b64      	cmp	r3, #100	@ 0x64
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e299      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002f16:	f7ff fbe5 	bl	80026e4 <LL_RCC_HSE_IsReady>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0f1      	beq.n	8002f04 <HAL_RCC_OscConfig+0x194>
 8002f20:	e011      	b.n	8002f46 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f22:	f7fe ffb9 	bl	8001e98 <HAL_GetTick>
 8002f26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f2a:	f7fe ffb5 	bl	8001e98 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b64      	cmp	r3, #100	@ 0x64
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e286      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f3c:	f7ff fbd2 	bl	80026e4 <LL_RCC_HSE_IsReady>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f1      	bne.n	8002f2a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d04c      	beq.n	8002fec <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f52:	f7ff fda8 	bl	8002aa6 <LL_RCC_GetSysClkSource>
 8002f56:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f58:	f7ff fea1 	bl	8002c9e <LL_RCC_PLL_GetMainSource>
 8002f5c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d005      	beq.n	8002f70 <HAL_RCC_OscConfig+0x200>
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	2b0c      	cmp	r3, #12
 8002f68:	d10e      	bne.n	8002f88 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d10b      	bne.n	8002f88 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e266      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fbf1 	bl	8002768 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002f86:	e031      	b.n	8002fec <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d019      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f90:	f7ff fbba 	bl	8002708 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f94:	f7fe ff80 	bl	8001e98 <HAL_GetTick>
 8002f98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f9c:	f7fe ff7c 	bl	8001e98 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e24d      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002fae:	f7ff fbc9 	bl	8002744 <LL_RCC_HSI_IsReady>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f1      	beq.n	8002f9c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff fbd3 	bl	8002768 <LL_RCC_HSI_SetCalibTrimming>
 8002fc2:	e013      	b.n	8002fec <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fc4:	f7ff fbaf 	bl	8002726 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fe ff66 	bl	8001e98 <HAL_GetTick>
 8002fcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd0:	f7fe ff62 	bl	8001e98 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e233      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002fe2:	f7ff fbaf 	bl	8002744 <LL_RCC_HSI_IsReady>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f1      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0308 	and.w	r3, r3, #8
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d106      	bne.n	8003006 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 80a3 	beq.w	800314c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d076      	beq.n	80030fc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	2b00      	cmp	r3, #0
 8003018:	d046      	beq.n	80030a8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800301a:	f7ff fc66 	bl	80028ea <LL_RCC_LSI1_IsReady>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d113      	bne.n	800304c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003024:	f7ff fc3f 	bl	80028a6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003028:	f7fe ff36 	bl	8001e98 <HAL_GetTick>
 800302c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003030:	f7fe ff32 	bl	8001e98 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e203      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003042:	f7ff fc52 	bl	80028ea <LL_RCC_LSI1_IsReady>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f1      	beq.n	8003030 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800304c:	f7ff fc5f 	bl	800290e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fe ff22 	bl	8001e98 <HAL_GetTick>
 8003054:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003058:	f7fe ff1e 	bl	8001e98 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b03      	cmp	r3, #3
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e1ef      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800306a:	f7ff fc72 	bl	8002952 <LL_RCC_LSI2_IsReady>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f1      	beq.n	8003058 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff fc7c 	bl	8002976 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800307e:	f7ff fc23 	bl	80028c8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003082:	f7fe ff09 	bl	8001e98 <HAL_GetTick>
 8003086:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800308a:	f7fe ff05 	bl	8001e98 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e1d6      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800309c:	f7ff fc25 	bl	80028ea <LL_RCC_LSI1_IsReady>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f1      	bne.n	800308a <HAL_RCC_OscConfig+0x31a>
 80030a6:	e051      	b.n	800314c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80030a8:	f7ff fbfd 	bl	80028a6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7fe fef4 	bl	8001e98 <HAL_GetTick>
 80030b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80030b2:	e00c      	b.n	80030ce <HAL_RCC_OscConfig+0x35e>
 80030b4:	20000008 	.word	0x20000008
 80030b8:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80030bc:	f7fe feec 	bl	8001e98 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e1bd      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80030ce:	f7ff fc0c 	bl	80028ea <LL_RCC_LSI1_IsReady>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f1      	beq.n	80030bc <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80030d8:	f7ff fc2a 	bl	8002930 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80030de:	f7fe fedb 	bl	8001e98 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e1ac      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80030f0:	f7ff fc2f 	bl	8002952 <LL_RCC_LSI2_IsReady>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f1      	bne.n	80030de <HAL_RCC_OscConfig+0x36e>
 80030fa:	e027      	b.n	800314c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80030fc:	f7ff fc18 	bl	8002930 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003100:	f7fe feca 	bl	8001e98 <HAL_GetTick>
 8003104:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003108:	f7fe fec6 	bl	8001e98 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b03      	cmp	r3, #3
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e197      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800311a:	f7ff fc1a 	bl	8002952 <LL_RCC_LSI2_IsReady>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1f1      	bne.n	8003108 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003124:	f7ff fbd0 	bl	80028c8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003128:	f7fe feb6 	bl	8001e98 <HAL_GetTick>
 800312c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003130:	f7fe feb2 	bl	8001e98 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e183      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003142:	f7ff fbd2 	bl	80028ea <LL_RCC_LSI1_IsReady>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1f1      	bne.n	8003130 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d05b      	beq.n	8003210 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003158:	4ba7      	ldr	r3, [pc, #668]	@ (80033f8 <HAL_RCC_OscConfig+0x688>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003160:	2b00      	cmp	r3, #0
 8003162:	d114      	bne.n	800318e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003164:	f7ff fa70 	bl	8002648 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003168:	f7fe fe96 	bl	8001e98 <HAL_GetTick>
 800316c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003170:	f7fe fe92 	bl	8001e98 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e163      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003182:	4b9d      	ldr	r3, [pc, #628]	@ (80033f8 <HAL_RCC_OscConfig+0x688>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d102      	bne.n	800319c <HAL_RCC_OscConfig+0x42c>
 8003196:	f7ff fb30 	bl	80027fa <LL_RCC_LSE_Enable>
 800319a:	e00c      	b.n	80031b6 <HAL_RCC_OscConfig+0x446>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2b05      	cmp	r3, #5
 80031a2:	d104      	bne.n	80031ae <HAL_RCC_OscConfig+0x43e>
 80031a4:	f7ff fb4b 	bl	800283e <LL_RCC_LSE_EnableBypass>
 80031a8:	f7ff fb27 	bl	80027fa <LL_RCC_LSE_Enable>
 80031ac:	e003      	b.n	80031b6 <HAL_RCC_OscConfig+0x446>
 80031ae:	f7ff fb35 	bl	800281c <LL_RCC_LSE_Disable>
 80031b2:	f7ff fb55 	bl	8002860 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d014      	beq.n	80031e8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031be:	f7fe fe6b 	bl	8001e98 <HAL_GetTick>
 80031c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80031c4:	e00a      	b.n	80031dc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c6:	f7fe fe67 	bl	8001e98 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e136      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80031dc:	f7ff fb51 	bl	8002882 <LL_RCC_LSE_IsReady>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0ef      	beq.n	80031c6 <HAL_RCC_OscConfig+0x456>
 80031e6:	e013      	b.n	8003210 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e8:	f7fe fe56 	bl	8001e98 <HAL_GetTick>
 80031ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80031ee:	e00a      	b.n	8003206 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f0:	f7fe fe52 	bl	8001e98 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031fe:	4293      	cmp	r3, r2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e121      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003206:	f7ff fb3c 	bl	8002882 <LL_RCC_LSE_IsReady>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1ef      	bne.n	80031f0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003218:	2b00      	cmp	r3, #0
 800321a:	d02c      	beq.n	8003276 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003220:	2b00      	cmp	r3, #0
 8003222:	d014      	beq.n	800324e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003224:	f7ff fab5 	bl	8002792 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003228:	f7fe fe36 	bl	8001e98 <HAL_GetTick>
 800322c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003230:	f7fe fe32 	bl	8001e98 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e103      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003242:	f7ff fac8 	bl	80027d6 <LL_RCC_HSI48_IsReady>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0f1      	beq.n	8003230 <HAL_RCC_OscConfig+0x4c0>
 800324c:	e013      	b.n	8003276 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800324e:	f7ff fab1 	bl	80027b4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003252:	f7fe fe21 	bl	8001e98 <HAL_GetTick>
 8003256:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800325a:	f7fe fe1d 	bl	8001e98 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e0ee      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800326c:	f7ff fab3 	bl	80027d6 <LL_RCC_HSI48_IsReady>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f1      	bne.n	800325a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 80e4 	beq.w	8003448 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003280:	f7ff fc11 	bl	8002aa6 <LL_RCC_GetSysClkSource>
 8003284:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003286:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003292:	2b02      	cmp	r3, #2
 8003294:	f040 80b4 	bne.w	8003400 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f003 0203 	and.w	r2, r3, #3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d123      	bne.n	80032ee <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d11c      	bne.n	80032ee <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	0a1b      	lsrs	r3, r3, #8
 80032b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d114      	bne.n	80032ee <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d10d      	bne.n	80032ee <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032dc:	429a      	cmp	r2, r3
 80032de:	d106      	bne.n	80032ee <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d05d      	beq.n	80033aa <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	2b0c      	cmp	r3, #12
 80032f2:	d058      	beq.n	80033a6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e0a1      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003306:	f7ff fc84 	bl	8002c12 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800330a:	f7fe fdc5 	bl	8001e98 <HAL_GetTick>
 800330e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003312:	f7fe fdc1 	bl	8001e98 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e092      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003324:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1ef      	bne.n	8003312 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	4b30      	ldr	r3, [pc, #192]	@ (80033fc <HAL_RCC_OscConfig+0x68c>)
 800333a:	4013      	ands	r3, r2
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003344:	4311      	orrs	r1, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800334a:	0212      	lsls	r2, r2, #8
 800334c:	4311      	orrs	r1, r2
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003352:	4311      	orrs	r1, r2
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003358:	4311      	orrs	r1, r2
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800335e:	430a      	orrs	r2, r1
 8003360:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003364:	4313      	orrs	r3, r2
 8003366:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003368:	f7ff fc44 	bl	8002bf4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800336c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800337a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800337c:	f7fe fd8c 	bl	8001e98 <HAL_GetTick>
 8003380:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003384:	f7fe fd88 	bl	8001e98 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e059      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003396:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0ef      	beq.n	8003384 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033a4:	e050      	b.n	8003448 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e04f      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d147      	bne.n	8003448 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033b8:	f7ff fc1c 	bl	8002bf4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033cc:	f7fe fd64 	bl	8001e98 <HAL_GetTick>
 80033d0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d4:	f7fe fd60 	bl	8001e98 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e031      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0ef      	beq.n	80033d4 <HAL_RCC_OscConfig+0x664>
 80033f4:	e028      	b.n	8003448 <HAL_RCC_OscConfig+0x6d8>
 80033f6:	bf00      	nop
 80033f8:	58000400 	.word	0x58000400
 80033fc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	2b0c      	cmp	r3, #12
 8003404:	d01e      	beq.n	8003444 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003406:	f7ff fc04 	bl	8002c12 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340a:	f7fe fd45 	bl	8001e98 <HAL_GetTick>
 800340e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003412:	f7fe fd41 	bl	8001e98 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e012      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003424:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1ef      	bne.n	8003412 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800343c:	4b05      	ldr	r3, [pc, #20]	@ (8003454 <HAL_RCC_OscConfig+0x6e4>)
 800343e:	4013      	ands	r3, r2
 8003440:	60cb      	str	r3, [r1, #12]
 8003442:	e001      	b.n	8003448 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3734      	adds	r7, #52	@ 0x34
 800344e:	46bd      	mov	sp, r7
 8003450:	bd90      	pop	{r4, r7, pc}
 8003452:	bf00      	nop
 8003454:	eefefffc 	.word	0xeefefffc

08003458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e12d      	b.n	80036c8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800346c:	4b98      	ldr	r3, [pc, #608]	@ (80036d0 <HAL_RCC_ClockConfig+0x278>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d91b      	bls.n	80034b2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347a:	4b95      	ldr	r3, [pc, #596]	@ (80036d0 <HAL_RCC_ClockConfig+0x278>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 0207 	bic.w	r2, r3, #7
 8003482:	4993      	ldr	r1, [pc, #588]	@ (80036d0 <HAL_RCC_ClockConfig+0x278>)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	4313      	orrs	r3, r2
 8003488:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800348a:	f7fe fd05 	bl	8001e98 <HAL_GetTick>
 800348e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003492:	f7fe fd01 	bl	8001e98 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e111      	b.n	80036c8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a4:	4b8a      	ldr	r3, [pc, #552]	@ (80036d0 <HAL_RCC_ClockConfig+0x278>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d1ef      	bne.n	8003492 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d016      	beq.n	80034ec <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff fafb 	bl	8002abe <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034c8:	f7fe fce6 	bl	8001e98 <HAL_GetTick>
 80034cc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034d0:	f7fe fce2 	bl	8001e98 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e0f2      	b.n	80036c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034e2:	f7ff fbe8 	bl	8002cb6 <LL_RCC_IsActiveFlag_HPRE>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0f1      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0320 	and.w	r3, r3, #32
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d016      	beq.n	8003526 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff faf2 	bl	8002ae6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003502:	f7fe fcc9 	bl	8001e98 <HAL_GetTick>
 8003506:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003508:	e008      	b.n	800351c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800350a:	f7fe fcc5 	bl	8001e98 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e0d5      	b.n	80036c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800351c:	f7ff fbdd 	bl	8002cda <LL_RCC_IsActiveFlag_C2HPRE>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f1      	beq.n	800350a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800352e:	2b00      	cmp	r3, #0
 8003530:	d016      	beq.n	8003560 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff faeb 	bl	8002b12 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800353c:	f7fe fcac 	bl	8001e98 <HAL_GetTick>
 8003540:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003542:	e008      	b.n	8003556 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003544:	f7fe fca8 	bl	8001e98 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e0b8      	b.n	80036c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003556:	f7ff fbd3 	bl	8002d00 <LL_RCC_IsActiveFlag_SHDHPRE>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f1      	beq.n	8003544 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	d016      	beq.n	800359a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff fae5 	bl	8002b40 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003576:	f7fe fc8f 	bl	8001e98 <HAL_GetTick>
 800357a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800357c:	e008      	b.n	8003590 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800357e:	f7fe fc8b 	bl	8001e98 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e09b      	b.n	80036c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003590:	f7ff fbc9 	bl	8002d26 <LL_RCC_IsActiveFlag_PPRE1>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0f1      	beq.n	800357e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d017      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff fadb 	bl	8002b68 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035b2:	f7fe fc71 	bl	8001e98 <HAL_GetTick>
 80035b6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80035b8:	e008      	b.n	80035cc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035ba:	f7fe fc6d 	bl	8001e98 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e07d      	b.n	80036c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80035cc:	f7ff fbbd 	bl	8002d4a <LL_RCC_IsActiveFlag_PPRE2>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f1      	beq.n	80035ba <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d043      	beq.n	800366a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d106      	bne.n	80035f8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80035ea:	f7ff f87b 	bl	80026e4 <LL_RCC_HSE_IsReady>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d11e      	bne.n	8003632 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e067      	b.n	80036c8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b03      	cmp	r3, #3
 80035fe:	d106      	bne.n	800360e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003600:	f7ff fb16 	bl	8002c30 <LL_RCC_PLL_IsReady>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d113      	bne.n	8003632 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e05c      	b.n	80036c8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003616:	f7ff f9e3 	bl	80029e0 <LL_RCC_MSI_IsReady>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d108      	bne.n	8003632 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e051      	b.n	80036c8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003624:	f7ff f88e 	bl	8002744 <LL_RCC_HSI_IsReady>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e04a      	b.n	80036c8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff fa21 	bl	8002a7e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800363c:	f7fe fc2c 	bl	8001e98 <HAL_GetTick>
 8003640:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003642:	e00a      	b.n	800365a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003644:	f7fe fc28 	bl	8001e98 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003652:	4293      	cmp	r3, r2
 8003654:	d901      	bls.n	800365a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e036      	b.n	80036c8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365a:	f7ff fa24 	bl	8002aa6 <LL_RCC_GetSysClkSource>
 800365e:	4602      	mov	r2, r0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	429a      	cmp	r2, r3
 8003668:	d1ec      	bne.n	8003644 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800366a:	4b19      	ldr	r3, [pc, #100]	@ (80036d0 <HAL_RCC_ClockConfig+0x278>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	429a      	cmp	r2, r3
 8003676:	d21b      	bcs.n	80036b0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003678:	4b15      	ldr	r3, [pc, #84]	@ (80036d0 <HAL_RCC_ClockConfig+0x278>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f023 0207 	bic.w	r2, r3, #7
 8003680:	4913      	ldr	r1, [pc, #76]	@ (80036d0 <HAL_RCC_ClockConfig+0x278>)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	4313      	orrs	r3, r2
 8003686:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003688:	f7fe fc06 	bl	8001e98 <HAL_GetTick>
 800368c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003690:	f7fe fc02 	bl	8001e98 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e012      	b.n	80036c8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a2:	4b0b      	ldr	r3, [pc, #44]	@ (80036d0 <HAL_RCC_ClockConfig+0x278>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d1ef      	bne.n	8003690 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80036b0:	f000 f87e 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 80036b4:	4603      	mov	r3, r0
 80036b6:	4a07      	ldr	r2, [pc, #28]	@ (80036d4 <HAL_RCC_ClockConfig+0x27c>)
 80036b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80036ba:	f7fe fbf9 	bl	8001eb0 <HAL_GetTickPrio>
 80036be:	4603      	mov	r3, r0
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fe fb9b 	bl	8001dfc <HAL_InitTick>
 80036c6:	4603      	mov	r3, r0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	58004000 	.word	0x58004000
 80036d4:	20000008 	.word	0x20000008

080036d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d8:	b590      	push	{r4, r7, lr}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036de:	f7ff f9e2 	bl	8002aa6 <LL_RCC_GetSysClkSource>
 80036e2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10a      	bne.n	8003700 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80036ea:	f7ff f99e 	bl	8002a2a <LL_RCC_MSI_GetRange>
 80036ee:	4603      	mov	r3, r0
 80036f0:	091b      	lsrs	r3, r3, #4
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	4a2b      	ldr	r2, [pc, #172]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80036f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	e04b      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b04      	cmp	r3, #4
 8003704:	d102      	bne.n	800370c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003706:	4b28      	ldr	r3, [pc, #160]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	e045      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b08      	cmp	r3, #8
 8003710:	d10a      	bne.n	8003728 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003712:	f7fe ffb7 	bl	8002684 <LL_RCC_HSE_IsEnabledDiv2>
 8003716:	4603      	mov	r3, r0
 8003718:	2b01      	cmp	r3, #1
 800371a:	d102      	bne.n	8003722 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800371c:	4b22      	ldr	r3, [pc, #136]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	e03a      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003722:	4b22      	ldr	r3, [pc, #136]	@ (80037ac <HAL_RCC_GetSysClockFreq+0xd4>)
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	e037      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003728:	f7ff fab9 	bl	8002c9e <LL_RCC_PLL_GetMainSource>
 800372c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b02      	cmp	r3, #2
 8003732:	d003      	beq.n	800373c <HAL_RCC_GetSysClockFreq+0x64>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2b03      	cmp	r3, #3
 8003738:	d003      	beq.n	8003742 <HAL_RCC_GetSysClockFreq+0x6a>
 800373a:	e00d      	b.n	8003758 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800373c:	4b1a      	ldr	r3, [pc, #104]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800373e:	60bb      	str	r3, [r7, #8]
        break;
 8003740:	e015      	b.n	800376e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003742:	f7fe ff9f 	bl	8002684 <LL_RCC_HSE_IsEnabledDiv2>
 8003746:	4603      	mov	r3, r0
 8003748:	2b01      	cmp	r3, #1
 800374a:	d102      	bne.n	8003752 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800374c:	4b16      	ldr	r3, [pc, #88]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800374e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003750:	e00d      	b.n	800376e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003752:	4b16      	ldr	r3, [pc, #88]	@ (80037ac <HAL_RCC_GetSysClockFreq+0xd4>)
 8003754:	60bb      	str	r3, [r7, #8]
        break;
 8003756:	e00a      	b.n	800376e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003758:	f7ff f967 	bl	8002a2a <LL_RCC_MSI_GetRange>
 800375c:	4603      	mov	r3, r0
 800375e:	091b      	lsrs	r3, r3, #4
 8003760:	f003 030f 	and.w	r3, r3, #15
 8003764:	4a0f      	ldr	r2, [pc, #60]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800376a:	60bb      	str	r3, [r7, #8]
        break;
 800376c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800376e:	f7ff fa71 	bl	8002c54 <LL_RCC_PLL_GetN>
 8003772:	4602      	mov	r2, r0
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	fb03 f402 	mul.w	r4, r3, r2
 800377a:	f7ff fa84 	bl	8002c86 <LL_RCC_PLL_GetDivider>
 800377e:	4603      	mov	r3, r0
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	3301      	adds	r3, #1
 8003784:	fbb4 f4f3 	udiv	r4, r4, r3
 8003788:	f7ff fa71 	bl	8002c6e <LL_RCC_PLL_GetR>
 800378c:	4603      	mov	r3, r0
 800378e:	0f5b      	lsrs	r3, r3, #29
 8003790:	3301      	adds	r3, #1
 8003792:	fbb4 f3f3 	udiv	r3, r4, r3
 8003796:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003798:	68fb      	ldr	r3, [r7, #12]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd90      	pop	{r4, r7, pc}
 80037a2:	bf00      	nop
 80037a4:	08009318 	.word	0x08009318
 80037a8:	00f42400 	.word	0x00f42400
 80037ac:	01e84800 	.word	0x01e84800

080037b0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b0:	b598      	push	{r3, r4, r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80037b4:	f7ff ff90 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 80037b8:	4604      	mov	r4, r0
 80037ba:	f7ff f9e9 	bl	8002b90 <LL_RCC_GetAHBPrescaler>
 80037be:	4603      	mov	r3, r0
 80037c0:	091b      	lsrs	r3, r3, #4
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	4a03      	ldr	r2, [pc, #12]	@ (80037d4 <HAL_RCC_GetHCLKFreq+0x24>)
 80037c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037cc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	bd98      	pop	{r3, r4, r7, pc}
 80037d4:	080092b8 	.word	0x080092b8

080037d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037d8:	b598      	push	{r3, r4, r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80037dc:	f7ff ffe8 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 80037e0:	4604      	mov	r4, r0
 80037e2:	f7ff f9ef 	bl	8002bc4 <LL_RCC_GetAPB1Prescaler>
 80037e6:	4603      	mov	r3, r0
 80037e8:	0a1b      	lsrs	r3, r3, #8
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	4a04      	ldr	r2, [pc, #16]	@ (8003800 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f4:	f003 031f 	and.w	r3, r3, #31
 80037f8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	bd98      	pop	{r3, r4, r7, pc}
 8003800:	080092f8 	.word	0x080092f8

08003804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003804:	b598      	push	{r3, r4, r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003808:	f7ff ffd2 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 800380c:	4604      	mov	r4, r0
 800380e:	f7ff f9e5 	bl	8002bdc <LL_RCC_GetAPB2Prescaler>
 8003812:	4603      	mov	r3, r0
 8003814:	0adb      	lsrs	r3, r3, #11
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	4a04      	ldr	r2, [pc, #16]	@ (800382c <HAL_RCC_GetPCLK2Freq+0x28>)
 800381c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003820:	f003 031f 	and.w	r3, r3, #31
 8003824:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003828:	4618      	mov	r0, r3
 800382a:	bd98      	pop	{r3, r4, r7, pc}
 800382c:	080092f8 	.word	0x080092f8

08003830 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003830:	b590      	push	{r4, r7, lr}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2bb0      	cmp	r3, #176	@ 0xb0
 800383c:	d903      	bls.n	8003846 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800383e:	4b15      	ldr	r3, [pc, #84]	@ (8003894 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	e007      	b.n	8003856 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	4a11      	ldr	r2, [pc, #68]	@ (8003894 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003854:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003856:	f7ff f9a7 	bl	8002ba8 <LL_RCC_GetAHB4Prescaler>
 800385a:	4603      	mov	r3, r0
 800385c:	091b      	lsrs	r3, r3, #4
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	4a0d      	ldr	r2, [pc, #52]	@ (8003898 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	fbb2 f3f3 	udiv	r3, r2, r3
 800386e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	4a0a      	ldr	r2, [pc, #40]	@ (800389c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003874:	fba2 2303 	umull	r2, r3, r2, r3
 8003878:	0c9c      	lsrs	r4, r3, #18
 800387a:	f7fe fef5 	bl	8002668 <HAL_PWREx_GetVoltageRange>
 800387e:	4603      	mov	r3, r0
 8003880:	4619      	mov	r1, r3
 8003882:	4620      	mov	r0, r4
 8003884:	f000 f80c 	bl	80038a0 <RCC_SetFlashLatency>
 8003888:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800388a:	4618      	mov	r0, r3
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	bd90      	pop	{r4, r7, pc}
 8003892:	bf00      	nop
 8003894:	08009318 	.word	0x08009318
 8003898:	080092b8 	.word	0x080092b8
 800389c:	431bde83 	.word	0x431bde83

080038a0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80038a0:	b590      	push	{r4, r7, lr}
 80038a2:	b093      	sub	sp, #76	@ 0x4c
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80038aa:	4b37      	ldr	r3, [pc, #220]	@ (8003988 <RCC_SetFlashLatency+0xe8>)
 80038ac:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80038b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80038b6:	4a35      	ldr	r2, [pc, #212]	@ (800398c <RCC_SetFlashLatency+0xec>)
 80038b8:	f107 031c 	add.w	r3, r7, #28
 80038bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80038be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80038c2:	4b33      	ldr	r3, [pc, #204]	@ (8003990 <RCC_SetFlashLatency+0xf0>)
 80038c4:	f107 040c 	add.w	r4, r7, #12
 80038c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80038ce:	2300      	movs	r3, #0
 80038d0:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038d8:	d11a      	bne.n	8003910 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80038da:	2300      	movs	r3, #0
 80038dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80038de:	e013      	b.n	8003908 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80038e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	3348      	adds	r3, #72	@ 0x48
 80038e6:	443b      	add	r3, r7
 80038e8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d807      	bhi.n	8003902 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80038f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	3348      	adds	r3, #72	@ 0x48
 80038f8:	443b      	add	r3, r7
 80038fa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80038fe:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003900:	e020      	b.n	8003944 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003904:	3301      	adds	r3, #1
 8003906:	643b      	str	r3, [r7, #64]	@ 0x40
 8003908:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800390a:	2b03      	cmp	r3, #3
 800390c:	d9e8      	bls.n	80038e0 <RCC_SetFlashLatency+0x40>
 800390e:	e019      	b.n	8003944 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003910:	2300      	movs	r3, #0
 8003912:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003914:	e013      	b.n	800393e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	3348      	adds	r3, #72	@ 0x48
 800391c:	443b      	add	r3, r7
 800391e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	429a      	cmp	r2, r3
 8003926:	d807      	bhi.n	8003938 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	3348      	adds	r3, #72	@ 0x48
 800392e:	443b      	add	r3, r7
 8003930:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003934:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003936:	e005      	b.n	8003944 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800393a:	3301      	adds	r3, #1
 800393c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800393e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003940:	2b02      	cmp	r3, #2
 8003942:	d9e8      	bls.n	8003916 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003944:	4b13      	ldr	r3, [pc, #76]	@ (8003994 <RCC_SetFlashLatency+0xf4>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f023 0207 	bic.w	r2, r3, #7
 800394c:	4911      	ldr	r1, [pc, #68]	@ (8003994 <RCC_SetFlashLatency+0xf4>)
 800394e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003950:	4313      	orrs	r3, r2
 8003952:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003954:	f7fe faa0 	bl	8001e98 <HAL_GetTick>
 8003958:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800395a:	e008      	b.n	800396e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800395c:	f7fe fa9c 	bl	8001e98 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e007      	b.n	800397e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800396e:	4b09      	ldr	r3, [pc, #36]	@ (8003994 <RCC_SetFlashLatency+0xf4>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003978:	429a      	cmp	r2, r3
 800397a:	d1ef      	bne.n	800395c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	374c      	adds	r7, #76	@ 0x4c
 8003982:	46bd      	mov	sp, r7
 8003984:	bd90      	pop	{r4, r7, pc}
 8003986:	bf00      	nop
 8003988:	08009114 	.word	0x08009114
 800398c:	08009124 	.word	0x08009124
 8003990:	08009130 	.word	0x08009130
 8003994:	58004000 	.word	0x58004000

08003998 <LL_RCC_LSE_IsEnabled>:
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800399c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <LL_RCC_LSE_IsEnabled+0x18>
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <LL_RCC_LSE_IsEnabled+0x1a>
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <LL_RCC_LSE_IsReady>:
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80039c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d101      	bne.n	80039d4 <LL_RCC_LSE_IsReady+0x18>
 80039d0:	2301      	movs	r3, #1
 80039d2:	e000      	b.n	80039d6 <LL_RCC_LSE_IsReady+0x1a>
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <LL_RCC_SetRFWKPClockSource>:
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80039e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <LL_RCC_SetSMPSClockSource>:
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003a14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1a:	f023 0203 	bic.w	r2, r3, #3
 8003a1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <LL_RCC_SetSMPSPrescaler>:
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003a3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a42:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003a46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <LL_RCC_SetUSARTClockSource>:
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003a64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a6c:	f023 0203 	bic.w	r2, r3, #3
 8003a70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <LL_RCC_SetLPUARTClockSource>:
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a98:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003a9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <LL_RCC_SetI2CClockSource>:
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003abc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ac0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	091b      	lsrs	r3, r3, #4
 8003ac8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003acc:	43db      	mvns	r3, r3
 8003ace:	401a      	ands	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003ad8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <LL_RCC_SetLPTIMClockSource>:
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003af6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003afa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	0c1b      	lsrs	r3, r3, #16
 8003b02:	041b      	lsls	r3, r3, #16
 8003b04:	43db      	mvns	r3, r3
 8003b06:	401a      	ands	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	041b      	lsls	r3, r3, #16
 8003b0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <LL_RCC_SetSAIClockSource>:
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003b2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b32:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <LL_RCC_SetRNGClockSource>:
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003b56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003b62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <LL_RCC_SetCLK48ClockSource>:
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003b82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <LL_RCC_SetUSBClockSource>:
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b082      	sub	sp, #8
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff ffe3 	bl	8003b7a <LL_RCC_SetCLK48ClockSource>
}
 8003bb4:	bf00      	nop
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <LL_RCC_SetADCClockSource>:
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003bc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bcc:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003bd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <LL_RCC_SetRTCClockSource>:
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003bf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bfc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <LL_RCC_GetRTCClockSource>:
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003c18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <LL_RCC_ForceBackupDomainReset>:
{
 8003c2e:	b480      	push	{r7}
 8003c30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003c46:	bf00      	nop
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003c68:	bf00      	nop
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <LL_RCC_PLLSAI1_Enable>:
{
 8003c72:	b480      	push	{r7}
 8003c74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003c76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c80:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c84:	6013      	str	r3, [r2, #0]
}
 8003c86:	bf00      	nop
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <LL_RCC_PLLSAI1_Disable>:
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003c94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003ca2:	6013      	str	r3, [r2, #0]
}
 8003ca4:	bf00      	nop
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <LL_RCC_PLLSAI1_IsReady>:
{
 8003cae:	b480      	push	{r7}
 8003cb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003cb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cc0:	d101      	bne.n	8003cc6 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b088      	sub	sp, #32
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003cda:	2300      	movs	r3, #0
 8003cdc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003cde:	2300      	movs	r3, #0
 8003ce0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d034      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003cf6:	d021      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003cf8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003cfc:	d81b      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003cfe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d02:	d01d      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003d04:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d08:	d815      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00b      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003d0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d12:	d110      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003d14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d22:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d24:	e00d      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 f947 	bl	8003fbe <RCCEx_PLLSAI1_ConfigNP>
 8003d30:	4603      	mov	r3, r0
 8003d32:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d34:	e005      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	77fb      	strb	r3, [r7, #31]
        break;
 8003d3a:	e002      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003d3c:	bf00      	nop
 8003d3e:	e000      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d42:	7ffb      	ldrb	r3, [r7, #31]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d105      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff fee8 	bl	8003b22 <LL_RCC_SetSAIClockSource>
 8003d52:	e001      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d54:	7ffb      	ldrb	r3, [r7, #31]
 8003d56:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d046      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003d64:	f7ff ff56 	bl	8003c14 <LL_RCC_GetRTCClockSource>
 8003d68:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d03c      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003d74:	f7fe fc68 	bl	8002648 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d105      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff ff30 	bl	8003be8 <LL_RCC_SetRTCClockSource>
 8003d88:	e02e      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003d8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d92:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003d94:	f7ff ff4b 	bl	8003c2e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003d98:	f7ff ff5a 	bl	8003c50 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003daa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003db4:	f7ff fdf0 	bl	8003998 <LL_RCC_LSE_IsEnabled>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d114      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dbe:	f7fe f86b 	bl	8001e98 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003dc4:	e00b      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc6:	f7fe f867 	bl	8001e98 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d902      	bls.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	77fb      	strb	r3, [r7, #31]
              break;
 8003ddc:	e004      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003dde:	f7ff fded 	bl	80039bc <LL_RCC_LSE_IsReady>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d1ee      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003de8:	7ffb      	ldrb	r3, [r7, #31]
 8003dea:	77bb      	strb	r3, [r7, #30]
 8003dec:	e001      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dee:	7ffb      	ldrb	r3, [r7, #31]
 8003df0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d004      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7ff fe2a 	bl	8003a5c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d004      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff fe35 	bl	8003a88 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0310 	and.w	r3, r3, #16
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d004      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff fe5d 	bl	8003aee <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d004      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff fe52 	bl	8003aee <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d004      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff fe2a 	bl	8003ab4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d004      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff fe1f 	bl	8003ab4 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d022      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7ff fe8d 	bl	8003ba6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e94:	d107      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003e96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ea0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ea4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eaa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003eae:	d10b      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 f8dd 	bl	8004074 <RCCEx_PLLSAI1_ConfigNQ>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003ebe:	7ffb      	ldrb	r3, [r7, #31]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003ec4:	7ffb      	ldrb	r3, [r7, #31]
 8003ec6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d02b      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003edc:	d008      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ee6:	d003      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d105      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff fe2a 	bl	8003b4e <LL_RCC_SetRNGClockSource>
 8003efa:	e00a      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	2000      	movs	r0, #0
 8003f08:	f7ff fe21 	bl	8003b4e <LL_RCC_SetRNGClockSource>
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f7ff fe34 	bl	8003b7a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f16:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003f1a:	d107      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003f1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f2a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d022      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff fe3d 	bl	8003bbc <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f4a:	d107      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f5a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f64:	d10b      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 f8dd 	bl	800412a <RCCEx_PLLSAI1_ConfigNR>
 8003f70:	4603      	mov	r3, r0
 8003f72:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003f74:	7ffb      	ldrb	r3, [r7, #31]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003f7a:	7ffb      	ldrb	r3, [r7, #31]
 8003f7c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d004      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff fd26 	bl	80039e0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d009      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff fd45 	bl	8003a34 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff fd2c 	bl	8003a0c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003fb4:	7fbb      	ldrb	r3, [r7, #30]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3720      	adds	r7, #32
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b084      	sub	sp, #16
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003fca:	f7ff fe61 	bl	8003c90 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003fce:	f7fd ff63 	bl	8001e98 <HAL_GetTick>
 8003fd2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003fd4:	e009      	b.n	8003fea <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fd6:	f7fd ff5f 	bl	8001e98 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d902      	bls.n	8003fea <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8003fe8:	e004      	b.n	8003ff4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003fea:	f7ff fe60 	bl	8003cae <LL_RCC_PLLSAI1_IsReady>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1f0      	bne.n	8003fd6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d137      	bne.n	800406a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003ffa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	021b      	lsls	r3, r3, #8
 800400a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800400e:	4313      	orrs	r3, r2
 8004010:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004012:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004024:	4313      	orrs	r3, r2
 8004026:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004028:	f7ff fe23 	bl	8003c72 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800402c:	f7fd ff34 	bl	8001e98 <HAL_GetTick>
 8004030:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004032:	e009      	b.n	8004048 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004034:	f7fd ff30 	bl	8001e98 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d902      	bls.n	8004048 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	73fb      	strb	r3, [r7, #15]
        break;
 8004046:	e004      	b.n	8004052 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004048:	f7ff fe31 	bl	8003cae <LL_RCC_PLLSAI1_IsReady>
 800404c:	4603      	mov	r3, r0
 800404e:	2b01      	cmp	r3, #1
 8004050:	d1f0      	bne.n	8004034 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004052:	7bfb      	ldrb	r3, [r7, #15]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d108      	bne.n	800406a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004058:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004066:	4313      	orrs	r3, r2
 8004068:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800406a:	7bfb      	ldrb	r3, [r7, #15]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004080:	f7ff fe06 	bl	8003c90 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004084:	f7fd ff08 	bl	8001e98 <HAL_GetTick>
 8004088:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800408a:	e009      	b.n	80040a0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800408c:	f7fd ff04 	bl	8001e98 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d902      	bls.n	80040a0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	73fb      	strb	r3, [r7, #15]
      break;
 800409e:	e004      	b.n	80040aa <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80040a0:	f7ff fe05 	bl	8003cae <LL_RCC_PLLSAI1_IsReady>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1f0      	bne.n	800408c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d137      	bne.n	8004120 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80040b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	021b      	lsls	r3, r3, #8
 80040c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040c4:	4313      	orrs	r3, r2
 80040c6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80040c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040da:	4313      	orrs	r3, r2
 80040dc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80040de:	f7ff fdc8 	bl	8003c72 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e2:	f7fd fed9 	bl	8001e98 <HAL_GetTick>
 80040e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80040e8:	e009      	b.n	80040fe <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040ea:	f7fd fed5 	bl	8001e98 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d902      	bls.n	80040fe <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	73fb      	strb	r3, [r7, #15]
        break;
 80040fc:	e004      	b.n	8004108 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80040fe:	f7ff fdd6 	bl	8003cae <LL_RCC_PLLSAI1_IsReady>
 8004102:	4603      	mov	r3, r0
 8004104:	2b01      	cmp	r3, #1
 8004106:	d1f0      	bne.n	80040ea <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004108:	7bfb      	ldrb	r3, [r7, #15]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d108      	bne.n	8004120 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800410e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004112:	691a      	ldr	r2, [r3, #16]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800411c:	4313      	orrs	r3, r2
 800411e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004120:	7bfb      	ldrb	r3, [r7, #15]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004132:	2300      	movs	r3, #0
 8004134:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004136:	f7ff fdab 	bl	8003c90 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800413a:	f7fd fead 	bl	8001e98 <HAL_GetTick>
 800413e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004140:	e009      	b.n	8004156 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004142:	f7fd fea9 	bl	8001e98 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d902      	bls.n	8004156 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	73fb      	strb	r3, [r7, #15]
      break;
 8004154:	e004      	b.n	8004160 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004156:	f7ff fdaa 	bl	8003cae <LL_RCC_PLLSAI1_IsReady>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1f0      	bne.n	8004142 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004160:	7bfb      	ldrb	r3, [r7, #15]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d137      	bne.n	80041d6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004166:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800417a:	4313      	orrs	r3, r2
 800417c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800417e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004190:	4313      	orrs	r3, r2
 8004192:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004194:	f7ff fd6d 	bl	8003c72 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004198:	f7fd fe7e 	bl	8001e98 <HAL_GetTick>
 800419c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800419e:	e009      	b.n	80041b4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041a0:	f7fd fe7a 	bl	8001e98 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d902      	bls.n	80041b4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	73fb      	strb	r3, [r7, #15]
        break;
 80041b2:	e004      	b.n	80041be <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80041b4:	f7ff fd7b 	bl	8003cae <LL_RCC_PLLSAI1_IsReady>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d1f0      	bne.n	80041a0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80041be:	7bfb      	ldrb	r3, [r7, #15]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d108      	bne.n	80041d6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80041c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041c8:	691a      	ldr	r2, [r3, #16]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80041d2:	4313      	orrs	r3, r2
 80041d4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e09f      	b.n	8004332 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fd fb5c 	bl	80018c4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004214:	4b49      	ldr	r3, [pc, #292]	@ (800433c <HAL_RTC_Init+0x15c>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f003 0310 	and.w	r3, r3, #16
 800421c:	2b10      	cmp	r3, #16
 800421e:	d07e      	beq.n	800431e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	22ca      	movs	r2, #202	@ 0xca
 8004226:	625a      	str	r2, [r3, #36]	@ 0x24
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2253      	movs	r2, #83	@ 0x53
 800422e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f8ab 	bl	800438c <RTC_EnterInitMode>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	22ff      	movs	r2, #255	@ 0xff
 8004242:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2204      	movs	r2, #4
 8004248:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	73fb      	strb	r3, [r7, #15]
 8004250:	e067      	b.n	8004322 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6812      	ldr	r2, [r2, #0]
 800425c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004260:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004264:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6899      	ldr	r1, [r3, #8]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	431a      	orrs	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	68d2      	ldr	r2, [r2, #12]
 800428c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6919      	ldr	r1, [r3, #16]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	041a      	lsls	r2, r3, #16
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68da      	ldr	r2, [r3, #12]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042b0:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0203 	bic.w	r2, r2, #3
 80042c0:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	69da      	ldr	r2, [r3, #28]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	431a      	orrs	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 0320 	and.w	r3, r3, #32
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d113      	bne.n	8004310 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f829 	bl	8004340 <HAL_RTC_WaitForSynchro>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00d      	beq.n	8004310 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	22ff      	movs	r2, #255	@ 0xff
 80042fa:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2204      	movs	r2, #4
 8004300:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e010      	b.n	8004332 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	22ff      	movs	r2, #255	@ 0xff
 8004316:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8004318:	2300      	movs	r3, #0
 800431a:	73fb      	strb	r3, [r7, #15]
 800431c:	e001      	b.n	8004322 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d103      	bne.n	8004330 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8004330:	7bfb      	ldrb	r3, [r7, #15]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40002800 	.word	0x40002800

08004340 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004356:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004358:	f7fd fd9e 	bl	8001e98 <HAL_GetTick>
 800435c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800435e:	e009      	b.n	8004374 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004360:	f7fd fd9a 	bl	8001e98 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800436e:	d901      	bls.n	8004374 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e007      	b.n	8004384 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0ee      	beq.n	8004360 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d119      	bne.n	80043d6 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f04f 32ff 	mov.w	r2, #4294967295
 80043aa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80043ac:	f7fd fd74 	bl	8001e98 <HAL_GetTick>
 80043b0:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80043b2:	e009      	b.n	80043c8 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80043b4:	f7fd fd70 	bl	8001e98 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80043c2:	d901      	bls.n	80043c8 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e007      	b.n	80043d8 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0ee      	beq.n	80043b4 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d101      	bne.n	80043fa <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80043f6:	2302      	movs	r3, #2
 80043f8:	e0a8      	b.n	800454c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2202      	movs	r2, #2
 8004406:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	22ca      	movs	r2, #202	@ 0xca
 8004410:	625a      	str	r2, [r3, #36]	@ 0x24
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2253      	movs	r2, #83	@ 0x53
 8004418:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004424:	2b00      	cmp	r3, #0
 8004426:	d020      	beq.n	800446a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8004428:	f7fd fd36 	bl	8001e98 <HAL_GetTick>
 800442c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800442e:	e015      	b.n	800445c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004430:	f7fd fd32 	bl	8001e98 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800443e:	d90d      	bls.n	800445c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	22ff      	movs	r2, #255	@ 0xff
 8004446:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2203      	movs	r2, #3
 800444c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e077      	b.n	800454c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f003 0304 	and.w	r3, r3, #4
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1e2      	bne.n	8004430 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004478:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	b2da      	uxtb	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800448a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800448c:	f7fd fd04 	bl	8001e98 <HAL_GetTick>
 8004490:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004492:	e015      	b.n	80044c0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004494:	f7fd fd00 	bl	8001e98 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80044a2:	d90d      	bls.n	80044c0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	22ff      	movs	r2, #255	@ 0xff
 80044aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2203      	movs	r2, #3
 80044b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e045      	b.n	800454c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f003 0304 	and.w	r3, r3, #4
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0e2      	beq.n	8004494 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0207 	bic.w	r2, r2, #7
 80044e4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6899      	ldr	r1, [r3, #8]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80044f6:	4b17      	ldr	r3, [pc, #92]	@ (8004554 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80044f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044fc:	4a15      	ldr	r2, [pc, #84]	@ (8004554 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80044fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004502:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004506:	4b13      	ldr	r3, [pc, #76]	@ (8004554 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a12      	ldr	r2, [pc, #72]	@ (8004554 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800450c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004510:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004520:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004530:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	22ff      	movs	r2, #255	@ 0xff
 8004538:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3718      	adds	r7, #24
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	58000800 	.word	0x58000800

08004558 <LL_RCC_GetUSARTClockSource>:
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004560:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004564:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4013      	ands	r3, r2
}
 800456c:	4618      	mov	r0, r3
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <LL_RCC_GetLPUARTClockSource>:
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004584:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4013      	ands	r3, r2
}
 800458c:	4618      	mov	r0, r3
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e042      	b.n	8004630 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d106      	bne.n	80045c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7fd fb7d 	bl	8001cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2224      	movs	r2, #36	@ 0x24
 80045c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0201 	bic.w	r2, r2, #1
 80045d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 fade 	bl	8004ba4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 f8b3 	bl	8004754 <UART_SetConfig>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e01b      	b.n	8004630 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004606:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004616:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0201 	orr.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 fb5d 	bl	8004ce8 <UART_CheckIdleState>
 800462e:	4603      	mov	r3, r0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08a      	sub	sp, #40	@ 0x28
 800463c:	af02      	add	r7, sp, #8
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	603b      	str	r3, [r7, #0]
 8004644:	4613      	mov	r3, r2
 8004646:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800464e:	2b20      	cmp	r3, #32
 8004650:	d17b      	bne.n	800474a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <HAL_UART_Transmit+0x26>
 8004658:	88fb      	ldrh	r3, [r7, #6]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e074      	b.n	800474c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2221      	movs	r2, #33	@ 0x21
 800466e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004672:	f7fd fc11 	bl	8001e98 <HAL_GetTick>
 8004676:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	88fa      	ldrh	r2, [r7, #6]
 800467c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	88fa      	ldrh	r2, [r7, #6]
 8004684:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004690:	d108      	bne.n	80046a4 <HAL_UART_Transmit+0x6c>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d104      	bne.n	80046a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800469a:	2300      	movs	r3, #0
 800469c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	e003      	b.n	80046ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046ac:	e030      	b.n	8004710 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2200      	movs	r2, #0
 80046b6:	2180      	movs	r1, #128	@ 0x80
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 fbbf 	bl	8004e3c <UART_WaitOnFlagUntilTimeout>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d005      	beq.n	80046d0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e03d      	b.n	800474c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10b      	bne.n	80046ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046e4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	3302      	adds	r3, #2
 80046ea:	61bb      	str	r3, [r7, #24]
 80046ec:	e007      	b.n	80046fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	781a      	ldrb	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	3301      	adds	r3, #1
 80046fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004704:	b29b      	uxth	r3, r3
 8004706:	3b01      	subs	r3, #1
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004716:	b29b      	uxth	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1c8      	bne.n	80046ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	2200      	movs	r2, #0
 8004724:	2140      	movs	r1, #64	@ 0x40
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 fb88 	bl	8004e3c <UART_WaitOnFlagUntilTimeout>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d005      	beq.n	800473e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2220      	movs	r2, #32
 8004736:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e006      	b.n	800474c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2220      	movs	r2, #32
 8004742:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	e000      	b.n	800474c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800474a:	2302      	movs	r3, #2
  }
}
 800474c:	4618      	mov	r0, r3
 800474e:	3720      	adds	r7, #32
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004758:	b08c      	sub	sp, #48	@ 0x30
 800475a:	af00      	add	r7, sp, #0
 800475c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	431a      	orrs	r2, r3
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	431a      	orrs	r2, r3
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	4313      	orrs	r3, r2
 800477a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	4baf      	ldr	r3, [pc, #700]	@ (8004a40 <UART_SetConfig+0x2ec>)
 8004784:	4013      	ands	r3, r2
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800478c:	430b      	orrs	r3, r1
 800478e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4aa4      	ldr	r2, [pc, #656]	@ (8004a44 <UART_SetConfig+0x2f0>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d004      	beq.n	80047c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047bc:	4313      	orrs	r3, r2
 80047be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80047ca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	6812      	ldr	r2, [r2, #0]
 80047d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047d4:	430b      	orrs	r3, r1
 80047d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047de:	f023 010f 	bic.w	r1, r3, #15
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a95      	ldr	r2, [pc, #596]	@ (8004a48 <UART_SetConfig+0x2f4>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d125      	bne.n	8004844 <UART_SetConfig+0xf0>
 80047f8:	2003      	movs	r0, #3
 80047fa:	f7ff fead 	bl	8004558 <LL_RCC_GetUSARTClockSource>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b03      	cmp	r3, #3
 8004802:	d81b      	bhi.n	800483c <UART_SetConfig+0xe8>
 8004804:	a201      	add	r2, pc, #4	@ (adr r2, 800480c <UART_SetConfig+0xb8>)
 8004806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480a:	bf00      	nop
 800480c:	0800481d 	.word	0x0800481d
 8004810:	0800482d 	.word	0x0800482d
 8004814:	08004825 	.word	0x08004825
 8004818:	08004835 	.word	0x08004835
 800481c:	2301      	movs	r3, #1
 800481e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004822:	e042      	b.n	80048aa <UART_SetConfig+0x156>
 8004824:	2302      	movs	r3, #2
 8004826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800482a:	e03e      	b.n	80048aa <UART_SetConfig+0x156>
 800482c:	2304      	movs	r3, #4
 800482e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004832:	e03a      	b.n	80048aa <UART_SetConfig+0x156>
 8004834:	2308      	movs	r3, #8
 8004836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800483a:	e036      	b.n	80048aa <UART_SetConfig+0x156>
 800483c:	2310      	movs	r3, #16
 800483e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004842:	e032      	b.n	80048aa <UART_SetConfig+0x156>
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a7e      	ldr	r2, [pc, #504]	@ (8004a44 <UART_SetConfig+0x2f0>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d12a      	bne.n	80048a4 <UART_SetConfig+0x150>
 800484e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8004852:	f7ff fe91 	bl	8004578 <LL_RCC_GetLPUARTClockSource>
 8004856:	4603      	mov	r3, r0
 8004858:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800485c:	d01a      	beq.n	8004894 <UART_SetConfig+0x140>
 800485e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004862:	d81b      	bhi.n	800489c <UART_SetConfig+0x148>
 8004864:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004868:	d00c      	beq.n	8004884 <UART_SetConfig+0x130>
 800486a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800486e:	d815      	bhi.n	800489c <UART_SetConfig+0x148>
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <UART_SetConfig+0x128>
 8004874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004878:	d008      	beq.n	800488c <UART_SetConfig+0x138>
 800487a:	e00f      	b.n	800489c <UART_SetConfig+0x148>
 800487c:	2300      	movs	r3, #0
 800487e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004882:	e012      	b.n	80048aa <UART_SetConfig+0x156>
 8004884:	2302      	movs	r3, #2
 8004886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800488a:	e00e      	b.n	80048aa <UART_SetConfig+0x156>
 800488c:	2304      	movs	r3, #4
 800488e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004892:	e00a      	b.n	80048aa <UART_SetConfig+0x156>
 8004894:	2308      	movs	r3, #8
 8004896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800489a:	e006      	b.n	80048aa <UART_SetConfig+0x156>
 800489c:	2310      	movs	r3, #16
 800489e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048a2:	e002      	b.n	80048aa <UART_SetConfig+0x156>
 80048a4:	2310      	movs	r3, #16
 80048a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a65      	ldr	r2, [pc, #404]	@ (8004a44 <UART_SetConfig+0x2f0>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	f040 8097 	bne.w	80049e4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d823      	bhi.n	8004906 <UART_SetConfig+0x1b2>
 80048be:	a201      	add	r2, pc, #4	@ (adr r2, 80048c4 <UART_SetConfig+0x170>)
 80048c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c4:	080048e9 	.word	0x080048e9
 80048c8:	08004907 	.word	0x08004907
 80048cc:	080048f1 	.word	0x080048f1
 80048d0:	08004907 	.word	0x08004907
 80048d4:	080048f7 	.word	0x080048f7
 80048d8:	08004907 	.word	0x08004907
 80048dc:	08004907 	.word	0x08004907
 80048e0:	08004907 	.word	0x08004907
 80048e4:	080048ff 	.word	0x080048ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048e8:	f7fe ff76 	bl	80037d8 <HAL_RCC_GetPCLK1Freq>
 80048ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80048ee:	e010      	b.n	8004912 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048f0:	4b56      	ldr	r3, [pc, #344]	@ (8004a4c <UART_SetConfig+0x2f8>)
 80048f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80048f4:	e00d      	b.n	8004912 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048f6:	f7fe feef 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 80048fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80048fc:	e009      	b.n	8004912 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004902:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004904:	e005      	b.n	8004912 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004910:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 812b 	beq.w	8004b70 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491e:	4a4c      	ldr	r2, [pc, #304]	@ (8004a50 <UART_SetConfig+0x2fc>)
 8004920:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004924:	461a      	mov	r2, r3
 8004926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004928:	fbb3 f3f2 	udiv	r3, r3, r2
 800492c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	4613      	mov	r3, r2
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	4413      	add	r3, r2
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	429a      	cmp	r2, r3
 800493c:	d305      	bcc.n	800494a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	429a      	cmp	r2, r3
 8004948:	d903      	bls.n	8004952 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004950:	e10e      	b.n	8004b70 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004954:	2200      	movs	r2, #0
 8004956:	60bb      	str	r3, [r7, #8]
 8004958:	60fa      	str	r2, [r7, #12]
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495e:	4a3c      	ldr	r2, [pc, #240]	@ (8004a50 <UART_SetConfig+0x2fc>)
 8004960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004964:	b29b      	uxth	r3, r3
 8004966:	2200      	movs	r2, #0
 8004968:	603b      	str	r3, [r7, #0]
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004970:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004974:	f7fb fc0a 	bl	800018c <__aeabi_uldivmod>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4610      	mov	r0, r2
 800497e:	4619      	mov	r1, r3
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	020b      	lsls	r3, r1, #8
 800498a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800498e:	0202      	lsls	r2, r0, #8
 8004990:	6979      	ldr	r1, [r7, #20]
 8004992:	6849      	ldr	r1, [r1, #4]
 8004994:	0849      	lsrs	r1, r1, #1
 8004996:	2000      	movs	r0, #0
 8004998:	460c      	mov	r4, r1
 800499a:	4605      	mov	r5, r0
 800499c:	eb12 0804 	adds.w	r8, r2, r4
 80049a0:	eb43 0905 	adc.w	r9, r3, r5
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	469a      	mov	sl, r3
 80049ac:	4693      	mov	fp, r2
 80049ae:	4652      	mov	r2, sl
 80049b0:	465b      	mov	r3, fp
 80049b2:	4640      	mov	r0, r8
 80049b4:	4649      	mov	r1, r9
 80049b6:	f7fb fbe9 	bl	800018c <__aeabi_uldivmod>
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	4613      	mov	r3, r2
 80049c0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049c8:	d308      	bcc.n	80049dc <UART_SetConfig+0x288>
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049d0:	d204      	bcs.n	80049dc <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6a3a      	ldr	r2, [r7, #32]
 80049d8:	60da      	str	r2, [r3, #12]
 80049da:	e0c9      	b.n	8004b70 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80049e2:	e0c5      	b.n	8004b70 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049ec:	d16d      	bne.n	8004aca <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80049ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80049f2:	3b01      	subs	r3, #1
 80049f4:	2b07      	cmp	r3, #7
 80049f6:	d82d      	bhi.n	8004a54 <UART_SetConfig+0x300>
 80049f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004a00 <UART_SetConfig+0x2ac>)
 80049fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fe:	bf00      	nop
 8004a00:	08004a21 	.word	0x08004a21
 8004a04:	08004a29 	.word	0x08004a29
 8004a08:	08004a55 	.word	0x08004a55
 8004a0c:	08004a2f 	.word	0x08004a2f
 8004a10:	08004a55 	.word	0x08004a55
 8004a14:	08004a55 	.word	0x08004a55
 8004a18:	08004a55 	.word	0x08004a55
 8004a1c:	08004a37 	.word	0x08004a37
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a20:	f7fe fef0 	bl	8003804 <HAL_RCC_GetPCLK2Freq>
 8004a24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a26:	e01b      	b.n	8004a60 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a28:	4b08      	ldr	r3, [pc, #32]	@ (8004a4c <UART_SetConfig+0x2f8>)
 8004a2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a2c:	e018      	b.n	8004a60 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a2e:	f7fe fe53 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 8004a32:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a34:	e014      	b.n	8004a60 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a3c:	e010      	b.n	8004a60 <UART_SetConfig+0x30c>
 8004a3e:	bf00      	nop
 8004a40:	cfff69f3 	.word	0xcfff69f3
 8004a44:	40008000 	.word	0x40008000
 8004a48:	40013800 	.word	0x40013800
 8004a4c:	00f42400 	.word	0x00f42400
 8004a50:	08009358 	.word	0x08009358
      default:
        pclk = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004a5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 8084 	beq.w	8004b70 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6c:	4a4b      	ldr	r2, [pc, #300]	@ (8004b9c <UART_SetConfig+0x448>)
 8004a6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a72:	461a      	mov	r2, r3
 8004a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a76:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a7a:	005a      	lsls	r2, r3, #1
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	085b      	lsrs	r3, r3, #1
 8004a82:	441a      	add	r2, r3
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a8e:	6a3b      	ldr	r3, [r7, #32]
 8004a90:	2b0f      	cmp	r3, #15
 8004a92:	d916      	bls.n	8004ac2 <UART_SetConfig+0x36e>
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a9a:	d212      	bcs.n	8004ac2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	f023 030f 	bic.w	r3, r3, #15
 8004aa4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	085b      	lsrs	r3, r3, #1
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	8bfb      	ldrh	r3, [r7, #30]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	8bfa      	ldrh	r2, [r7, #30]
 8004abe:	60da      	str	r2, [r3, #12]
 8004ac0:	e056      	b.n	8004b70 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004ac8:	e052      	b.n	8004b70 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004aca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	2b07      	cmp	r3, #7
 8004ad2:	d822      	bhi.n	8004b1a <UART_SetConfig+0x3c6>
 8004ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8004adc <UART_SetConfig+0x388>)
 8004ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ada:	bf00      	nop
 8004adc:	08004afd 	.word	0x08004afd
 8004ae0:	08004b05 	.word	0x08004b05
 8004ae4:	08004b1b 	.word	0x08004b1b
 8004ae8:	08004b0b 	.word	0x08004b0b
 8004aec:	08004b1b 	.word	0x08004b1b
 8004af0:	08004b1b 	.word	0x08004b1b
 8004af4:	08004b1b 	.word	0x08004b1b
 8004af8:	08004b13 	.word	0x08004b13
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004afc:	f7fe fe82 	bl	8003804 <HAL_RCC_GetPCLK2Freq>
 8004b00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b02:	e010      	b.n	8004b26 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b04:	4b26      	ldr	r3, [pc, #152]	@ (8004ba0 <UART_SetConfig+0x44c>)
 8004b06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b08:	e00d      	b.n	8004b26 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b0a:	f7fe fde5 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 8004b0e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b10:	e009      	b.n	8004b26 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b18:	e005      	b.n	8004b26 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004b24:	bf00      	nop
    }

    if (pclk != 0U)
 8004b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d021      	beq.n	8004b70 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b30:	4a1a      	ldr	r2, [pc, #104]	@ (8004b9c <UART_SetConfig+0x448>)
 8004b32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b36:	461a      	mov	r2, r3
 8004b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	085b      	lsrs	r3, r3, #1
 8004b44:	441a      	add	r2, r3
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	2b0f      	cmp	r3, #15
 8004b54:	d909      	bls.n	8004b6a <UART_SetConfig+0x416>
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b5c:	d205      	bcs.n	8004b6a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	60da      	str	r2, [r3, #12]
 8004b68:	e002      	b.n	8004b70 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	2200      	movs	r2, #0
 8004b84:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004b8c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3730      	adds	r7, #48	@ 0x30
 8004b94:	46bd      	mov	sp, r7
 8004b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b9a:	bf00      	nop
 8004b9c:	08009358 	.word	0x08009358
 8004ba0:	00f42400 	.word	0x00f42400

08004ba4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb0:	f003 0308 	and.w	r3, r3, #8
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00a      	beq.n	8004bce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c38:	f003 0310 	and.w	r3, r3, #16
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01a      	beq.n	8004cba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ca2:	d10a      	bne.n	8004cba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	605a      	str	r2, [r3, #4]
  }
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b098      	sub	sp, #96	@ 0x60
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cf8:	f7fd f8ce 	bl	8001e98 <HAL_GetTick>
 8004cfc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0308 	and.w	r3, r3, #8
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d12f      	bne.n	8004d6c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d14:	2200      	movs	r2, #0
 8004d16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f88e 	bl	8004e3c <UART_WaitOnFlagUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d022      	beq.n	8004d6c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d2e:	e853 3f00 	ldrex	r3, [r3]
 8004d32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	461a      	mov	r2, r3
 8004d42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d44:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d46:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d4c:	e841 2300 	strex	r3, r2, [r1]
 8004d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1e6      	bne.n	8004d26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e063      	b.n	8004e34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0304 	and.w	r3, r3, #4
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d149      	bne.n	8004e0e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d7a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d82:	2200      	movs	r2, #0
 8004d84:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f857 	bl	8004e3c <UART_WaitOnFlagUntilTimeout>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d03c      	beq.n	8004e0e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9c:	e853 3f00 	ldrex	r3, [r3]
 8004da0:	623b      	str	r3, [r7, #32]
   return(result);
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004da8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	461a      	mov	r2, r3
 8004db0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004db2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004db4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004db8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dba:	e841 2300 	strex	r3, r2, [r1]
 8004dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1e6      	bne.n	8004d94 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3308      	adds	r3, #8
 8004dcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	e853 3f00 	ldrex	r3, [r3]
 8004dd4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f023 0301 	bic.w	r3, r3, #1
 8004ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3308      	adds	r3, #8
 8004de4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004de6:	61fa      	str	r2, [r7, #28]
 8004de8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dea:	69b9      	ldr	r1, [r7, #24]
 8004dec:	69fa      	ldr	r2, [r7, #28]
 8004dee:	e841 2300 	strex	r3, r2, [r1]
 8004df2:	617b      	str	r3, [r7, #20]
   return(result);
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1e5      	bne.n	8004dc6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e012      	b.n	8004e34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3758      	adds	r7, #88	@ 0x58
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	603b      	str	r3, [r7, #0]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e4c:	e04f      	b.n	8004eee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e54:	d04b      	beq.n	8004eee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e56:	f7fd f81f 	bl	8001e98 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d302      	bcc.n	8004e6c <UART_WaitOnFlagUntilTimeout+0x30>
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e04e      	b.n	8004f0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0304 	and.w	r3, r3, #4
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d037      	beq.n	8004eee <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b80      	cmp	r3, #128	@ 0x80
 8004e82:	d034      	beq.n	8004eee <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2b40      	cmp	r3, #64	@ 0x40
 8004e88:	d031      	beq.n	8004eee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	f003 0308 	and.w	r3, r3, #8
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d110      	bne.n	8004eba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2208      	movs	r2, #8
 8004e9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f000 f838 	bl	8004f16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2208      	movs	r2, #8
 8004eaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e029      	b.n	8004f0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69db      	ldr	r3, [r3, #28]
 8004ec0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ec4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ec8:	d111      	bne.n	8004eee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ed2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f000 f81e 	bl	8004f16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2220      	movs	r2, #32
 8004ede:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e00f      	b.n	8004f0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69da      	ldr	r2, [r3, #28]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	bf0c      	ite	eq
 8004efe:	2301      	moveq	r3, #1
 8004f00:	2300      	movne	r3, #0
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	461a      	mov	r2, r3
 8004f06:	79fb      	ldrb	r3, [r7, #7]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d0a0      	beq.n	8004e4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b095      	sub	sp, #84	@ 0x54
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f26:	e853 3f00 	ldrex	r3, [r3]
 8004f2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f3e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f44:	e841 2300 	strex	r3, r2, [r1]
 8004f48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1e6      	bne.n	8004f1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3308      	adds	r3, #8
 8004f56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f58:	6a3b      	ldr	r3, [r7, #32]
 8004f5a:	e853 3f00 	ldrex	r3, [r3]
 8004f5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f66:	f023 0301 	bic.w	r3, r3, #1
 8004f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3308      	adds	r3, #8
 8004f72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f7c:	e841 2300 	strex	r3, r2, [r1]
 8004f80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1e3      	bne.n	8004f50 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d118      	bne.n	8004fc2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	e853 3f00 	ldrex	r3, [r3]
 8004f9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	f023 0310 	bic.w	r3, r3, #16
 8004fa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	461a      	mov	r2, r3
 8004fac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fae:	61bb      	str	r3, [r7, #24]
 8004fb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb2:	6979      	ldr	r1, [r7, #20]
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	e841 2300 	strex	r3, r2, [r1]
 8004fba:	613b      	str	r3, [r7, #16]
   return(result);
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1e6      	bne.n	8004f90 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004fd6:	bf00      	nop
 8004fd8:	3754      	adds	r7, #84	@ 0x54
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b085      	sub	sp, #20
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_UARTEx_DisableFifoMode+0x16>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e027      	b.n	8005048 <HAL_UARTEx_DisableFifoMode+0x66>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2224      	movs	r2, #36	@ 0x24
 8005004:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0201 	bic.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005026:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2220      	movs	r2, #32
 800503a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005064:	2b01      	cmp	r3, #1
 8005066:	d101      	bne.n	800506c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005068:	2302      	movs	r3, #2
 800506a:	e02d      	b.n	80050c8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2224      	movs	r2, #36	@ 0x24
 8005078:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 0201 	bic.w	r2, r2, #1
 8005092:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f84f 	bl	800514c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e02d      	b.n	8005144 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2224      	movs	r2, #36	@ 0x24
 80050f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0201 	bic.w	r2, r2, #1
 800510e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f811 	bl	800514c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2220      	movs	r2, #32
 8005136:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005158:	2b00      	cmp	r3, #0
 800515a:	d108      	bne.n	800516e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800516c:	e031      	b.n	80051d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800516e:	2308      	movs	r3, #8
 8005170:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005172:	2308      	movs	r3, #8
 8005174:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	0e5b      	lsrs	r3, r3, #25
 800517e:	b2db      	uxtb	r3, r3
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	0f5b      	lsrs	r3, r3, #29
 800518e:	b2db      	uxtb	r3, r3
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005196:	7bbb      	ldrb	r3, [r7, #14]
 8005198:	7b3a      	ldrb	r2, [r7, #12]
 800519a:	4911      	ldr	r1, [pc, #68]	@ (80051e0 <UARTEx_SetNbDataToProcess+0x94>)
 800519c:	5c8a      	ldrb	r2, [r1, r2]
 800519e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80051a2:	7b3a      	ldrb	r2, [r7, #12]
 80051a4:	490f      	ldr	r1, [pc, #60]	@ (80051e4 <UARTEx_SetNbDataToProcess+0x98>)
 80051a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80051a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80051b4:	7bfb      	ldrb	r3, [r7, #15]
 80051b6:	7b7a      	ldrb	r2, [r7, #13]
 80051b8:	4909      	ldr	r1, [pc, #36]	@ (80051e0 <UARTEx_SetNbDataToProcess+0x94>)
 80051ba:	5c8a      	ldrb	r2, [r1, r2]
 80051bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80051c0:	7b7a      	ldrb	r2, [r7, #13]
 80051c2:	4908      	ldr	r1, [pc, #32]	@ (80051e4 <UARTEx_SetNbDataToProcess+0x98>)
 80051c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80051c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80051d2:	bf00      	nop
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	08009370 	.word	0x08009370
 80051e4:	08009378 	.word	0x08009378

080051e8 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b088      	sub	sp, #32
 80051ec:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80051ee:	2300      	movs	r3, #0
 80051f0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80051f2:	f107 0308 	add.w	r3, r7, #8
 80051f6:	2218      	movs	r2, #24
 80051f8:	2100      	movs	r1, #0
 80051fa:	4618      	mov	r0, r3
 80051fc:	f001 f92d 	bl	800645a <Osal_MemSet>
  rq.ogf = 0x3f;
 8005200:	233f      	movs	r3, #63	@ 0x3f
 8005202:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8005204:	2381      	movs	r3, #129	@ 0x81
 8005206:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005208:	1dfb      	adds	r3, r7, #7
 800520a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800520c:	2301      	movs	r3, #1
 800520e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005210:	f107 0308 	add.w	r3, r7, #8
 8005214:	2100      	movs	r1, #0
 8005216:	4618      	mov	r0, r3
 8005218:	f001 fba8 	bl	800696c <hci_send_req>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	da01      	bge.n	8005226 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005222:	23ff      	movs	r3, #255	@ 0xff
 8005224:	e000      	b.n	8005228 <aci_gap_set_non_discoverable+0x40>
  return status;
 8005226:	79fb      	ldrb	r3, [r7, #7]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3720      	adds	r7, #32
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8005230:	b5b0      	push	{r4, r5, r7, lr}
 8005232:	b0ce      	sub	sp, #312	@ 0x138
 8005234:	af00      	add	r7, sp, #0
 8005236:	4605      	mov	r5, r0
 8005238:	460c      	mov	r4, r1
 800523a:	4610      	mov	r0, r2
 800523c:	4619      	mov	r1, r3
 800523e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005242:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005246:	462a      	mov	r2, r5
 8005248:	701a      	strb	r2, [r3, #0]
 800524a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800524e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005252:	4622      	mov	r2, r4
 8005254:	801a      	strh	r2, [r3, #0]
 8005256:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800525a:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800525e:	4602      	mov	r2, r0
 8005260:	801a      	strh	r2, [r3, #0]
 8005262:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005266:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800526a:	460a      	mov	r2, r1
 800526c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800526e:	f107 0310 	add.w	r3, r7, #16
 8005272:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8005276:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800527a:	3308      	adds	r3, #8
 800527c:	f107 0210 	add.w	r2, r7, #16
 8005280:	4413      	add	r3, r2
 8005282:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8005286:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800528a:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800528e:	4413      	add	r3, r2
 8005290:	3309      	adds	r3, #9
 8005292:	f107 0210 	add.w	r2, r7, #16
 8005296:	4413      	add	r3, r2
 8005298:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800529c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80052a0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80052a4:	2200      	movs	r2, #0
 80052a6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80052a8:	2300      	movs	r3, #0
 80052aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 80052ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80052b2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80052b6:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80052ba:	7812      	ldrb	r2, [r2, #0]
 80052bc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80052be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80052c2:	3301      	adds	r3, #1
 80052c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80052c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80052cc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80052d0:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80052d4:	8812      	ldrh	r2, [r2, #0]
 80052d6:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80052da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80052de:	3302      	adds	r3, #2
 80052e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80052e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80052e8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80052ec:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 80052f0:	8812      	ldrh	r2, [r2, #0]
 80052f2:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80052f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80052fa:	3302      	adds	r3, #2
 80052fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8005300:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005304:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005308:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800530c:	7812      	ldrb	r2, [r2, #0]
 800530e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005310:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005314:	3301      	adds	r3, #1
 8005316:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800531a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800531e:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8005322:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005324:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005328:	3301      	adds	r3, #1
 800532a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800532e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005332:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8005336:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8005338:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800533c:	3301      	adds	r3, #1
 800533e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8005342:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005346:	3308      	adds	r3, #8
 8005348:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800534c:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8005350:	4618      	mov	r0, r3
 8005352:	f001 f872 	bl	800643a <Osal_MemCpy>
    index_input += Local_Name_Length;
 8005356:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800535a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800535e:	4413      	add	r3, r2
 8005360:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8005364:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005368:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800536c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800536e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005372:	3301      	adds	r3, #1
 8005374:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8005378:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800537c:	3301      	adds	r3, #1
 800537e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8005382:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8005386:	4618      	mov	r0, r3
 8005388:	f001 f857 	bl	800643a <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800538c:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8005390:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005394:	4413      	add	r3, r2
 8005396:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800539a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800539e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 80053a2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80053a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80053a8:	3302      	adds	r3, #2
 80053aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 80053ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80053b2:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 80053b6:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80053b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80053bc:	3302      	adds	r3, #2
 80053be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80053c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80053c6:	2218      	movs	r2, #24
 80053c8:	2100      	movs	r1, #0
 80053ca:	4618      	mov	r0, r3
 80053cc:	f001 f845 	bl	800645a <Osal_MemSet>
  rq.ogf = 0x3f;
 80053d0:	233f      	movs	r3, #63	@ 0x3f
 80053d2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 80053d6:	2383      	movs	r3, #131	@ 0x83
 80053d8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80053dc:	f107 0310 	add.w	r3, r7, #16
 80053e0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80053e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80053e8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80053ec:	f107 030f 	add.w	r3, r7, #15
 80053f0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80053f4:	2301      	movs	r3, #1
 80053f6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80053fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80053fe:	2100      	movs	r1, #0
 8005400:	4618      	mov	r0, r3
 8005402:	f001 fab3 	bl	800696c <hci_send_req>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	da01      	bge.n	8005410 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800540c:	23ff      	movs	r3, #255	@ 0xff
 800540e:	e004      	b.n	800541a <aci_gap_set_discoverable+0x1ea>
  return status;
 8005410:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005414:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005418:	781b      	ldrb	r3, [r3, #0]
}
 800541a:	4618      	mov	r0, r3
 800541c:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8005420:	46bd      	mov	sp, r7
 8005422:	bdb0      	pop	{r4, r5, r7, pc}

08005424 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b0cc      	sub	sp, #304	@ 0x130
 8005428:	af00      	add	r7, sp, #0
 800542a:	4602      	mov	r2, r0
 800542c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005430:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005434:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8005436:	f107 0310 	add.w	r3, r7, #16
 800543a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800543e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005442:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005446:	2200      	movs	r2, #0
 8005448:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800544a:	2300      	movs	r3, #0
 800544c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8005450:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005454:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005458:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800545c:	7812      	ldrb	r2, [r2, #0]
 800545e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005460:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005464:	3301      	adds	r3, #1
 8005466:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800546a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800546e:	2218      	movs	r2, #24
 8005470:	2100      	movs	r1, #0
 8005472:	4618      	mov	r0, r3
 8005474:	f000 fff1 	bl	800645a <Osal_MemSet>
  rq.ogf = 0x3f;
 8005478:	233f      	movs	r3, #63	@ 0x3f
 800547a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800547e:	2385      	movs	r3, #133	@ 0x85
 8005480:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005484:	f107 0310 	add.w	r3, r7, #16
 8005488:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800548c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005490:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005494:	f107 030f 	add.w	r3, r7, #15
 8005498:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800549c:	2301      	movs	r3, #1
 800549e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80054a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80054a6:	2100      	movs	r1, #0
 80054a8:	4618      	mov	r0, r3
 80054aa:	f001 fa5f 	bl	800696c <hci_send_req>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	da01      	bge.n	80054b8 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80054b4:	23ff      	movs	r3, #255	@ 0xff
 80054b6:	e004      	b.n	80054c2 <aci_gap_set_io_capability+0x9e>
  return status;
 80054b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80054bc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80054c0:	781b      	ldrb	r3, [r3, #0]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80054cc:	b5b0      	push	{r4, r5, r7, lr}
 80054ce:	b0cc      	sub	sp, #304	@ 0x130
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	4605      	mov	r5, r0
 80054d4:	460c      	mov	r4, r1
 80054d6:	4610      	mov	r0, r2
 80054d8:	4619      	mov	r1, r3
 80054da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80054de:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80054e2:	462a      	mov	r2, r5
 80054e4:	701a      	strb	r2, [r3, #0]
 80054e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80054ea:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80054ee:	4622      	mov	r2, r4
 80054f0:	701a      	strb	r2, [r3, #0]
 80054f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80054f6:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80054fa:	4602      	mov	r2, r0
 80054fc:	701a      	strb	r2, [r3, #0]
 80054fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005502:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005506:	460a      	mov	r2, r1
 8005508:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800550a:	f107 0310 	add.w	r3, r7, #16
 800550e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005512:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005516:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800551a:	2200      	movs	r2, #0
 800551c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800551e:	2300      	movs	r3, #0
 8005520:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8005524:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005528:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800552c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005530:	7812      	ldrb	r2, [r2, #0]
 8005532:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005534:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005538:	3301      	adds	r3, #1
 800553a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800553e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005542:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005546:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800554a:	7812      	ldrb	r2, [r2, #0]
 800554c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800554e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005552:	3301      	adds	r3, #1
 8005554:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8005558:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800555c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005560:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005564:	7812      	ldrb	r2, [r2, #0]
 8005566:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005568:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800556c:	3301      	adds	r3, #1
 800556e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8005572:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005576:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800557a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800557e:	7812      	ldrb	r2, [r2, #0]
 8005580:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8005582:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005586:	3301      	adds	r3, #1
 8005588:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800558c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005590:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8005594:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005596:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800559a:	3301      	adds	r3, #1
 800559c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80055a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80055a4:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 80055a8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80055aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80055ae:	3301      	adds	r3, #1
 80055b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80055b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80055b8:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80055bc:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80055be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80055c2:	3301      	adds	r3, #1
 80055c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80055c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80055cc:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80055d0:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80055d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80055d8:	3304      	adds	r3, #4
 80055da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80055de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80055e2:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 80055e6:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80055e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80055ec:	3301      	adds	r3, #1
 80055ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80055f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80055f6:	2218      	movs	r2, #24
 80055f8:	2100      	movs	r1, #0
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 ff2d 	bl	800645a <Osal_MemSet>
  rq.ogf = 0x3f;
 8005600:	233f      	movs	r3, #63	@ 0x3f
 8005602:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8005606:	2386      	movs	r3, #134	@ 0x86
 8005608:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800560c:	f107 0310 	add.w	r3, r7, #16
 8005610:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005614:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005618:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800561c:	f107 030f 	add.w	r3, r7, #15
 8005620:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005624:	2301      	movs	r3, #1
 8005626:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800562a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800562e:	2100      	movs	r1, #0
 8005630:	4618      	mov	r0, r3
 8005632:	f001 f99b 	bl	800696c <hci_send_req>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	da01      	bge.n	8005640 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800563c:	23ff      	movs	r3, #255	@ 0xff
 800563e:	e004      	b.n	800564a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8005640:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005644:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005648:	781b      	ldrb	r3, [r3, #0]
}
 800564a:	4618      	mov	r0, r3
 800564c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005650:	46bd      	mov	sp, r7
 8005652:	bdb0      	pop	{r4, r5, r7, pc}

08005654 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b0cc      	sub	sp, #304	@ 0x130
 8005658:	af00      	add	r7, sp, #0
 800565a:	4602      	mov	r2, r0
 800565c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005660:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005664:	6019      	str	r1, [r3, #0]
 8005666:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800566a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800566e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8005670:	f107 0310 	add.w	r3, r7, #16
 8005674:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005678:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800567c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005680:	2200      	movs	r2, #0
 8005682:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005684:	2300      	movs	r3, #0
 8005686:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800568a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800568e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005692:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005696:	8812      	ldrh	r2, [r2, #0]
 8005698:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800569a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800569e:	3302      	adds	r3, #2
 80056a0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 80056a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80056a8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80056ac:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80056b0:	6812      	ldr	r2, [r2, #0]
 80056b2:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80056b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80056ba:	3304      	adds	r3, #4
 80056bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80056c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80056c4:	2218      	movs	r2, #24
 80056c6:	2100      	movs	r1, #0
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 fec6 	bl	800645a <Osal_MemSet>
  rq.ogf = 0x3f;
 80056ce:	233f      	movs	r3, #63	@ 0x3f
 80056d0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 80056d4:	2388      	movs	r3, #136	@ 0x88
 80056d6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80056da:	f107 0310 	add.w	r3, r7, #16
 80056de:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80056e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80056e6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80056ea:	f107 030f 	add.w	r3, r7, #15
 80056ee:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80056f2:	2301      	movs	r3, #1
 80056f4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80056f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80056fc:	2100      	movs	r1, #0
 80056fe:	4618      	mov	r0, r3
 8005700:	f001 f934 	bl	800696c <hci_send_req>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	da01      	bge.n	800570e <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800570a:	23ff      	movs	r3, #255	@ 0xff
 800570c:	e004      	b.n	8005718 <aci_gap_pass_key_resp+0xc4>
  return status;
 800570e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005712:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005716:	781b      	ldrb	r3, [r3, #0]
}
 8005718:	4618      	mov	r0, r3
 800571a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8005722:	b590      	push	{r4, r7, lr}
 8005724:	b0cd      	sub	sp, #308	@ 0x134
 8005726:	af00      	add	r7, sp, #0
 8005728:	4604      	mov	r4, r0
 800572a:	4608      	mov	r0, r1
 800572c:	4611      	mov	r1, r2
 800572e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005732:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8005736:	6013      	str	r3, [r2, #0]
 8005738:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800573c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005740:	4622      	mov	r2, r4
 8005742:	701a      	strb	r2, [r3, #0]
 8005744:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005748:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800574c:	4602      	mov	r2, r0
 800574e:	701a      	strb	r2, [r3, #0]
 8005750:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005754:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005758:	460a      	mov	r2, r1
 800575a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800575c:	f107 0310 	add.w	r3, r7, #16
 8005760:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005764:	f107 0308 	add.w	r3, r7, #8
 8005768:	2207      	movs	r2, #7
 800576a:	2100      	movs	r1, #0
 800576c:	4618      	mov	r0, r3
 800576e:	f000 fe74 	bl	800645a <Osal_MemSet>
  int index_input = 0;
 8005772:	2300      	movs	r3, #0
 8005774:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8005778:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800577c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005780:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005784:	7812      	ldrb	r2, [r2, #0]
 8005786:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005788:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800578c:	3301      	adds	r3, #1
 800578e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8005792:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005796:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800579a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800579e:	7812      	ldrb	r2, [r2, #0]
 80057a0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80057a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80057a6:	3301      	adds	r3, #1
 80057a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 80057ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80057b0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80057b4:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80057b8:	7812      	ldrb	r2, [r2, #0]
 80057ba:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80057bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80057c0:	3301      	adds	r3, #1
 80057c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80057c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80057ca:	2218      	movs	r2, #24
 80057cc:	2100      	movs	r1, #0
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 fe43 	bl	800645a <Osal_MemSet>
  rq.ogf = 0x3f;
 80057d4:	233f      	movs	r3, #63	@ 0x3f
 80057d6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 80057da:	238a      	movs	r3, #138	@ 0x8a
 80057dc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80057e0:	f107 0310 	add.w	r3, r7, #16
 80057e4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80057e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80057ec:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80057f0:	f107 0308 	add.w	r3, r7, #8
 80057f4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80057f8:	2307      	movs	r3, #7
 80057fa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80057fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005802:	2100      	movs	r1, #0
 8005804:	4618      	mov	r0, r3
 8005806:	f001 f8b1 	bl	800696c <hci_send_req>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	da01      	bge.n	8005814 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8005810:	23ff      	movs	r3, #255	@ 0xff
 8005812:	e02e      	b.n	8005872 <aci_gap_init+0x150>
  if ( resp.Status )
 8005814:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005818:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d005      	beq.n	800582e <aci_gap_init+0x10c>
    return resp.Status;
 8005822:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005826:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	e021      	b.n	8005872 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800582e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005832:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005836:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800583a:	b29a      	uxth	r2, r3
 800583c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005840:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8005848:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800584c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005850:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005854:	b29a      	uxth	r2, r3
 8005856:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800585a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800585c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005860:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005864:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8005868:	b29a      	uxth	r2, r3
 800586a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800586e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8005878:	46bd      	mov	sp, r7
 800587a:	bd90      	pop	{r4, r7, pc}

0800587c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b0cc      	sub	sp, #304	@ 0x130
 8005880:	af00      	add	r7, sp, #0
 8005882:	4602      	mov	r2, r0
 8005884:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005888:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800588c:	6019      	str	r1, [r3, #0]
 800588e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005892:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005896:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8005898:	f107 0310 	add.w	r3, r7, #16
 800589c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80058a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80058a4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80058a8:	2200      	movs	r2, #0
 80058aa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80058ac:	2300      	movs	r3, #0
 80058ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 80058b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80058b6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80058ba:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80058be:	7812      	ldrb	r2, [r2, #0]
 80058c0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80058c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80058c6:	3301      	adds	r3, #1
 80058c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80058cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80058d0:	1c58      	adds	r0, r3, #1
 80058d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80058d6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80058da:	781a      	ldrb	r2, [r3, #0]
 80058dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80058e0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80058e4:	6819      	ldr	r1, [r3, #0]
 80058e6:	f000 fda8 	bl	800643a <Osal_MemCpy>
  index_input += AdvDataLen;
 80058ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80058ee:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80058f8:	4413      	add	r3, r2
 80058fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80058fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005902:	2218      	movs	r2, #24
 8005904:	2100      	movs	r1, #0
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fda7 	bl	800645a <Osal_MemSet>
  rq.ogf = 0x3f;
 800590c:	233f      	movs	r3, #63	@ 0x3f
 800590e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8005912:	238e      	movs	r3, #142	@ 0x8e
 8005914:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005918:	f107 0310 	add.w	r3, r7, #16
 800591c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005920:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005924:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005928:	f107 030f 	add.w	r3, r7, #15
 800592c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005930:	2301      	movs	r3, #1
 8005932:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005936:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800593a:	2100      	movs	r1, #0
 800593c:	4618      	mov	r0, r3
 800593e:	f001 f815 	bl	800696c <hci_send_req>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	da01      	bge.n	800594c <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8005948:	23ff      	movs	r3, #255	@ 0xff
 800594a:	e004      	b.n	8005956 <aci_gap_update_adv_data+0xda>
  return status;
 800594c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005950:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005954:	781b      	ldrb	r3, [r3, #0]
}
 8005956:	4618      	mov	r0, r3
 8005958:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b088      	sub	sp, #32
 8005964:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005966:	2300      	movs	r3, #0
 8005968:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800596a:	f107 0308 	add.w	r3, r7, #8
 800596e:	2218      	movs	r2, #24
 8005970:	2100      	movs	r1, #0
 8005972:	4618      	mov	r0, r3
 8005974:	f000 fd71 	bl	800645a <Osal_MemSet>
  rq.ogf = 0x3f;
 8005978:	233f      	movs	r3, #63	@ 0x3f
 800597a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800597c:	2392      	movs	r3, #146	@ 0x92
 800597e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005980:	1dfb      	adds	r3, r7, #7
 8005982:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005984:	2301      	movs	r3, #1
 8005986:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005988:	f107 0308 	add.w	r3, r7, #8
 800598c:	2100      	movs	r1, #0
 800598e:	4618      	mov	r0, r3
 8005990:	f000 ffec 	bl	800696c <hci_send_req>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	da01      	bge.n	800599e <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800599a:	23ff      	movs	r3, #255	@ 0xff
 800599c:	e000      	b.n	80059a0 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800599e:	79fb      	ldrb	r3, [r7, #7]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3720      	adds	r7, #32
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b0cc      	sub	sp, #304	@ 0x130
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4602      	mov	r2, r0
 80059b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80059b4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80059b8:	801a      	strh	r2, [r3, #0]
 80059ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80059be:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80059c2:	460a      	mov	r2, r1
 80059c4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80059c6:	f107 0310 	add.w	r3, r7, #16
 80059ca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80059ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80059d2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80059d6:	2200      	movs	r2, #0
 80059d8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80059da:	2300      	movs	r3, #0
 80059dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80059e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80059e4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80059e8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80059ec:	8812      	ldrh	r2, [r2, #0]
 80059ee:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80059f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80059f4:	3302      	adds	r3, #2
 80059f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80059fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80059fe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005a02:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005a06:	7812      	ldrb	r2, [r2, #0]
 8005a08:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005a0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a0e:	3301      	adds	r3, #1
 8005a10:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005a14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005a18:	2218      	movs	r2, #24
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 fd1c 	bl	800645a <Osal_MemSet>
  rq.ogf = 0x3f;
 8005a22:	233f      	movs	r3, #63	@ 0x3f
 8005a24:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8005a28:	23a5      	movs	r3, #165	@ 0xa5
 8005a2a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005a2e:	f107 0310 	add.w	r3, r7, #16
 8005a32:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005a36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a3a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005a3e:	f107 030f 	add.w	r3, r7, #15
 8005a42:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005a46:	2301      	movs	r3, #1
 8005a48:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005a4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005a50:	2100      	movs	r1, #0
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 ff8a 	bl	800696c <hci_send_req>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	da01      	bge.n	8005a62 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8005a5e:	23ff      	movs	r3, #255	@ 0xff
 8005a60:	e004      	b.n	8005a6c <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8005a62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a66:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005a6a:	781b      	ldrb	r3, [r3, #0]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b088      	sub	sp, #32
 8005a7a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005a80:	f107 0308 	add.w	r3, r7, #8
 8005a84:	2218      	movs	r2, #24
 8005a86:	2100      	movs	r1, #0
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f000 fce6 	bl	800645a <Osal_MemSet>
  rq.ogf = 0x3f;
 8005a8e:	233f      	movs	r3, #63	@ 0x3f
 8005a90:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8005a92:	f240 1301 	movw	r3, #257	@ 0x101
 8005a96:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005a98:	1dfb      	adds	r3, r7, #7
 8005a9a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005aa0:	f107 0308 	add.w	r3, r7, #8
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 ff60 	bl	800696c <hci_send_req>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	da01      	bge.n	8005ab6 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8005ab2:	23ff      	movs	r3, #255	@ 0xff
 8005ab4:	e000      	b.n	8005ab8 <aci_gatt_init+0x42>
  return status;
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3720      	adds	r7, #32
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8005ac0:	b590      	push	{r4, r7, lr}
 8005ac2:	b0cf      	sub	sp, #316	@ 0x13c
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8005acc:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8005ad0:	6001      	str	r1, [r0, #0]
 8005ad2:	4610      	mov	r0, r2
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005ada:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005ade:	4622      	mov	r2, r4
 8005ae0:	701a      	strb	r2, [r3, #0]
 8005ae2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005ae6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8005aea:	4602      	mov	r2, r0
 8005aec:	701a      	strb	r2, [r3, #0]
 8005aee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005af2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005af6:	460a      	mov	r2, r1
 8005af8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8005afa:	f107 0310 	add.w	r3, r7, #16
 8005afe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8005b02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005b06:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d00a      	beq.n	8005b26 <aci_gatt_add_service+0x66>
 8005b10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005b14:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d101      	bne.n	8005b22 <aci_gatt_add_service+0x62>
 8005b1e:	2311      	movs	r3, #17
 8005b20:	e002      	b.n	8005b28 <aci_gatt_add_service+0x68>
 8005b22:	2301      	movs	r3, #1
 8005b24:	e000      	b.n	8005b28 <aci_gatt_add_service+0x68>
 8005b26:	2303      	movs	r3, #3
 8005b28:	f107 0210 	add.w	r2, r7, #16
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005b32:	f107 030c 	add.w	r3, r7, #12
 8005b36:	2203      	movs	r2, #3
 8005b38:	2100      	movs	r1, #0
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 fc8d 	bl	800645a <Osal_MemSet>
  int index_input = 0;
 8005b40:	2300      	movs	r3, #0
 8005b42:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8005b46:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005b4a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005b4e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8005b52:	7812      	ldrb	r2, [r2, #0]
 8005b54:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005b56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8005b60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005b64:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d002      	beq.n	8005b74 <aci_gatt_add_service+0xb4>
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d004      	beq.n	8005b7c <aci_gatt_add_service+0xbc>
 8005b72:	e007      	b.n	8005b84 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8005b74:	2302      	movs	r3, #2
 8005b76:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8005b7a:	e005      	b.n	8005b88 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8005b7c:	2310      	movs	r3, #16
 8005b7e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8005b82:	e001      	b.n	8005b88 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8005b84:	2397      	movs	r3, #151	@ 0x97
 8005b86:	e06c      	b.n	8005c62 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8005b88:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005b8c:	1c58      	adds	r0, r3, #1
 8005b8e:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8005b92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005b96:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005b9a:	6819      	ldr	r1, [r3, #0]
 8005b9c:	f000 fc4d 	bl	800643a <Osal_MemCpy>
    index_input += size;
 8005ba0:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8005ba4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005ba8:	4413      	add	r3, r2
 8005baa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8005bae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005bb2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005bb6:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8005bba:	7812      	ldrb	r2, [r2, #0]
 8005bbc:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005bbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8005bc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005bcc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005bd0:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8005bd4:	7812      	ldrb	r2, [r2, #0]
 8005bd6:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8005bd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005bdc:	3301      	adds	r3, #1
 8005bde:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005be2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005be6:	2218      	movs	r2, #24
 8005be8:	2100      	movs	r1, #0
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 fc35 	bl	800645a <Osal_MemSet>
  rq.ogf = 0x3f;
 8005bf0:	233f      	movs	r3, #63	@ 0x3f
 8005bf2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8005bf6:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005bfa:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005bfe:	f107 0310 	add.w	r3, r7, #16
 8005c02:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005c06:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c0a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8005c0e:	f107 030c 	add.w	r3, r7, #12
 8005c12:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8005c16:	2303      	movs	r3, #3
 8005c18:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005c1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005c20:	2100      	movs	r1, #0
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 fea2 	bl	800696c <hci_send_req>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	da01      	bge.n	8005c32 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8005c2e:	23ff      	movs	r3, #255	@ 0xff
 8005c30:	e017      	b.n	8005c62 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8005c32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005c36:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d005      	beq.n	8005c4c <aci_gatt_add_service+0x18c>
    return resp.Status;
 8005c40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005c44:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	e00a      	b.n	8005c62 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8005c4c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005c50:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005c54:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8005c5e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd90      	pop	{r4, r7, pc}

08005c6c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8005c6c:	b590      	push	{r4, r7, lr}
 8005c6e:	b0d1      	sub	sp, #324	@ 0x144
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	4604      	mov	r4, r0
 8005c74:	4608      	mov	r0, r1
 8005c76:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8005c7a:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8005c7e:	600a      	str	r2, [r1, #0]
 8005c80:	4619      	mov	r1, r3
 8005c82:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005c86:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8005c8a:	4622      	mov	r2, r4
 8005c8c:	801a      	strh	r2, [r3, #0]
 8005c8e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005c92:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005c96:	4602      	mov	r2, r0
 8005c98:	701a      	strb	r2, [r3, #0]
 8005c9a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005c9e:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8005ca2:	460a      	mov	r2, r1
 8005ca4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8005ca6:	f107 0318 	add.w	r3, r7, #24
 8005caa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8005cae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005cb2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d00a      	beq.n	8005cd2 <aci_gatt_add_char+0x66>
 8005cbc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005cc0:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d101      	bne.n	8005cce <aci_gatt_add_char+0x62>
 8005cca:	2313      	movs	r3, #19
 8005ccc:	e002      	b.n	8005cd4 <aci_gatt_add_char+0x68>
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e000      	b.n	8005cd4 <aci_gatt_add_char+0x68>
 8005cd2:	2305      	movs	r3, #5
 8005cd4:	f107 0218 	add.w	r2, r7, #24
 8005cd8:	4413      	add	r3, r2
 8005cda:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005cde:	f107 0314 	add.w	r3, r7, #20
 8005ce2:	2203      	movs	r2, #3
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 fbb7 	bl	800645a <Osal_MemSet>
  int index_input = 0;
 8005cec:	2300      	movs	r3, #0
 8005cee:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8005cf2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005cf6:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005cfa:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8005cfe:	8812      	ldrh	r2, [r2, #0]
 8005d00:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005d02:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005d06:	3302      	adds	r3, #2
 8005d08:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8005d0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005d10:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005d14:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8005d18:	7812      	ldrb	r2, [r2, #0]
 8005d1a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005d1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005d20:	3301      	adds	r3, #1
 8005d22:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8005d26:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005d2a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d002      	beq.n	8005d3a <aci_gatt_add_char+0xce>
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d004      	beq.n	8005d42 <aci_gatt_add_char+0xd6>
 8005d38:	e007      	b.n	8005d4a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8005d40:	e005      	b.n	8005d4e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8005d42:	2310      	movs	r3, #16
 8005d44:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8005d48:	e001      	b.n	8005d4e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8005d4a:	2397      	movs	r3, #151	@ 0x97
 8005d4c:	e091      	b.n	8005e72 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8005d4e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005d52:	1cd8      	adds	r0, r3, #3
 8005d54:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8005d58:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005d5c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005d60:	6819      	ldr	r1, [r3, #0]
 8005d62:	f000 fb6a 	bl	800643a <Osal_MemCpy>
    index_input += size;
 8005d66:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8005d6a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8005d6e:	4413      	add	r3, r2
 8005d70:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8005d74:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005d78:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005d7c:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8005d80:	8812      	ldrh	r2, [r2, #0]
 8005d82:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005d84:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005d88:	3302      	adds	r3, #2
 8005d8a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8005d8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005d92:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8005d96:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8005d98:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8005da2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005da6:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8005daa:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8005dac:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005db0:	3301      	adds	r3, #1
 8005db2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8005db6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005dba:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8005dbe:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8005dc0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8005dca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005dce:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8005dd2:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8005dd4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005dd8:	3301      	adds	r3, #1
 8005dda:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8005dde:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005de2:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8005de6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8005de8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005dec:	3301      	adds	r3, #1
 8005dee:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005df2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005df6:	2218      	movs	r2, #24
 8005df8:	2100      	movs	r1, #0
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 fb2d 	bl	800645a <Osal_MemSet>
  rq.ogf = 0x3f;
 8005e00:	233f      	movs	r3, #63	@ 0x3f
 8005e02:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8005e06:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005e0a:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8005e0e:	f107 0318 	add.w	r3, r7, #24
 8005e12:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8005e16:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005e1a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8005e1e:	f107 0314 	add.w	r3, r7, #20
 8005e22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8005e26:	2303      	movs	r3, #3
 8005e28:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005e2c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005e30:	2100      	movs	r1, #0
 8005e32:	4618      	mov	r0, r3
 8005e34:	f000 fd9a 	bl	800696c <hci_send_req>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	da01      	bge.n	8005e42 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8005e3e:	23ff      	movs	r3, #255	@ 0xff
 8005e40:	e017      	b.n	8005e72 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8005e42:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005e46:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d005      	beq.n	8005e5c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8005e50:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005e54:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	e00a      	b.n	8005e72 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8005e5c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005e60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005e64:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8005e6e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd90      	pop	{r4, r7, pc}

08005e7c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8005e7c:	b5b0      	push	{r4, r5, r7, lr}
 8005e7e:	b0cc      	sub	sp, #304	@ 0x130
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	4605      	mov	r5, r0
 8005e84:	460c      	mov	r4, r1
 8005e86:	4610      	mov	r0, r2
 8005e88:	4619      	mov	r1, r3
 8005e8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005e8e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005e92:	462a      	mov	r2, r5
 8005e94:	801a      	strh	r2, [r3, #0]
 8005e96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005e9a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005e9e:	4622      	mov	r2, r4
 8005ea0:	801a      	strh	r2, [r3, #0]
 8005ea2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ea6:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8005eaa:	4602      	mov	r2, r0
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005eb2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8005eb6:	460a      	mov	r2, r1
 8005eb8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8005eba:	f107 0310 	add.w	r3, r7, #16
 8005ebe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005ec2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ec6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005eca:	2200      	movs	r2, #0
 8005ecc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8005ed4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005ed8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005edc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005ee0:	8812      	ldrh	r2, [r2, #0]
 8005ee2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005ee4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005ee8:	3302      	adds	r3, #2
 8005eea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8005eee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005ef2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005ef6:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8005efa:	8812      	ldrh	r2, [r2, #0]
 8005efc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005efe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f02:	3302      	adds	r3, #2
 8005f04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8005f08:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005f0c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005f10:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8005f14:	7812      	ldrb	r2, [r2, #0]
 8005f16:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005f18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8005f22:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005f26:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005f2a:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8005f2e:	7812      	ldrb	r2, [r2, #0]
 8005f30:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005f32:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f36:	3301      	adds	r3, #1
 8005f38:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8005f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005f40:	1d98      	adds	r0, r3, #6
 8005f42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f46:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8005f52:	f000 fa72 	bl	800643a <Osal_MemCpy>
  index_input += Char_Value_Length;
 8005f56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f5a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005f64:	4413      	add	r3, r2
 8005f66:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005f6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005f6e:	2218      	movs	r2, #24
 8005f70:	2100      	movs	r1, #0
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 fa71 	bl	800645a <Osal_MemSet>
  rq.ogf = 0x3f;
 8005f78:	233f      	movs	r3, #63	@ 0x3f
 8005f7a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8005f7e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8005f82:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005f86:	f107 0310 	add.w	r3, r7, #16
 8005f8a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005f8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f92:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005f96:	f107 030f 	add.w	r3, r7, #15
 8005f9a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005fa4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005fa8:	2100      	movs	r1, #0
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 fcde 	bl	800696c <hci_send_req>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	da01      	bge.n	8005fba <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8005fb6:	23ff      	movs	r3, #255	@ 0xff
 8005fb8:	e004      	b.n	8005fc4 <aci_gatt_update_char_value+0x148>
  return status;
 8005fba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005fbe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005fc2:	781b      	ldrb	r3, [r3, #0]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bdb0      	pop	{r4, r5, r7, pc}

08005fce <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b0cc      	sub	sp, #304	@ 0x130
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005fda:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005fde:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8005fe0:	f107 0310 	add.w	r3, r7, #16
 8005fe4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005fe8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005fec:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8005ffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005ffe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006002:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006006:	8812      	ldrh	r2, [r2, #0]
 8006008:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800600a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800600e:	3302      	adds	r3, #2
 8006010:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006014:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006018:	2218      	movs	r2, #24
 800601a:	2100      	movs	r1, #0
 800601c:	4618      	mov	r0, r3
 800601e:	f000 fa1c 	bl	800645a <Osal_MemSet>
  rq.ogf = 0x3f;
 8006022:	233f      	movs	r3, #63	@ 0x3f
 8006024:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8006028:	f240 1325 	movw	r3, #293	@ 0x125
 800602c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006030:	f107 0310 	add.w	r3, r7, #16
 8006034:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006038:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800603c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006040:	f107 030f 	add.w	r3, r7, #15
 8006044:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006048:	2301      	movs	r3, #1
 800604a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800604e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006052:	2100      	movs	r1, #0
 8006054:	4618      	mov	r0, r3
 8006056:	f000 fc89 	bl	800696c <hci_send_req>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	da01      	bge.n	8006064 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8006060:	23ff      	movs	r3, #255	@ 0xff
 8006062:	e004      	b.n	800606e <aci_gatt_confirm_indication+0xa0>
  return status;
 8006064:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006068:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800606c:	781b      	ldrb	r3, [r3, #0]
}
 800606e:	4618      	mov	r0, r3
 8006070:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b0cc      	sub	sp, #304	@ 0x130
 800607c:	af00      	add	r7, sp, #0
 800607e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006082:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006086:	601a      	str	r2, [r3, #0]
 8006088:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800608c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006090:	4602      	mov	r2, r0
 8006092:	701a      	strb	r2, [r3, #0]
 8006094:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006098:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800609c:	460a      	mov	r2, r1
 800609e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80060a0:	f107 0310 	add.w	r3, r7, #16
 80060a4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80060a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060ac:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80060b0:	2200      	movs	r2, #0
 80060b2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80060b4:	2300      	movs	r3, #0
 80060b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 80060ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80060be:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80060c2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80060c6:	7812      	ldrb	r2, [r2, #0]
 80060c8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80060ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80060ce:	3301      	adds	r3, #1
 80060d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 80060d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80060d8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80060dc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80060e0:	7812      	ldrb	r2, [r2, #0]
 80060e2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80060e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80060e8:	3301      	adds	r3, #1
 80060ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80060ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80060f2:	1c98      	adds	r0, r3, #2
 80060f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060f8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80060fc:	781a      	ldrb	r2, [r3, #0]
 80060fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006102:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006106:	6819      	ldr	r1, [r3, #0]
 8006108:	f000 f997 	bl	800643a <Osal_MemCpy>
  index_input += Length;
 800610c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006110:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800611a:	4413      	add	r3, r2
 800611c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006120:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006124:	2218      	movs	r2, #24
 8006126:	2100      	movs	r1, #0
 8006128:	4618      	mov	r0, r3
 800612a:	f000 f996 	bl	800645a <Osal_MemSet>
  rq.ogf = 0x3f;
 800612e:	233f      	movs	r3, #63	@ 0x3f
 8006130:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8006134:	230c      	movs	r3, #12
 8006136:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800613a:	f107 0310 	add.w	r3, r7, #16
 800613e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006142:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006146:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800614a:	f107 030f 	add.w	r3, r7, #15
 800614e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006152:	2301      	movs	r3, #1
 8006154:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006158:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800615c:	2100      	movs	r1, #0
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fc04 	bl	800696c <hci_send_req>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	da01      	bge.n	800616e <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800616a:	23ff      	movs	r3, #255	@ 0xff
 800616c:	e004      	b.n	8006178 <aci_hal_write_config_data+0x100>
  return status;
 800616e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006172:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006176:	781b      	ldrb	r3, [r3, #0]
}
 8006178:	4618      	mov	r0, r3
 800617a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b0cc      	sub	sp, #304	@ 0x130
 8006186:	af00      	add	r7, sp, #0
 8006188:	4602      	mov	r2, r0
 800618a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800618e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006192:	701a      	strb	r2, [r3, #0]
 8006194:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006198:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800619c:	460a      	mov	r2, r1
 800619e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80061a0:	f107 0310 	add.w	r3, r7, #16
 80061a4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80061a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80061ac:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80061b0:	2200      	movs	r2, #0
 80061b2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80061b4:	2300      	movs	r3, #0
 80061b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 80061ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80061be:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80061c2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80061c6:	7812      	ldrb	r2, [r2, #0]
 80061c8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80061ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80061ce:	3301      	adds	r3, #1
 80061d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 80061d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80061d8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80061dc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80061e0:	7812      	ldrb	r2, [r2, #0]
 80061e2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80061e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80061e8:	3301      	adds	r3, #1
 80061ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80061ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80061f2:	2218      	movs	r2, #24
 80061f4:	2100      	movs	r1, #0
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 f92f 	bl	800645a <Osal_MemSet>
  rq.ogf = 0x3f;
 80061fc:	233f      	movs	r3, #63	@ 0x3f
 80061fe:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8006202:	230f      	movs	r3, #15
 8006204:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006208:	f107 0310 	add.w	r3, r7, #16
 800620c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006210:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006214:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006218:	f107 030f 	add.w	r3, r7, #15
 800621c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006220:	2301      	movs	r3, #1
 8006222:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006226:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800622a:	2100      	movs	r1, #0
 800622c:	4618      	mov	r0, r3
 800622e:	f000 fb9d 	bl	800696c <hci_send_req>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	da01      	bge.n	800623c <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8006238:	23ff      	movs	r3, #255	@ 0xff
 800623a:	e004      	b.n	8006246 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800623c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006240:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006244:	781b      	ldrb	r3, [r3, #0]
}
 8006246:	4618      	mov	r0, r3
 8006248:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b0cc      	sub	sp, #304	@ 0x130
 8006254:	af00      	add	r7, sp, #0
 8006256:	4602      	mov	r2, r0
 8006258:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800625c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006260:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8006262:	f107 0310 	add.w	r3, r7, #16
 8006266:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800626a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800626e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006272:	2200      	movs	r2, #0
 8006274:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006276:	2300      	movs	r3, #0
 8006278:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800627c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006280:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006284:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006288:	8812      	ldrh	r2, [r2, #0]
 800628a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800628c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006290:	3302      	adds	r3, #2
 8006292:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006296:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800629a:	2218      	movs	r2, #24
 800629c:	2100      	movs	r1, #0
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 f8db 	bl	800645a <Osal_MemSet>
  rq.ogf = 0x3f;
 80062a4:	233f      	movs	r3, #63	@ 0x3f
 80062a6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 80062aa:	2318      	movs	r3, #24
 80062ac:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80062b0:	f107 0310 	add.w	r3, r7, #16
 80062b4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80062b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80062bc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80062c0:	f107 030f 	add.w	r3, r7, #15
 80062c4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80062c8:	2301      	movs	r3, #1
 80062ca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80062ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80062d2:	2100      	movs	r1, #0
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 fb49 	bl	800696c <hci_send_req>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	da01      	bge.n	80062e4 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80062e0:	23ff      	movs	r3, #255	@ 0xff
 80062e2:	e004      	b.n	80062ee <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80062e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80062e8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80062ec:	781b      	ldrb	r3, [r3, #0]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b088      	sub	sp, #32
 80062fc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80062fe:	2300      	movs	r3, #0
 8006300:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006302:	f107 0308 	add.w	r3, r7, #8
 8006306:	2218      	movs	r2, #24
 8006308:	2100      	movs	r1, #0
 800630a:	4618      	mov	r0, r3
 800630c:	f000 f8a5 	bl	800645a <Osal_MemSet>
  rq.ogf = 0x03;
 8006310:	2303      	movs	r3, #3
 8006312:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8006314:	2303      	movs	r3, #3
 8006316:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006318:	1dfb      	adds	r3, r7, #7
 800631a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800631c:	2301      	movs	r3, #1
 800631e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006320:	f107 0308 	add.w	r3, r7, #8
 8006324:	2100      	movs	r1, #0
 8006326:	4618      	mov	r0, r3
 8006328:	f000 fb20 	bl	800696c <hci_send_req>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	da01      	bge.n	8006336 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006332:	23ff      	movs	r3, #255	@ 0xff
 8006334:	e000      	b.n	8006338 <hci_reset+0x40>
  return status;
 8006336:	79fb      	ldrb	r3, [r7, #7]
}
 8006338:	4618      	mov	r0, r3
 800633a:	3720      	adds	r7, #32
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8006340:	b590      	push	{r4, r7, lr}
 8006342:	b0cd      	sub	sp, #308	@ 0x134
 8006344:	af00      	add	r7, sp, #0
 8006346:	4604      	mov	r4, r0
 8006348:	4608      	mov	r0, r1
 800634a:	4611      	mov	r1, r2
 800634c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006350:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006354:	4622      	mov	r2, r4
 8006356:	701a      	strb	r2, [r3, #0]
 8006358:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800635c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006360:	4602      	mov	r2, r0
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006368:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800636c:	460a      	mov	r2, r1
 800636e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8006370:	f107 0310 	add.w	r3, r7, #16
 8006374:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006378:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800637c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006380:	2200      	movs	r2, #0
 8006382:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006384:	2300      	movs	r3, #0
 8006386:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800638a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800638e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006392:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006396:	7812      	ldrb	r2, [r2, #0]
 8006398:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800639a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800639e:	3301      	adds	r3, #1
 80063a0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 80063a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80063a8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80063ac:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80063b0:	7812      	ldrb	r2, [r2, #0]
 80063b2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80063b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80063b8:	3301      	adds	r3, #1
 80063ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 80063be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80063c2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80063c6:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80063ca:	7812      	ldrb	r2, [r2, #0]
 80063cc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80063ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80063d2:	3301      	adds	r3, #1
 80063d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80063d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80063dc:	2218      	movs	r2, #24
 80063de:	2100      	movs	r1, #0
 80063e0:	4618      	mov	r0, r3
 80063e2:	f000 f83a 	bl	800645a <Osal_MemSet>
  rq.ogf = 0x08;
 80063e6:	2308      	movs	r3, #8
 80063e8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 80063ec:	2331      	movs	r3, #49	@ 0x31
 80063ee:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80063f2:	f107 0310 	add.w	r3, r7, #16
 80063f6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80063fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80063fe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006402:	f107 030f 	add.w	r3, r7, #15
 8006406:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800640a:	2301      	movs	r3, #1
 800640c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006410:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006414:	2100      	movs	r1, #0
 8006416:	4618      	mov	r0, r3
 8006418:	f000 faa8 	bl	800696c <hci_send_req>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	da01      	bge.n	8006426 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8006422:	23ff      	movs	r3, #255	@ 0xff
 8006424:	e004      	b.n	8006430 <hci_le_set_default_phy+0xf0>
  return status;
 8006426:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800642a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800642e:	781b      	ldrb	r3, [r3, #0]
}
 8006430:	4618      	mov	r0, r3
 8006432:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8006436:	46bd      	mov	sp, r7
 8006438:	bd90      	pop	{r4, r7, pc}

0800643a <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b084      	sub	sp, #16
 800643e:	af00      	add	r7, sp, #0
 8006440:	60f8      	str	r0, [r7, #12]
 8006442:	60b9      	str	r1, [r7, #8]
 8006444:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	68b9      	ldr	r1, [r7, #8]
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f002 fbfb 	bl	8008c46 <memcpy>
 8006450:	4603      	mov	r3, r0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b084      	sub	sp, #16
 800645e:	af00      	add	r7, sp, #0
 8006460:	60f8      	str	r0, [r7, #12]
 8006462:	60b9      	str	r1, [r7, #8]
 8006464:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	68b9      	ldr	r1, [r7, #8]
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f002 fb70 	bl	8008b50 <memset>
 8006470:	4603      	mov	r3, r0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800647a:	b480      	push	{r7}
 800647c:	af00      	add	r7, sp, #0
  return;
 800647e:	bf00      	nop
}
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8006488:	b480      	push	{r7}
 800648a:	af00      	add	r7, sp, #0
  return;
 800648c:	bf00      	nop
}
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8006496:	b480      	push	{r7}
 8006498:	af00      	add	r7, sp, #0
  return;
 800649a:	bf00      	nop
}
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80064a4:	b480      	push	{r7}
 80064a6:	af00      	add	r7, sp, #0
  return;
 80064a8:	bf00      	nop
}
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80064b2:	b480      	push	{r7}
 80064b4:	af00      	add	r7, sp, #0
  return;
 80064b6:	bf00      	nop
}
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80064c0:	b480      	push	{r7}
 80064c2:	af00      	add	r7, sp, #0
  return;
 80064c4:	bf00      	nop
}
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80064ce:	b480      	push	{r7}
 80064d0:	af00      	add	r7, sp, #0
  return;
 80064d2:	bf00      	nop
}
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80064dc:	b480      	push	{r7}
 80064de:	af00      	add	r7, sp, #0
  return;
 80064e0:	bf00      	nop
}
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80064ea:	b480      	push	{r7}
 80064ec:	af00      	add	r7, sp, #0
  return;
 80064ee:	bf00      	nop
}
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80064f8:	b480      	push	{r7}
 80064fa:	af00      	add	r7, sp, #0
  return;
 80064fc:	bf00      	nop
}
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8006506:	b480      	push	{r7}
 8006508:	af00      	add	r7, sp, #0
  return;
 800650a:	bf00      	nop
}
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8006514:	b480      	push	{r7}
 8006516:	af00      	add	r7, sp, #0
  return;
 8006518:	bf00      	nop
}
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8006522:	b480      	push	{r7}
 8006524:	af00      	add	r7, sp, #0
  return;
 8006526:	bf00      	nop
}
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8006530:	b480      	push	{r7}
 8006532:	af00      	add	r7, sp, #0
  return;
 8006534:	bf00      	nop
}
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800653e:	b480      	push	{r7}
 8006540:	af00      	add	r7, sp, #0
  return;
 8006542:	bf00      	nop
}
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
  return;
 8006550:	bf00      	nop
}
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800655a:	b480      	push	{r7}
 800655c:	af00      	add	r7, sp, #0
  return;
 800655e:	bf00      	nop
}
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800656c:	4b04      	ldr	r3, [pc, #16]	@ (8006580 <SVCCTL_Init+0x18>)
 800656e:	2200      	movs	r2, #0
 8006570:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8006572:	4b04      	ldr	r3, [pc, #16]	@ (8006584 <SVCCTL_Init+0x1c>)
 8006574:	2200      	movs	r2, #0
 8006576:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8006578:	f000 f806 	bl	8006588 <SVCCTL_SvcInit>

  return;
 800657c:	bf00      	nop
}
 800657e:	bd80      	pop	{r7, pc}
 8006580:	20000088 	.word	0x20000088
 8006584:	200000a8 	.word	0x200000a8

08006588 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	af00      	add	r7, sp, #0
  BAS_Init();
 800658c:	f7ff ff75 	bl	800647a <BAS_Init>

  BLS_Init();
 8006590:	f7ff ff7a 	bl	8006488 <BLS_Init>

  CRS_STM_Init();
 8006594:	f7ff ff7f 	bl	8006496 <CRS_STM_Init>

  DIS_Init();
 8006598:	f7ff ff84 	bl	80064a4 <DIS_Init>

  EDS_STM_Init();
 800659c:	f7ff ff89 	bl	80064b2 <EDS_STM_Init>

  HIDS_Init();
 80065a0:	f7ff ff8e 	bl	80064c0 <HIDS_Init>

  HRS_Init();
 80065a4:	f7ff ff93 	bl	80064ce <HRS_Init>

  HTS_Init();
 80065a8:	f7ff ff98 	bl	80064dc <HTS_Init>

  IAS_Init();
 80065ac:	f7ff ff9d 	bl	80064ea <IAS_Init>

  LLS_Init();
 80065b0:	f7ff ffa2 	bl	80064f8 <LLS_Init>

  TPS_Init();
 80065b4:	f7ff ffa7 	bl	8006506 <TPS_Init>

  MOTENV_STM_Init();
 80065b8:	f7ff ffac 	bl	8006514 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80065bc:	f7ff ffb1 	bl	8006522 <P2PS_STM_Init>

  ZDD_STM_Init();
 80065c0:	f7ff ffb6 	bl	8006530 <ZDD_STM_Init>

  OTAS_STM_Init();
 80065c4:	f7ff ffbb 	bl	800653e <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80065c8:	f7ff ffc7 	bl	800655a <BVOPUS_STM_Init>

  MESH_Init();
 80065cc:	f7ff ffbe 	bl	800654c <MESH_Init>

  SVCCTL_InitCustomSvc();
 80065d0:	f001 fb66 	bl	8007ca0 <SVCCTL_InitCustomSvc>
  
  return;
 80065d4:	bf00      	nop
}
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80065e0:	4b09      	ldr	r3, [pc, #36]	@ (8006608 <SVCCTL_RegisterSvcHandler+0x30>)
 80065e2:	7f1b      	ldrb	r3, [r3, #28]
 80065e4:	4619      	mov	r1, r3
 80065e6:	4a08      	ldr	r2, [pc, #32]	@ (8006608 <SVCCTL_RegisterSvcHandler+0x30>)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80065ee:	4b06      	ldr	r3, [pc, #24]	@ (8006608 <SVCCTL_RegisterSvcHandler+0x30>)
 80065f0:	7f1b      	ldrb	r3, [r3, #28]
 80065f2:	3301      	adds	r3, #1
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	4b04      	ldr	r3, [pc, #16]	@ (8006608 <SVCCTL_RegisterSvcHandler+0x30>)
 80065f8:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80065fa:	bf00      	nop
}
 80065fc:	370c      	adds	r7, #12
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	20000088 	.word	0x20000088

0800660c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	3301      	adds	r3, #1
 8006618:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800661a:	2300      	movs	r3, #0
 800661c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	2bff      	cmp	r3, #255	@ 0xff
 8006624:	d125      	bne.n	8006672 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	3302      	adds	r3, #2
 800662a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	b29b      	uxth	r3, r3
 8006632:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006636:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800663a:	d118      	bne.n	800666e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800663c:	2300      	movs	r3, #0
 800663e:	757b      	strb	r3, [r7, #21]
 8006640:	e00d      	b.n	800665e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8006642:	7d7b      	ldrb	r3, [r7, #21]
 8006644:	4a1a      	ldr	r2, [pc, #104]	@ (80066b0 <SVCCTL_UserEvtRx+0xa4>)
 8006646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	4798      	blx	r3
 800664e:	4603      	mov	r3, r0
 8006650:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8006652:	7dfb      	ldrb	r3, [r7, #23]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d108      	bne.n	800666a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006658:	7d7b      	ldrb	r3, [r7, #21]
 800665a:	3301      	adds	r3, #1
 800665c:	757b      	strb	r3, [r7, #21]
 800665e:	4b14      	ldr	r3, [pc, #80]	@ (80066b0 <SVCCTL_UserEvtRx+0xa4>)
 8006660:	7f1b      	ldrb	r3, [r3, #28]
 8006662:	7d7a      	ldrb	r2, [r7, #21]
 8006664:	429a      	cmp	r2, r3
 8006666:	d3ec      	bcc.n	8006642 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8006668:	e002      	b.n	8006670 <SVCCTL_UserEvtRx+0x64>
              break;
 800666a:	bf00      	nop
          break;
 800666c:	e000      	b.n	8006670 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800666e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8006670:	e000      	b.n	8006674 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8006672:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8006674:	7dfb      	ldrb	r3, [r7, #23]
 8006676:	2b02      	cmp	r3, #2
 8006678:	d00f      	beq.n	800669a <SVCCTL_UserEvtRx+0x8e>
 800667a:	2b02      	cmp	r3, #2
 800667c:	dc10      	bgt.n	80066a0 <SVCCTL_UserEvtRx+0x94>
 800667e:	2b00      	cmp	r3, #0
 8006680:	d002      	beq.n	8006688 <SVCCTL_UserEvtRx+0x7c>
 8006682:	2b01      	cmp	r3, #1
 8006684:	d006      	beq.n	8006694 <SVCCTL_UserEvtRx+0x88>
 8006686:	e00b      	b.n	80066a0 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 ff8f 	bl	80075ac <SVCCTL_App_Notification>
 800668e:	4603      	mov	r3, r0
 8006690:	75bb      	strb	r3, [r7, #22]
      break;
 8006692:	e008      	b.n	80066a6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006694:	2301      	movs	r3, #1
 8006696:	75bb      	strb	r3, [r7, #22]
      break;
 8006698:	e005      	b.n	80066a6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800669a:	2300      	movs	r3, #0
 800669c:	75bb      	strb	r3, [r7, #22]
      break;
 800669e:	e002      	b.n	80066a6 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80066a0:	2301      	movs	r3, #1
 80066a2:	75bb      	strb	r3, [r7, #22]
      break;
 80066a4:	bf00      	nop
  }

  return (return_status);
 80066a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3718      	adds	r7, #24
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	20000088 	.word	0x20000088

080066b4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b088      	sub	sp, #32
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80066bc:	f107 030c 	add.w	r3, r7, #12
 80066c0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	212e      	movs	r1, #46	@ 0x2e
 80066cc:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 80066d0:	f000 fae8 	bl	8006ca4 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	330b      	adds	r3, #11
 80066d8:	78db      	ldrb	r3, [r3, #3]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3720      	adds	r7, #32
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b088      	sub	sp, #32
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80066ea:	f107 030c 	add.w	r3, r7, #12
 80066ee:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	210f      	movs	r1, #15
 80066fa:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 80066fe:	f000 fad1 	bl	8006ca4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	330b      	adds	r3, #11
 8006706:	78db      	ldrb	r3, [r3, #3]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3720      	adds	r7, #32
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006718:	f107 030c 	add.w	r3, r7, #12
 800671c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	2110      	movs	r1, #16
 8006724:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8006728:	f000 fabc 	bl	8006ca4 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	330b      	adds	r3, #11
 8006730:	78db      	ldrb	r3, [r3, #3]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3720      	adds	r7, #32
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
	...

0800673c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800673c:	b480      	push	{r7}
 800673e:	b08b      	sub	sp, #44	@ 0x2c
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8006744:	2300      	movs	r3, #0
 8006746:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8006748:	2300      	movs	r3, #0
 800674a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800674c:	2300      	movs	r3, #0
 800674e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8006750:	2300      	movs	r3, #0
 8006752:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8006754:	2300      	movs	r3, #0
 8006756:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8006758:	2300      	movs	r3, #0
 800675a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800675c:	2300      	movs	r3, #0
 800675e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8006760:	2300      	movs	r3, #0
 8006762:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8006764:	4b4a      	ldr	r3, [pc, #296]	@ (8006890 <SHCI_GetWirelessFwInfo+0x154>)
 8006766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006768:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800676c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006776:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a44      	ldr	r2, [pc, #272]	@ (8006894 <SHCI_GetWirelessFwInfo+0x158>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d10f      	bne.n	80067a8 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	617b      	str	r3, [r7, #20]
 80067a6:	e01a      	b.n	80067de <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80067b0:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80067b4:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	695b      	ldr	r3, [r3, #20]
 80067c4:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80067de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e0:	0e1b      	lsrs	r3, r3, #24
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80067e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ea:	0c1b      	lsrs	r3, r3, #16
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80067f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f4:	0a1b      	lsrs	r3, r3, #8
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80067fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fe:	091b      	lsrs	r3, r3, #4
 8006800:	b2db      	uxtb	r3, r3
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	b2da      	uxtb	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800680c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680e:	b2db      	uxtb	r3, r3
 8006810:	f003 030f 	and.w	r3, r3, #15
 8006814:	b2da      	uxtb	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800681a:	6a3b      	ldr	r3, [r7, #32]
 800681c:	0e1b      	lsrs	r3, r3, #24
 800681e:	b2da      	uxtb	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	0c1b      	lsrs	r3, r3, #16
 8006828:	b2da      	uxtb	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	0a1b      	lsrs	r3, r3, #8
 8006832:	b2da      	uxtb	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006838:	6a3b      	ldr	r3, [r7, #32]
 800683a:	b2da      	uxtb	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	b2da      	uxtb	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	0e1b      	lsrs	r3, r3, #24
 800684c:	b2da      	uxtb	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	0c1b      	lsrs	r3, r3, #16
 8006856:	b2da      	uxtb	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	0a1b      	lsrs	r3, r3, #8
 8006860:	b2da      	uxtb	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	0e1b      	lsrs	r3, r3, #24
 800686a:	b2da      	uxtb	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	0c1b      	lsrs	r3, r3, #16
 8006874:	b2da      	uxtb	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	b2da      	uxtb	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	372c      	adds	r7, #44	@ 0x2c
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	58004000 	.word	0x58004000
 8006894:	a94656b9 	.word	0xa94656b9

08006898 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	4a08      	ldr	r2, [pc, #32]	@ (80068c8 <hci_init+0x30>)
 80068a8:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80068aa:	4a08      	ldr	r2, [pc, #32]	@ (80068cc <hci_init+0x34>)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80068b0:	4806      	ldr	r0, [pc, #24]	@ (80068cc <hci_init+0x34>)
 80068b2:	f000 f979 	bl	8006ba8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 f8da 	bl	8006a74 <TlInit>

  return;
 80068c0:	bf00      	nop
}
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	200002b4 	.word	0x200002b4
 80068cc:	2000028c 	.word	0x2000028c

080068d0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80068d6:	4822      	ldr	r0, [pc, #136]	@ (8006960 <hci_user_evt_proc+0x90>)
 80068d8:	f000 fd32 	bl	8007340 <LST_is_empty>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d12b      	bne.n	800693a <hci_user_evt_proc+0x6a>
 80068e2:	4b20      	ldr	r3, [pc, #128]	@ (8006964 <hci_user_evt_proc+0x94>)
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d027      	beq.n	800693a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80068ea:	f107 030c 	add.w	r3, r7, #12
 80068ee:	4619      	mov	r1, r3
 80068f0:	481b      	ldr	r0, [pc, #108]	@ (8006960 <hci_user_evt_proc+0x90>)
 80068f2:	f000 fdb4 	bl	800745e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80068f6:	4b1c      	ldr	r3, [pc, #112]	@ (8006968 <hci_user_evt_proc+0x98>)
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00c      	beq.n	8006918 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8006902:	2301      	movs	r3, #1
 8006904:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006906:	4b18      	ldr	r3, [pc, #96]	@ (8006968 <hci_user_evt_proc+0x98>)
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	1d3a      	adds	r2, r7, #4
 800690c:	4610      	mov	r0, r2
 800690e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8006910:	793a      	ldrb	r2, [r7, #4]
 8006912:	4b14      	ldr	r3, [pc, #80]	@ (8006964 <hci_user_evt_proc+0x94>)
 8006914:	701a      	strb	r2, [r3, #0]
 8006916:	e002      	b.n	800691e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006918:	4b12      	ldr	r3, [pc, #72]	@ (8006964 <hci_user_evt_proc+0x94>)
 800691a:	2201      	movs	r2, #1
 800691c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800691e:	4b11      	ldr	r3, [pc, #68]	@ (8006964 <hci_user_evt_proc+0x94>)
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d004      	beq.n	8006930 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	4618      	mov	r0, r3
 800692a:	f000 fc0d 	bl	8007148 <TL_MM_EvtDone>
 800692e:	e004      	b.n	800693a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4619      	mov	r1, r3
 8006934:	480a      	ldr	r0, [pc, #40]	@ (8006960 <hci_user_evt_proc+0x90>)
 8006936:	f000 fd25 	bl	8007384 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800693a:	4809      	ldr	r0, [pc, #36]	@ (8006960 <hci_user_evt_proc+0x90>)
 800693c:	f000 fd00 	bl	8007340 <LST_is_empty>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d107      	bne.n	8006956 <hci_user_evt_proc+0x86>
 8006946:	4b07      	ldr	r3, [pc, #28]	@ (8006964 <hci_user_evt_proc+0x94>)
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d003      	beq.n	8006956 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800694e:	4804      	ldr	r0, [pc, #16]	@ (8006960 <hci_user_evt_proc+0x90>)
 8006950:	f001 f852 	bl	80079f8 <hci_notify_asynch_evt>
  }


  return;
 8006954:	bf00      	nop
 8006956:	bf00      	nop
}
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	200000b0 	.word	0x200000b0
 8006964:	200000bc 	.word	0x200000bc
 8006968:	2000028c 	.word	0x2000028c

0800696c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b088      	sub	sp, #32
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	460b      	mov	r3, r1
 8006976:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8006978:	2000      	movs	r0, #0
 800697a:	f000 f8d1 	bl	8006b20 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800697e:	2300      	movs	r3, #0
 8006980:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	885b      	ldrh	r3, [r3, #2]
 8006986:	b21b      	sxth	r3, r3
 8006988:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800698c:	b21a      	sxth	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	029b      	lsls	r3, r3, #10
 8006994:	b21b      	sxth	r3, r3
 8006996:	4313      	orrs	r3, r2
 8006998:	b21b      	sxth	r3, r3
 800699a:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800699c:	4b33      	ldr	r3, [pc, #204]	@ (8006a6c <hci_send_req+0x100>)
 800699e:	2201      	movs	r2, #1
 80069a0:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	b2d9      	uxtb	r1, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	8bbb      	ldrh	r3, [r7, #28]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 f890 	bl	8006ad4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80069b4:	e04e      	b.n	8006a54 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80069b6:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80069ba:	f001 f834 	bl	8007a26 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80069be:	e043      	b.n	8006a48 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80069c0:	f107 030c 	add.w	r3, r7, #12
 80069c4:	4619      	mov	r1, r3
 80069c6:	482a      	ldr	r0, [pc, #168]	@ (8006a70 <hci_send_req+0x104>)
 80069c8:	f000 fd49 	bl	800745e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	7a5b      	ldrb	r3, [r3, #9]
 80069d0:	2b0f      	cmp	r3, #15
 80069d2:	d114      	bne.n	80069fe <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	330b      	adds	r3, #11
 80069d8:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	885b      	ldrh	r3, [r3, #2]
 80069de:	b29b      	uxth	r3, r3
 80069e0:	8bba      	ldrh	r2, [r7, #28]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d104      	bne.n	80069f0 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	7812      	ldrb	r2, [r2, #0]
 80069ee:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	785b      	ldrb	r3, [r3, #1]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d027      	beq.n	8006a48 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80069f8:	2301      	movs	r3, #1
 80069fa:	77fb      	strb	r3, [r7, #31]
 80069fc:	e024      	b.n	8006a48 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	330b      	adds	r3, #11
 8006a02:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	8bba      	ldrh	r2, [r7, #28]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d114      	bne.n	8006a3c <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	7a9b      	ldrb	r3, [r3, #10]
 8006a16:	3b03      	subs	r3, #3
 8006a18:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	695a      	ldr	r2, [r3, #20]
 8006a1e:	7dfb      	ldrb	r3, [r7, #23]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	bfa8      	it	ge
 8006a24:	461a      	movge	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6918      	ldr	r0, [r3, #16]
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	1cd9      	adds	r1, r3, #3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	461a      	mov	r2, r3
 8006a38:	f002 f905 	bl	8008c46 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d001      	beq.n	8006a48 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006a44:	2301      	movs	r3, #1
 8006a46:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006a48:	4809      	ldr	r0, [pc, #36]	@ (8006a70 <hci_send_req+0x104>)
 8006a4a:	f000 fc79 	bl	8007340 <LST_is_empty>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d0b5      	beq.n	80069c0 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8006a54:	7ffb      	ldrb	r3, [r7, #31]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d0ad      	beq.n	80069b6 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8006a5a:	2001      	movs	r0, #1
 8006a5c:	f000 f860 	bl	8006b20 <NotifyCmdStatus>

  return 0;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3720      	adds	r7, #32
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	200002b8 	.word	0x200002b8
 8006a70:	200002ac 	.word	0x200002ac

08006a74 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8006a7c:	480f      	ldr	r0, [pc, #60]	@ (8006abc <TlInit+0x48>)
 8006a7e:	f000 fc4f 	bl	8007320 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8006a82:	4a0f      	ldr	r2, [pc, #60]	@ (8006ac0 <TlInit+0x4c>)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8006a88:	480e      	ldr	r0, [pc, #56]	@ (8006ac4 <TlInit+0x50>)
 8006a8a:	f000 fc49 	bl	8007320 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8006ac8 <TlInit+0x54>)
 8006a90:	2201      	movs	r2, #1
 8006a92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8006a94:	4b0d      	ldr	r3, [pc, #52]	@ (8006acc <TlInit+0x58>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00a      	beq.n	8006ab2 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8006aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad0 <TlInit+0x5c>)
 8006aa2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8006aa4:	4b09      	ldr	r3, [pc, #36]	@ (8006acc <TlInit+0x58>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f107 0208 	add.w	r2, r7, #8
 8006aac:	4610      	mov	r0, r2
 8006aae:	4798      	blx	r3
  }

  return;
 8006ab0:	bf00      	nop
 8006ab2:	bf00      	nop
}
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	200002ac 	.word	0x200002ac
 8006ac0:	200000b8 	.word	0x200000b8
 8006ac4:	200000b0 	.word	0x200000b0
 8006ac8:	200000bc 	.word	0x200000bc
 8006acc:	2000028c 	.word	0x2000028c
 8006ad0:	08006b61 	.word	0x08006b61

08006ad4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	4603      	mov	r3, r0
 8006adc:	603a      	str	r2, [r7, #0]
 8006ade:	80fb      	strh	r3, [r7, #6]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8006ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8006b18 <SendCmd+0x44>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	88fa      	ldrh	r2, [r7, #6]
 8006aea:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8006aee:	4b0a      	ldr	r3, [pc, #40]	@ (8006b18 <SendCmd+0x44>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	797a      	ldrb	r2, [r7, #5]
 8006af4:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8006af6:	4b08      	ldr	r3, [pc, #32]	@ (8006b18 <SendCmd+0x44>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	330c      	adds	r3, #12
 8006afc:	797a      	ldrb	r2, [r7, #5]
 8006afe:	6839      	ldr	r1, [r7, #0]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f002 f8a0 	bl	8008c46 <memcpy>

  hciContext.io.Send(0,0);
 8006b06:	4b05      	ldr	r3, [pc, #20]	@ (8006b1c <SendCmd+0x48>)
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	2000      	movs	r0, #0
 8006b0e:	4798      	blx	r3

  return;
 8006b10:	bf00      	nop
}
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	200000b8 	.word	0x200000b8
 8006b1c:	2000028c 	.word	0x2000028c

08006b20 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	4603      	mov	r3, r0
 8006b28:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8006b2a:	79fb      	ldrb	r3, [r7, #7]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d108      	bne.n	8006b42 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8006b30:	4b0a      	ldr	r3, [pc, #40]	@ (8006b5c <NotifyCmdStatus+0x3c>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00d      	beq.n	8006b54 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8006b38:	4b08      	ldr	r3, [pc, #32]	@ (8006b5c <NotifyCmdStatus+0x3c>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2000      	movs	r0, #0
 8006b3e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8006b40:	e008      	b.n	8006b54 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8006b42:	4b06      	ldr	r3, [pc, #24]	@ (8006b5c <NotifyCmdStatus+0x3c>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d004      	beq.n	8006b54 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8006b4a:	4b04      	ldr	r3, [pc, #16]	@ (8006b5c <NotifyCmdStatus+0x3c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2001      	movs	r0, #1
 8006b50:	4798      	blx	r3
  return;
 8006b52:	bf00      	nop
 8006b54:	bf00      	nop
}
 8006b56:	3708      	adds	r7, #8
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	200002b4 	.word	0x200002b4

08006b60 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	7a5b      	ldrb	r3, [r3, #9]
 8006b6c:	2b0f      	cmp	r3, #15
 8006b6e:	d003      	beq.n	8006b78 <TlEvtReceived+0x18>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	7a5b      	ldrb	r3, [r3, #9]
 8006b74:	2b0e      	cmp	r3, #14
 8006b76:	d107      	bne.n	8006b88 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8006b78:	6879      	ldr	r1, [r7, #4]
 8006b7a:	4809      	ldr	r0, [pc, #36]	@ (8006ba0 <TlEvtReceived+0x40>)
 8006b7c:	f000 fc28 	bl	80073d0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8006b80:	2000      	movs	r0, #0
 8006b82:	f000 ff45 	bl	8007a10 <hci_cmd_resp_release>
 8006b86:	e006      	b.n	8006b96 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8006b88:	6879      	ldr	r1, [r7, #4]
 8006b8a:	4806      	ldr	r0, [pc, #24]	@ (8006ba4 <TlEvtReceived+0x44>)
 8006b8c:	f000 fc20 	bl	80073d0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006b90:	4804      	ldr	r0, [pc, #16]	@ (8006ba4 <TlEvtReceived+0x44>)
 8006b92:	f000 ff31 	bl	80079f8 <hci_notify_asynch_evt>
  }

  return;
 8006b96:	bf00      	nop
}
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	200002ac 	.word	0x200002ac
 8006ba4:	200000b0 	.word	0x200000b0

08006ba8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a05      	ldr	r2, [pc, #20]	@ (8006bc8 <hci_register_io_bus+0x20>)
 8006bb4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a04      	ldr	r2, [pc, #16]	@ (8006bcc <hci_register_io_bus+0x24>)
 8006bba:	611a      	str	r2, [r3, #16]

  return;
 8006bbc:	bf00      	nop
}
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	08006ec1 	.word	0x08006ec1
 8006bcc:	08006f29 	.word	0x08006f29

08006bd0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	4a08      	ldr	r2, [pc, #32]	@ (8006c00 <shci_init+0x30>)
 8006be0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8006be2:	4a08      	ldr	r2, [pc, #32]	@ (8006c04 <shci_init+0x34>)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8006be8:	4806      	ldr	r0, [pc, #24]	@ (8006c04 <shci_init+0x34>)
 8006bea:	f000 f915 	bl	8006e18 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 f898 	bl	8006d28 <TlInit>

  return;
 8006bf8:	bf00      	nop
}
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	200002dc 	.word	0x200002dc
 8006c04:	200002bc 	.word	0x200002bc

08006c08 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006c0e:	4822      	ldr	r0, [pc, #136]	@ (8006c98 <shci_user_evt_proc+0x90>)
 8006c10:	f000 fb96 	bl	8007340 <LST_is_empty>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d12b      	bne.n	8006c72 <shci_user_evt_proc+0x6a>
 8006c1a:	4b20      	ldr	r3, [pc, #128]	@ (8006c9c <shci_user_evt_proc+0x94>)
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d027      	beq.n	8006c72 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006c22:	f107 030c 	add.w	r3, r7, #12
 8006c26:	4619      	mov	r1, r3
 8006c28:	481b      	ldr	r0, [pc, #108]	@ (8006c98 <shci_user_evt_proc+0x90>)
 8006c2a:	f000 fc18 	bl	800745e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8006c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8006ca0 <shci_user_evt_proc+0x98>)
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00c      	beq.n	8006c50 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006c3e:	4b18      	ldr	r3, [pc, #96]	@ (8006ca0 <shci_user_evt_proc+0x98>)
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	1d3a      	adds	r2, r7, #4
 8006c44:	4610      	mov	r0, r2
 8006c46:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8006c48:	793a      	ldrb	r2, [r7, #4]
 8006c4a:	4b14      	ldr	r3, [pc, #80]	@ (8006c9c <shci_user_evt_proc+0x94>)
 8006c4c:	701a      	strb	r2, [r3, #0]
 8006c4e:	e002      	b.n	8006c56 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006c50:	4b12      	ldr	r3, [pc, #72]	@ (8006c9c <shci_user_evt_proc+0x94>)
 8006c52:	2201      	movs	r2, #1
 8006c54:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8006c56:	4b11      	ldr	r3, [pc, #68]	@ (8006c9c <shci_user_evt_proc+0x94>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d004      	beq.n	8006c68 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	4618      	mov	r0, r3
 8006c62:	f000 fa71 	bl	8007148 <TL_MM_EvtDone>
 8006c66:	e004      	b.n	8006c72 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	480a      	ldr	r0, [pc, #40]	@ (8006c98 <shci_user_evt_proc+0x90>)
 8006c6e:	f000 fb89 	bl	8007384 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006c72:	4809      	ldr	r0, [pc, #36]	@ (8006c98 <shci_user_evt_proc+0x90>)
 8006c74:	f000 fb64 	bl	8007340 <LST_is_empty>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d107      	bne.n	8006c8e <shci_user_evt_proc+0x86>
 8006c7e:	4b07      	ldr	r3, [pc, #28]	@ (8006c9c <shci_user_evt_proc+0x94>)
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8006c86:	4804      	ldr	r0, [pc, #16]	@ (8006c98 <shci_user_evt_proc+0x90>)
 8006c88:	f7f9 fe48 	bl	800091c <shci_notify_asynch_evt>
  }


  return;
 8006c8c:	bf00      	nop
 8006c8e:	bf00      	nop
}
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	200000c0 	.word	0x200000c0
 8006c9c:	200000d0 	.word	0x200000d0
 8006ca0:	200002bc 	.word	0x200002bc

08006ca4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60ba      	str	r2, [r7, #8]
 8006cac:	607b      	str	r3, [r7, #4]
 8006cae:	4603      	mov	r3, r0
 8006cb0:	81fb      	strh	r3, [r7, #14]
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8006cb6:	2000      	movs	r0, #0
 8006cb8:	f000 f868 	bl	8006d8c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8006cbc:	4b17      	ldr	r3, [pc, #92]	@ (8006d1c <shci_send+0x78>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	89fa      	ldrh	r2, [r7, #14]
 8006cc2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8006cc6:	4b15      	ldr	r3, [pc, #84]	@ (8006d1c <shci_send+0x78>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	7b7a      	ldrb	r2, [r7, #13]
 8006ccc:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8006cce:	4b13      	ldr	r3, [pc, #76]	@ (8006d1c <shci_send+0x78>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	330c      	adds	r3, #12
 8006cd4:	7b7a      	ldrb	r2, [r7, #13]
 8006cd6:	68b9      	ldr	r1, [r7, #8]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f001 ffb4 	bl	8008c46 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8006cde:	4b10      	ldr	r3, [pc, #64]	@ (8006d20 <shci_send+0x7c>)
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8006ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8006d24 <shci_send+0x80>)
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	2100      	movs	r1, #0
 8006cea:	2000      	movs	r0, #0
 8006cec:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8006cee:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8006cf2:	f7f9 fe2a 	bl	800094a <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f103 0008 	add.w	r0, r3, #8
 8006cfc:	4b07      	ldr	r3, [pc, #28]	@ (8006d1c <shci_send+0x78>)
 8006cfe:	6819      	ldr	r1, [r3, #0]
 8006d00:	4b06      	ldr	r3, [pc, #24]	@ (8006d1c <shci_send+0x78>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	789b      	ldrb	r3, [r3, #2]
 8006d06:	3303      	adds	r3, #3
 8006d08:	461a      	mov	r2, r3
 8006d0a:	f001 ff9c 	bl	8008c46 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8006d0e:	2001      	movs	r0, #1
 8006d10:	f000 f83c 	bl	8006d8c <Cmd_SetStatus>

  return;
 8006d14:	bf00      	nop
}
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	200000cc 	.word	0x200000cc
 8006d20:	200002e0 	.word	0x200002e0
 8006d24:	200002bc 	.word	0x200002bc

08006d28 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8006d30:	4a10      	ldr	r2, [pc, #64]	@ (8006d74 <TlInit+0x4c>)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8006d36:	4810      	ldr	r0, [pc, #64]	@ (8006d78 <TlInit+0x50>)
 8006d38:	f000 faf2 	bl	8007320 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8006d3c:	2001      	movs	r0, #1
 8006d3e:	f000 f825 	bl	8006d8c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006d42:	4b0e      	ldr	r3, [pc, #56]	@ (8006d7c <TlInit+0x54>)
 8006d44:	2201      	movs	r2, #1
 8006d46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8006d48:	4b0d      	ldr	r3, [pc, #52]	@ (8006d80 <TlInit+0x58>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00c      	beq.n	8006d6a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8006d54:	4b0b      	ldr	r3, [pc, #44]	@ (8006d84 <TlInit+0x5c>)
 8006d56:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8006d58:	4b0b      	ldr	r3, [pc, #44]	@ (8006d88 <TlInit+0x60>)
 8006d5a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8006d5c:	4b08      	ldr	r3, [pc, #32]	@ (8006d80 <TlInit+0x58>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f107 020c 	add.w	r2, r7, #12
 8006d64:	4610      	mov	r0, r2
 8006d66:	4798      	blx	r3
  }

  return;
 8006d68:	bf00      	nop
 8006d6a:	bf00      	nop
}
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	200000cc 	.word	0x200000cc
 8006d78:	200000c0 	.word	0x200000c0
 8006d7c:	200000d0 	.word	0x200000d0
 8006d80:	200002bc 	.word	0x200002bc
 8006d84:	08006ddd 	.word	0x08006ddd
 8006d88:	08006df5 	.word	0x08006df5

08006d8c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	4603      	mov	r3, r0
 8006d94:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8006d96:	79fb      	ldrb	r3, [r7, #7]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10b      	bne.n	8006db4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8006d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8006dd4 <Cmd_SetStatus+0x48>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d003      	beq.n	8006dac <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8006da4:	4b0b      	ldr	r3, [pc, #44]	@ (8006dd4 <Cmd_SetStatus+0x48>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2000      	movs	r0, #0
 8006daa:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8006dac:	4b0a      	ldr	r3, [pc, #40]	@ (8006dd8 <Cmd_SetStatus+0x4c>)
 8006dae:	2200      	movs	r2, #0
 8006db0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8006db2:	e00b      	b.n	8006dcc <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8006db4:	4b08      	ldr	r3, [pc, #32]	@ (8006dd8 <Cmd_SetStatus+0x4c>)
 8006db6:	2201      	movs	r2, #1
 8006db8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8006dba:	4b06      	ldr	r3, [pc, #24]	@ (8006dd4 <Cmd_SetStatus+0x48>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d004      	beq.n	8006dcc <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8006dc2:	4b04      	ldr	r3, [pc, #16]	@ (8006dd4 <Cmd_SetStatus+0x48>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2001      	movs	r0, #1
 8006dc8:	4798      	blx	r3
  return;
 8006dca:	bf00      	nop
 8006dcc:	bf00      	nop
}
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	200002dc 	.word	0x200002dc
 8006dd8:	200000c8 	.word	0x200000c8

08006ddc <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8006de4:	2000      	movs	r0, #0
 8006de6:	f7f9 fda5 	bl	8000934 <shci_cmd_resp_release>

  return;
 8006dea:	bf00      	nop
}
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
	...

08006df4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8006dfc:	6879      	ldr	r1, [r7, #4]
 8006dfe:	4805      	ldr	r0, [pc, #20]	@ (8006e14 <TlUserEvtReceived+0x20>)
 8006e00:	f000 fae6 	bl	80073d0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006e04:	4803      	ldr	r0, [pc, #12]	@ (8006e14 <TlUserEvtReceived+0x20>)
 8006e06:	f7f9 fd89 	bl	800091c <shci_notify_asynch_evt>

  return;
 8006e0a:	bf00      	nop
}
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	200000c0 	.word	0x200000c0

08006e18 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a05      	ldr	r2, [pc, #20]	@ (8006e38 <shci_register_io_bus+0x20>)
 8006e24:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a04      	ldr	r2, [pc, #16]	@ (8006e3c <shci_register_io_bus+0x24>)
 8006e2a:	611a      	str	r2, [r3, #16]

  return;
 8006e2c:	bf00      	nop
}
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr
 8006e38:	08006fd5 	.word	0x08006fd5
 8006e3c:	08007029 	.word	0x08007029

08006e40 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8006e44:	f001 f93e 	bl	80080c4 <HW_IPCC_Enable>

  return;
 8006e48:	bf00      	nop
}
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <TL_Init>:


void TL_Init( void )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8006e50:	4b10      	ldr	r3, [pc, #64]	@ (8006e94 <TL_Init+0x48>)
 8006e52:	4a11      	ldr	r2, [pc, #68]	@ (8006e98 <TL_Init+0x4c>)
 8006e54:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8006e56:	4b0f      	ldr	r3, [pc, #60]	@ (8006e94 <TL_Init+0x48>)
 8006e58:	4a10      	ldr	r2, [pc, #64]	@ (8006e9c <TL_Init+0x50>)
 8006e5a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8006e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8006e94 <TL_Init+0x48>)
 8006e5e:	4a10      	ldr	r2, [pc, #64]	@ (8006ea0 <TL_Init+0x54>)
 8006e60:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8006e62:	4b0c      	ldr	r3, [pc, #48]	@ (8006e94 <TL_Init+0x48>)
 8006e64:	4a0f      	ldr	r2, [pc, #60]	@ (8006ea4 <TL_Init+0x58>)
 8006e66:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8006e68:	4b0a      	ldr	r3, [pc, #40]	@ (8006e94 <TL_Init+0x48>)
 8006e6a:	4a0f      	ldr	r2, [pc, #60]	@ (8006ea8 <TL_Init+0x5c>)
 8006e6c:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8006e6e:	4b09      	ldr	r3, [pc, #36]	@ (8006e94 <TL_Init+0x48>)
 8006e70:	4a0e      	ldr	r2, [pc, #56]	@ (8006eac <TL_Init+0x60>)
 8006e72:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8006e74:	4b07      	ldr	r3, [pc, #28]	@ (8006e94 <TL_Init+0x48>)
 8006e76:	4a0e      	ldr	r2, [pc, #56]	@ (8006eb0 <TL_Init+0x64>)
 8006e78:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8006e7a:	4b06      	ldr	r3, [pc, #24]	@ (8006e94 <TL_Init+0x48>)
 8006e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8006eb4 <TL_Init+0x68>)
 8006e7e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8006e80:	4b04      	ldr	r3, [pc, #16]	@ (8006e94 <TL_Init+0x48>)
 8006e82:	4a0d      	ldr	r2, [pc, #52]	@ (8006eb8 <TL_Init+0x6c>)
 8006e84:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8006e86:	4b03      	ldr	r3, [pc, #12]	@ (8006e94 <TL_Init+0x48>)
 8006e88:	4a0c      	ldr	r2, [pc, #48]	@ (8006ebc <TL_Init+0x70>)
 8006e8a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8006e8c:	f001 f92e 	bl	80080ec <HW_IPCC_Init>

  return;
 8006e90:	bf00      	nop
}
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	20030000 	.word	0x20030000
 8006e98:	20030028 	.word	0x20030028
 8006e9c:	20030048 	.word	0x20030048
 8006ea0:	20030058 	.word	0x20030058
 8006ea4:	20030068 	.word	0x20030068
 8006ea8:	20030070 	.word	0x20030070
 8006eac:	20030078 	.word	0x20030078
 8006eb0:	20030080 	.word	0x20030080
 8006eb4:	2003009c 	.word	0x2003009c
 8006eb8:	200300a0 	.word	0x200300a0
 8006ebc:	200300ac 	.word	0x200300ac

08006ec0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8006ecc:	4811      	ldr	r0, [pc, #68]	@ (8006f14 <TL_BLE_Init+0x54>)
 8006ece:	f000 fa27 	bl	8007320 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8006ed2:	4b11      	ldr	r3, [pc, #68]	@ (8006f18 <TL_BLE_Init+0x58>)
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	689a      	ldr	r2, [r3, #8]
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	68da      	ldr	r2, [r3, #12]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	4a0c      	ldr	r2, [pc, #48]	@ (8006f1c <TL_BLE_Init+0x5c>)
 8006eec:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	4a08      	ldr	r2, [pc, #32]	@ (8006f14 <TL_BLE_Init+0x54>)
 8006ef2:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8006ef4:	f001 f910 	bl	8008118 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a08      	ldr	r2, [pc, #32]	@ (8006f20 <TL_BLE_Init+0x60>)
 8006efe:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	4a07      	ldr	r2, [pc, #28]	@ (8006f24 <TL_BLE_Init+0x64>)
 8006f06:	6013      	str	r3, [r2, #0]

  return 0;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	200300c8 	.word	0x200300c8
 8006f18:	20030000 	.word	0x20030000
 8006f1c:	20030a58 	.word	0x20030a58
 8006f20:	200002ec 	.word	0x200002ec
 8006f24:	200002f0 	.word	0x200002f0

08006f28 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	460b      	mov	r3, r1
 8006f32:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8006f34:	4b09      	ldr	r3, [pc, #36]	@ (8006f5c <TL_BLE_SendCmd+0x34>)
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8006f3e:	4b07      	ldr	r3, [pc, #28]	@ (8006f5c <TL_BLE_SendCmd+0x34>)
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4619      	mov	r1, r3
 8006f46:	2001      	movs	r0, #1
 8006f48:	f000 f96c 	bl	8007224 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8006f4c:	f001 f8ee 	bl	800812c <HW_IPCC_BLE_SendCmd>

  return 0;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20030000 	.word	0x20030000

08006f60 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8006f66:	e01c      	b.n	8006fa2 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8006f68:	1d3b      	adds	r3, r7, #4
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	4812      	ldr	r0, [pc, #72]	@ (8006fb8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8006f6e:	f000 fa76 	bl	800745e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	7a5b      	ldrb	r3, [r3, #9]
 8006f76:	2b0f      	cmp	r3, #15
 8006f78:	d003      	beq.n	8006f82 <HW_IPCC_BLE_RxEvtNot+0x22>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	7a5b      	ldrb	r3, [r3, #9]
 8006f7e:	2b0e      	cmp	r3, #14
 8006f80:	d105      	bne.n	8006f8e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4619      	mov	r1, r3
 8006f86:	2002      	movs	r0, #2
 8006f88:	f000 f94c 	bl	8007224 <OutputDbgTrace>
 8006f8c:	e004      	b.n	8006f98 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4619      	mov	r1, r3
 8006f92:	2003      	movs	r0, #3
 8006f94:	f000 f946 	bl	8007224 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8006f98:	4b08      	ldr	r3, [pc, #32]	@ (8006fbc <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	4610      	mov	r0, r2
 8006fa0:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8006fa2:	4805      	ldr	r0, [pc, #20]	@ (8006fb8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8006fa4:	f000 f9cc 	bl	8007340 <LST_is_empty>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d0dc      	beq.n	8006f68 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8006fae:	bf00      	nop
}
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	200300c8 	.word	0x200300c8
 8006fbc:	200002ec 	.word	0x200002ec

08006fc0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8006fc4:	4b02      	ldr	r3, [pc, #8]	@ (8006fd0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4798      	blx	r3

  return;
 8006fca:	bf00      	nop
}
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	200002f0 	.word	0x200002f0

08006fd4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8006fe0:	480d      	ldr	r0, [pc, #52]	@ (8007018 <TL_SYS_Init+0x44>)
 8006fe2:	f000 f99d 	bl	8007320 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8006fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800701c <TL_SYS_Init+0x48>)
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	689a      	ldr	r2, [r3, #8]
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	4a08      	ldr	r2, [pc, #32]	@ (8007018 <TL_SYS_Init+0x44>)
 8006ff8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8006ffa:	f001 f8b9 	bl	8008170 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a07      	ldr	r2, [pc, #28]	@ (8007020 <TL_SYS_Init+0x4c>)
 8007004:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	4a06      	ldr	r2, [pc, #24]	@ (8007024 <TL_SYS_Init+0x50>)
 800700c:	6013      	str	r3, [r2, #0]

  return 0;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	200300d0 	.word	0x200300d0
 800701c:	20030000 	.word	0x20030000
 8007020:	200002f4 	.word	0x200002f4
 8007024:	200002f8 	.word	0x200002f8

08007028 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8007034:	4b09      	ldr	r3, [pc, #36]	@ (800705c <TL_SYS_SendCmd+0x34>)
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2210      	movs	r2, #16
 800703c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800703e:	4b07      	ldr	r3, [pc, #28]	@ (800705c <TL_SYS_SendCmd+0x34>)
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4619      	mov	r1, r3
 8007046:	2004      	movs	r0, #4
 8007048:	f000 f8ec 	bl	8007224 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800704c:	f001 f89a 	bl	8008184 <HW_IPCC_SYS_SendCmd>

  return 0;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3708      	adds	r7, #8
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	20030000 	.word	0x20030000

08007060 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007064:	4b07      	ldr	r3, [pc, #28]	@ (8007084 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4619      	mov	r1, r3
 800706c:	2005      	movs	r0, #5
 800706e:	f000 f8d9 	bl	8007224 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007072:	4b05      	ldr	r3, [pc, #20]	@ (8007088 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a03      	ldr	r2, [pc, #12]	@ (8007084 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007078:	68d2      	ldr	r2, [r2, #12]
 800707a:	6812      	ldr	r2, [r2, #0]
 800707c:	4610      	mov	r0, r2
 800707e:	4798      	blx	r3

  return;
 8007080:	bf00      	nop
}
 8007082:	bd80      	pop	{r7, pc}
 8007084:	20030000 	.word	0x20030000
 8007088:	200002f4 	.word	0x200002f4

0800708c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007092:	e00e      	b.n	80070b2 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8007094:	1d3b      	adds	r3, r7, #4
 8007096:	4619      	mov	r1, r3
 8007098:	480b      	ldr	r0, [pc, #44]	@ (80070c8 <HW_IPCC_SYS_EvtNot+0x3c>)
 800709a:	f000 f9e0 	bl	800745e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4619      	mov	r1, r3
 80070a2:	2006      	movs	r0, #6
 80070a4:	f000 f8be 	bl	8007224 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80070a8:	4b08      	ldr	r3, [pc, #32]	@ (80070cc <HW_IPCC_SYS_EvtNot+0x40>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	4610      	mov	r0, r2
 80070b0:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80070b2:	4805      	ldr	r0, [pc, #20]	@ (80070c8 <HW_IPCC_SYS_EvtNot+0x3c>)
 80070b4:	f000 f944 	bl	8007340 <LST_is_empty>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d0ea      	beq.n	8007094 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80070be:	bf00      	nop
}
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	200300d0 	.word	0x200300d0
 80070cc:	200002f8 	.word	0x200002f8

080070d0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80070d8:	4817      	ldr	r0, [pc, #92]	@ (8007138 <TL_MM_Init+0x68>)
 80070da:	f000 f921 	bl	8007320 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80070de:	4817      	ldr	r0, [pc, #92]	@ (800713c <TL_MM_Init+0x6c>)
 80070e0:	f000 f91e 	bl	8007320 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80070e4:	4b16      	ldr	r3, [pc, #88]	@ (8007140 <TL_MM_Init+0x70>)
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	4a16      	ldr	r2, [pc, #88]	@ (8007144 <TL_MM_Init+0x74>)
 80070ea:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80070ec:	4b15      	ldr	r3, [pc, #84]	@ (8007144 <TL_MM_Init+0x74>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	6892      	ldr	r2, [r2, #8]
 80070f4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80070f6:	4b13      	ldr	r3, [pc, #76]	@ (8007144 <TL_MM_Init+0x74>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	68d2      	ldr	r2, [r2, #12]
 80070fe:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8007100:	4b10      	ldr	r3, [pc, #64]	@ (8007144 <TL_MM_Init+0x74>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a0c      	ldr	r2, [pc, #48]	@ (8007138 <TL_MM_Init+0x68>)
 8007106:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8007108:	4b0e      	ldr	r3, [pc, #56]	@ (8007144 <TL_MM_Init+0x74>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	6812      	ldr	r2, [r2, #0]
 8007110:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8007112:	4b0c      	ldr	r3, [pc, #48]	@ (8007144 <TL_MM_Init+0x74>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	6852      	ldr	r2, [r2, #4]
 800711a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800711c:	4b09      	ldr	r3, [pc, #36]	@ (8007144 <TL_MM_Init+0x74>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	6912      	ldr	r2, [r2, #16]
 8007124:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8007126:	4b07      	ldr	r3, [pc, #28]	@ (8007144 <TL_MM_Init+0x74>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	6952      	ldr	r2, [r2, #20]
 800712e:	619a      	str	r2, [r3, #24]

  return;
 8007130:	bf00      	nop
}
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	200300b8 	.word	0x200300b8
 800713c:	200002e4 	.word	0x200002e4
 8007140:	20030000 	.word	0x20030000
 8007144:	200002fc 	.word	0x200002fc

08007148 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8007150:	6879      	ldr	r1, [r7, #4]
 8007152:	4807      	ldr	r0, [pc, #28]	@ (8007170 <TL_MM_EvtDone+0x28>)
 8007154:	f000 f93c 	bl	80073d0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8007158:	6879      	ldr	r1, [r7, #4]
 800715a:	2000      	movs	r0, #0
 800715c:	f000 f862 	bl	8007224 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8007160:	4804      	ldr	r0, [pc, #16]	@ (8007174 <TL_MM_EvtDone+0x2c>)
 8007162:	f001 f835 	bl	80081d0 <HW_IPCC_MM_SendFreeBuf>

  return;
 8007166:	bf00      	nop
}
 8007168:	3708      	adds	r7, #8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	200002e4 	.word	0x200002e4
 8007174:	08007179 	.word	0x08007179

08007178 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800717e:	e00c      	b.n	800719a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8007180:	1d3b      	adds	r3, r7, #4
 8007182:	4619      	mov	r1, r3
 8007184:	480a      	ldr	r0, [pc, #40]	@ (80071b0 <SendFreeBuf+0x38>)
 8007186:	f000 f96a 	bl	800745e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800718a:	4b0a      	ldr	r3, [pc, #40]	@ (80071b4 <SendFreeBuf+0x3c>)
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	4611      	mov	r1, r2
 8007194:	4618      	mov	r0, r3
 8007196:	f000 f91b 	bl	80073d0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800719a:	4805      	ldr	r0, [pc, #20]	@ (80071b0 <SendFreeBuf+0x38>)
 800719c:	f000 f8d0 	bl	8007340 <LST_is_empty>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d0ec      	beq.n	8007180 <SendFreeBuf+0x8>
  }

  return;
 80071a6:	bf00      	nop
}
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	200002e4 	.word	0x200002e4
 80071b4:	20030000 	.word	0x20030000

080071b8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80071bc:	4805      	ldr	r0, [pc, #20]	@ (80071d4 <TL_TRACES_Init+0x1c>)
 80071be:	f000 f8af 	bl	8007320 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80071c2:	4b05      	ldr	r3, [pc, #20]	@ (80071d8 <TL_TRACES_Init+0x20>)
 80071c4:	695b      	ldr	r3, [r3, #20]
 80071c6:	4a03      	ldr	r2, [pc, #12]	@ (80071d4 <TL_TRACES_Init+0x1c>)
 80071c8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80071ca:	f001 f837 	bl	800823c <HW_IPCC_TRACES_Init>

  return;
 80071ce:	bf00      	nop
}
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	200300c0 	.word	0x200300c0
 80071d8:	20030000 	.word	0x20030000

080071dc <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80071e2:	e008      	b.n	80071f6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80071e4:	1d3b      	adds	r3, r7, #4
 80071e6:	4619      	mov	r1, r3
 80071e8:	4808      	ldr	r0, [pc, #32]	@ (800720c <HW_IPCC_TRACES_EvtNot+0x30>)
 80071ea:	f000 f938 	bl	800745e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f000 f80d 	bl	8007210 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80071f6:	4805      	ldr	r0, [pc, #20]	@ (800720c <HW_IPCC_TRACES_EvtNot+0x30>)
 80071f8:	f000 f8a2 	bl	8007340 <LST_is_empty>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d0f0      	beq.n	80071e4 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8007202:	bf00      	nop
}
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	200300c0 	.word	0x200300c0

08007210 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	4603      	mov	r3, r0
 800722c:	6039      	str	r1, [r7, #0]
 800722e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8007230:	79fb      	ldrb	r3, [r7, #7]
 8007232:	2b06      	cmp	r3, #6
 8007234:	d845      	bhi.n	80072c2 <OutputDbgTrace+0x9e>
 8007236:	a201      	add	r2, pc, #4	@ (adr r2, 800723c <OutputDbgTrace+0x18>)
 8007238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800723c:	08007259 	.word	0x08007259
 8007240:	0800727d 	.word	0x0800727d
 8007244:	08007283 	.word	0x08007283
 8007248:	08007297 	.word	0x08007297
 800724c:	080072a3 	.word	0x080072a3
 8007250:	080072a9 	.word	0x080072a9
 8007254:	080072b7 	.word	0x080072b7
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	7a5b      	ldrb	r3, [r3, #9]
 8007260:	2bff      	cmp	r3, #255	@ 0xff
 8007262:	d005      	beq.n	8007270 <OutputDbgTrace+0x4c>
 8007264:	2bff      	cmp	r3, #255	@ 0xff
 8007266:	dc05      	bgt.n	8007274 <OutputDbgTrace+0x50>
 8007268:	2b0e      	cmp	r3, #14
 800726a:	d005      	beq.n	8007278 <OutputDbgTrace+0x54>
 800726c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800726e:	e001      	b.n	8007274 <OutputDbgTrace+0x50>
          break;
 8007270:	bf00      	nop
 8007272:	e027      	b.n	80072c4 <OutputDbgTrace+0xa0>
          break;
 8007274:	bf00      	nop
 8007276:	e025      	b.n	80072c4 <OutputDbgTrace+0xa0>
          break;
 8007278:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800727a:	e023      	b.n	80072c4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007280:	e020      	b.n	80072c4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	7a5b      	ldrb	r3, [r3, #9]
 800728a:	2b0e      	cmp	r3, #14
 800728c:	d001      	beq.n	8007292 <OutputDbgTrace+0x6e>
 800728e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007290:	e000      	b.n	8007294 <OutputDbgTrace+0x70>
          break;
 8007292:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007294:	e016      	b.n	80072c4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	7a5b      	ldrb	r3, [r3, #9]
 800729e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80072a0:	e010      	b.n	80072c4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80072a6:	e00d      	b.n	80072c4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	7a5b      	ldrb	r3, [r3, #9]
 80072b0:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80072b2:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80072b4:	e006      	b.n	80072c4 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	7a5b      	ldrb	r3, [r3, #9]
 80072be:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80072c0:	e000      	b.n	80072c4 <OutputDbgTrace+0xa0>

    default:
      break;
 80072c2:	bf00      	nop
  }

  return;
 80072c4:	bf00      	nop
}
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	4603      	mov	r3, r0
 80072d8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80072da:	4b0f      	ldr	r3, [pc, #60]	@ (8007318 <OTP_Read+0x48>)
 80072dc:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80072de:	e002      	b.n	80072e6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	3b08      	subs	r3, #8
 80072e4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	3307      	adds	r3, #7
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	79fa      	ldrb	r2, [r7, #7]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d003      	beq.n	80072fa <OTP_Read+0x2a>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4a09      	ldr	r2, [pc, #36]	@ (800731c <OTP_Read+0x4c>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d1f2      	bne.n	80072e0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	3307      	adds	r3, #7
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	79fa      	ldrb	r2, [r7, #7]
 8007302:	429a      	cmp	r2, r3
 8007304:	d001      	beq.n	800730a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8007306:	2300      	movs	r3, #0
 8007308:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800730a:	68fb      	ldr	r3, [r7, #12]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3714      	adds	r7, #20
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr
 8007318:	1fff73f8 	.word	0x1fff73f8
 800731c:	1fff7000 	.word	0x1fff7000

08007320 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	605a      	str	r2, [r3, #4]
}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8007340:	b480      	push	{r7}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007348:	f3ef 8310 	mrs	r3, PRIMASK
 800734c:	60fb      	str	r3, [r7, #12]
  return(result);
 800734e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007350:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007352:	b672      	cpsid	i
}
 8007354:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	429a      	cmp	r2, r3
 800735e:	d102      	bne.n	8007366 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8007360:	2301      	movs	r3, #1
 8007362:	75fb      	strb	r3, [r7, #23]
 8007364:	e001      	b.n	800736a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8007366:	2300      	movs	r3, #0
 8007368:	75fb      	strb	r3, [r7, #23]
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	f383 8810 	msr	PRIMASK, r3
}
 8007374:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8007376:	7dfb      	ldrb	r3, [r7, #23]
}
 8007378:	4618      	mov	r0, r3
 800737a:	371c      	adds	r7, #28
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8007384:	b480      	push	{r7}
 8007386:	b087      	sub	sp, #28
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800738e:	f3ef 8310 	mrs	r3, PRIMASK
 8007392:	60fb      	str	r3, [r7, #12]
  return(result);
 8007394:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007396:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007398:	b672      	cpsid	i
}
 800739a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	605a      	str	r2, [r3, #4]
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f383 8810 	msr	PRIMASK, r3
}
 80073c2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80073c4:	bf00      	nop
 80073c6:	371c      	adds	r7, #28
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b087      	sub	sp, #28
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073da:	f3ef 8310 	mrs	r3, PRIMASK
 80073de:	60fb      	str	r3, [r7, #12]
  return(result);
 80073e0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80073e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80073e4:	b672      	cpsid	i
}
 80073e6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	683a      	ldr	r2, [r7, #0]
 80073fa:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	f383 8810 	msr	PRIMASK, r3
}
 800740e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007410:	bf00      	nop
 8007412:	371c      	adds	r7, #28
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800741c:	b480      	push	{r7}
 800741e:	b087      	sub	sp, #28
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007424:	f3ef 8310 	mrs	r3, PRIMASK
 8007428:	60fb      	str	r3, [r7, #12]
  return(result);
 800742a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800742c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800742e:	b672      	cpsid	i
}
 8007430:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	6812      	ldr	r2, [r2, #0]
 800743a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	6852      	ldr	r2, [r2, #4]
 8007444:	605a      	str	r2, [r3, #4]
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	f383 8810 	msr	PRIMASK, r3
}
 8007450:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007452:	bf00      	nop
 8007454:	371c      	adds	r7, #28
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b086      	sub	sp, #24
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007468:	f3ef 8310 	mrs	r3, PRIMASK
 800746c:	60fb      	str	r3, [r7, #12]
  return(result);
 800746e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007470:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007472:	b672      	cpsid	i
}
 8007474:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4618      	mov	r0, r3
 8007484:	f7ff ffca 	bl	800741c <LST_remove_node>
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	f383 8810 	msr	PRIMASK, r3
}
 8007492:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007494:	bf00      	nop
 8007496:	3718      	adds	r7, #24
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800749c:	b480      	push	{r7}
 800749e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80074a0:	4b03      	ldr	r3, [pc, #12]	@ (80074b0 <LL_FLASH_GetUDN+0x14>)
 80074a2:	681b      	ldr	r3, [r3, #0]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	1fff7580 	.word	0x1fff7580

080074b4 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80074b4:	b480      	push	{r7}
 80074b6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80074b8:	4b03      	ldr	r3, [pc, #12]	@ (80074c8 <LL_FLASH_GetDeviceID+0x14>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	b2db      	uxtb	r3, r3
}
 80074be:	4618      	mov	r0, r3
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	1fff7584 	.word	0x1fff7584

080074cc <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80074cc:	b480      	push	{r7}
 80074ce:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80074d0:	4b03      	ldr	r3, [pc, #12]	@ (80074e0 <LL_FLASH_GetSTCompanyID+0x14>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	0a1b      	lsrs	r3, r3, #8
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	1fff7584 	.word	0x1fff7584

080074e4 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80074e4:	b5b0      	push	{r4, r5, r7, lr}
 80074e6:	b090      	sub	sp, #64	@ 0x40
 80074e8:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80074ea:	2392      	movs	r3, #146	@ 0x92
 80074ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_MY_TASK, UTIL_SEQ_RFU, myTask);
 80074f0:	4a29      	ldr	r2, [pc, #164]	@ (8007598 <APP_BLE_Init+0xb4>)
 80074f2:	2100      	movs	r1, #0
 80074f4:	2004      	movs	r0, #4
 80074f6:	f000 fff5 	bl	80084e4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 80074fa:	2100      	movs	r1, #0
 80074fc:	2004      	movs	r0, #4
 80074fe:	f001 f813 	bl	8008528 <UTIL_SEQ_SetTask>
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8007502:	4b26      	ldr	r3, [pc, #152]	@ (800759c <APP_BLE_Init+0xb8>)
 8007504:	1d3c      	adds	r4, r7, #4
 8007506:	461d      	mov	r5, r3
 8007508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800750a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800750c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800750e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007514:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007518:	c403      	stmia	r4!, {r0, r1}
 800751a:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800751c:	f000 f914 	bl	8007748 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8007520:	2101      	movs	r1, #1
 8007522:	2002      	movs	r0, #2
 8007524:	f000 feb2 	bl	800828c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8007528:	4a1d      	ldr	r2, [pc, #116]	@ (80075a0 <APP_BLE_Init+0xbc>)
 800752a:	2100      	movs	r1, #0
 800752c:	2002      	movs	r0, #2
 800752e:	f000 ffd9 	bl	80084e4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8007532:	1d3b      	adds	r3, r7, #4
 8007534:	4618      	mov	r0, r3
 8007536:	f7ff f8bd 	bl	80066b4 <SHCI_C2_BLE_Init>
 800753a:	4603      	mov	r3, r0
 800753c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8007540:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007544:	2b00      	cmp	r3, #0
 8007546:	d001      	beq.n	800754c <APP_BLE_Init+0x68>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8007548:	f7fa f950 	bl	80017ec <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800754c:	f000 f912 	bl	8007774 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8007550:	f7ff f80a 	bl	8006568 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007554:	4b13      	ldr	r3, [pc, #76]	@ (80075a4 <APP_BLE_Init+0xc0>)
 8007556:	2200      	movs	r2, #0
 8007558:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800755c:	4b11      	ldr	r3, [pc, #68]	@ (80075a4 <APP_BLE_Init+0xc0>)
 800755e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007562:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8007564:	4a10      	ldr	r2, [pc, #64]	@ (80075a8 <APP_BLE_Init+0xc4>)
 8007566:	2100      	movs	r1, #0
 8007568:	2001      	movs	r0, #1
 800756a:	f000 ffbb 	bl	80084e4 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800756e:	2006      	movs	r0, #6
 8007570:	f7fe fe6e 	bl	8006250 <aci_hal_set_radio_activity_mask>
 8007574:	4603      	mov	r3, r0
 8007576:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800757a:	f000 fadd 	bl	8007b38 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800757e:	4b09      	ldr	r3, [pc, #36]	@ (80075a4 <APP_BLE_Init+0xc0>)
 8007580:	2200      	movs	r2, #0
 8007582:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8007584:	4b07      	ldr	r3, [pc, #28]	@ (80075a4 <APP_BLE_Init+0xc0>)
 8007586:	2200      	movs	r2, #0
 8007588:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800758a:	2001      	movs	r0, #1
 800758c:	f000 f9a6 	bl	80078dc <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8007590:	bf00      	nop
}
 8007592:	3740      	adds	r7, #64	@ 0x40
 8007594:	46bd      	mov	sp, r7
 8007596:	bdb0      	pop	{r4, r5, r7, pc}
 8007598:	08007aad 	.word	0x08007aad
 800759c:	08009140 	.word	0x08009140
 80075a0:	080068d1 	.word	0x080068d1
 80075a4:	20000308 	.word	0x20000308
 80075a8:	080079c5 	.word	0x080079c5

080075ac <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b08a      	sub	sp, #40	@ 0x28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 80075b4:	2392      	movs	r3, #146	@ 0x92
 80075b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	3301      	adds	r3, #1
 80075be:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	2bff      	cmp	r3, #255	@ 0xff
 80075c6:	d053      	beq.n	8007670 <SVCCTL_App_Notification+0xc4>
 80075c8:	2bff      	cmp	r3, #255	@ 0xff
 80075ca:	f300 80af 	bgt.w	800772c <SVCCTL_App_Notification+0x180>
 80075ce:	2b05      	cmp	r3, #5
 80075d0:	d002      	beq.n	80075d8 <SVCCTL_App_Notification+0x2c>
 80075d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80075d4:	d020      	beq.n	8007618 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80075d6:	e0a9      	b.n	800772c <SVCCTL_App_Notification+0x180>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 80075d8:	6a3b      	ldr	r3, [r7, #32]
 80075da:	3302      	adds	r3, #2
 80075dc:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	4b55      	ldr	r3, [pc, #340]	@ (800773c <SVCCTL_App_Notification+0x190>)
 80075e8:	8adb      	ldrh	r3, [r3, #22]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d106      	bne.n	80075fc <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80075ee:	4b53      	ldr	r3, [pc, #332]	@ (800773c <SVCCTL_App_Notification+0x190>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80075f4:	4b51      	ldr	r3, [pc, #324]	@ (800773c <SVCCTL_App_Notification+0x190>)
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 80075fc:	2001      	movs	r0, #1
 80075fe:	f000 f96d 	bl	80078dc <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8007602:	4b4f      	ldr	r3, [pc, #316]	@ (8007740 <SVCCTL_App_Notification+0x194>)
 8007604:	2201      	movs	r2, #1
 8007606:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007608:	4b4c      	ldr	r3, [pc, #304]	@ (800773c <SVCCTL_App_Notification+0x190>)
 800760a:	8ada      	ldrh	r2, [r3, #22]
 800760c:	4b4c      	ldr	r3, [pc, #304]	@ (8007740 <SVCCTL_App_Notification+0x194>)
 800760e:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8007610:	484b      	ldr	r0, [pc, #300]	@ (8007740 <SVCCTL_App_Notification+0x194>)
 8007612:	f000 fa7d 	bl	8007b10 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8007616:	e08c      	b.n	8007732 <SVCCTL_App_Notification+0x186>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8007618:	6a3b      	ldr	r3, [r7, #32]
 800761a:	3302      	adds	r3, #2
 800761c:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d001      	beq.n	800762a <SVCCTL_App_Notification+0x7e>
 8007626:	2b03      	cmp	r3, #3
          break;
 8007628:	e021      	b.n	800766e <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	3301      	adds	r3, #1
 800762e:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8007630:	4b42      	ldr	r3, [pc, #264]	@ (800773c <SVCCTL_App_Notification+0x190>)
 8007632:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007636:	2b04      	cmp	r3, #4
 8007638:	d104      	bne.n	8007644 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800763a:	4b40      	ldr	r3, [pc, #256]	@ (800773c <SVCCTL_App_Notification+0x190>)
 800763c:	2206      	movs	r2, #6
 800763e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8007642:	e003      	b.n	800764c <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8007644:	4b3d      	ldr	r3, [pc, #244]	@ (800773c <SVCCTL_App_Notification+0x190>)
 8007646:	2205      	movs	r2, #5
 8007648:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007652:	b29a      	uxth	r2, r3
 8007654:	4b39      	ldr	r3, [pc, #228]	@ (800773c <SVCCTL_App_Notification+0x190>)
 8007656:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8007658:	4b39      	ldr	r3, [pc, #228]	@ (8007740 <SVCCTL_App_Notification+0x194>)
 800765a:	2200      	movs	r2, #0
 800765c:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800765e:	4b37      	ldr	r3, [pc, #220]	@ (800773c <SVCCTL_App_Notification+0x190>)
 8007660:	8ada      	ldrh	r2, [r3, #22]
 8007662:	4b37      	ldr	r3, [pc, #220]	@ (8007740 <SVCCTL_App_Notification+0x194>)
 8007664:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8007666:	4836      	ldr	r0, [pc, #216]	@ (8007740 <SVCCTL_App_Notification+0x194>)
 8007668:	f000 fa52 	bl	8007b10 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800766c:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800766e:	e060      	b.n	8007732 <SVCCTL_App_Notification+0x186>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8007670:	6a3b      	ldr	r3, [r7, #32]
 8007672:	3302      	adds	r3, #2
 8007674:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	881b      	ldrh	r3, [r3, #0]
 800767a:	b29b      	uxth	r3, r3
 800767c:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8007680:	4293      	cmp	r3, r2
 8007682:	d047      	beq.n	8007714 <SVCCTL_App_Notification+0x168>
 8007684:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8007688:	4293      	cmp	r3, r2
 800768a:	dc51      	bgt.n	8007730 <SVCCTL_App_Notification+0x184>
 800768c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007690:	d046      	beq.n	8007720 <SVCCTL_App_Notification+0x174>
 8007692:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007696:	dc4b      	bgt.n	8007730 <SVCCTL_App_Notification+0x184>
 8007698:	2b04      	cmp	r3, #4
 800769a:	d043      	beq.n	8007724 <SVCCTL_App_Notification+0x178>
 800769c:	2b04      	cmp	r3, #4
 800769e:	db47      	blt.n	8007730 <SVCCTL_App_Notification+0x184>
 80076a0:	f240 420a 	movw	r2, #1034	@ 0x40a
 80076a4:	4293      	cmp	r3, r2
 80076a6:	dc43      	bgt.n	8007730 <SVCCTL_App_Notification+0x184>
 80076a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076ac:	dd40      	ble.n	8007730 <SVCCTL_App_Notification+0x184>
 80076ae:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 80076b2:	2b09      	cmp	r3, #9
 80076b4:	d83c      	bhi.n	8007730 <SVCCTL_App_Notification+0x184>
 80076b6:	a201      	add	r2, pc, #4	@ (adr r2, 80076bc <SVCCTL_App_Notification+0x110>)
 80076b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076bc:	0800770d 	.word	0x0800770d
 80076c0:	080076e5 	.word	0x080076e5
 80076c4:	08007731 	.word	0x08007731
 80076c8:	08007731 	.word	0x08007731
 80076cc:	08007731 	.word	0x08007731
 80076d0:	08007731 	.word	0x08007731
 80076d4:	08007729 	.word	0x08007729
 80076d8:	08007731 	.word	0x08007731
 80076dc:	080076f9 	.word	0x080076f9
 80076e0:	08007729 	.word	0x08007729
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 80076e4:	4b15      	ldr	r3, [pc, #84]	@ (800773c <SVCCTL_App_Notification+0x190>)
 80076e6:	8adb      	ldrh	r3, [r3, #22]
 80076e8:	4916      	ldr	r1, [pc, #88]	@ (8007744 <SVCCTL_App_Notification+0x198>)
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fd ffb2 	bl	8005654 <aci_gap_pass_key_resp>
 80076f0:	4603      	mov	r3, r0
 80076f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 80076f6:	e018      	b.n	800772a <SVCCTL_App_Notification+0x17e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 80076f8:	4b10      	ldr	r3, [pc, #64]	@ (800773c <SVCCTL_App_Notification+0x190>)
 80076fa:	8adb      	ldrh	r3, [r3, #22]
 80076fc:	2101      	movs	r1, #1
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fe f952 	bl	80059a8 <aci_gap_numeric_comparison_value_confirm_yesno>
 8007704:	4603      	mov	r3, r0
 8007706:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800770a:	e00e      	b.n	800772a <SVCCTL_App_Notification+0x17e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	3302      	adds	r3, #2
 8007710:	61bb      	str	r3, [r7, #24]
          break;
 8007712:	e00a      	b.n	800772a <SVCCTL_App_Notification+0x17e>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8007714:	4b09      	ldr	r3, [pc, #36]	@ (800773c <SVCCTL_App_Notification+0x190>)
 8007716:	8adb      	ldrh	r3, [r3, #22]
 8007718:	4618      	mov	r0, r3
 800771a:	f7fe fc58 	bl	8005fce <aci_gatt_confirm_indication>
        break;
 800771e:	e004      	b.n	800772a <SVCCTL_App_Notification+0x17e>
          break;
 8007720:	bf00      	nop
 8007722:	e005      	b.n	8007730 <SVCCTL_App_Notification+0x184>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8007724:	bf00      	nop
 8007726:	e003      	b.n	8007730 <SVCCTL_App_Notification+0x184>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8007728:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800772a:	e001      	b.n	8007730 <SVCCTL_App_Notification+0x184>
      break;
 800772c:	bf00      	nop
 800772e:	e000      	b.n	8007732 <SVCCTL_App_Notification+0x186>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007730:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8007732:	2301      	movs	r3, #1
}
 8007734:	4618      	mov	r0, r3
 8007736:	3728      	adds	r7, #40	@ 0x28
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	20000308 	.word	0x20000308
 8007740:	2000038c 	.word	0x2000038c
 8007744:	0001b207 	.word	0x0001b207

08007748 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800774e:	4b06      	ldr	r3, [pc, #24]	@ (8007768 <Ble_Tl_Init+0x20>)
 8007750:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8007752:	4b06      	ldr	r3, [pc, #24]	@ (800776c <Ble_Tl_Init+0x24>)
 8007754:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8007756:	463b      	mov	r3, r7
 8007758:	4619      	mov	r1, r3
 800775a:	4805      	ldr	r0, [pc, #20]	@ (8007770 <Ble_Tl_Init+0x28>)
 800775c:	f7ff f89c 	bl	8006898 <hci_init>

  return;
 8007760:	bf00      	nop
}
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	200300d8 	.word	0x200300d8
 800776c:	08007a75 	.word	0x08007a75
 8007770:	08007a3d 	.word	0x08007a3d

08007774 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8007774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007776:	b08d      	sub	sp, #52	@ 0x34
 8007778:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800777a:	2300      	movs	r3, #0
 800777c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800777e:	2392      	movs	r3, #146	@ 0x92
 8007780:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8007782:	f7fe fdb9 	bl	80062f8 <hci_reset>
 8007786:	4603      	mov	r3, r0
 8007788:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800778a:	f000 f8d7 	bl	800793c <BleGetBdAddress>
 800778e:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	2106      	movs	r1, #6
 8007794:	2000      	movs	r0, #0
 8007796:	f7fe fc6f 	bl	8006078 <aci_hal_write_config_data>
 800779a:	4603      	mov	r3, r0
 800779c:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800779e:	4a4a      	ldr	r2, [pc, #296]	@ (80078c8 <Ble_Hci_Gap_Gatt_Init+0x154>)
 80077a0:	2110      	movs	r1, #16
 80077a2:	2018      	movs	r0, #24
 80077a4:	f7fe fc68 	bl	8006078 <aci_hal_write_config_data>
 80077a8:	4603      	mov	r3, r0
 80077aa:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 80077ac:	4a47      	ldr	r2, [pc, #284]	@ (80078cc <Ble_Hci_Gap_Gatt_Init+0x158>)
 80077ae:	2110      	movs	r1, #16
 80077b0:	2008      	movs	r0, #8
 80077b2:	f7fe fc61 	bl	8006078 <aci_hal_write_config_data>
 80077b6:	4603      	mov	r3, r0
 80077b8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80077ba:	2118      	movs	r1, #24
 80077bc:	2001      	movs	r0, #1
 80077be:	f7fe fce0 	bl	8006182 <aci_hal_set_tx_power_level>
 80077c2:	4603      	mov	r3, r0
 80077c4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 80077c6:	f7fe f956 	bl	8005a76 <aci_gatt_init>
 80077ca:	4603      	mov	r3, r0
 80077cc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 80077ce:	2300      	movs	r3, #0
 80077d0:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80077d2:	7bfb      	ldrb	r3, [r7, #15]
 80077d4:	f043 0301 	orr.w	r3, r3, #1
 80077d8:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 80077da:	7bfb      	ldrb	r3, [r7, #15]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d01f      	beq.n	8007820 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 80077e0:	4b3b      	ldr	r3, [pc, #236]	@ (80078d0 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 80077e2:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80077e4:	1dba      	adds	r2, r7, #6
 80077e6:	7bf8      	ldrb	r0, [r7, #15]
 80077e8:	1cbb      	adds	r3, r7, #2
 80077ea:	9301      	str	r3, [sp, #4]
 80077ec:	1d3b      	adds	r3, r7, #4
 80077ee:	9300      	str	r3, [sp, #0]
 80077f0:	4613      	mov	r3, r2
 80077f2:	2208      	movs	r2, #8
 80077f4:	2100      	movs	r1, #0
 80077f6:	f7fd ff94 	bl	8005722 <aci_gap_init>
 80077fa:	4603      	mov	r3, r0
 80077fc:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 80077fe:	88fc      	ldrh	r4, [r7, #6]
 8007800:	88bd      	ldrh	r5, [r7, #4]
 8007802:	68b8      	ldr	r0, [r7, #8]
 8007804:	f7f8 fcba 	bl	800017c <strlen>
 8007808:	4603      	mov	r3, r0
 800780a:	b2da      	uxtb	r2, r3
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	4613      	mov	r3, r2
 8007812:	2200      	movs	r2, #0
 8007814:	4629      	mov	r1, r5
 8007816:	4620      	mov	r0, r4
 8007818:	f7fe fb30 	bl	8005e7c <aci_gatt_update_char_value>
 800781c:	4603      	mov	r3, r0
 800781e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8007820:	88f8      	ldrh	r0, [r7, #6]
 8007822:	8879      	ldrh	r1, [r7, #2]
 8007824:	463b      	mov	r3, r7
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	2302      	movs	r3, #2
 800782a:	2200      	movs	r2, #0
 800782c:	f7fe fb26 	bl	8005e7c <aci_gatt_update_char_value>
 8007830:	4603      	mov	r3, r0
 8007832:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8007834:	2202      	movs	r2, #2
 8007836:	2102      	movs	r1, #2
 8007838:	2000      	movs	r0, #0
 800783a:	f7fe fd81 	bl	8006340 <hci_le_set_default_phy>
 800783e:	4603      	mov	r3, r0
 8007840:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8007842:	4b24      	ldr	r3, [pc, #144]	@ (80078d4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007844:	2201      	movs	r2, #1
 8007846:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8007848:	4b22      	ldr	r3, [pc, #136]	@ (80078d4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	4618      	mov	r0, r3
 800784e:	f7fd fde9 	bl	8005424 <aci_gap_set_io_capability>
 8007852:	4603      	mov	r3, r0
 8007854:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8007856:	4b1f      	ldr	r3, [pc, #124]	@ (80078d4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007858:	2201      	movs	r2, #1
 800785a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800785c:	4b1d      	ldr	r3, [pc, #116]	@ (80078d4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800785e:	2208      	movs	r2, #8
 8007860:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8007862:	4b1c      	ldr	r3, [pc, #112]	@ (80078d4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007864:	2210      	movs	r2, #16
 8007866:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8007868:	4b1a      	ldr	r3, [pc, #104]	@ (80078d4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800786a:	2200      	movs	r2, #0
 800786c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800786e:	4b19      	ldr	r3, [pc, #100]	@ (80078d4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007870:	4a19      	ldr	r2, [pc, #100]	@ (80078d8 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8007872:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8007874:	4b17      	ldr	r3, [pc, #92]	@ (80078d4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007876:	2200      	movs	r2, #0
 8007878:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800787a:	4b16      	ldr	r3, [pc, #88]	@ (80078d4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800787c:	789c      	ldrb	r4, [r3, #2]
 800787e:	4b15      	ldr	r3, [pc, #84]	@ (80078d4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007880:	785d      	ldrb	r5, [r3, #1]
 8007882:	4b14      	ldr	r3, [pc, #80]	@ (80078d4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007884:	791b      	ldrb	r3, [r3, #4]
 8007886:	4a13      	ldr	r2, [pc, #76]	@ (80078d4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007888:	7952      	ldrb	r2, [r2, #5]
 800788a:	4912      	ldr	r1, [pc, #72]	@ (80078d4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800788c:	78c9      	ldrb	r1, [r1, #3]
 800788e:	4811      	ldr	r0, [pc, #68]	@ (80078d4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007890:	6880      	ldr	r0, [r0, #8]
 8007892:	2600      	movs	r6, #0
 8007894:	9604      	str	r6, [sp, #16]
 8007896:	9003      	str	r0, [sp, #12]
 8007898:	9102      	str	r1, [sp, #8]
 800789a:	9201      	str	r2, [sp, #4]
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	2300      	movs	r3, #0
 80078a0:	2201      	movs	r2, #1
 80078a2:	4629      	mov	r1, r5
 80078a4:	4620      	mov	r0, r4
 80078a6:	f7fd fe11 	bl	80054cc <aci_gap_set_authentication_requirement>
 80078aa:	4603      	mov	r3, r0
 80078ac:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80078ae:	4b09      	ldr	r3, [pc, #36]	@ (80078d4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80078b0:	789b      	ldrb	r3, [r3, #2]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d003      	beq.n	80078be <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 80078b6:	f7fe f853 	bl	8005960 <aci_gap_configure_filter_accept_list>
 80078ba:	4603      	mov	r3, r0
 80078bc:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 80078be:	bf00      	nop
 80078c0:	371c      	adds	r7, #28
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078c6:	bf00      	nop
 80078c8:	08009388 	.word	0x08009388
 80078cc:	08009398 	.word	0x08009398
 80078d0:	0800917c 	.word	0x0800917c
 80078d4:	20000308 	.word	0x20000308
 80078d8:	0001b207 	.word	0x0001b207

080078dc <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b08c      	sub	sp, #48	@ 0x30
 80078e0:	af08      	add	r7, sp, #32
 80078e2:	4603      	mov	r3, r0
 80078e4:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80078e6:	2392      	movs	r3, #146	@ 0x92
 80078e8:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 80078ea:	4a12      	ldr	r2, [pc, #72]	@ (8007934 <Adv_Request+0x58>)
 80078ec:	79fb      	ldrb	r3, [r7, #7]
 80078ee:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 80078f2:	2300      	movs	r3, #0
 80078f4:	9306      	str	r3, [sp, #24]
 80078f6:	2300      	movs	r3, #0
 80078f8:	9305      	str	r3, [sp, #20]
 80078fa:	2300      	movs	r3, #0
 80078fc:	9304      	str	r3, [sp, #16]
 80078fe:	2300      	movs	r3, #0
 8007900:	9303      	str	r3, [sp, #12]
 8007902:	2300      	movs	r3, #0
 8007904:	9302      	str	r3, [sp, #8]
 8007906:	2300      	movs	r3, #0
 8007908:	9301      	str	r3, [sp, #4]
 800790a:	2300      	movs	r3, #0
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	2300      	movs	r3, #0
 8007910:	22a0      	movs	r2, #160	@ 0xa0
 8007912:	2180      	movs	r1, #128	@ 0x80
 8007914:	2000      	movs	r0, #0
 8007916:	f7fd fc8b 	bl	8005230 <aci_gap_set_discoverable>
 800791a:	4603      	mov	r3, r0
 800791c:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800791e:	4906      	ldr	r1, [pc, #24]	@ (8007938 <Adv_Request+0x5c>)
 8007920:	200b      	movs	r0, #11
 8007922:	f7fd ffab 	bl	800587c <aci_gap_update_adv_data>
 8007926:	4603      	mov	r3, r0
 8007928:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800792a:	bf00      	nop
}
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	20000308 	.word	0x20000308
 8007938:	20000014 	.word	0x20000014

0800793c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b086      	sub	sp, #24
 8007940:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8007942:	f7ff fdab 	bl	800749c <LL_FLASH_GetUDN>
 8007946:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794e:	d023      	beq.n	8007998 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8007950:	f7ff fdbc 	bl	80074cc <LL_FLASH_GetSTCompanyID>
 8007954:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8007956:	f7ff fdad 	bl	80074b4 <LL_FLASH_GetDeviceID>
 800795a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	b2da      	uxtb	r2, r3
 8007960:	4b16      	ldr	r3, [pc, #88]	@ (80079bc <BleGetBdAddress+0x80>)
 8007962:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	0a1b      	lsrs	r3, r3, #8
 8007968:	b2da      	uxtb	r2, r3
 800796a:	4b14      	ldr	r3, [pc, #80]	@ (80079bc <BleGetBdAddress+0x80>)
 800796c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	b2da      	uxtb	r2, r3
 8007972:	4b12      	ldr	r3, [pc, #72]	@ (80079bc <BleGetBdAddress+0x80>)
 8007974:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	b2da      	uxtb	r2, r3
 800797a:	4b10      	ldr	r3, [pc, #64]	@ (80079bc <BleGetBdAddress+0x80>)
 800797c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	0a1b      	lsrs	r3, r3, #8
 8007982:	b2da      	uxtb	r2, r3
 8007984:	4b0d      	ldr	r3, [pc, #52]	@ (80079bc <BleGetBdAddress+0x80>)
 8007986:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	0c1b      	lsrs	r3, r3, #16
 800798c:	b2da      	uxtb	r2, r3
 800798e:	4b0b      	ldr	r3, [pc, #44]	@ (80079bc <BleGetBdAddress+0x80>)
 8007990:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8007992:	4b0a      	ldr	r3, [pc, #40]	@ (80079bc <BleGetBdAddress+0x80>)
 8007994:	617b      	str	r3, [r7, #20]
 8007996:	e00b      	b.n	80079b0 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8007998:	2000      	movs	r0, #0
 800799a:	f7ff fc99 	bl	80072d0 <OTP_Read>
 800799e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d002      	beq.n	80079ac <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	617b      	str	r3, [r7, #20]
 80079aa:	e001      	b.n	80079b0 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80079ac:	4b04      	ldr	r3, [pc, #16]	@ (80079c0 <BleGetBdAddress+0x84>)
 80079ae:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80079b0:	697b      	ldr	r3, [r7, #20]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3718      	adds	r7, #24
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	20000300 	.word	0x20000300
 80079c0:	08009380 	.word	0x08009380

080079c4 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80079ca:	4b0a      	ldr	r3, [pc, #40]	@ (80079f4 <Adv_Cancel+0x30>)
 80079cc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80079d0:	2b05      	cmp	r3, #5
 80079d2:	d00a      	beq.n	80079ea <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80079d4:	2392      	movs	r3, #146	@ 0x92
 80079d6:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 80079d8:	f7fd fc06 	bl	80051e8 <aci_gap_set_non_discoverable>
 80079dc:	4603      	mov	r3, r0
 80079de:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80079e0:	4b04      	ldr	r3, [pc, #16]	@ (80079f4 <Adv_Cancel+0x30>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 80079e8:	bf00      	nop
 80079ea:	bf00      	nop
}
 80079ec:	3708      	adds	r7, #8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	20000308 	.word	0x20000308

080079f8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8007a00:	2100      	movs	r1, #0
 8007a02:	2002      	movs	r0, #2
 8007a04:	f000 fd90 	bl	8008528 <UTIL_SEQ_SetTask>

  return;
 8007a08:	bf00      	nop
}
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007a18:	2001      	movs	r0, #1
 8007a1a:	f000 fdf1 	bl	8008600 <UTIL_SEQ_SetEvt>

  return;
 8007a1e:	bf00      	nop
}
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b082      	sub	sp, #8
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007a2e:	2001      	movs	r0, #1
 8007a30:	f000 fe06 	bl	8008640 <UTIL_SEQ_WaitEvt>

  return;
 8007a34:	bf00      	nop
}
 8007a36:	3708      	adds	r7, #8
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	3308      	adds	r3, #8
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7fe fddc 	bl	800660c <SVCCTL_UserEvtRx>
 8007a54:	4603      	mov	r3, r0
 8007a56:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8007a58:	7afb      	ldrb	r3, [r7, #11]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d003      	beq.n	8007a66 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2201      	movs	r2, #1
 8007a62:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8007a64:	e003      	b.n	8007a6e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	701a      	strb	r2, [r3, #0]
  return;
 8007a6c:	bf00      	nop
}
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8007a7e:	79fb      	ldrb	r3, [r7, #7]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <BLE_StatusNot+0x16>
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d006      	beq.n	8007a96 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8007a88:	e00b      	b.n	8007aa2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007a8a:	2307      	movs	r3, #7
 8007a8c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f000 fd76 	bl	8008580 <UTIL_SEQ_PauseTask>
      break;
 8007a94:	e005      	b.n	8007aa2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007a96:	2307      	movs	r3, #7
 8007a98:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f000 fd90 	bl	80085c0 <UTIL_SEQ_ResumeTask>
      break;
 8007aa0:	bf00      	nop
  }

  return;
 8007aa2:	bf00      	nop
}
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
	...

08007aac <myTask>:
static void Custom_Mycharnotify_Update_Char(void);
static void Custom_Mycharnotify_Send_Notification(void);

/* USER CODE BEGIN PFP */
void myTask(void)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	af00      	add	r7, sp, #0
   UpdateCharData[0] =UpdateCharData[0]+0x1;
 8007ab0:	4b08      	ldr	r3, [pc, #32]	@ (8007ad4 <myTask+0x28>)
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	b2da      	uxtb	r2, r3
 8007ab8:	4b06      	ldr	r3, [pc, #24]	@ (8007ad4 <myTask+0x28>)
 8007aba:	701a      	strb	r2, [r3, #0]
   Custom_Mycharnotify_Update_Char();
 8007abc:	f000 f844 	bl	8007b48 <Custom_Mycharnotify_Update_Char>
   HAL_Delay(100);
 8007ac0:	2064      	movs	r0, #100	@ 0x64
 8007ac2:	f7f8 feea 	bl	800089a <HAL_Delay>
   //printf("%d\n",UpdateCharData[0]);

   UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	2004      	movs	r0, #4
 8007aca:	f000 fd2d 	bl	8008528 <UTIL_SEQ_SetTask>
}
 8007ace:	bf00      	nop
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	20000390 	.word	0x20000390

08007ad8 <Custom_STM_App_Notification>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d006      	beq.n	8007af6 <Custom_STM_App_Notification+0x1e>
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	dc06      	bgt.n	8007afa <Custom_STM_App_Notification+0x22>
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d006      	beq.n	8007afe <Custom_STM_App_Notification+0x26>
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d006      	beq.n	8007b02 <Custom_STM_App_Notification+0x2a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8007af4:	e001      	b.n	8007afa <Custom_STM_App_Notification+0x22>
      break;
 8007af6:	bf00      	nop
 8007af8:	e004      	b.n	8007b04 <Custom_STM_App_Notification+0x2c>
      break;
 8007afa:	bf00      	nop
 8007afc:	e002      	b.n	8007b04 <Custom_STM_App_Notification+0x2c>
      break;
 8007afe:	bf00      	nop
 8007b00:	e000      	b.n	8007b04 <Custom_STM_App_Notification+0x2c>
      break;
 8007b02:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8007b04:	bf00      	nop
}
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d002      	beq.n	8007b26 <Custom_APP_Notification+0x16>
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d002      	beq.n	8007b2a <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8007b24:	e002      	b.n	8007b2c <Custom_APP_Notification+0x1c>
      break;
 8007b26:	bf00      	nop
 8007b28:	e000      	b.n	8007b2c <Custom_APP_Notification+0x1c>
      break;
 8007b2a:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8007b2c:	bf00      	nop
}
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8007b3c:	bf00      	nop
}
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
	...

08007b48 <Custom_Mycharnotify_Update_Char>:
 *
 *************************************************************/

/* mySVC */
__USED void Custom_Mycharnotify_Update_Char(void) /* Property Read */
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Mycharnotify_UC_1*/
  updateflag = 1;
 8007b52:	2301      	movs	r3, #1
 8007b54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END Mycharnotify_UC_1*/

  if (updateflag != 0)
 8007b56:	79fb      	ldrb	r3, [r7, #7]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d004      	beq.n	8007b66 <Custom_Mycharnotify_Update_Char+0x1e>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_MYCHARNOTIFY, (uint8_t *)UpdateCharData);
 8007b5c:	4904      	ldr	r1, [pc, #16]	@ (8007b70 <Custom_Mycharnotify_Update_Char+0x28>)
 8007b5e:	2000      	movs	r0, #0
 8007b60:	f000 f914 	bl	8007d8c <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Mycharnotify_UC_Last*/

  /* USER CODE END Mycharnotify_UC_Last*/
  return;
 8007b64:	bf00      	nop
 8007b66:	bf00      	nop
}
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	20000390 	.word	0x20000390

08007b74 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b08c      	sub	sp, #48	@ 0x30
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	3301      	adds	r3, #1
 8007b86:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 8007b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	2bff      	cmp	r3, #255	@ 0xff
 8007b8e:	d17d      	bne.n	8007c8c <Custom_STM_Event_Handler+0x118>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8007b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b92:	3302      	adds	r3, #2
 8007b94:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 8007b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b98:	881b      	ldrh	r3, [r3, #0]
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 8007ba0:	2b1a      	cmp	r3, #26
 8007ba2:	d86f      	bhi.n	8007c84 <Custom_STM_Event_Handler+0x110>
 8007ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8007bac <Custom_STM_Event_Handler+0x38>)
 8007ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007baa:	bf00      	nop
 8007bac:	08007c19 	.word	0x08007c19
 8007bb0:	08007c85 	.word	0x08007c85
 8007bb4:	08007c85 	.word	0x08007c85
 8007bb8:	08007c85 	.word	0x08007c85
 8007bbc:	08007c85 	.word	0x08007c85
 8007bc0:	08007c85 	.word	0x08007c85
 8007bc4:	08007c85 	.word	0x08007c85
 8007bc8:	08007c85 	.word	0x08007c85
 8007bcc:	08007c85 	.word	0x08007c85
 8007bd0:	08007c85 	.word	0x08007c85
 8007bd4:	08007c85 	.word	0x08007c85
 8007bd8:	08007c85 	.word	0x08007c85
 8007bdc:	08007c85 	.word	0x08007c85
 8007be0:	08007c85 	.word	0x08007c85
 8007be4:	08007c85 	.word	0x08007c85
 8007be8:	08007c85 	.word	0x08007c85
 8007bec:	08007c85 	.word	0x08007c85
 8007bf0:	08007c85 	.word	0x08007c85
 8007bf4:	08007c85 	.word	0x08007c85
 8007bf8:	08007c85 	.word	0x08007c85
 8007bfc:	08007c85 	.word	0x08007c85
 8007c00:	08007c85 	.word	0x08007c85
 8007c04:	08007c85 	.word	0x08007c85
 8007c08:	08007c85 	.word	0x08007c85
 8007c0c:	08007c85 	.word	0x08007c85
 8007c10:	08007c85 	.word	0x08007c85
 8007c14:	08007c67 	.word	0x08007c67
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8007c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1a:	3302      	adds	r3, #2
 8007c1c:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	885b      	ldrh	r3, [r3, #2]
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	461a      	mov	r2, r3
 8007c26:	4b1d      	ldr	r3, [pc, #116]	@ (8007c9c <Custom_STM_Event_Handler+0x128>)
 8007c28:	885b      	ldrh	r3, [r3, #2]
 8007c2a:	3302      	adds	r3, #2
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d12b      	bne.n	8007c88 <Custom_STM_Event_Handler+0x114>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8007c30:	2301      	movs	r3, #1
 8007c32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	7a1b      	ldrb	r3, [r3, #8]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d002      	beq.n	8007c44 <Custom_STM_Event_Handler+0xd0>
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d008      	beq.n	8007c54 <Custom_STM_Event_Handler+0xe0>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_1_default */
              break;
 8007c42:	e00f      	b.n	8007c64 <Custom_STM_Event_Handler+0xf0>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT;
 8007c44:	2301      	movs	r3, #1
 8007c46:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8007c48:	f107 0308 	add.w	r3, r7, #8
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7ff ff43 	bl	8007ad8 <Custom_STM_App_Notification>
                break;
 8007c52:	e007      	b.n	8007c64 <Custom_STM_Event_Handler+0xf0>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT;
 8007c54:	2300      	movs	r3, #0
 8007c56:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8007c58:	f107 0308 	add.w	r3, r7, #8
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7ff ff3b 	bl	8007ad8 <Custom_STM_App_Notification>
                break;
 8007c62:	bf00      	nop
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 8007c64:	e010      	b.n	8007c88 <Custom_STM_Event_Handler+0x114>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8007c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c68:	3302      	adds	r3, #2
 8007c6a:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8007c70:	6a3b      	ldr	r3, [r7, #32]
 8007c72:	881b      	ldrh	r3, [r3, #0]
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 8007c78:	f107 0308 	add.w	r3, r7, #8
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7ff ff2b 	bl	8007ad8 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8007c82:	e002      	b.n	8007c8a <Custom_STM_Event_Handler+0x116>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8007c84:	bf00      	nop
 8007c86:	e002      	b.n	8007c8e <Custom_STM_Event_Handler+0x11a>
          break;
 8007c88:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007c8a:	e000      	b.n	8007c8e <Custom_STM_Event_Handler+0x11a>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8007c8c:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8007c8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 8007c92:	4618      	mov	r0, r3
 8007c94:	3730      	adds	r7, #48	@ 0x30
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	20000590 	.word	0x20000590

08007ca0 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b08c      	sub	sp, #48	@ 0x30
 8007ca4:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007ca6:	2392      	movs	r3, #146	@ 0x92
 8007ca8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8007caa:	4834      	ldr	r0, [pc, #208]	@ (8007d7c <SVCCTL_InitCustomSvc+0xdc>)
 8007cac:	f7fe fc94 	bl	80065d8 <SVCCTL_RegisterSvcHandler>
   *                              = 4
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 4;
 8007cb0:	2304      	movs	r3, #4
 8007cb2:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 8007cb4:	238f      	movs	r3, #143	@ 0x8f
 8007cb6:	713b      	strb	r3, [r7, #4]
 8007cb8:	23e5      	movs	r3, #229	@ 0xe5
 8007cba:	717b      	strb	r3, [r7, #5]
 8007cbc:	23b3      	movs	r3, #179	@ 0xb3
 8007cbe:	71bb      	strb	r3, [r7, #6]
 8007cc0:	23d5      	movs	r3, #213	@ 0xd5
 8007cc2:	71fb      	strb	r3, [r7, #7]
 8007cc4:	232e      	movs	r3, #46	@ 0x2e
 8007cc6:	723b      	strb	r3, [r7, #8]
 8007cc8:	237f      	movs	r3, #127	@ 0x7f
 8007cca:	727b      	strb	r3, [r7, #9]
 8007ccc:	234a      	movs	r3, #74	@ 0x4a
 8007cce:	72bb      	strb	r3, [r7, #10]
 8007cd0:	2398      	movs	r3, #152	@ 0x98
 8007cd2:	72fb      	strb	r3, [r7, #11]
 8007cd4:	232a      	movs	r3, #42	@ 0x2a
 8007cd6:	733b      	strb	r3, [r7, #12]
 8007cd8:	2348      	movs	r3, #72	@ 0x48
 8007cda:	737b      	strb	r3, [r7, #13]
 8007cdc:	237a      	movs	r3, #122	@ 0x7a
 8007cde:	73bb      	strb	r3, [r7, #14]
 8007ce0:	23cc      	movs	r3, #204	@ 0xcc
 8007ce2:	73fb      	strb	r3, [r7, #15]
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	743b      	strb	r3, [r7, #16]
 8007ce8:	2300      	movs	r3, #0
 8007cea:	747b      	strb	r3, [r7, #17]
 8007cec:	2300      	movs	r3, #0
 8007cee:	74bb      	strb	r3, [r7, #18]
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8007cf4:	7dbb      	ldrb	r3, [r7, #22]
 8007cf6:	1d39      	adds	r1, r7, #4
 8007cf8:	4a21      	ldr	r2, [pc, #132]	@ (8007d80 <SVCCTL_InitCustomSvc+0xe0>)
 8007cfa:	9200      	str	r2, [sp, #0]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	2002      	movs	r0, #2
 8007d00:	f7fd fede 	bl	8005ac0 <aci_gatt_add_service>
 8007d04:	4603      	mov	r3, r0
 8007d06:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharNotify
   */
  COPY_MYCHARNOTIFY_UUID(uuid.Char_UUID_128);
 8007d08:	2319      	movs	r3, #25
 8007d0a:	713b      	strb	r3, [r7, #4]
 8007d0c:	23ed      	movs	r3, #237	@ 0xed
 8007d0e:	717b      	strb	r3, [r7, #5]
 8007d10:	2382      	movs	r3, #130	@ 0x82
 8007d12:	71bb      	strb	r3, [r7, #6]
 8007d14:	23ae      	movs	r3, #174	@ 0xae
 8007d16:	71fb      	strb	r3, [r7, #7]
 8007d18:	23ed      	movs	r3, #237	@ 0xed
 8007d1a:	723b      	strb	r3, [r7, #8]
 8007d1c:	2321      	movs	r3, #33	@ 0x21
 8007d1e:	727b      	strb	r3, [r7, #9]
 8007d20:	234c      	movs	r3, #76	@ 0x4c
 8007d22:	72bb      	strb	r3, [r7, #10]
 8007d24:	239d      	movs	r3, #157	@ 0x9d
 8007d26:	72fb      	strb	r3, [r7, #11]
 8007d28:	2341      	movs	r3, #65	@ 0x41
 8007d2a:	733b      	strb	r3, [r7, #12]
 8007d2c:	2345      	movs	r3, #69	@ 0x45
 8007d2e:	737b      	strb	r3, [r7, #13]
 8007d30:	2322      	movs	r3, #34	@ 0x22
 8007d32:	73bb      	strb	r3, [r7, #14]
 8007d34:	238e      	movs	r3, #142	@ 0x8e
 8007d36:	73fb      	strb	r3, [r7, #15]
 8007d38:	2300      	movs	r3, #0
 8007d3a:	743b      	strb	r3, [r7, #16]
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	747b      	strb	r3, [r7, #17]
 8007d40:	2300      	movs	r3, #0
 8007d42:	74bb      	strb	r3, [r7, #18]
 8007d44:	2300      	movs	r3, #0
 8007d46:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 8007d48:	4b0d      	ldr	r3, [pc, #52]	@ (8007d80 <SVCCTL_InitCustomSvc+0xe0>)
 8007d4a:	8818      	ldrh	r0, [r3, #0]
 8007d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8007d84 <SVCCTL_InitCustomSvc+0xe4>)
 8007d4e:	881b      	ldrh	r3, [r3, #0]
 8007d50:	1d3a      	adds	r2, r7, #4
 8007d52:	490d      	ldr	r1, [pc, #52]	@ (8007d88 <SVCCTL_InitCustomSvc+0xe8>)
 8007d54:	9105      	str	r1, [sp, #20]
 8007d56:	2100      	movs	r1, #0
 8007d58:	9104      	str	r1, [sp, #16]
 8007d5a:	2110      	movs	r1, #16
 8007d5c:	9103      	str	r1, [sp, #12]
 8007d5e:	2107      	movs	r1, #7
 8007d60:	9102      	str	r1, [sp, #8]
 8007d62:	2100      	movs	r1, #0
 8007d64:	9101      	str	r1, [sp, #4]
 8007d66:	2110      	movs	r1, #16
 8007d68:	9100      	str	r1, [sp, #0]
 8007d6a:	2102      	movs	r1, #2
 8007d6c:	f7fd ff7e 	bl	8005c6c <aci_gatt_add_char>
 8007d70:	4603      	mov	r3, r0
 8007d72:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8007d74:	bf00      	nop
}
 8007d76:	3718      	adds	r7, #24
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	08007b75 	.word	0x08007b75
 8007d80:	20000590 	.word	0x20000590
 8007d84:	20000020 	.word	0x20000020
 8007d88:	20000592 	.word	0x20000592

08007d8c <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af02      	add	r7, sp, #8
 8007d92:	4603      	mov	r3, r0
 8007d94:	6039      	str	r1, [r7, #0]
 8007d96:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007d98:	2392      	movs	r3, #146	@ 0x92
 8007d9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8007d9c:	79fb      	ldrb	r3, [r7, #7]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10f      	bne.n	8007dc2 <Custom_STM_App_Update_Char+0x36>
  {

    case CUSTOM_STM_MYCHARNOTIFY:
      ret = aci_gatt_update_char_value(CustomContext.CustomMysvcHdle,
 8007da2:	4b0b      	ldr	r3, [pc, #44]	@ (8007dd0 <Custom_STM_App_Update_Char+0x44>)
 8007da4:	8818      	ldrh	r0, [r3, #0]
 8007da6:	4b0a      	ldr	r3, [pc, #40]	@ (8007dd0 <Custom_STM_App_Update_Char+0x44>)
 8007da8:	8859      	ldrh	r1, [r3, #2]
 8007daa:	4b0a      	ldr	r3, [pc, #40]	@ (8007dd4 <Custom_STM_App_Update_Char+0x48>)
 8007dac:	881b      	ldrh	r3, [r3, #0]
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	9300      	str	r3, [sp, #0]
 8007db4:	4613      	mov	r3, r2
 8007db6:	2200      	movs	r2, #0
 8007db8:	f7fe f860 	bl	8005e7c <aci_gatt_update_char_value>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value MYCHARNOTIFY command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 8007dc0:	e000      	b.n	8007dc4 <Custom_STM_App_Update_Char+0x38>

    default:
      break;
 8007dc2:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	20000590 	.word	0x20000590
 8007dd4:	20000020 	.word	0x20000020

08007dd8 <LL_PWR_EnableBootC2>:
{
 8007dd8:	b480      	push	{r7}
 8007dda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8007ddc:	4b05      	ldr	r3, [pc, #20]	@ (8007df4 <LL_PWR_EnableBootC2+0x1c>)
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	4a04      	ldr	r2, [pc, #16]	@ (8007df4 <LL_PWR_EnableBootC2+0x1c>)
 8007de2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007de6:	60d3      	str	r3, [r2, #12]
}
 8007de8:	bf00      	nop
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	58000400 	.word	0x58000400

08007df8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8007e00:	4b06      	ldr	r3, [pc, #24]	@ (8007e1c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8007e02:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8007e06:	4905      	ldr	r1, [pc, #20]	@ (8007e1c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr
 8007e1c:	58000800 	.word	0x58000800

08007e20 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8007e28:	4b05      	ldr	r3, [pc, #20]	@ (8007e40 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007e2a:	6a1a      	ldr	r2, [r3, #32]
 8007e2c:	4904      	ldr	r1, [pc, #16]	@ (8007e40 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	620b      	str	r3, [r1, #32]
}
 8007e34:	bf00      	nop
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	58000800 	.word	0x58000800

08007e44 <LL_AHB3_GRP1_EnableClock>:
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8007e4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8007e5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4013      	ands	r3, r2
 8007e66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007e68:	68fb      	ldr	r3, [r7, #12]
}
 8007e6a:	bf00      	nop
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b085      	sub	sp, #20
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8007e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e82:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8007e86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8007e92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e96:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
}
 8007ea2:	bf00      	nop
 8007ea4:	3714      	adds	r7, #20
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b083      	sub	sp, #12
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	601a      	str	r2, [r3, #0]
}
 8007ec2:	bf00      	nop
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f043 0201 	orr.w	r2, r3, #1
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	601a      	str	r2, [r3, #0]
}
 8007ee2:	bf00      	nop
 8007ee4:	370c      	adds	r7, #12
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b083      	sub	sp, #12
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685a      	ldr	r2, [r3, #4]
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	041b      	lsls	r3, r3, #16
 8007f00:	43db      	mvns	r3, r3
 8007f02:	401a      	ands	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	605a      	str	r2, [r3, #4]
}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685a      	ldr	r2, [r3, #4]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	041b      	lsls	r3, r3, #16
 8007f26:	431a      	orrs	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	605a      	str	r2, [r3, #4]
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	685a      	ldr	r2, [r3, #4]
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	43db      	mvns	r3, r3
 8007f4a:	401a      	ands	r2, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	605a      	str	r2, [r3, #4]
}
 8007f50:	bf00      	nop
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	683a      	ldr	r2, [r7, #0]
 8007f6a:	609a      	str	r2, [r3, #8]
}
 8007f6c:	bf00      	nop
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	041a      	lsls	r2, r3, #16
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	609a      	str	r2, [r3, #8]
}
 8007f8a:	bf00      	nop
 8007f8c:	370c      	adds	r7, #12
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8007f96:	b480      	push	{r7}
 8007f98:	b083      	sub	sp, #12
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
 8007f9e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	68da      	ldr	r2, [r3, #12]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d101      	bne.n	8007fb2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e000      	b.n	8007fb4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	69da      	ldr	r2, [r3, #28]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	683a      	ldr	r2, [r7, #0]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d101      	bne.n	8007fdc <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e000      	b.n	8007fde <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	370c      	adds	r7, #12
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr
	...

08007fec <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8007ff0:	2102      	movs	r1, #2
 8007ff2:	4818      	ldr	r0, [pc, #96]	@ (8008054 <HW_IPCC_Rx_Handler+0x68>)
 8007ff4:	f7ff ffe4 	bl	8007fc0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d008      	beq.n	8008010 <HW_IPCC_Rx_Handler+0x24>
 8007ffe:	4b15      	ldr	r3, [pc, #84]	@ (8008054 <HW_IPCC_Rx_Handler+0x68>)
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	f003 0302 	and.w	r3, r3, #2
 8008006:	2b00      	cmp	r3, #0
 8008008:	d102      	bne.n	8008010 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800800a:	f000 f8d5 	bl	80081b8 <HW_IPCC_SYS_EvtHandler>
 800800e:	e01e      	b.n	800804e <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8008010:	2101      	movs	r1, #1
 8008012:	4810      	ldr	r0, [pc, #64]	@ (8008054 <HW_IPCC_Rx_Handler+0x68>)
 8008014:	f7ff ffd4 	bl	8007fc0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d008      	beq.n	8008030 <HW_IPCC_Rx_Handler+0x44>
 800801e:	4b0d      	ldr	r3, [pc, #52]	@ (8008054 <HW_IPCC_Rx_Handler+0x68>)
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	2b00      	cmp	r3, #0
 8008028:	d102      	bne.n	8008030 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800802a:	f000 f889 	bl	8008140 <HW_IPCC_BLE_EvtHandler>
 800802e:	e00e      	b.n	800804e <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8008030:	2108      	movs	r1, #8
 8008032:	4808      	ldr	r0, [pc, #32]	@ (8008054 <HW_IPCC_Rx_Handler+0x68>)
 8008034:	f7ff ffc4 	bl	8007fc0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d008      	beq.n	8008050 <HW_IPCC_Rx_Handler+0x64>
 800803e:	4b05      	ldr	r3, [pc, #20]	@ (8008054 <HW_IPCC_Rx_Handler+0x68>)
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f003 0308 	and.w	r3, r3, #8
 8008046:	2b00      	cmp	r3, #0
 8008048:	d102      	bne.n	8008050 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800804a:	f000 f901 	bl	8008250 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800804e:	bf00      	nop
 8008050:	bf00      	nop
}
 8008052:	bd80      	pop	{r7, pc}
 8008054:	58000c00 	.word	0x58000c00

08008058 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800805c:	2102      	movs	r1, #2
 800805e:	4818      	ldr	r0, [pc, #96]	@ (80080c0 <HW_IPCC_Tx_Handler+0x68>)
 8008060:	f7ff ff99 	bl	8007f96 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d108      	bne.n	800807c <HW_IPCC_Tx_Handler+0x24>
 800806a:	4b15      	ldr	r3, [pc, #84]	@ (80080c0 <HW_IPCC_Tx_Handler+0x68>)
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d102      	bne.n	800807c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8008076:	f000 f893 	bl	80081a0 <HW_IPCC_SYS_CmdEvtHandler>
 800807a:	e01e      	b.n	80080ba <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800807c:	2108      	movs	r1, #8
 800807e:	4810      	ldr	r0, [pc, #64]	@ (80080c0 <HW_IPCC_Tx_Handler+0x68>)
 8008080:	f7ff ff89 	bl	8007f96 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d108      	bne.n	800809c <HW_IPCC_Tx_Handler+0x44>
 800808a:	4b0d      	ldr	r3, [pc, #52]	@ (80080c0 <HW_IPCC_Tx_Handler+0x68>)
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d102      	bne.n	800809c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8008096:	f000 f8bd 	bl	8008214 <HW_IPCC_MM_FreeBufHandler>
 800809a:	e00e      	b.n	80080ba <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800809c:	2120      	movs	r1, #32
 800809e:	4808      	ldr	r0, [pc, #32]	@ (80080c0 <HW_IPCC_Tx_Handler+0x68>)
 80080a0:	f7ff ff79 	bl	8007f96 <LL_C1_IPCC_IsActiveFlag_CHx>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d108      	bne.n	80080bc <HW_IPCC_Tx_Handler+0x64>
 80080aa:	4b05      	ldr	r3, [pc, #20]	@ (80080c0 <HW_IPCC_Tx_Handler+0x68>)
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d102      	bne.n	80080bc <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80080b6:	f000 f84f 	bl	8008158 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80080ba:	bf00      	nop
 80080bc:	bf00      	nop
}
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	58000c00 	.word	0x58000c00

080080c4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80080c8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80080cc:	f7ff fed3 	bl	8007e76 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80080d0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80080d4:	f7ff fea4 	bl	8007e20 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80080d8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80080dc:	f7ff fe8c 	bl	8007df8 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80080e0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80080e2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80080e4:	f7ff fe78 	bl	8007dd8 <LL_PWR_EnableBootC2>

  return;
 80080e8:	bf00      	nop
}
 80080ea:	bd80      	pop	{r7, pc}

080080ec <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80080f0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80080f4:	f7ff fea6 	bl	8007e44 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80080f8:	4806      	ldr	r0, [pc, #24]	@ (8008114 <HW_IPCC_Init+0x28>)
 80080fa:	f7ff fee8 	bl	8007ece <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80080fe:	4805      	ldr	r0, [pc, #20]	@ (8008114 <HW_IPCC_Init+0x28>)
 8008100:	f7ff fed5 	bl	8007eae <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8008104:	202c      	movs	r0, #44	@ 0x2c
 8008106:	f7fa f840 	bl	800218a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800810a:	202d      	movs	r0, #45	@ 0x2d
 800810c:	f7fa f83d 	bl	800218a <HAL_NVIC_EnableIRQ>

  return;
 8008110:	bf00      	nop
}
 8008112:	bd80      	pop	{r7, pc}
 8008114:	58000c00 	.word	0x58000c00

08008118 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800811c:	2101      	movs	r1, #1
 800811e:	4802      	ldr	r0, [pc, #8]	@ (8008128 <HW_IPCC_BLE_Init+0x10>)
 8008120:	f7ff ff0a 	bl	8007f38 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008124:	bf00      	nop
}
 8008126:	bd80      	pop	{r7, pc}
 8008128:	58000c00 	.word	0x58000c00

0800812c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800812c:	b580      	push	{r7, lr}
 800812e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8008130:	2101      	movs	r1, #1
 8008132:	4802      	ldr	r0, [pc, #8]	@ (800813c <HW_IPCC_BLE_SendCmd+0x10>)
 8008134:	f7ff ff20 	bl	8007f78 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008138:	bf00      	nop
}
 800813a:	bd80      	pop	{r7, pc}
 800813c:	58000c00 	.word	0x58000c00

08008140 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8008144:	f7fe ff0c 	bl	8006f60 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008148:	2101      	movs	r1, #1
 800814a:	4802      	ldr	r0, [pc, #8]	@ (8008154 <HW_IPCC_BLE_EvtHandler+0x14>)
 800814c:	f7ff ff06 	bl	8007f5c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008150:	bf00      	nop
}
 8008152:	bd80      	pop	{r7, pc}
 8008154:	58000c00 	.word	0x58000c00

08008158 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800815c:	2120      	movs	r1, #32
 800815e:	4803      	ldr	r0, [pc, #12]	@ (800816c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8008160:	f7ff fed8 	bl	8007f14 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8008164:	f7fe ff2c 	bl	8006fc0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8008168:	bf00      	nop
}
 800816a:	bd80      	pop	{r7, pc}
 800816c:	58000c00 	.word	0x58000c00

08008170 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008174:	2102      	movs	r1, #2
 8008176:	4802      	ldr	r0, [pc, #8]	@ (8008180 <HW_IPCC_SYS_Init+0x10>)
 8008178:	f7ff fede 	bl	8007f38 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800817c:	bf00      	nop
}
 800817e:	bd80      	pop	{r7, pc}
 8008180:	58000c00 	.word	0x58000c00

08008184 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008188:	2102      	movs	r1, #2
 800818a:	4804      	ldr	r0, [pc, #16]	@ (800819c <HW_IPCC_SYS_SendCmd+0x18>)
 800818c:	f7ff fef4 	bl	8007f78 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008190:	2102      	movs	r1, #2
 8008192:	4802      	ldr	r0, [pc, #8]	@ (800819c <HW_IPCC_SYS_SendCmd+0x18>)
 8008194:	f7ff feab 	bl	8007eee <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8008198:	bf00      	nop
}
 800819a:	bd80      	pop	{r7, pc}
 800819c:	58000c00 	.word	0x58000c00

080081a0 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80081a4:	2102      	movs	r1, #2
 80081a6:	4803      	ldr	r0, [pc, #12]	@ (80081b4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80081a8:	f7ff feb4 	bl	8007f14 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80081ac:	f7fe ff58 	bl	8007060 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80081b0:	bf00      	nop
}
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	58000c00 	.word	0x58000c00

080081b8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80081bc:	f7fe ff66 	bl	800708c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80081c0:	2102      	movs	r1, #2
 80081c2:	4802      	ldr	r0, [pc, #8]	@ (80081cc <HW_IPCC_SYS_EvtHandler+0x14>)
 80081c4:	f7ff feca 	bl	8007f5c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80081c8:	bf00      	nop
}
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	58000c00 	.word	0x58000c00

080081d0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80081d8:	2108      	movs	r1, #8
 80081da:	480c      	ldr	r0, [pc, #48]	@ (800820c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80081dc:	f7ff fedb 	bl	8007f96 <LL_C1_IPCC_IsActiveFlag_CHx>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d007      	beq.n	80081f6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80081e6:	4a0a      	ldr	r2, [pc, #40]	@ (8008210 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80081ec:	2108      	movs	r1, #8
 80081ee:	4807      	ldr	r0, [pc, #28]	@ (800820c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80081f0:	f7ff fe7d 	bl	8007eee <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80081f4:	e006      	b.n	8008204 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80081fa:	2108      	movs	r1, #8
 80081fc:	4803      	ldr	r0, [pc, #12]	@ (800820c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80081fe:	f7ff febb 	bl	8007f78 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8008202:	bf00      	nop
}
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	58000c00 	.word	0x58000c00
 8008210:	20000594 	.word	0x20000594

08008214 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8008214:	b580      	push	{r7, lr}
 8008216:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008218:	2108      	movs	r1, #8
 800821a:	4806      	ldr	r0, [pc, #24]	@ (8008234 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800821c:	f7ff fe7a 	bl	8007f14 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8008220:	4b05      	ldr	r3, [pc, #20]	@ (8008238 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008226:	2108      	movs	r1, #8
 8008228:	4802      	ldr	r0, [pc, #8]	@ (8008234 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800822a:	f7ff fea5 	bl	8007f78 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800822e:	bf00      	nop
}
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	58000c00 	.word	0x58000c00
 8008238:	20000594 	.word	0x20000594

0800823c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800823c:	b580      	push	{r7, lr}
 800823e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008240:	2108      	movs	r1, #8
 8008242:	4802      	ldr	r0, [pc, #8]	@ (800824c <HW_IPCC_TRACES_Init+0x10>)
 8008244:	f7ff fe78 	bl	8007f38 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008248:	bf00      	nop
}
 800824a:	bd80      	pop	{r7, pc}
 800824c:	58000c00 	.word	0x58000c00

08008250 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8008254:	f7fe ffc2 	bl	80071dc <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008258:	2108      	movs	r1, #8
 800825a:	4802      	ldr	r0, [pc, #8]	@ (8008264 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800825c:	f7ff fe7e 	bl	8007f5c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008260:	bf00      	nop
}
 8008262:	bd80      	pop	{r7, pc}
 8008264:	58000c00 	.word	0x58000c00

08008268 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8008268:	b480      	push	{r7}
 800826a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800826c:	4b05      	ldr	r3, [pc, #20]	@ (8008284 <UTIL_LPM_Init+0x1c>)
 800826e:	2200      	movs	r2, #0
 8008270:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8008272:	4b05      	ldr	r3, [pc, #20]	@ (8008288 <UTIL_LPM_Init+0x20>)
 8008274:	2200      	movs	r2, #0
 8008276:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008278:	bf00      	nop
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	20000598 	.word	0x20000598
 8008288:	2000059c 	.word	0x2000059c

0800828c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800828c:	b480      	push	{r7}
 800828e:	b087      	sub	sp, #28
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	460b      	mov	r3, r1
 8008296:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008298:	f3ef 8310 	mrs	r3, PRIMASK
 800829c:	613b      	str	r3, [r7, #16]
  return(result);
 800829e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80082a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80082a2:	b672      	cpsid	i
}
 80082a4:	bf00      	nop
  
  switch(state)
 80082a6:	78fb      	ldrb	r3, [r7, #3]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d008      	beq.n	80082be <UTIL_LPM_SetOffMode+0x32>
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d10e      	bne.n	80082ce <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80082b0:	4b0d      	ldr	r3, [pc, #52]	@ (80082e8 <UTIL_LPM_SetOffMode+0x5c>)
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	4a0b      	ldr	r2, [pc, #44]	@ (80082e8 <UTIL_LPM_SetOffMode+0x5c>)
 80082ba:	6013      	str	r3, [r2, #0]
      break;
 80082bc:	e008      	b.n	80082d0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	43da      	mvns	r2, r3
 80082c2:	4b09      	ldr	r3, [pc, #36]	@ (80082e8 <UTIL_LPM_SetOffMode+0x5c>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4013      	ands	r3, r2
 80082c8:	4a07      	ldr	r2, [pc, #28]	@ (80082e8 <UTIL_LPM_SetOffMode+0x5c>)
 80082ca:	6013      	str	r3, [r2, #0]
      break;
 80082cc:	e000      	b.n	80082d0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80082ce:	bf00      	nop
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f383 8810 	msr	PRIMASK, r3
}
 80082da:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80082dc:	bf00      	nop
 80082de:	371c      	adds	r7, #28
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr
 80082e8:	2000059c 	.word	0x2000059c

080082ec <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b090      	sub	sp, #64	@ 0x40
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80082f4:	4b73      	ldr	r3, [pc, #460]	@ (80084c4 <UTIL_SEQ_Run+0x1d8>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 80082fa:	4b72      	ldr	r3, [pc, #456]	@ (80084c4 <UTIL_SEQ_Run+0x1d8>)
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4013      	ands	r3, r2
 8008302:	4a70      	ldr	r2, [pc, #448]	@ (80084c4 <UTIL_SEQ_Run+0x1d8>)
 8008304:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8008306:	4b70      	ldr	r3, [pc, #448]	@ (80084c8 <UTIL_SEQ_Run+0x1dc>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800830c:	4b6f      	ldr	r3, [pc, #444]	@ (80084cc <UTIL_SEQ_Run+0x1e0>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8008312:	4b6f      	ldr	r3, [pc, #444]	@ (80084d0 <UTIL_SEQ_Run+0x1e4>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8008318:	4b6e      	ldr	r3, [pc, #440]	@ (80084d4 <UTIL_SEQ_Run+0x1e8>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800831e:	e08d      	b.n	800843c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8008320:	2300      	movs	r3, #0
 8008322:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8008324:	e002      	b.n	800832c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8008326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008328:	3301      	adds	r3, #1
 800832a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800832c:	4a6a      	ldr	r2, [pc, #424]	@ (80084d8 <UTIL_SEQ_Run+0x1ec>)
 800832e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008330:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008336:	401a      	ands	r2, r3
 8008338:	4b62      	ldr	r3, [pc, #392]	@ (80084c4 <UTIL_SEQ_Run+0x1d8>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4013      	ands	r3, r2
 800833e:	2b00      	cmp	r3, #0
 8008340:	d0f1      	beq.n	8008326 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8008342:	4a65      	ldr	r2, [pc, #404]	@ (80084d8 <UTIL_SEQ_Run+0x1ec>)
 8008344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008346:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800834a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834c:	401a      	ands	r2, r3
 800834e:	4b5d      	ldr	r3, [pc, #372]	@ (80084c4 <UTIL_SEQ_Run+0x1d8>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4013      	ands	r3, r2
 8008354:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8008356:	4a60      	ldr	r2, [pc, #384]	@ (80084d8 <UTIL_SEQ_Run+0x1ec>)
 8008358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800835a:	00db      	lsls	r3, r3, #3
 800835c:	4413      	add	r3, r2
 800835e:	685a      	ldr	r2, [r3, #4]
 8008360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008362:	4013      	ands	r3, r2
 8008364:	2b00      	cmp	r3, #0
 8008366:	d106      	bne.n	8008376 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8008368:	4a5b      	ldr	r2, [pc, #364]	@ (80084d8 <UTIL_SEQ_Run+0x1ec>)
 800836a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800836c:	00db      	lsls	r3, r3, #3
 800836e:	4413      	add	r3, r2
 8008370:	f04f 32ff 	mov.w	r2, #4294967295
 8008374:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8008376:	4a58      	ldr	r2, [pc, #352]	@ (80084d8 <UTIL_SEQ_Run+0x1ec>)
 8008378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800837a:	00db      	lsls	r3, r3, #3
 800837c:	4413      	add	r3, r2
 800837e:	685a      	ldr	r2, [r3, #4]
 8008380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008382:	4013      	ands	r3, r2
 8008384:	4618      	mov	r0, r3
 8008386:	f000 f9b3 	bl	80086f0 <SEQ_BitPosition>
 800838a:	4603      	mov	r3, r0
 800838c:	461a      	mov	r2, r3
 800838e:	4b53      	ldr	r3, [pc, #332]	@ (80084dc <UTIL_SEQ_Run+0x1f0>)
 8008390:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8008392:	4a51      	ldr	r2, [pc, #324]	@ (80084d8 <UTIL_SEQ_Run+0x1ec>)
 8008394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008396:	00db      	lsls	r3, r3, #3
 8008398:	4413      	add	r3, r2
 800839a:	685a      	ldr	r2, [r3, #4]
 800839c:	4b4f      	ldr	r3, [pc, #316]	@ (80084dc <UTIL_SEQ_Run+0x1f0>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2101      	movs	r1, #1
 80083a2:	fa01 f303 	lsl.w	r3, r1, r3
 80083a6:	43db      	mvns	r3, r3
 80083a8:	401a      	ands	r2, r3
 80083aa:	494b      	ldr	r1, [pc, #300]	@ (80084d8 <UTIL_SEQ_Run+0x1ec>)
 80083ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083ae:	00db      	lsls	r3, r3, #3
 80083b0:	440b      	add	r3, r1
 80083b2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083b4:	f3ef 8310 	mrs	r3, PRIMASK
 80083b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80083ba:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80083bc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80083be:	b672      	cpsid	i
}
 80083c0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80083c2:	4b46      	ldr	r3, [pc, #280]	@ (80084dc <UTIL_SEQ_Run+0x1f0>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2201      	movs	r2, #1
 80083c8:	fa02 f303 	lsl.w	r3, r2, r3
 80083cc:	43da      	mvns	r2, r3
 80083ce:	4b3e      	ldr	r3, [pc, #248]	@ (80084c8 <UTIL_SEQ_Run+0x1dc>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4013      	ands	r3, r2
 80083d4:	4a3c      	ldr	r2, [pc, #240]	@ (80084c8 <UTIL_SEQ_Run+0x1dc>)
 80083d6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80083d8:	2302      	movs	r3, #2
 80083da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083dc:	e013      	b.n	8008406 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80083de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083e0:	3b01      	subs	r3, #1
 80083e2:	4a3d      	ldr	r2, [pc, #244]	@ (80084d8 <UTIL_SEQ_Run+0x1ec>)
 80083e4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80083e8:	4b3c      	ldr	r3, [pc, #240]	@ (80084dc <UTIL_SEQ_Run+0x1f0>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2201      	movs	r2, #1
 80083ee:	fa02 f303 	lsl.w	r3, r2, r3
 80083f2:	43da      	mvns	r2, r3
 80083f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083f6:	3b01      	subs	r3, #1
 80083f8:	400a      	ands	r2, r1
 80083fa:	4937      	ldr	r1, [pc, #220]	@ (80084d8 <UTIL_SEQ_Run+0x1ec>)
 80083fc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008402:	3b01      	subs	r3, #1
 8008404:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1e8      	bne.n	80083de <UTIL_SEQ_Run+0xf2>
 800840c:	6a3b      	ldr	r3, [r7, #32]
 800840e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	f383 8810 	msr	PRIMASK, r3
}
 8008416:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8008418:	4b30      	ldr	r3, [pc, #192]	@ (80084dc <UTIL_SEQ_Run+0x1f0>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a30      	ldr	r2, [pc, #192]	@ (80084e0 <UTIL_SEQ_Run+0x1f4>)
 800841e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008422:	4798      	blx	r3

    local_taskset = TaskSet;
 8008424:	4b28      	ldr	r3, [pc, #160]	@ (80084c8 <UTIL_SEQ_Run+0x1dc>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800842a:	4b28      	ldr	r3, [pc, #160]	@ (80084cc <UTIL_SEQ_Run+0x1e0>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8008430:	4b27      	ldr	r3, [pc, #156]	@ (80084d0 <UTIL_SEQ_Run+0x1e4>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8008436:	4b27      	ldr	r3, [pc, #156]	@ (80084d4 <UTIL_SEQ_Run+0x1e8>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800843c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800843e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008440:	401a      	ands	r2, r3
 8008442:	4b20      	ldr	r3, [pc, #128]	@ (80084c4 <UTIL_SEQ_Run+0x1d8>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4013      	ands	r3, r2
 8008448:	2b00      	cmp	r3, #0
 800844a:	d005      	beq.n	8008458 <UTIL_SEQ_Run+0x16c>
 800844c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800844e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008450:	4013      	ands	r3, r2
 8008452:	2b00      	cmp	r3, #0
 8008454:	f43f af64 	beq.w	8008320 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8008458:	4b20      	ldr	r3, [pc, #128]	@ (80084dc <UTIL_SEQ_Run+0x1f0>)
 800845a:	f04f 32ff 	mov.w	r2, #4294967295
 800845e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8008460:	f000 f938 	bl	80086d4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008464:	f3ef 8310 	mrs	r3, PRIMASK
 8008468:	613b      	str	r3, [r7, #16]
  return(result);
 800846a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800846c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800846e:	b672      	cpsid	i
}
 8008470:	bf00      	nop
  local_taskset = TaskSet;
 8008472:	4b15      	ldr	r3, [pc, #84]	@ (80084c8 <UTIL_SEQ_Run+0x1dc>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8008478:	4b14      	ldr	r3, [pc, #80]	@ (80084cc <UTIL_SEQ_Run+0x1e0>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800847e:	4b14      	ldr	r3, [pc, #80]	@ (80084d0 <UTIL_SEQ_Run+0x1e4>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8008484:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008488:	401a      	ands	r2, r3
 800848a:	4b0e      	ldr	r3, [pc, #56]	@ (80084c4 <UTIL_SEQ_Run+0x1d8>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4013      	ands	r3, r2
 8008490:	2b00      	cmp	r3, #0
 8008492:	d107      	bne.n	80084a4 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8008494:	4b0f      	ldr	r3, [pc, #60]	@ (80084d4 <UTIL_SEQ_Run+0x1e8>)
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800849a:	4013      	ands	r3, r2
 800849c:	2b00      	cmp	r3, #0
 800849e:	d101      	bne.n	80084a4 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80084a0:	f7f8 fa28 	bl	80008f4 <UTIL_SEQ_Idle>
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f383 8810 	msr	PRIMASK, r3
}
 80084ae:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80084b0:	f000 f917 	bl	80086e2 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80084b4:	4a03      	ldr	r2, [pc, #12]	@ (80084c4 <UTIL_SEQ_Run+0x1d8>)
 80084b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084b8:	6013      	str	r3, [r2, #0]

  return;
 80084ba:	bf00      	nop
}
 80084bc:	3740      	adds	r7, #64	@ 0x40
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	20000028 	.word	0x20000028
 80084c8:	200005a0 	.word	0x200005a0
 80084cc:	200005a4 	.word	0x200005a4
 80084d0:	20000024 	.word	0x20000024
 80084d4:	200005a8 	.word	0x200005a8
 80084d8:	20000630 	.word	0x20000630
 80084dc:	200005ac 	.word	0x200005ac
 80084e0:	200005b0 	.word	0x200005b0

080084e4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b088      	sub	sp, #32
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084f0:	f3ef 8310 	mrs	r3, PRIMASK
 80084f4:	617b      	str	r3, [r7, #20]
  return(result);
 80084f6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80084f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80084fa:	b672      	cpsid	i
}
 80084fc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f000 f8f6 	bl	80086f0 <SEQ_BitPosition>
 8008504:	4603      	mov	r3, r0
 8008506:	4619      	mov	r1, r3
 8008508:	4a06      	ldr	r2, [pc, #24]	@ (8008524 <UTIL_SEQ_RegTask+0x40>)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	f383 8810 	msr	PRIMASK, r3
}
 800851a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800851c:	bf00      	nop
}
 800851e:	3720      	adds	r7, #32
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	200005b0 	.word	0x200005b0

08008528 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8008528:	b480      	push	{r7}
 800852a:	b087      	sub	sp, #28
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008532:	f3ef 8310 	mrs	r3, PRIMASK
 8008536:	60fb      	str	r3, [r7, #12]
  return(result);
 8008538:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800853a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800853c:	b672      	cpsid	i
}
 800853e:	bf00      	nop

  TaskSet |= TaskId_bm;
 8008540:	4b0d      	ldr	r3, [pc, #52]	@ (8008578 <UTIL_SEQ_SetTask+0x50>)
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4313      	orrs	r3, r2
 8008548:	4a0b      	ldr	r2, [pc, #44]	@ (8008578 <UTIL_SEQ_SetTask+0x50>)
 800854a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800854c:	4a0b      	ldr	r2, [pc, #44]	@ (800857c <UTIL_SEQ_SetTask+0x54>)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	431a      	orrs	r2, r3
 8008558:	4908      	ldr	r1, [pc, #32]	@ (800857c <UTIL_SEQ_SetTask+0x54>)
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	f383 8810 	msr	PRIMASK, r3
}
 800856a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800856c:	bf00      	nop
}
 800856e:	371c      	adds	r7, #28
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr
 8008578:	200005a0 	.word	0x200005a0
 800857c:	20000630 	.word	0x20000630

08008580 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008580:	b480      	push	{r7}
 8008582:	b087      	sub	sp, #28
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008588:	f3ef 8310 	mrs	r3, PRIMASK
 800858c:	60fb      	str	r3, [r7, #12]
  return(result);
 800858e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008590:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008592:	b672      	cpsid	i
}
 8008594:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	43da      	mvns	r2, r3
 800859a:	4b08      	ldr	r3, [pc, #32]	@ (80085bc <UTIL_SEQ_PauseTask+0x3c>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4013      	ands	r3, r2
 80085a0:	4a06      	ldr	r2, [pc, #24]	@ (80085bc <UTIL_SEQ_PauseTask+0x3c>)
 80085a2:	6013      	str	r3, [r2, #0]
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	f383 8810 	msr	PRIMASK, r3
}
 80085ae:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80085b0:	bf00      	nop
}
 80085b2:	371c      	adds	r7, #28
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	20000024 	.word	0x20000024

080085c0 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80085c0:	b480      	push	{r7}
 80085c2:	b087      	sub	sp, #28
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085c8:	f3ef 8310 	mrs	r3, PRIMASK
 80085cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80085ce:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80085d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80085d2:	b672      	cpsid	i
}
 80085d4:	bf00      	nop

  TaskMask |= TaskId_bm;
 80085d6:	4b09      	ldr	r3, [pc, #36]	@ (80085fc <UTIL_SEQ_ResumeTask+0x3c>)
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4313      	orrs	r3, r2
 80085de:	4a07      	ldr	r2, [pc, #28]	@ (80085fc <UTIL_SEQ_ResumeTask+0x3c>)
 80085e0:	6013      	str	r3, [r2, #0]
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	f383 8810 	msr	PRIMASK, r3
}
 80085ec:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80085ee:	bf00      	nop
}
 80085f0:	371c      	adds	r7, #28
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop
 80085fc:	20000024 	.word	0x20000024

08008600 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8008600:	b480      	push	{r7}
 8008602:	b087      	sub	sp, #28
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008608:	f3ef 8310 	mrs	r3, PRIMASK
 800860c:	60fb      	str	r3, [r7, #12]
  return(result);
 800860e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008610:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008612:	b672      	cpsid	i
}
 8008614:	bf00      	nop

  EvtSet |= EvtId_bm;
 8008616:	4b09      	ldr	r3, [pc, #36]	@ (800863c <UTIL_SEQ_SetEvt+0x3c>)
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4313      	orrs	r3, r2
 800861e:	4a07      	ldr	r2, [pc, #28]	@ (800863c <UTIL_SEQ_SetEvt+0x3c>)
 8008620:	6013      	str	r3, [r2, #0]
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	f383 8810 	msr	PRIMASK, r3
}
 800862c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800862e:	bf00      	nop
}
 8008630:	371c      	adds	r7, #28
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	200005a4 	.word	0x200005a4

08008640 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b088      	sub	sp, #32
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8008648:	4b1f      	ldr	r3, [pc, #124]	@ (80086c8 <UTIL_SEQ_WaitEvt+0x88>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800864e:	4b1e      	ldr	r3, [pc, #120]	@ (80086c8 <UTIL_SEQ_WaitEvt+0x88>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008656:	d102      	bne.n	800865e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8008658:	2300      	movs	r3, #0
 800865a:	61fb      	str	r3, [r7, #28]
 800865c:	e005      	b.n	800866a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800865e:	4b1a      	ldr	r3, [pc, #104]	@ (80086c8 <UTIL_SEQ_WaitEvt+0x88>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2201      	movs	r2, #1
 8008664:	fa02 f303 	lsl.w	r3, r2, r3
 8008668:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800866a:	4b18      	ldr	r3, [pc, #96]	@ (80086cc <UTIL_SEQ_WaitEvt+0x8c>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8008670:	4a16      	ldr	r2, [pc, #88]	@ (80086cc <UTIL_SEQ_WaitEvt+0x8c>)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8008676:	e003      	b.n	8008680 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8008678:	6879      	ldr	r1, [r7, #4]
 800867a:	69f8      	ldr	r0, [r7, #28]
 800867c:	f7f8 f941 	bl	8000902 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8008680:	4b13      	ldr	r3, [pc, #76]	@ (80086d0 <UTIL_SEQ_WaitEvt+0x90>)
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4013      	ands	r3, r2
 8008688:	2b00      	cmp	r3, #0
 800868a:	d0f5      	beq.n	8008678 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800868c:	4a0e      	ldr	r2, [pc, #56]	@ (80086c8 <UTIL_SEQ_WaitEvt+0x88>)
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008692:	f3ef 8310 	mrs	r3, PRIMASK
 8008696:	60bb      	str	r3, [r7, #8]
  return(result);
 8008698:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800869a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800869c:	b672      	cpsid	i
}
 800869e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	43da      	mvns	r2, r3
 80086a4:	4b0a      	ldr	r3, [pc, #40]	@ (80086d0 <UTIL_SEQ_WaitEvt+0x90>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4013      	ands	r3, r2
 80086aa:	4a09      	ldr	r2, [pc, #36]	@ (80086d0 <UTIL_SEQ_WaitEvt+0x90>)
 80086ac:	6013      	str	r3, [r2, #0]
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f383 8810 	msr	PRIMASK, r3
}
 80086b8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80086ba:	4a04      	ldr	r2, [pc, #16]	@ (80086cc <UTIL_SEQ_WaitEvt+0x8c>)
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	6013      	str	r3, [r2, #0]
  return;
 80086c0:	bf00      	nop
}
 80086c2:	3720      	adds	r7, #32
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	200005ac 	.word	0x200005ac
 80086cc:	200005a8 	.word	0x200005a8
 80086d0:	200005a4 	.word	0x200005a4

080086d4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80086d4:	b480      	push	{r7}
 80086d6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80086d8:	bf00      	nop
}
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80086e2:	b480      	push	{r7}
 80086e4:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80086e6:	bf00      	nop
}
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80086f8:	2300      	movs	r3, #0
 80086fa:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008706:	d204      	bcs.n	8008712 <SEQ_BitPosition+0x22>
 8008708:	2310      	movs	r3, #16
 800870a:	73fb      	strb	r3, [r7, #15]
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	041b      	lsls	r3, r3, #16
 8008710:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008718:	d205      	bcs.n	8008726 <SEQ_BitPosition+0x36>
 800871a:	7bfb      	ldrb	r3, [r7, #15]
 800871c:	3308      	adds	r3, #8
 800871e:	73fb      	strb	r3, [r7, #15]
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	021b      	lsls	r3, r3, #8
 8008724:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800872c:	d205      	bcs.n	800873a <SEQ_BitPosition+0x4a>
 800872e:	7bfb      	ldrb	r3, [r7, #15]
 8008730:	3304      	adds	r3, #4
 8008732:	73fb      	strb	r3, [r7, #15]
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	011b      	lsls	r3, r3, #4
 8008738:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	0f1b      	lsrs	r3, r3, #28
 800873e:	4a07      	ldr	r2, [pc, #28]	@ (800875c <SEQ_BitPosition+0x6c>)
 8008740:	5cd2      	ldrb	r2, [r2, r3]
 8008742:	7bfb      	ldrb	r3, [r7, #15]
 8008744:	4413      	add	r3, r2
 8008746:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8008748:	7bfb      	ldrb	r3, [r7, #15]
 800874a:	f1c3 031f 	rsb	r3, r3, #31
 800874e:	b2db      	uxtb	r3, r3
}
 8008750:	4618      	mov	r0, r3
 8008752:	3714      	adds	r7, #20
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr
 800875c:	080093a8 	.word	0x080093a8

08008760 <std>:
 8008760:	2300      	movs	r3, #0
 8008762:	b510      	push	{r4, lr}
 8008764:	4604      	mov	r4, r0
 8008766:	e9c0 3300 	strd	r3, r3, [r0]
 800876a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800876e:	6083      	str	r3, [r0, #8]
 8008770:	8181      	strh	r1, [r0, #12]
 8008772:	6643      	str	r3, [r0, #100]	@ 0x64
 8008774:	81c2      	strh	r2, [r0, #14]
 8008776:	6183      	str	r3, [r0, #24]
 8008778:	4619      	mov	r1, r3
 800877a:	2208      	movs	r2, #8
 800877c:	305c      	adds	r0, #92	@ 0x5c
 800877e:	f000 f9e7 	bl	8008b50 <memset>
 8008782:	4b0d      	ldr	r3, [pc, #52]	@ (80087b8 <std+0x58>)
 8008784:	6263      	str	r3, [r4, #36]	@ 0x24
 8008786:	4b0d      	ldr	r3, [pc, #52]	@ (80087bc <std+0x5c>)
 8008788:	62a3      	str	r3, [r4, #40]	@ 0x28
 800878a:	4b0d      	ldr	r3, [pc, #52]	@ (80087c0 <std+0x60>)
 800878c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800878e:	4b0d      	ldr	r3, [pc, #52]	@ (80087c4 <std+0x64>)
 8008790:	6323      	str	r3, [r4, #48]	@ 0x30
 8008792:	4b0d      	ldr	r3, [pc, #52]	@ (80087c8 <std+0x68>)
 8008794:	6224      	str	r4, [r4, #32]
 8008796:	429c      	cmp	r4, r3
 8008798:	d006      	beq.n	80087a8 <std+0x48>
 800879a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800879e:	4294      	cmp	r4, r2
 80087a0:	d002      	beq.n	80087a8 <std+0x48>
 80087a2:	33d0      	adds	r3, #208	@ 0xd0
 80087a4:	429c      	cmp	r4, r3
 80087a6:	d105      	bne.n	80087b4 <std+0x54>
 80087a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80087ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087b0:	f000 ba46 	b.w	8008c40 <__retarget_lock_init_recursive>
 80087b4:	bd10      	pop	{r4, pc}
 80087b6:	bf00      	nop
 80087b8:	080089a1 	.word	0x080089a1
 80087bc:	080089c3 	.word	0x080089c3
 80087c0:	080089fb 	.word	0x080089fb
 80087c4:	08008a1f 	.word	0x08008a1f
 80087c8:	20000640 	.word	0x20000640

080087cc <stdio_exit_handler>:
 80087cc:	4a02      	ldr	r2, [pc, #8]	@ (80087d8 <stdio_exit_handler+0xc>)
 80087ce:	4903      	ldr	r1, [pc, #12]	@ (80087dc <stdio_exit_handler+0x10>)
 80087d0:	4803      	ldr	r0, [pc, #12]	@ (80087e0 <stdio_exit_handler+0x14>)
 80087d2:	f000 b869 	b.w	80088a8 <_fwalk_sglue>
 80087d6:	bf00      	nop
 80087d8:	2000002c 	.word	0x2000002c
 80087dc:	08008f5d 	.word	0x08008f5d
 80087e0:	2000003c 	.word	0x2000003c

080087e4 <cleanup_stdio>:
 80087e4:	6841      	ldr	r1, [r0, #4]
 80087e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008818 <cleanup_stdio+0x34>)
 80087e8:	4299      	cmp	r1, r3
 80087ea:	b510      	push	{r4, lr}
 80087ec:	4604      	mov	r4, r0
 80087ee:	d001      	beq.n	80087f4 <cleanup_stdio+0x10>
 80087f0:	f000 fbb4 	bl	8008f5c <_fflush_r>
 80087f4:	68a1      	ldr	r1, [r4, #8]
 80087f6:	4b09      	ldr	r3, [pc, #36]	@ (800881c <cleanup_stdio+0x38>)
 80087f8:	4299      	cmp	r1, r3
 80087fa:	d002      	beq.n	8008802 <cleanup_stdio+0x1e>
 80087fc:	4620      	mov	r0, r4
 80087fe:	f000 fbad 	bl	8008f5c <_fflush_r>
 8008802:	68e1      	ldr	r1, [r4, #12]
 8008804:	4b06      	ldr	r3, [pc, #24]	@ (8008820 <cleanup_stdio+0x3c>)
 8008806:	4299      	cmp	r1, r3
 8008808:	d004      	beq.n	8008814 <cleanup_stdio+0x30>
 800880a:	4620      	mov	r0, r4
 800880c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008810:	f000 bba4 	b.w	8008f5c <_fflush_r>
 8008814:	bd10      	pop	{r4, pc}
 8008816:	bf00      	nop
 8008818:	20000640 	.word	0x20000640
 800881c:	200006a8 	.word	0x200006a8
 8008820:	20000710 	.word	0x20000710

08008824 <global_stdio_init.part.0>:
 8008824:	b510      	push	{r4, lr}
 8008826:	4b0b      	ldr	r3, [pc, #44]	@ (8008854 <global_stdio_init.part.0+0x30>)
 8008828:	4c0b      	ldr	r4, [pc, #44]	@ (8008858 <global_stdio_init.part.0+0x34>)
 800882a:	4a0c      	ldr	r2, [pc, #48]	@ (800885c <global_stdio_init.part.0+0x38>)
 800882c:	601a      	str	r2, [r3, #0]
 800882e:	4620      	mov	r0, r4
 8008830:	2200      	movs	r2, #0
 8008832:	2104      	movs	r1, #4
 8008834:	f7ff ff94 	bl	8008760 <std>
 8008838:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800883c:	2201      	movs	r2, #1
 800883e:	2109      	movs	r1, #9
 8008840:	f7ff ff8e 	bl	8008760 <std>
 8008844:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008848:	2202      	movs	r2, #2
 800884a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800884e:	2112      	movs	r1, #18
 8008850:	f7ff bf86 	b.w	8008760 <std>
 8008854:	20000778 	.word	0x20000778
 8008858:	20000640 	.word	0x20000640
 800885c:	080087cd 	.word	0x080087cd

08008860 <__sfp_lock_acquire>:
 8008860:	4801      	ldr	r0, [pc, #4]	@ (8008868 <__sfp_lock_acquire+0x8>)
 8008862:	f000 b9ee 	b.w	8008c42 <__retarget_lock_acquire_recursive>
 8008866:	bf00      	nop
 8008868:	20000781 	.word	0x20000781

0800886c <__sfp_lock_release>:
 800886c:	4801      	ldr	r0, [pc, #4]	@ (8008874 <__sfp_lock_release+0x8>)
 800886e:	f000 b9e9 	b.w	8008c44 <__retarget_lock_release_recursive>
 8008872:	bf00      	nop
 8008874:	20000781 	.word	0x20000781

08008878 <__sinit>:
 8008878:	b510      	push	{r4, lr}
 800887a:	4604      	mov	r4, r0
 800887c:	f7ff fff0 	bl	8008860 <__sfp_lock_acquire>
 8008880:	6a23      	ldr	r3, [r4, #32]
 8008882:	b11b      	cbz	r3, 800888c <__sinit+0x14>
 8008884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008888:	f7ff bff0 	b.w	800886c <__sfp_lock_release>
 800888c:	4b04      	ldr	r3, [pc, #16]	@ (80088a0 <__sinit+0x28>)
 800888e:	6223      	str	r3, [r4, #32]
 8008890:	4b04      	ldr	r3, [pc, #16]	@ (80088a4 <__sinit+0x2c>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1f5      	bne.n	8008884 <__sinit+0xc>
 8008898:	f7ff ffc4 	bl	8008824 <global_stdio_init.part.0>
 800889c:	e7f2      	b.n	8008884 <__sinit+0xc>
 800889e:	bf00      	nop
 80088a0:	080087e5 	.word	0x080087e5
 80088a4:	20000778 	.word	0x20000778

080088a8 <_fwalk_sglue>:
 80088a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088ac:	4607      	mov	r7, r0
 80088ae:	4688      	mov	r8, r1
 80088b0:	4614      	mov	r4, r2
 80088b2:	2600      	movs	r6, #0
 80088b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088b8:	f1b9 0901 	subs.w	r9, r9, #1
 80088bc:	d505      	bpl.n	80088ca <_fwalk_sglue+0x22>
 80088be:	6824      	ldr	r4, [r4, #0]
 80088c0:	2c00      	cmp	r4, #0
 80088c2:	d1f7      	bne.n	80088b4 <_fwalk_sglue+0xc>
 80088c4:	4630      	mov	r0, r6
 80088c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088ca:	89ab      	ldrh	r3, [r5, #12]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d907      	bls.n	80088e0 <_fwalk_sglue+0x38>
 80088d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088d4:	3301      	adds	r3, #1
 80088d6:	d003      	beq.n	80088e0 <_fwalk_sglue+0x38>
 80088d8:	4629      	mov	r1, r5
 80088da:	4638      	mov	r0, r7
 80088dc:	47c0      	blx	r8
 80088de:	4306      	orrs	r6, r0
 80088e0:	3568      	adds	r5, #104	@ 0x68
 80088e2:	e7e9      	b.n	80088b8 <_fwalk_sglue+0x10>

080088e4 <_puts_r>:
 80088e4:	6a03      	ldr	r3, [r0, #32]
 80088e6:	b570      	push	{r4, r5, r6, lr}
 80088e8:	6884      	ldr	r4, [r0, #8]
 80088ea:	4605      	mov	r5, r0
 80088ec:	460e      	mov	r6, r1
 80088ee:	b90b      	cbnz	r3, 80088f4 <_puts_r+0x10>
 80088f0:	f7ff ffc2 	bl	8008878 <__sinit>
 80088f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088f6:	07db      	lsls	r3, r3, #31
 80088f8:	d405      	bmi.n	8008906 <_puts_r+0x22>
 80088fa:	89a3      	ldrh	r3, [r4, #12]
 80088fc:	0598      	lsls	r0, r3, #22
 80088fe:	d402      	bmi.n	8008906 <_puts_r+0x22>
 8008900:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008902:	f000 f99e 	bl	8008c42 <__retarget_lock_acquire_recursive>
 8008906:	89a3      	ldrh	r3, [r4, #12]
 8008908:	0719      	lsls	r1, r3, #28
 800890a:	d502      	bpl.n	8008912 <_puts_r+0x2e>
 800890c:	6923      	ldr	r3, [r4, #16]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d135      	bne.n	800897e <_puts_r+0x9a>
 8008912:	4621      	mov	r1, r4
 8008914:	4628      	mov	r0, r5
 8008916:	f000 f8c5 	bl	8008aa4 <__swsetup_r>
 800891a:	b380      	cbz	r0, 800897e <_puts_r+0x9a>
 800891c:	f04f 35ff 	mov.w	r5, #4294967295
 8008920:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008922:	07da      	lsls	r2, r3, #31
 8008924:	d405      	bmi.n	8008932 <_puts_r+0x4e>
 8008926:	89a3      	ldrh	r3, [r4, #12]
 8008928:	059b      	lsls	r3, r3, #22
 800892a:	d402      	bmi.n	8008932 <_puts_r+0x4e>
 800892c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800892e:	f000 f989 	bl	8008c44 <__retarget_lock_release_recursive>
 8008932:	4628      	mov	r0, r5
 8008934:	bd70      	pop	{r4, r5, r6, pc}
 8008936:	2b00      	cmp	r3, #0
 8008938:	da04      	bge.n	8008944 <_puts_r+0x60>
 800893a:	69a2      	ldr	r2, [r4, #24]
 800893c:	429a      	cmp	r2, r3
 800893e:	dc17      	bgt.n	8008970 <_puts_r+0x8c>
 8008940:	290a      	cmp	r1, #10
 8008942:	d015      	beq.n	8008970 <_puts_r+0x8c>
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	1c5a      	adds	r2, r3, #1
 8008948:	6022      	str	r2, [r4, #0]
 800894a:	7019      	strb	r1, [r3, #0]
 800894c:	68a3      	ldr	r3, [r4, #8]
 800894e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008952:	3b01      	subs	r3, #1
 8008954:	60a3      	str	r3, [r4, #8]
 8008956:	2900      	cmp	r1, #0
 8008958:	d1ed      	bne.n	8008936 <_puts_r+0x52>
 800895a:	2b00      	cmp	r3, #0
 800895c:	da11      	bge.n	8008982 <_puts_r+0x9e>
 800895e:	4622      	mov	r2, r4
 8008960:	210a      	movs	r1, #10
 8008962:	4628      	mov	r0, r5
 8008964:	f000 f85f 	bl	8008a26 <__swbuf_r>
 8008968:	3001      	adds	r0, #1
 800896a:	d0d7      	beq.n	800891c <_puts_r+0x38>
 800896c:	250a      	movs	r5, #10
 800896e:	e7d7      	b.n	8008920 <_puts_r+0x3c>
 8008970:	4622      	mov	r2, r4
 8008972:	4628      	mov	r0, r5
 8008974:	f000 f857 	bl	8008a26 <__swbuf_r>
 8008978:	3001      	adds	r0, #1
 800897a:	d1e7      	bne.n	800894c <_puts_r+0x68>
 800897c:	e7ce      	b.n	800891c <_puts_r+0x38>
 800897e:	3e01      	subs	r6, #1
 8008980:	e7e4      	b.n	800894c <_puts_r+0x68>
 8008982:	6823      	ldr	r3, [r4, #0]
 8008984:	1c5a      	adds	r2, r3, #1
 8008986:	6022      	str	r2, [r4, #0]
 8008988:	220a      	movs	r2, #10
 800898a:	701a      	strb	r2, [r3, #0]
 800898c:	e7ee      	b.n	800896c <_puts_r+0x88>
	...

08008990 <puts>:
 8008990:	4b02      	ldr	r3, [pc, #8]	@ (800899c <puts+0xc>)
 8008992:	4601      	mov	r1, r0
 8008994:	6818      	ldr	r0, [r3, #0]
 8008996:	f7ff bfa5 	b.w	80088e4 <_puts_r>
 800899a:	bf00      	nop
 800899c:	20000038 	.word	0x20000038

080089a0 <__sread>:
 80089a0:	b510      	push	{r4, lr}
 80089a2:	460c      	mov	r4, r1
 80089a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089a8:	f000 f8fc 	bl	8008ba4 <_read_r>
 80089ac:	2800      	cmp	r0, #0
 80089ae:	bfab      	itete	ge
 80089b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80089b2:	89a3      	ldrhlt	r3, [r4, #12]
 80089b4:	181b      	addge	r3, r3, r0
 80089b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80089ba:	bfac      	ite	ge
 80089bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80089be:	81a3      	strhlt	r3, [r4, #12]
 80089c0:	bd10      	pop	{r4, pc}

080089c2 <__swrite>:
 80089c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089c6:	461f      	mov	r7, r3
 80089c8:	898b      	ldrh	r3, [r1, #12]
 80089ca:	05db      	lsls	r3, r3, #23
 80089cc:	4605      	mov	r5, r0
 80089ce:	460c      	mov	r4, r1
 80089d0:	4616      	mov	r6, r2
 80089d2:	d505      	bpl.n	80089e0 <__swrite+0x1e>
 80089d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089d8:	2302      	movs	r3, #2
 80089da:	2200      	movs	r2, #0
 80089dc:	f000 f8d0 	bl	8008b80 <_lseek_r>
 80089e0:	89a3      	ldrh	r3, [r4, #12]
 80089e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80089ea:	81a3      	strh	r3, [r4, #12]
 80089ec:	4632      	mov	r2, r6
 80089ee:	463b      	mov	r3, r7
 80089f0:	4628      	mov	r0, r5
 80089f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089f6:	f000 b8e7 	b.w	8008bc8 <_write_r>

080089fa <__sseek>:
 80089fa:	b510      	push	{r4, lr}
 80089fc:	460c      	mov	r4, r1
 80089fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a02:	f000 f8bd 	bl	8008b80 <_lseek_r>
 8008a06:	1c43      	adds	r3, r0, #1
 8008a08:	89a3      	ldrh	r3, [r4, #12]
 8008a0a:	bf15      	itete	ne
 8008a0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008a0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008a12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008a16:	81a3      	strheq	r3, [r4, #12]
 8008a18:	bf18      	it	ne
 8008a1a:	81a3      	strhne	r3, [r4, #12]
 8008a1c:	bd10      	pop	{r4, pc}

08008a1e <__sclose>:
 8008a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a22:	f000 b89d 	b.w	8008b60 <_close_r>

08008a26 <__swbuf_r>:
 8008a26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a28:	460e      	mov	r6, r1
 8008a2a:	4614      	mov	r4, r2
 8008a2c:	4605      	mov	r5, r0
 8008a2e:	b118      	cbz	r0, 8008a38 <__swbuf_r+0x12>
 8008a30:	6a03      	ldr	r3, [r0, #32]
 8008a32:	b90b      	cbnz	r3, 8008a38 <__swbuf_r+0x12>
 8008a34:	f7ff ff20 	bl	8008878 <__sinit>
 8008a38:	69a3      	ldr	r3, [r4, #24]
 8008a3a:	60a3      	str	r3, [r4, #8]
 8008a3c:	89a3      	ldrh	r3, [r4, #12]
 8008a3e:	071a      	lsls	r2, r3, #28
 8008a40:	d501      	bpl.n	8008a46 <__swbuf_r+0x20>
 8008a42:	6923      	ldr	r3, [r4, #16]
 8008a44:	b943      	cbnz	r3, 8008a58 <__swbuf_r+0x32>
 8008a46:	4621      	mov	r1, r4
 8008a48:	4628      	mov	r0, r5
 8008a4a:	f000 f82b 	bl	8008aa4 <__swsetup_r>
 8008a4e:	b118      	cbz	r0, 8008a58 <__swbuf_r+0x32>
 8008a50:	f04f 37ff 	mov.w	r7, #4294967295
 8008a54:	4638      	mov	r0, r7
 8008a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a58:	6823      	ldr	r3, [r4, #0]
 8008a5a:	6922      	ldr	r2, [r4, #16]
 8008a5c:	1a98      	subs	r0, r3, r2
 8008a5e:	6963      	ldr	r3, [r4, #20]
 8008a60:	b2f6      	uxtb	r6, r6
 8008a62:	4283      	cmp	r3, r0
 8008a64:	4637      	mov	r7, r6
 8008a66:	dc05      	bgt.n	8008a74 <__swbuf_r+0x4e>
 8008a68:	4621      	mov	r1, r4
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	f000 fa76 	bl	8008f5c <_fflush_r>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d1ed      	bne.n	8008a50 <__swbuf_r+0x2a>
 8008a74:	68a3      	ldr	r3, [r4, #8]
 8008a76:	3b01      	subs	r3, #1
 8008a78:	60a3      	str	r3, [r4, #8]
 8008a7a:	6823      	ldr	r3, [r4, #0]
 8008a7c:	1c5a      	adds	r2, r3, #1
 8008a7e:	6022      	str	r2, [r4, #0]
 8008a80:	701e      	strb	r6, [r3, #0]
 8008a82:	6962      	ldr	r2, [r4, #20]
 8008a84:	1c43      	adds	r3, r0, #1
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d004      	beq.n	8008a94 <__swbuf_r+0x6e>
 8008a8a:	89a3      	ldrh	r3, [r4, #12]
 8008a8c:	07db      	lsls	r3, r3, #31
 8008a8e:	d5e1      	bpl.n	8008a54 <__swbuf_r+0x2e>
 8008a90:	2e0a      	cmp	r6, #10
 8008a92:	d1df      	bne.n	8008a54 <__swbuf_r+0x2e>
 8008a94:	4621      	mov	r1, r4
 8008a96:	4628      	mov	r0, r5
 8008a98:	f000 fa60 	bl	8008f5c <_fflush_r>
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	d0d9      	beq.n	8008a54 <__swbuf_r+0x2e>
 8008aa0:	e7d6      	b.n	8008a50 <__swbuf_r+0x2a>
	...

08008aa4 <__swsetup_r>:
 8008aa4:	b538      	push	{r3, r4, r5, lr}
 8008aa6:	4b29      	ldr	r3, [pc, #164]	@ (8008b4c <__swsetup_r+0xa8>)
 8008aa8:	4605      	mov	r5, r0
 8008aaa:	6818      	ldr	r0, [r3, #0]
 8008aac:	460c      	mov	r4, r1
 8008aae:	b118      	cbz	r0, 8008ab8 <__swsetup_r+0x14>
 8008ab0:	6a03      	ldr	r3, [r0, #32]
 8008ab2:	b90b      	cbnz	r3, 8008ab8 <__swsetup_r+0x14>
 8008ab4:	f7ff fee0 	bl	8008878 <__sinit>
 8008ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008abc:	0719      	lsls	r1, r3, #28
 8008abe:	d422      	bmi.n	8008b06 <__swsetup_r+0x62>
 8008ac0:	06da      	lsls	r2, r3, #27
 8008ac2:	d407      	bmi.n	8008ad4 <__swsetup_r+0x30>
 8008ac4:	2209      	movs	r2, #9
 8008ac6:	602a      	str	r2, [r5, #0]
 8008ac8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008acc:	81a3      	strh	r3, [r4, #12]
 8008ace:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad2:	e033      	b.n	8008b3c <__swsetup_r+0x98>
 8008ad4:	0758      	lsls	r0, r3, #29
 8008ad6:	d512      	bpl.n	8008afe <__swsetup_r+0x5a>
 8008ad8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ada:	b141      	cbz	r1, 8008aee <__swsetup_r+0x4a>
 8008adc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ae0:	4299      	cmp	r1, r3
 8008ae2:	d002      	beq.n	8008aea <__swsetup_r+0x46>
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	f000 f8bd 	bl	8008c64 <_free_r>
 8008aea:	2300      	movs	r3, #0
 8008aec:	6363      	str	r3, [r4, #52]	@ 0x34
 8008aee:	89a3      	ldrh	r3, [r4, #12]
 8008af0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008af4:	81a3      	strh	r3, [r4, #12]
 8008af6:	2300      	movs	r3, #0
 8008af8:	6063      	str	r3, [r4, #4]
 8008afa:	6923      	ldr	r3, [r4, #16]
 8008afc:	6023      	str	r3, [r4, #0]
 8008afe:	89a3      	ldrh	r3, [r4, #12]
 8008b00:	f043 0308 	orr.w	r3, r3, #8
 8008b04:	81a3      	strh	r3, [r4, #12]
 8008b06:	6923      	ldr	r3, [r4, #16]
 8008b08:	b94b      	cbnz	r3, 8008b1e <__swsetup_r+0x7a>
 8008b0a:	89a3      	ldrh	r3, [r4, #12]
 8008b0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008b10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b14:	d003      	beq.n	8008b1e <__swsetup_r+0x7a>
 8008b16:	4621      	mov	r1, r4
 8008b18:	4628      	mov	r0, r5
 8008b1a:	f000 fa6d 	bl	8008ff8 <__smakebuf_r>
 8008b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b22:	f013 0201 	ands.w	r2, r3, #1
 8008b26:	d00a      	beq.n	8008b3e <__swsetup_r+0x9a>
 8008b28:	2200      	movs	r2, #0
 8008b2a:	60a2      	str	r2, [r4, #8]
 8008b2c:	6962      	ldr	r2, [r4, #20]
 8008b2e:	4252      	negs	r2, r2
 8008b30:	61a2      	str	r2, [r4, #24]
 8008b32:	6922      	ldr	r2, [r4, #16]
 8008b34:	b942      	cbnz	r2, 8008b48 <__swsetup_r+0xa4>
 8008b36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008b3a:	d1c5      	bne.n	8008ac8 <__swsetup_r+0x24>
 8008b3c:	bd38      	pop	{r3, r4, r5, pc}
 8008b3e:	0799      	lsls	r1, r3, #30
 8008b40:	bf58      	it	pl
 8008b42:	6962      	ldrpl	r2, [r4, #20]
 8008b44:	60a2      	str	r2, [r4, #8]
 8008b46:	e7f4      	b.n	8008b32 <__swsetup_r+0x8e>
 8008b48:	2000      	movs	r0, #0
 8008b4a:	e7f7      	b.n	8008b3c <__swsetup_r+0x98>
 8008b4c:	20000038 	.word	0x20000038

08008b50 <memset>:
 8008b50:	4402      	add	r2, r0
 8008b52:	4603      	mov	r3, r0
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d100      	bne.n	8008b5a <memset+0xa>
 8008b58:	4770      	bx	lr
 8008b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b5e:	e7f9      	b.n	8008b54 <memset+0x4>

08008b60 <_close_r>:
 8008b60:	b538      	push	{r3, r4, r5, lr}
 8008b62:	4d06      	ldr	r5, [pc, #24]	@ (8008b7c <_close_r+0x1c>)
 8008b64:	2300      	movs	r3, #0
 8008b66:	4604      	mov	r4, r0
 8008b68:	4608      	mov	r0, r1
 8008b6a:	602b      	str	r3, [r5, #0]
 8008b6c:	f7f8 ff6b 	bl	8001a46 <_close>
 8008b70:	1c43      	adds	r3, r0, #1
 8008b72:	d102      	bne.n	8008b7a <_close_r+0x1a>
 8008b74:	682b      	ldr	r3, [r5, #0]
 8008b76:	b103      	cbz	r3, 8008b7a <_close_r+0x1a>
 8008b78:	6023      	str	r3, [r4, #0]
 8008b7a:	bd38      	pop	{r3, r4, r5, pc}
 8008b7c:	2000077c 	.word	0x2000077c

08008b80 <_lseek_r>:
 8008b80:	b538      	push	{r3, r4, r5, lr}
 8008b82:	4d07      	ldr	r5, [pc, #28]	@ (8008ba0 <_lseek_r+0x20>)
 8008b84:	4604      	mov	r4, r0
 8008b86:	4608      	mov	r0, r1
 8008b88:	4611      	mov	r1, r2
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	602a      	str	r2, [r5, #0]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	f7f8 ff80 	bl	8001a94 <_lseek>
 8008b94:	1c43      	adds	r3, r0, #1
 8008b96:	d102      	bne.n	8008b9e <_lseek_r+0x1e>
 8008b98:	682b      	ldr	r3, [r5, #0]
 8008b9a:	b103      	cbz	r3, 8008b9e <_lseek_r+0x1e>
 8008b9c:	6023      	str	r3, [r4, #0]
 8008b9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ba0:	2000077c 	.word	0x2000077c

08008ba4 <_read_r>:
 8008ba4:	b538      	push	{r3, r4, r5, lr}
 8008ba6:	4d07      	ldr	r5, [pc, #28]	@ (8008bc4 <_read_r+0x20>)
 8008ba8:	4604      	mov	r4, r0
 8008baa:	4608      	mov	r0, r1
 8008bac:	4611      	mov	r1, r2
 8008bae:	2200      	movs	r2, #0
 8008bb0:	602a      	str	r2, [r5, #0]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	f7f8 ff2a 	bl	8001a0c <_read>
 8008bb8:	1c43      	adds	r3, r0, #1
 8008bba:	d102      	bne.n	8008bc2 <_read_r+0x1e>
 8008bbc:	682b      	ldr	r3, [r5, #0]
 8008bbe:	b103      	cbz	r3, 8008bc2 <_read_r+0x1e>
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	bd38      	pop	{r3, r4, r5, pc}
 8008bc4:	2000077c 	.word	0x2000077c

08008bc8 <_write_r>:
 8008bc8:	b538      	push	{r3, r4, r5, lr}
 8008bca:	4d07      	ldr	r5, [pc, #28]	@ (8008be8 <_write_r+0x20>)
 8008bcc:	4604      	mov	r4, r0
 8008bce:	4608      	mov	r0, r1
 8008bd0:	4611      	mov	r1, r2
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	602a      	str	r2, [r5, #0]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	f7f8 fd52 	bl	8001680 <_write>
 8008bdc:	1c43      	adds	r3, r0, #1
 8008bde:	d102      	bne.n	8008be6 <_write_r+0x1e>
 8008be0:	682b      	ldr	r3, [r5, #0]
 8008be2:	b103      	cbz	r3, 8008be6 <_write_r+0x1e>
 8008be4:	6023      	str	r3, [r4, #0]
 8008be6:	bd38      	pop	{r3, r4, r5, pc}
 8008be8:	2000077c 	.word	0x2000077c

08008bec <__errno>:
 8008bec:	4b01      	ldr	r3, [pc, #4]	@ (8008bf4 <__errno+0x8>)
 8008bee:	6818      	ldr	r0, [r3, #0]
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	20000038 	.word	0x20000038

08008bf8 <__libc_init_array>:
 8008bf8:	b570      	push	{r4, r5, r6, lr}
 8008bfa:	4d0d      	ldr	r5, [pc, #52]	@ (8008c30 <__libc_init_array+0x38>)
 8008bfc:	4c0d      	ldr	r4, [pc, #52]	@ (8008c34 <__libc_init_array+0x3c>)
 8008bfe:	1b64      	subs	r4, r4, r5
 8008c00:	10a4      	asrs	r4, r4, #2
 8008c02:	2600      	movs	r6, #0
 8008c04:	42a6      	cmp	r6, r4
 8008c06:	d109      	bne.n	8008c1c <__libc_init_array+0x24>
 8008c08:	4d0b      	ldr	r5, [pc, #44]	@ (8008c38 <__libc_init_array+0x40>)
 8008c0a:	4c0c      	ldr	r4, [pc, #48]	@ (8008c3c <__libc_init_array+0x44>)
 8008c0c:	f000 fa62 	bl	80090d4 <_init>
 8008c10:	1b64      	subs	r4, r4, r5
 8008c12:	10a4      	asrs	r4, r4, #2
 8008c14:	2600      	movs	r6, #0
 8008c16:	42a6      	cmp	r6, r4
 8008c18:	d105      	bne.n	8008c26 <__libc_init_array+0x2e>
 8008c1a:	bd70      	pop	{r4, r5, r6, pc}
 8008c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c20:	4798      	blx	r3
 8008c22:	3601      	adds	r6, #1
 8008c24:	e7ee      	b.n	8008c04 <__libc_init_array+0xc>
 8008c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c2a:	4798      	blx	r3
 8008c2c:	3601      	adds	r6, #1
 8008c2e:	e7f2      	b.n	8008c16 <__libc_init_array+0x1e>
 8008c30:	080093c0 	.word	0x080093c0
 8008c34:	080093c0 	.word	0x080093c0
 8008c38:	080093c0 	.word	0x080093c0
 8008c3c:	080093c4 	.word	0x080093c4

08008c40 <__retarget_lock_init_recursive>:
 8008c40:	4770      	bx	lr

08008c42 <__retarget_lock_acquire_recursive>:
 8008c42:	4770      	bx	lr

08008c44 <__retarget_lock_release_recursive>:
 8008c44:	4770      	bx	lr

08008c46 <memcpy>:
 8008c46:	440a      	add	r2, r1
 8008c48:	4291      	cmp	r1, r2
 8008c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c4e:	d100      	bne.n	8008c52 <memcpy+0xc>
 8008c50:	4770      	bx	lr
 8008c52:	b510      	push	{r4, lr}
 8008c54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c5c:	4291      	cmp	r1, r2
 8008c5e:	d1f9      	bne.n	8008c54 <memcpy+0xe>
 8008c60:	bd10      	pop	{r4, pc}
	...

08008c64 <_free_r>:
 8008c64:	b538      	push	{r3, r4, r5, lr}
 8008c66:	4605      	mov	r5, r0
 8008c68:	2900      	cmp	r1, #0
 8008c6a:	d041      	beq.n	8008cf0 <_free_r+0x8c>
 8008c6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c70:	1f0c      	subs	r4, r1, #4
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	bfb8      	it	lt
 8008c76:	18e4      	addlt	r4, r4, r3
 8008c78:	f000 f8e0 	bl	8008e3c <__malloc_lock>
 8008c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8008cf4 <_free_r+0x90>)
 8008c7e:	6813      	ldr	r3, [r2, #0]
 8008c80:	b933      	cbnz	r3, 8008c90 <_free_r+0x2c>
 8008c82:	6063      	str	r3, [r4, #4]
 8008c84:	6014      	str	r4, [r2, #0]
 8008c86:	4628      	mov	r0, r5
 8008c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c8c:	f000 b8dc 	b.w	8008e48 <__malloc_unlock>
 8008c90:	42a3      	cmp	r3, r4
 8008c92:	d908      	bls.n	8008ca6 <_free_r+0x42>
 8008c94:	6820      	ldr	r0, [r4, #0]
 8008c96:	1821      	adds	r1, r4, r0
 8008c98:	428b      	cmp	r3, r1
 8008c9a:	bf01      	itttt	eq
 8008c9c:	6819      	ldreq	r1, [r3, #0]
 8008c9e:	685b      	ldreq	r3, [r3, #4]
 8008ca0:	1809      	addeq	r1, r1, r0
 8008ca2:	6021      	streq	r1, [r4, #0]
 8008ca4:	e7ed      	b.n	8008c82 <_free_r+0x1e>
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	b10b      	cbz	r3, 8008cb0 <_free_r+0x4c>
 8008cac:	42a3      	cmp	r3, r4
 8008cae:	d9fa      	bls.n	8008ca6 <_free_r+0x42>
 8008cb0:	6811      	ldr	r1, [r2, #0]
 8008cb2:	1850      	adds	r0, r2, r1
 8008cb4:	42a0      	cmp	r0, r4
 8008cb6:	d10b      	bne.n	8008cd0 <_free_r+0x6c>
 8008cb8:	6820      	ldr	r0, [r4, #0]
 8008cba:	4401      	add	r1, r0
 8008cbc:	1850      	adds	r0, r2, r1
 8008cbe:	4283      	cmp	r3, r0
 8008cc0:	6011      	str	r1, [r2, #0]
 8008cc2:	d1e0      	bne.n	8008c86 <_free_r+0x22>
 8008cc4:	6818      	ldr	r0, [r3, #0]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	6053      	str	r3, [r2, #4]
 8008cca:	4408      	add	r0, r1
 8008ccc:	6010      	str	r0, [r2, #0]
 8008cce:	e7da      	b.n	8008c86 <_free_r+0x22>
 8008cd0:	d902      	bls.n	8008cd8 <_free_r+0x74>
 8008cd2:	230c      	movs	r3, #12
 8008cd4:	602b      	str	r3, [r5, #0]
 8008cd6:	e7d6      	b.n	8008c86 <_free_r+0x22>
 8008cd8:	6820      	ldr	r0, [r4, #0]
 8008cda:	1821      	adds	r1, r4, r0
 8008cdc:	428b      	cmp	r3, r1
 8008cde:	bf04      	itt	eq
 8008ce0:	6819      	ldreq	r1, [r3, #0]
 8008ce2:	685b      	ldreq	r3, [r3, #4]
 8008ce4:	6063      	str	r3, [r4, #4]
 8008ce6:	bf04      	itt	eq
 8008ce8:	1809      	addeq	r1, r1, r0
 8008cea:	6021      	streq	r1, [r4, #0]
 8008cec:	6054      	str	r4, [r2, #4]
 8008cee:	e7ca      	b.n	8008c86 <_free_r+0x22>
 8008cf0:	bd38      	pop	{r3, r4, r5, pc}
 8008cf2:	bf00      	nop
 8008cf4:	20000788 	.word	0x20000788

08008cf8 <sbrk_aligned>:
 8008cf8:	b570      	push	{r4, r5, r6, lr}
 8008cfa:	4e0f      	ldr	r6, [pc, #60]	@ (8008d38 <sbrk_aligned+0x40>)
 8008cfc:	460c      	mov	r4, r1
 8008cfe:	6831      	ldr	r1, [r6, #0]
 8008d00:	4605      	mov	r5, r0
 8008d02:	b911      	cbnz	r1, 8008d0a <sbrk_aligned+0x12>
 8008d04:	f000 f9d6 	bl	80090b4 <_sbrk_r>
 8008d08:	6030      	str	r0, [r6, #0]
 8008d0a:	4621      	mov	r1, r4
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	f000 f9d1 	bl	80090b4 <_sbrk_r>
 8008d12:	1c43      	adds	r3, r0, #1
 8008d14:	d103      	bne.n	8008d1e <sbrk_aligned+0x26>
 8008d16:	f04f 34ff 	mov.w	r4, #4294967295
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	bd70      	pop	{r4, r5, r6, pc}
 8008d1e:	1cc4      	adds	r4, r0, #3
 8008d20:	f024 0403 	bic.w	r4, r4, #3
 8008d24:	42a0      	cmp	r0, r4
 8008d26:	d0f8      	beq.n	8008d1a <sbrk_aligned+0x22>
 8008d28:	1a21      	subs	r1, r4, r0
 8008d2a:	4628      	mov	r0, r5
 8008d2c:	f000 f9c2 	bl	80090b4 <_sbrk_r>
 8008d30:	3001      	adds	r0, #1
 8008d32:	d1f2      	bne.n	8008d1a <sbrk_aligned+0x22>
 8008d34:	e7ef      	b.n	8008d16 <sbrk_aligned+0x1e>
 8008d36:	bf00      	nop
 8008d38:	20000784 	.word	0x20000784

08008d3c <_malloc_r>:
 8008d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d40:	1ccd      	adds	r5, r1, #3
 8008d42:	f025 0503 	bic.w	r5, r5, #3
 8008d46:	3508      	adds	r5, #8
 8008d48:	2d0c      	cmp	r5, #12
 8008d4a:	bf38      	it	cc
 8008d4c:	250c      	movcc	r5, #12
 8008d4e:	2d00      	cmp	r5, #0
 8008d50:	4606      	mov	r6, r0
 8008d52:	db01      	blt.n	8008d58 <_malloc_r+0x1c>
 8008d54:	42a9      	cmp	r1, r5
 8008d56:	d904      	bls.n	8008d62 <_malloc_r+0x26>
 8008d58:	230c      	movs	r3, #12
 8008d5a:	6033      	str	r3, [r6, #0]
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008e38 <_malloc_r+0xfc>
 8008d66:	f000 f869 	bl	8008e3c <__malloc_lock>
 8008d6a:	f8d8 3000 	ldr.w	r3, [r8]
 8008d6e:	461c      	mov	r4, r3
 8008d70:	bb44      	cbnz	r4, 8008dc4 <_malloc_r+0x88>
 8008d72:	4629      	mov	r1, r5
 8008d74:	4630      	mov	r0, r6
 8008d76:	f7ff ffbf 	bl	8008cf8 <sbrk_aligned>
 8008d7a:	1c43      	adds	r3, r0, #1
 8008d7c:	4604      	mov	r4, r0
 8008d7e:	d158      	bne.n	8008e32 <_malloc_r+0xf6>
 8008d80:	f8d8 4000 	ldr.w	r4, [r8]
 8008d84:	4627      	mov	r7, r4
 8008d86:	2f00      	cmp	r7, #0
 8008d88:	d143      	bne.n	8008e12 <_malloc_r+0xd6>
 8008d8a:	2c00      	cmp	r4, #0
 8008d8c:	d04b      	beq.n	8008e26 <_malloc_r+0xea>
 8008d8e:	6823      	ldr	r3, [r4, #0]
 8008d90:	4639      	mov	r1, r7
 8008d92:	4630      	mov	r0, r6
 8008d94:	eb04 0903 	add.w	r9, r4, r3
 8008d98:	f000 f98c 	bl	80090b4 <_sbrk_r>
 8008d9c:	4581      	cmp	r9, r0
 8008d9e:	d142      	bne.n	8008e26 <_malloc_r+0xea>
 8008da0:	6821      	ldr	r1, [r4, #0]
 8008da2:	1a6d      	subs	r5, r5, r1
 8008da4:	4629      	mov	r1, r5
 8008da6:	4630      	mov	r0, r6
 8008da8:	f7ff ffa6 	bl	8008cf8 <sbrk_aligned>
 8008dac:	3001      	adds	r0, #1
 8008dae:	d03a      	beq.n	8008e26 <_malloc_r+0xea>
 8008db0:	6823      	ldr	r3, [r4, #0]
 8008db2:	442b      	add	r3, r5
 8008db4:	6023      	str	r3, [r4, #0]
 8008db6:	f8d8 3000 	ldr.w	r3, [r8]
 8008dba:	685a      	ldr	r2, [r3, #4]
 8008dbc:	bb62      	cbnz	r2, 8008e18 <_malloc_r+0xdc>
 8008dbe:	f8c8 7000 	str.w	r7, [r8]
 8008dc2:	e00f      	b.n	8008de4 <_malloc_r+0xa8>
 8008dc4:	6822      	ldr	r2, [r4, #0]
 8008dc6:	1b52      	subs	r2, r2, r5
 8008dc8:	d420      	bmi.n	8008e0c <_malloc_r+0xd0>
 8008dca:	2a0b      	cmp	r2, #11
 8008dcc:	d917      	bls.n	8008dfe <_malloc_r+0xc2>
 8008dce:	1961      	adds	r1, r4, r5
 8008dd0:	42a3      	cmp	r3, r4
 8008dd2:	6025      	str	r5, [r4, #0]
 8008dd4:	bf18      	it	ne
 8008dd6:	6059      	strne	r1, [r3, #4]
 8008dd8:	6863      	ldr	r3, [r4, #4]
 8008dda:	bf08      	it	eq
 8008ddc:	f8c8 1000 	streq.w	r1, [r8]
 8008de0:	5162      	str	r2, [r4, r5]
 8008de2:	604b      	str	r3, [r1, #4]
 8008de4:	4630      	mov	r0, r6
 8008de6:	f000 f82f 	bl	8008e48 <__malloc_unlock>
 8008dea:	f104 000b 	add.w	r0, r4, #11
 8008dee:	1d23      	adds	r3, r4, #4
 8008df0:	f020 0007 	bic.w	r0, r0, #7
 8008df4:	1ac2      	subs	r2, r0, r3
 8008df6:	bf1c      	itt	ne
 8008df8:	1a1b      	subne	r3, r3, r0
 8008dfa:	50a3      	strne	r3, [r4, r2]
 8008dfc:	e7af      	b.n	8008d5e <_malloc_r+0x22>
 8008dfe:	6862      	ldr	r2, [r4, #4]
 8008e00:	42a3      	cmp	r3, r4
 8008e02:	bf0c      	ite	eq
 8008e04:	f8c8 2000 	streq.w	r2, [r8]
 8008e08:	605a      	strne	r2, [r3, #4]
 8008e0a:	e7eb      	b.n	8008de4 <_malloc_r+0xa8>
 8008e0c:	4623      	mov	r3, r4
 8008e0e:	6864      	ldr	r4, [r4, #4]
 8008e10:	e7ae      	b.n	8008d70 <_malloc_r+0x34>
 8008e12:	463c      	mov	r4, r7
 8008e14:	687f      	ldr	r7, [r7, #4]
 8008e16:	e7b6      	b.n	8008d86 <_malloc_r+0x4a>
 8008e18:	461a      	mov	r2, r3
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	42a3      	cmp	r3, r4
 8008e1e:	d1fb      	bne.n	8008e18 <_malloc_r+0xdc>
 8008e20:	2300      	movs	r3, #0
 8008e22:	6053      	str	r3, [r2, #4]
 8008e24:	e7de      	b.n	8008de4 <_malloc_r+0xa8>
 8008e26:	230c      	movs	r3, #12
 8008e28:	6033      	str	r3, [r6, #0]
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	f000 f80c 	bl	8008e48 <__malloc_unlock>
 8008e30:	e794      	b.n	8008d5c <_malloc_r+0x20>
 8008e32:	6005      	str	r5, [r0, #0]
 8008e34:	e7d6      	b.n	8008de4 <_malloc_r+0xa8>
 8008e36:	bf00      	nop
 8008e38:	20000788 	.word	0x20000788

08008e3c <__malloc_lock>:
 8008e3c:	4801      	ldr	r0, [pc, #4]	@ (8008e44 <__malloc_lock+0x8>)
 8008e3e:	f7ff bf00 	b.w	8008c42 <__retarget_lock_acquire_recursive>
 8008e42:	bf00      	nop
 8008e44:	20000780 	.word	0x20000780

08008e48 <__malloc_unlock>:
 8008e48:	4801      	ldr	r0, [pc, #4]	@ (8008e50 <__malloc_unlock+0x8>)
 8008e4a:	f7ff befb 	b.w	8008c44 <__retarget_lock_release_recursive>
 8008e4e:	bf00      	nop
 8008e50:	20000780 	.word	0x20000780

08008e54 <__sflush_r>:
 8008e54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e5c:	0716      	lsls	r6, r2, #28
 8008e5e:	4605      	mov	r5, r0
 8008e60:	460c      	mov	r4, r1
 8008e62:	d454      	bmi.n	8008f0e <__sflush_r+0xba>
 8008e64:	684b      	ldr	r3, [r1, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	dc02      	bgt.n	8008e70 <__sflush_r+0x1c>
 8008e6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	dd48      	ble.n	8008f02 <__sflush_r+0xae>
 8008e70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e72:	2e00      	cmp	r6, #0
 8008e74:	d045      	beq.n	8008f02 <__sflush_r+0xae>
 8008e76:	2300      	movs	r3, #0
 8008e78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008e7c:	682f      	ldr	r7, [r5, #0]
 8008e7e:	6a21      	ldr	r1, [r4, #32]
 8008e80:	602b      	str	r3, [r5, #0]
 8008e82:	d030      	beq.n	8008ee6 <__sflush_r+0x92>
 8008e84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008e86:	89a3      	ldrh	r3, [r4, #12]
 8008e88:	0759      	lsls	r1, r3, #29
 8008e8a:	d505      	bpl.n	8008e98 <__sflush_r+0x44>
 8008e8c:	6863      	ldr	r3, [r4, #4]
 8008e8e:	1ad2      	subs	r2, r2, r3
 8008e90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e92:	b10b      	cbz	r3, 8008e98 <__sflush_r+0x44>
 8008e94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008e96:	1ad2      	subs	r2, r2, r3
 8008e98:	2300      	movs	r3, #0
 8008e9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e9c:	6a21      	ldr	r1, [r4, #32]
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	47b0      	blx	r6
 8008ea2:	1c43      	adds	r3, r0, #1
 8008ea4:	89a3      	ldrh	r3, [r4, #12]
 8008ea6:	d106      	bne.n	8008eb6 <__sflush_r+0x62>
 8008ea8:	6829      	ldr	r1, [r5, #0]
 8008eaa:	291d      	cmp	r1, #29
 8008eac:	d82b      	bhi.n	8008f06 <__sflush_r+0xb2>
 8008eae:	4a2a      	ldr	r2, [pc, #168]	@ (8008f58 <__sflush_r+0x104>)
 8008eb0:	410a      	asrs	r2, r1
 8008eb2:	07d6      	lsls	r6, r2, #31
 8008eb4:	d427      	bmi.n	8008f06 <__sflush_r+0xb2>
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	6062      	str	r2, [r4, #4]
 8008eba:	04d9      	lsls	r1, r3, #19
 8008ebc:	6922      	ldr	r2, [r4, #16]
 8008ebe:	6022      	str	r2, [r4, #0]
 8008ec0:	d504      	bpl.n	8008ecc <__sflush_r+0x78>
 8008ec2:	1c42      	adds	r2, r0, #1
 8008ec4:	d101      	bne.n	8008eca <__sflush_r+0x76>
 8008ec6:	682b      	ldr	r3, [r5, #0]
 8008ec8:	b903      	cbnz	r3, 8008ecc <__sflush_r+0x78>
 8008eca:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ecc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ece:	602f      	str	r7, [r5, #0]
 8008ed0:	b1b9      	cbz	r1, 8008f02 <__sflush_r+0xae>
 8008ed2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ed6:	4299      	cmp	r1, r3
 8008ed8:	d002      	beq.n	8008ee0 <__sflush_r+0x8c>
 8008eda:	4628      	mov	r0, r5
 8008edc:	f7ff fec2 	bl	8008c64 <_free_r>
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ee4:	e00d      	b.n	8008f02 <__sflush_r+0xae>
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	4628      	mov	r0, r5
 8008eea:	47b0      	blx	r6
 8008eec:	4602      	mov	r2, r0
 8008eee:	1c50      	adds	r0, r2, #1
 8008ef0:	d1c9      	bne.n	8008e86 <__sflush_r+0x32>
 8008ef2:	682b      	ldr	r3, [r5, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d0c6      	beq.n	8008e86 <__sflush_r+0x32>
 8008ef8:	2b1d      	cmp	r3, #29
 8008efa:	d001      	beq.n	8008f00 <__sflush_r+0xac>
 8008efc:	2b16      	cmp	r3, #22
 8008efe:	d11e      	bne.n	8008f3e <__sflush_r+0xea>
 8008f00:	602f      	str	r7, [r5, #0]
 8008f02:	2000      	movs	r0, #0
 8008f04:	e022      	b.n	8008f4c <__sflush_r+0xf8>
 8008f06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f0a:	b21b      	sxth	r3, r3
 8008f0c:	e01b      	b.n	8008f46 <__sflush_r+0xf2>
 8008f0e:	690f      	ldr	r7, [r1, #16]
 8008f10:	2f00      	cmp	r7, #0
 8008f12:	d0f6      	beq.n	8008f02 <__sflush_r+0xae>
 8008f14:	0793      	lsls	r3, r2, #30
 8008f16:	680e      	ldr	r6, [r1, #0]
 8008f18:	bf08      	it	eq
 8008f1a:	694b      	ldreq	r3, [r1, #20]
 8008f1c:	600f      	str	r7, [r1, #0]
 8008f1e:	bf18      	it	ne
 8008f20:	2300      	movne	r3, #0
 8008f22:	eba6 0807 	sub.w	r8, r6, r7
 8008f26:	608b      	str	r3, [r1, #8]
 8008f28:	f1b8 0f00 	cmp.w	r8, #0
 8008f2c:	dde9      	ble.n	8008f02 <__sflush_r+0xae>
 8008f2e:	6a21      	ldr	r1, [r4, #32]
 8008f30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008f32:	4643      	mov	r3, r8
 8008f34:	463a      	mov	r2, r7
 8008f36:	4628      	mov	r0, r5
 8008f38:	47b0      	blx	r6
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	dc08      	bgt.n	8008f50 <__sflush_r+0xfc>
 8008f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f46:	81a3      	strh	r3, [r4, #12]
 8008f48:	f04f 30ff 	mov.w	r0, #4294967295
 8008f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f50:	4407      	add	r7, r0
 8008f52:	eba8 0800 	sub.w	r8, r8, r0
 8008f56:	e7e7      	b.n	8008f28 <__sflush_r+0xd4>
 8008f58:	dfbffffe 	.word	0xdfbffffe

08008f5c <_fflush_r>:
 8008f5c:	b538      	push	{r3, r4, r5, lr}
 8008f5e:	690b      	ldr	r3, [r1, #16]
 8008f60:	4605      	mov	r5, r0
 8008f62:	460c      	mov	r4, r1
 8008f64:	b913      	cbnz	r3, 8008f6c <_fflush_r+0x10>
 8008f66:	2500      	movs	r5, #0
 8008f68:	4628      	mov	r0, r5
 8008f6a:	bd38      	pop	{r3, r4, r5, pc}
 8008f6c:	b118      	cbz	r0, 8008f76 <_fflush_r+0x1a>
 8008f6e:	6a03      	ldr	r3, [r0, #32]
 8008f70:	b90b      	cbnz	r3, 8008f76 <_fflush_r+0x1a>
 8008f72:	f7ff fc81 	bl	8008878 <__sinit>
 8008f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d0f3      	beq.n	8008f66 <_fflush_r+0xa>
 8008f7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008f80:	07d0      	lsls	r0, r2, #31
 8008f82:	d404      	bmi.n	8008f8e <_fflush_r+0x32>
 8008f84:	0599      	lsls	r1, r3, #22
 8008f86:	d402      	bmi.n	8008f8e <_fflush_r+0x32>
 8008f88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f8a:	f7ff fe5a 	bl	8008c42 <__retarget_lock_acquire_recursive>
 8008f8e:	4628      	mov	r0, r5
 8008f90:	4621      	mov	r1, r4
 8008f92:	f7ff ff5f 	bl	8008e54 <__sflush_r>
 8008f96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f98:	07da      	lsls	r2, r3, #31
 8008f9a:	4605      	mov	r5, r0
 8008f9c:	d4e4      	bmi.n	8008f68 <_fflush_r+0xc>
 8008f9e:	89a3      	ldrh	r3, [r4, #12]
 8008fa0:	059b      	lsls	r3, r3, #22
 8008fa2:	d4e1      	bmi.n	8008f68 <_fflush_r+0xc>
 8008fa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fa6:	f7ff fe4d 	bl	8008c44 <__retarget_lock_release_recursive>
 8008faa:	e7dd      	b.n	8008f68 <_fflush_r+0xc>

08008fac <__swhatbuf_r>:
 8008fac:	b570      	push	{r4, r5, r6, lr}
 8008fae:	460c      	mov	r4, r1
 8008fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fb4:	2900      	cmp	r1, #0
 8008fb6:	b096      	sub	sp, #88	@ 0x58
 8008fb8:	4615      	mov	r5, r2
 8008fba:	461e      	mov	r6, r3
 8008fbc:	da0d      	bge.n	8008fda <__swhatbuf_r+0x2e>
 8008fbe:	89a3      	ldrh	r3, [r4, #12]
 8008fc0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008fc4:	f04f 0100 	mov.w	r1, #0
 8008fc8:	bf14      	ite	ne
 8008fca:	2340      	movne	r3, #64	@ 0x40
 8008fcc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	6031      	str	r1, [r6, #0]
 8008fd4:	602b      	str	r3, [r5, #0]
 8008fd6:	b016      	add	sp, #88	@ 0x58
 8008fd8:	bd70      	pop	{r4, r5, r6, pc}
 8008fda:	466a      	mov	r2, sp
 8008fdc:	f000 f848 	bl	8009070 <_fstat_r>
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	dbec      	blt.n	8008fbe <__swhatbuf_r+0x12>
 8008fe4:	9901      	ldr	r1, [sp, #4]
 8008fe6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008fea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008fee:	4259      	negs	r1, r3
 8008ff0:	4159      	adcs	r1, r3
 8008ff2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ff6:	e7eb      	b.n	8008fd0 <__swhatbuf_r+0x24>

08008ff8 <__smakebuf_r>:
 8008ff8:	898b      	ldrh	r3, [r1, #12]
 8008ffa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ffc:	079d      	lsls	r5, r3, #30
 8008ffe:	4606      	mov	r6, r0
 8009000:	460c      	mov	r4, r1
 8009002:	d507      	bpl.n	8009014 <__smakebuf_r+0x1c>
 8009004:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009008:	6023      	str	r3, [r4, #0]
 800900a:	6123      	str	r3, [r4, #16]
 800900c:	2301      	movs	r3, #1
 800900e:	6163      	str	r3, [r4, #20]
 8009010:	b003      	add	sp, #12
 8009012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009014:	ab01      	add	r3, sp, #4
 8009016:	466a      	mov	r2, sp
 8009018:	f7ff ffc8 	bl	8008fac <__swhatbuf_r>
 800901c:	9f00      	ldr	r7, [sp, #0]
 800901e:	4605      	mov	r5, r0
 8009020:	4639      	mov	r1, r7
 8009022:	4630      	mov	r0, r6
 8009024:	f7ff fe8a 	bl	8008d3c <_malloc_r>
 8009028:	b948      	cbnz	r0, 800903e <__smakebuf_r+0x46>
 800902a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800902e:	059a      	lsls	r2, r3, #22
 8009030:	d4ee      	bmi.n	8009010 <__smakebuf_r+0x18>
 8009032:	f023 0303 	bic.w	r3, r3, #3
 8009036:	f043 0302 	orr.w	r3, r3, #2
 800903a:	81a3      	strh	r3, [r4, #12]
 800903c:	e7e2      	b.n	8009004 <__smakebuf_r+0xc>
 800903e:	89a3      	ldrh	r3, [r4, #12]
 8009040:	6020      	str	r0, [r4, #0]
 8009042:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009046:	81a3      	strh	r3, [r4, #12]
 8009048:	9b01      	ldr	r3, [sp, #4]
 800904a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800904e:	b15b      	cbz	r3, 8009068 <__smakebuf_r+0x70>
 8009050:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009054:	4630      	mov	r0, r6
 8009056:	f000 f81d 	bl	8009094 <_isatty_r>
 800905a:	b128      	cbz	r0, 8009068 <__smakebuf_r+0x70>
 800905c:	89a3      	ldrh	r3, [r4, #12]
 800905e:	f023 0303 	bic.w	r3, r3, #3
 8009062:	f043 0301 	orr.w	r3, r3, #1
 8009066:	81a3      	strh	r3, [r4, #12]
 8009068:	89a3      	ldrh	r3, [r4, #12]
 800906a:	431d      	orrs	r5, r3
 800906c:	81a5      	strh	r5, [r4, #12]
 800906e:	e7cf      	b.n	8009010 <__smakebuf_r+0x18>

08009070 <_fstat_r>:
 8009070:	b538      	push	{r3, r4, r5, lr}
 8009072:	4d07      	ldr	r5, [pc, #28]	@ (8009090 <_fstat_r+0x20>)
 8009074:	2300      	movs	r3, #0
 8009076:	4604      	mov	r4, r0
 8009078:	4608      	mov	r0, r1
 800907a:	4611      	mov	r1, r2
 800907c:	602b      	str	r3, [r5, #0]
 800907e:	f7f8 fcee 	bl	8001a5e <_fstat>
 8009082:	1c43      	adds	r3, r0, #1
 8009084:	d102      	bne.n	800908c <_fstat_r+0x1c>
 8009086:	682b      	ldr	r3, [r5, #0]
 8009088:	b103      	cbz	r3, 800908c <_fstat_r+0x1c>
 800908a:	6023      	str	r3, [r4, #0]
 800908c:	bd38      	pop	{r3, r4, r5, pc}
 800908e:	bf00      	nop
 8009090:	2000077c 	.word	0x2000077c

08009094 <_isatty_r>:
 8009094:	b538      	push	{r3, r4, r5, lr}
 8009096:	4d06      	ldr	r5, [pc, #24]	@ (80090b0 <_isatty_r+0x1c>)
 8009098:	2300      	movs	r3, #0
 800909a:	4604      	mov	r4, r0
 800909c:	4608      	mov	r0, r1
 800909e:	602b      	str	r3, [r5, #0]
 80090a0:	f7f8 fced 	bl	8001a7e <_isatty>
 80090a4:	1c43      	adds	r3, r0, #1
 80090a6:	d102      	bne.n	80090ae <_isatty_r+0x1a>
 80090a8:	682b      	ldr	r3, [r5, #0]
 80090aa:	b103      	cbz	r3, 80090ae <_isatty_r+0x1a>
 80090ac:	6023      	str	r3, [r4, #0]
 80090ae:	bd38      	pop	{r3, r4, r5, pc}
 80090b0:	2000077c 	.word	0x2000077c

080090b4 <_sbrk_r>:
 80090b4:	b538      	push	{r3, r4, r5, lr}
 80090b6:	4d06      	ldr	r5, [pc, #24]	@ (80090d0 <_sbrk_r+0x1c>)
 80090b8:	2300      	movs	r3, #0
 80090ba:	4604      	mov	r4, r0
 80090bc:	4608      	mov	r0, r1
 80090be:	602b      	str	r3, [r5, #0]
 80090c0:	f7f8 fcf6 	bl	8001ab0 <_sbrk>
 80090c4:	1c43      	adds	r3, r0, #1
 80090c6:	d102      	bne.n	80090ce <_sbrk_r+0x1a>
 80090c8:	682b      	ldr	r3, [r5, #0]
 80090ca:	b103      	cbz	r3, 80090ce <_sbrk_r+0x1a>
 80090cc:	6023      	str	r3, [r4, #0]
 80090ce:	bd38      	pop	{r3, r4, r5, pc}
 80090d0:	2000077c 	.word	0x2000077c

080090d4 <_init>:
 80090d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d6:	bf00      	nop
 80090d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090da:	bc08      	pop	{r3}
 80090dc:	469e      	mov	lr, r3
 80090de:	4770      	bx	lr

080090e0 <_fini>:
 80090e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e2:	bf00      	nop
 80090e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090e6:	bc08      	pop	{r3}
 80090e8:	469e      	mov	lr, r3
 80090ea:	4770      	bx	lr
