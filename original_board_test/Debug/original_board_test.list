
original_board_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015454  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005eb8  08015598  08015598  00016598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b450  0801b450  0001c450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b458  0801b458  0001c458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801b45c  0801b45c  0001c45c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000038c  20000008  0801b460  0001d008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000394  0801b7ec  0001d394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200003cc  0801b821  0001d3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000810  200003e0  0801b832  0001d3e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bf0  0801b832  0001dbf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001ea67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0001f000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0001f000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0801b832  0001e1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   000624e1  00000000  00000000  0001ea97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000e472  00000000  00000000  00080f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003a40  00000000  00000000  0008f3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000215e  00000000  00000000  00092e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002faf3  00000000  00000000  00094f8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000460f3  00000000  00000000  000c4a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001072af  00000000  00000000  0010ab74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      0000008f  00000000  00000000  00211e23  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000f2d4  00000000  00000000  00211eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000053  00000000  00000000  00221188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    0001947a  00000000  00000000  002211db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_ranges 00003908  00000000  00000000  0023a655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200003e0 	.word	0x200003e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0801557c 	.word	0x0801557c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200003e4 	.word	0x200003e4
 800017c:	0801557c 	.word	0x0801557c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b98a 	b.w	8000e84 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f826 	bl	8000bc8 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_f2ulz>:
 8000b88:	b5d0      	push	{r4, r6, r7, lr}
 8000b8a:	f7ff fcb5 	bl	80004f8 <__aeabi_f2d>
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <__aeabi_f2ulz+0x38>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	4606      	mov	r6, r0
 8000b94:	460f      	mov	r7, r1
 8000b96:	f7ff fd07 	bl	80005a8 <__aeabi_dmul>
 8000b9a:	f000 f975 	bl	8000e88 <__aeabi_d2uiz>
 8000b9e:	4604      	mov	r4, r0
 8000ba0:	f7ff fc88 	bl	80004b4 <__aeabi_ui2d>
 8000ba4:	4b07      	ldr	r3, [pc, #28]	@ (8000bc4 <__aeabi_f2ulz+0x3c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f7ff fcfe 	bl	80005a8 <__aeabi_dmul>
 8000bac:	4602      	mov	r2, r0
 8000bae:	460b      	mov	r3, r1
 8000bb0:	4630      	mov	r0, r6
 8000bb2:	4639      	mov	r1, r7
 8000bb4:	f7ff fb40 	bl	8000238 <__aeabi_dsub>
 8000bb8:	f000 f966 	bl	8000e88 <__aeabi_d2uiz>
 8000bbc:	4621      	mov	r1, r4
 8000bbe:	bdd0      	pop	{r4, r6, r7, pc}
 8000bc0:	3df00000 	.word	0x3df00000
 8000bc4:	41f00000 	.word	0x41f00000

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	460c      	mov	r4, r1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d14e      	bne.n	8000c72 <__udivmoddi4+0xaa>
 8000bd4:	4694      	mov	ip, r2
 8000bd6:	458c      	cmp	ip, r1
 8000bd8:	4686      	mov	lr, r0
 8000bda:	fab2 f282 	clz	r2, r2
 8000bde:	d962      	bls.n	8000ca6 <__udivmoddi4+0xde>
 8000be0:	b14a      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be2:	f1c2 0320 	rsb	r3, r2, #32
 8000be6:	4091      	lsls	r1, r2
 8000be8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf0:	4319      	orrs	r1, r3
 8000bf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfa:	fa1f f68c 	uxth.w	r6, ip
 8000bfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c06:	fb07 1114 	mls	r1, r7, r4, r1
 8000c0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0e:	fb04 f106 	mul.w	r1, r4, r6
 8000c12:	4299      	cmp	r1, r3
 8000c14:	d90a      	bls.n	8000c2c <__udivmoddi4+0x64>
 8000c16:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c1e:	f080 8112 	bcs.w	8000e46 <__udivmoddi4+0x27e>
 8000c22:	4299      	cmp	r1, r3
 8000c24:	f240 810f 	bls.w	8000e46 <__udivmoddi4+0x27e>
 8000c28:	3c02      	subs	r4, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	1a59      	subs	r1, r3, r1
 8000c2e:	fa1f f38e 	uxth.w	r3, lr
 8000c32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c36:	fb07 1110 	mls	r1, r7, r0, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb00 f606 	mul.w	r6, r0, r6
 8000c42:	429e      	cmp	r6, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x94>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c4e:	f080 80fc 	bcs.w	8000e4a <__udivmoddi4+0x282>
 8000c52:	429e      	cmp	r6, r3
 8000c54:	f240 80f9 	bls.w	8000e4a <__udivmoddi4+0x282>
 8000c58:	4463      	add	r3, ip
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	1b9b      	subs	r3, r3, r6
 8000c5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c62:	2100      	movs	r1, #0
 8000c64:	b11d      	cbz	r5, 8000c6e <__udivmoddi4+0xa6>
 8000c66:	40d3      	lsrs	r3, r2
 8000c68:	2200      	movs	r2, #0
 8000c6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d905      	bls.n	8000c82 <__udivmoddi4+0xba>
 8000c76:	b10d      	cbz	r5, 8000c7c <__udivmoddi4+0xb4>
 8000c78:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4608      	mov	r0, r1
 8000c80:	e7f5      	b.n	8000c6e <__udivmoddi4+0xa6>
 8000c82:	fab3 f183 	clz	r1, r3
 8000c86:	2900      	cmp	r1, #0
 8000c88:	d146      	bne.n	8000d18 <__udivmoddi4+0x150>
 8000c8a:	42a3      	cmp	r3, r4
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xcc>
 8000c8e:	4290      	cmp	r0, r2
 8000c90:	f0c0 80f0 	bcc.w	8000e74 <__udivmoddi4+0x2ac>
 8000c94:	1a86      	subs	r6, r0, r2
 8000c96:	eb64 0303 	sbc.w	r3, r4, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	2d00      	cmp	r5, #0
 8000c9e:	d0e6      	beq.n	8000c6e <__udivmoddi4+0xa6>
 8000ca0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ca4:	e7e3      	b.n	8000c6e <__udivmoddi4+0xa6>
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	f040 8090 	bne.w	8000dcc <__udivmoddi4+0x204>
 8000cac:	eba1 040c 	sub.w	r4, r1, ip
 8000cb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb4:	fa1f f78c 	uxth.w	r7, ip
 8000cb8:	2101      	movs	r1, #1
 8000cba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cca:	fb07 f006 	mul.w	r0, r7, r6
 8000cce:	4298      	cmp	r0, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x11c>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x11a>
 8000cdc:	4298      	cmp	r0, r3
 8000cde:	f200 80cd 	bhi.w	8000e7c <__udivmoddi4+0x2b4>
 8000ce2:	4626      	mov	r6, r4
 8000ce4:	1a1c      	subs	r4, r3, r0
 8000ce6:	fa1f f38e 	uxth.w	r3, lr
 8000cea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cee:	fb08 4410 	mls	r4, r8, r0, r4
 8000cf2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cf6:	fb00 f707 	mul.w	r7, r0, r7
 8000cfa:	429f      	cmp	r7, r3
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x148>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x146>
 8000d08:	429f      	cmp	r7, r3
 8000d0a:	f200 80b0 	bhi.w	8000e6e <__udivmoddi4+0x2a6>
 8000d0e:	4620      	mov	r0, r4
 8000d10:	1bdb      	subs	r3, r3, r7
 8000d12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d16:	e7a5      	b.n	8000c64 <__udivmoddi4+0x9c>
 8000d18:	f1c1 0620 	rsb	r6, r1, #32
 8000d1c:	408b      	lsls	r3, r1
 8000d1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d22:	431f      	orrs	r7, r3
 8000d24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d28:	fa04 f301 	lsl.w	r3, r4, r1
 8000d2c:	ea43 030c 	orr.w	r3, r3, ip
 8000d30:	40f4      	lsrs	r4, r6
 8000d32:	fa00 f801 	lsl.w	r8, r0, r1
 8000d36:	0c38      	lsrs	r0, r7, #16
 8000d38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d40:	fa1f fc87 	uxth.w	ip, r7
 8000d44:	fb00 441e 	mls	r4, r0, lr, r4
 8000d48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d50:	45a1      	cmp	r9, r4
 8000d52:	fa02 f201 	lsl.w	r2, r2, r1
 8000d56:	d90a      	bls.n	8000d6e <__udivmoddi4+0x1a6>
 8000d58:	193c      	adds	r4, r7, r4
 8000d5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d5e:	f080 8084 	bcs.w	8000e6a <__udivmoddi4+0x2a2>
 8000d62:	45a1      	cmp	r9, r4
 8000d64:	f240 8081 	bls.w	8000e6a <__udivmoddi4+0x2a2>
 8000d68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d6c:	443c      	add	r4, r7
 8000d6e:	eba4 0409 	sub.w	r4, r4, r9
 8000d72:	fa1f f983 	uxth.w	r9, r3
 8000d76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d86:	45a4      	cmp	ip, r4
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x1d2>
 8000d8a:	193c      	adds	r4, r7, r4
 8000d8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d90:	d267      	bcs.n	8000e62 <__udivmoddi4+0x29a>
 8000d92:	45a4      	cmp	ip, r4
 8000d94:	d965      	bls.n	8000e62 <__udivmoddi4+0x29a>
 8000d96:	3b02      	subs	r3, #2
 8000d98:	443c      	add	r4, r7
 8000d9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000da2:	eba4 040c 	sub.w	r4, r4, ip
 8000da6:	429c      	cmp	r4, r3
 8000da8:	46ce      	mov	lr, r9
 8000daa:	469c      	mov	ip, r3
 8000dac:	d351      	bcc.n	8000e52 <__udivmoddi4+0x28a>
 8000dae:	d04e      	beq.n	8000e4e <__udivmoddi4+0x286>
 8000db0:	b155      	cbz	r5, 8000dc8 <__udivmoddi4+0x200>
 8000db2:	ebb8 030e 	subs.w	r3, r8, lr
 8000db6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dba:	fa04 f606 	lsl.w	r6, r4, r6
 8000dbe:	40cb      	lsrs	r3, r1
 8000dc0:	431e      	orrs	r6, r3
 8000dc2:	40cc      	lsrs	r4, r1
 8000dc4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dc8:	2100      	movs	r1, #0
 8000dca:	e750      	b.n	8000c6e <__udivmoddi4+0xa6>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f103 	lsr.w	r1, r0, r3
 8000dd4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ddc:	4094      	lsls	r4, r2
 8000dde:	430c      	orrs	r4, r1
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000de8:	fa1f f78c 	uxth.w	r7, ip
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3110 	mls	r1, r8, r0, r3
 8000df4:	0c23      	lsrs	r3, r4, #16
 8000df6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dfa:	fb00 f107 	mul.w	r1, r0, r7
 8000dfe:	4299      	cmp	r1, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x24c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e0a:	d22c      	bcs.n	8000e66 <__udivmoddi4+0x29e>
 8000e0c:	4299      	cmp	r1, r3
 8000e0e:	d92a      	bls.n	8000e66 <__udivmoddi4+0x29e>
 8000e10:	3802      	subs	r0, #2
 8000e12:	4463      	add	r3, ip
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e24:	fb01 f307 	mul.w	r3, r1, r7
 8000e28:	42a3      	cmp	r3, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x276>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e34:	d213      	bcs.n	8000e5e <__udivmoddi4+0x296>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d911      	bls.n	8000e5e <__udivmoddi4+0x296>
 8000e3a:	3902      	subs	r1, #2
 8000e3c:	4464      	add	r4, ip
 8000e3e:	1ae4      	subs	r4, r4, r3
 8000e40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e44:	e739      	b.n	8000cba <__udivmoddi4+0xf2>
 8000e46:	4604      	mov	r4, r0
 8000e48:	e6f0      	b.n	8000c2c <__udivmoddi4+0x64>
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e706      	b.n	8000c5c <__udivmoddi4+0x94>
 8000e4e:	45c8      	cmp	r8, r9
 8000e50:	d2ae      	bcs.n	8000db0 <__udivmoddi4+0x1e8>
 8000e52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e5a:	3801      	subs	r0, #1
 8000e5c:	e7a8      	b.n	8000db0 <__udivmoddi4+0x1e8>
 8000e5e:	4631      	mov	r1, r6
 8000e60:	e7ed      	b.n	8000e3e <__udivmoddi4+0x276>
 8000e62:	4603      	mov	r3, r0
 8000e64:	e799      	b.n	8000d9a <__udivmoddi4+0x1d2>
 8000e66:	4630      	mov	r0, r6
 8000e68:	e7d4      	b.n	8000e14 <__udivmoddi4+0x24c>
 8000e6a:	46d6      	mov	lr, sl
 8000e6c:	e77f      	b.n	8000d6e <__udivmoddi4+0x1a6>
 8000e6e:	4463      	add	r3, ip
 8000e70:	3802      	subs	r0, #2
 8000e72:	e74d      	b.n	8000d10 <__udivmoddi4+0x148>
 8000e74:	4606      	mov	r6, r0
 8000e76:	4623      	mov	r3, r4
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e70f      	b.n	8000c9c <__udivmoddi4+0xd4>
 8000e7c:	3e02      	subs	r6, #2
 8000e7e:	4463      	add	r3, ip
 8000e80:	e730      	b.n	8000ce4 <__udivmoddi4+0x11c>
 8000e82:	bf00      	nop

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <__aeabi_d2uiz>:
 8000e88:	004a      	lsls	r2, r1, #1
 8000e8a:	d211      	bcs.n	8000eb0 <__aeabi_d2uiz+0x28>
 8000e8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000e90:	d211      	bcs.n	8000eb6 <__aeabi_d2uiz+0x2e>
 8000e92:	d50d      	bpl.n	8000eb0 <__aeabi_d2uiz+0x28>
 8000e94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000e98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e9c:	d40e      	bmi.n	8000ebc <__aeabi_d2uiz+0x34>
 8000e9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ea2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ea6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000eaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000eae:	4770      	bx	lr
 8000eb0:	f04f 0000 	mov.w	r0, #0
 8000eb4:	4770      	bx	lr
 8000eb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000eba:	d102      	bne.n	8000ec2 <__aeabi_d2uiz+0x3a>
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec0:	4770      	bx	lr
 8000ec2:	f04f 0000 	mov.w	r0, #0
 8000ec6:	4770      	bx	lr

08000ec8 <disable_interrupts>:
//	{SEN_EN5_GPIO_Port, SEN_EN5_Pin, SEN_INT5_GPIO_Port, SEN_INT5_Pin},
};


static inline void disable_interrupts(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ecc:	b672      	cpsid	i
}
 8000ece:	bf00      	nop
	__disable_irq();
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <enable_interrupts>:


static inline void enable_interrupts(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8000ede:	b662      	cpsie	i
}
 8000ee0:	bf00      	nop
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000ee2:	f3bf 8f6f 	isb	sy
}
 8000ee6:	bf00      	nop
	__enable_irq();
	__ISB();
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <spi_select>:
// Implementation of RSS HAL handlers
//----------------------------------------


static void spi_select(acc_sensor_id_t sensor_id)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	GPIO_PinState sel0 = GPIO_PIN_RESET;
 8000efc:	2300      	movs	r3, #0
 8000efe:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState sel1 = GPIO_PIN_RESET;
 8000f00:	2300      	movs	r3, #0
 8000f02:	73bb      	strb	r3, [r7, #14]
	GPIO_PinState sel2 = GPIO_PIN_RESET;
 8000f04:	2300      	movs	r3, #0
 8000f06:	737b      	strb	r3, [r7, #13]

	switch (sensor_id)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	2b04      	cmp	r3, #4
 8000f0e:	d81b      	bhi.n	8000f48 <spi_select+0x54>
 8000f10:	a201      	add	r2, pc, #4	@ (adr r2, 8000f18 <spi_select+0x24>)
 8000f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f16:	bf00      	nop
 8000f18:	08000f49 	.word	0x08000f49
 8000f1c:	08000f2d 	.word	0x08000f2d
 8000f20:	08000f33 	.word	0x08000f33
 8000f24:	08000f39 	.word	0x08000f39
 8000f28:	08000f43 	.word	0x08000f43
	{
		case 1:
			break;
		case 2:
			sel0 = GPIO_PIN_SET;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
			break;
 8000f30:	e00b      	b.n	8000f4a <spi_select+0x56>
		case 3:
			sel1 = GPIO_PIN_SET;
 8000f32:	2301      	movs	r3, #1
 8000f34:	73bb      	strb	r3, [r7, #14]
			break;
 8000f36:	e008      	b.n	8000f4a <spi_select+0x56>
		case 4:
			sel0 = GPIO_PIN_SET;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	73fb      	strb	r3, [r7, #15]
			sel1 = GPIO_PIN_SET;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	73bb      	strb	r3, [r7, #14]
			break;
 8000f40:	e003      	b.n	8000f4a <spi_select+0x56>
		case 5:
			sel2 = GPIO_PIN_SET;
 8000f42:	2301      	movs	r3, #1
 8000f44:	737b      	strb	r3, [r7, #13]
			break;
 8000f46:	e000      	b.n	8000f4a <spi_select+0x56>
		default:
			break;
 8000f48:	bf00      	nop
	}

	HAL_GPIO_WritePin(SPI_SEL0_GPIO_Port, SPI_SEL0_Pin, sel0);
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	2102      	movs	r1, #2
 8000f50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f54:	f003 fbe4 	bl	8004720 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_SEL1_GPIO_Port, SPI_SEL1_Pin, sel1);
 8000f58:	7bbb      	ldrb	r3, [r7, #14]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	4806      	ldr	r0, [pc, #24]	@ (8000f78 <spi_select+0x84>)
 8000f60:	f003 fbde 	bl	8004720 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_SEL2_GPIO_Port, SPI_SEL2_Pin, sel2);
 8000f64:	7b7b      	ldrb	r3, [r7, #13]
 8000f66:	461a      	mov	r2, r3
 8000f68:	2101      	movs	r1, #1
 8000f6a:	4803      	ldr	r0, [pc, #12]	@ (8000f78 <spi_select+0x84>)
 8000f6c:	f003 fbd8 	bl	8004720 <HAL_GPIO_WritePin>
}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	48000800 	.word	0x48000800

08000f7c <acc_hal_integration_sensor_transfer>:


static void acc_hal_integration_sensor_transfer(acc_sensor_id_t sensor_id, uint8_t *buffer, size_t buffer_size)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af02      	add	r7, sp, #8
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d002      	beq.n	8000f94 <acc_hal_integration_sensor_transfer+0x18>
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2b05      	cmp	r3, #5
 8000f92:	d901      	bls.n	8000f98 <acc_hal_integration_sensor_transfer+0x1c>
	{
		Error_Handler();
 8000f94:	f002 fbcc 	bl	8003730 <Error_Handler>
	}

	spi_select(sensor_id);
 8000f98:	68f8      	ldr	r0, [r7, #12]
 8000f9a:	f7ff ffab 	bl	8000ef4 <spi_select>

	const uint32_t SPI_TRANSMIT_RECEIVE_TIMEOUT = 5000;
 8000f9e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000fa2:	617b      	str	r3, [r7, #20]

	HAL_GPIO_WritePin(A121_SPI_SS_GPIO_Port, A121_SPI_SS_Pin, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2110      	movs	r1, #16
 8000fa8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fac:	f003 fbb8 	bl	8004720 <HAL_GPIO_WritePin>
		// Enable interrupt again, the ISR will execute directly after this
		enable_interrupts();
	}

#else
	HAL_SPI_TransmitReceive(&A121_SPI_HANDLE, buffer, buffer, buffer_size, SPI_TRANSMIT_RECEIVE_TIMEOUT);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	68b9      	ldr	r1, [r7, #8]
 8000fbe:	4806      	ldr	r0, [pc, #24]	@ (8000fd8 <acc_hal_integration_sensor_transfer+0x5c>)
 8000fc0:	f005 ff85 	bl	8006ece <HAL_SPI_TransmitReceive>
#endif

	HAL_GPIO_WritePin(A121_SPI_SS_GPIO_Port, A121_SPI_SS_Pin, GPIO_PIN_SET);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2110      	movs	r1, #16
 8000fc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fcc:	f003 fba8 	bl	8004720 <HAL_GPIO_WritePin>
}
 8000fd0:	bf00      	nop
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	2000055c 	.word	0x2000055c

08000fdc <acc_hal_integration_sensor_supply_on>:


void acc_hal_integration_sensor_supply_on(acc_sensor_id_t sensor_id)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d002      	beq.n	8000ff0 <acc_hal_integration_sensor_supply_on+0x14>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b05      	cmp	r3, #5
 8000fee:	d901      	bls.n	8000ff4 <acc_hal_integration_sensor_supply_on+0x18>
	{
		Error_Handler();
 8000ff0:	f002 fb9e 	bl	8003730 <Error_Handler>
	}

	// There is no power supply control on the XE121
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <acc_hal_integration_sensor_supply_off>:


void acc_hal_integration_sensor_supply_off(acc_sensor_id_t sensor_id)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d002      	beq.n	8001010 <acc_hal_integration_sensor_supply_off+0x14>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b05      	cmp	r3, #5
 800100e:	d901      	bls.n	8001014 <acc_hal_integration_sensor_supply_off+0x18>
	{
		Error_Handler();
 8001010:	f002 fb8e 	bl	8003730 <Error_Handler>
	}

	// There is no power supply control on the XE121
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <acc_hal_integration_sensor_enable>:


void acc_hal_integration_sensor_enable(acc_sensor_id_t sensor_id)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d002      	beq.n	8001030 <acc_hal_integration_sensor_enable+0x14>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b05      	cmp	r3, #5
 800102e:	d901      	bls.n	8001034 <acc_hal_integration_sensor_enable+0x18>
	{
		Error_Handler();
 8001030:	f002 fb7e 	bl	8003730 <Error_Handler>
	}

	const acc_sensor_info_t *sensor_info = &sensor_infos[sensor_id - 1];
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	011b      	lsls	r3, r3, #4
 800103a:	4a0a      	ldr	r2, [pc, #40]	@ (8001064 <acc_hal_integration_sensor_enable+0x48>)
 800103c:	4413      	add	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(sensor_info->en_port, sensor_info->en_pin_mask, GPIO_PIN_SET);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	b29b      	uxth	r3, r3
 800104a:	2201      	movs	r2, #1
 800104c:	4619      	mov	r1, r3
 800104e:	f003 fb67 	bl	8004720 <HAL_GPIO_WritePin>

	// Wait 2 ms to make sure that the sensor crystal has time to stabilize
	acc_integration_sleep_us(2000);
 8001052:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001056:	f000 f91d 	bl	8001294 <acc_integration_sleep_us>
}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	080158d8 	.word	0x080158d8

08001068 <acc_hal_integration_sensor_disable>:


void acc_hal_integration_sensor_disable(acc_sensor_id_t sensor_id)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <acc_hal_integration_sensor_disable+0x14>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b05      	cmp	r3, #5
 800107a:	d901      	bls.n	8001080 <acc_hal_integration_sensor_disable+0x18>
	{
		Error_Handler();
 800107c:	f002 fb58 	bl	8003730 <Error_Handler>
	}

	const acc_sensor_info_t *sensor_info = &sensor_infos[sensor_id - 1];
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	011b      	lsls	r3, r3, #4
 8001086:	4a0a      	ldr	r2, [pc, #40]	@ (80010b0 <acc_hal_integration_sensor_disable+0x48>)
 8001088:	4413      	add	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(sensor_info->en_port, sensor_info->en_pin_mask, GPIO_PIN_RESET);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	6818      	ldr	r0, [r3, #0]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	b29b      	uxth	r3, r3
 8001096:	2200      	movs	r2, #0
 8001098:	4619      	mov	r1, r3
 800109a:	f003 fb41 	bl	8004720 <HAL_GPIO_WritePin>

	// Wait after disable to leave the sensor in a known state
	// in case the application intends to enable the sensor directly
	acc_integration_sleep_us(2000);
 800109e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010a2:	f000 f8f7 	bl	8001294 <acc_integration_sleep_us>
}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	080158d8 	.word	0x080158d8

080010b4 <acc_hal_integration_wait_for_sensor_interrupt>:


bool acc_hal_integration_wait_for_sensor_interrupt(acc_sensor_id_t sensor_id, uint32_t timeout_ms)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
	bool status = false;
 80010be:	2300      	movs	r3, #0
 80010c0:	77fb      	strb	r3, [r7, #31]

	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <acc_hal_integration_wait_for_sensor_interrupt+0x1a>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b05      	cmp	r3, #5
 80010cc:	d901      	bls.n	80010d2 <acc_hal_integration_wait_for_sensor_interrupt+0x1e>
	{
		Error_Handler();
 80010ce:	f002 fb2f 	bl	8003730 <Error_Handler>
	}

	const acc_sensor_info_t *sensor_info  = &sensor_infos[sensor_id - 1];
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	011b      	lsls	r3, r3, #4
 80010d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001154 <acc_hal_integration_wait_for_sensor_interrupt+0xa0>)
 80010da:	4413      	add	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
	GPIO_TypeDef            *int_port     = sensor_info->int_port;
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	617b      	str	r3, [r7, #20]
	uint32_t                int_pin_mask  = sensor_info->int_pin_mask;
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	613b      	str	r3, [r7, #16]
	const uint32_t          wait_begin_ms = HAL_GetTick();
 80010ea:	f002 ffd3 	bl	8004094 <HAL_GetTick>
 80010ee:	60f8      	str	r0, [r7, #12]

	while ((HAL_GPIO_ReadPin(int_port, int_pin_mask) != GPIO_PIN_SET) &&
 80010f0:	e00d      	b.n	800110e <acc_hal_integration_wait_for_sensor_interrupt+0x5a>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
	{
		// Wait for the GPIO interrupt
		disable_interrupts();
 80010f2:	f7ff fee9 	bl	8000ec8 <disable_interrupts>
		// Check again so that IRQ did not occur
		if (HAL_GPIO_ReadPin(int_port, int_pin_mask) != GPIO_PIN_SET)
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	4619      	mov	r1, r3
 80010fc:	6978      	ldr	r0, [r7, #20]
 80010fe:	f003 faf7 	bl	80046f0 <HAL_GPIO_ReadPin>
 8001102:	4603      	mov	r3, r0
 8001104:	2b01      	cmp	r3, #1
 8001106:	d000      	beq.n	800110a <acc_hal_integration_wait_for_sensor_interrupt+0x56>
		{
			__WFI();
 8001108:	bf30      	wfi
		}

		// Enable interrupts again to allow pending interrupt to be handled
		enable_interrupts();
 800110a:	f7ff fee6 	bl	8000eda <enable_interrupts>
	while ((HAL_GPIO_ReadPin(int_port, int_pin_mask) != GPIO_PIN_SET) &&
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	b29b      	uxth	r3, r3
 8001112:	4619      	mov	r1, r3
 8001114:	6978      	ldr	r0, [r7, #20]
 8001116:	f003 faeb 	bl	80046f0 <HAL_GPIO_ReadPin>
 800111a:	4603      	mov	r3, r0
 800111c:	2b01      	cmp	r3, #1
 800111e:	d007      	beq.n	8001130 <acc_hal_integration_wait_for_sensor_interrupt+0x7c>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
 8001120:	f002 ffb8 	bl	8004094 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	1ad3      	subs	r3, r2, r3
	while ((HAL_GPIO_ReadPin(int_port, int_pin_mask) != GPIO_PIN_SET) &&
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	429a      	cmp	r2, r3
 800112e:	d8e0      	bhi.n	80010f2 <acc_hal_integration_wait_for_sensor_interrupt+0x3e>
	}

	status = HAL_GPIO_ReadPin(int_port, int_pin_mask) == GPIO_PIN_SET;
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	b29b      	uxth	r3, r3
 8001134:	4619      	mov	r1, r3
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	f003 fada 	bl	80046f0 <HAL_GPIO_ReadPin>
 800113c:	4603      	mov	r3, r0
 800113e:	2b01      	cmp	r3, #1
 8001140:	bf0c      	ite	eq
 8001142:	2301      	moveq	r3, #1
 8001144:	2300      	movne	r3, #0
 8001146:	77fb      	strb	r3, [r7, #31]

	return status;
 8001148:	7ffb      	ldrb	r3, [r7, #31]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3720      	adds	r7, #32
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	080158d8 	.word	0x080158d8

08001158 <acc_hal_rss_integration_get_implementation>:
	return SENSOR_COUNT;
}


const acc_hal_a121_t *acc_hal_rss_integration_get_implementation(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
		.log      = acc_integration_log,

		.optimization.transfer16 = NULL,
	};

	return &val;
 800115c:	4b02      	ldr	r3, [pc, #8]	@ (8001168 <acc_hal_rss_integration_get_implementation+0x10>)
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	08015928 	.word	0x08015928

0800116c <acc_integration_log>:

#define LOG_FORMAT "%02u:%02u:%02u.%03u (%c) (%s) %s\n"


void acc_integration_log(acc_log_level_t level, const char *module, const char *format, ...)
{
 800116c:	b40c      	push	{r2, r3}
 800116e:	b580      	push	{r7, lr}
 8001170:	b0b4      	sub	sp, #208	@ 0xd0
 8001172:	af04      	add	r7, sp, #16
 8001174:	4603      	mov	r3, r0
 8001176:	6039      	str	r1, [r7, #0]
 8001178:	71fb      	strb	r3, [r7, #7]
	char    log_buffer[LOG_BUFFER_MAX_SIZE];
	va_list ap;

	va_start(ap, format);
 800117a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800117e:	60bb      	str	r3, [r7, #8]

	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 8001180:	f107 000c 	add.w	r0, r7, #12
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800118a:	2196      	movs	r1, #150	@ 0x96
 800118c:	f011 fc46 	bl	8012a1c <vsniprintf>
 8001190:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc

	if (ret >= LOG_BUFFER_MAX_SIZE)
 8001194:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001198:	2b95      	cmp	r3, #149	@ 0x95
 800119a:	dd0b      	ble.n	80011b4 <acc_integration_log+0x48>
	{
		log_buffer[LOG_BUFFER_MAX_SIZE - 4] = '.';
 800119c:	232e      	movs	r3, #46	@ 0x2e
 800119e:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
		log_buffer[LOG_BUFFER_MAX_SIZE - 3] = '.';
 80011a2:	232e      	movs	r3, #46	@ 0x2e
 80011a4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		log_buffer[LOG_BUFFER_MAX_SIZE - 2] = '.';
 80011a8:	232e      	movs	r3, #46	@ 0x2e
 80011aa:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
		log_buffer[LOG_BUFFER_MAX_SIZE - 1] = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
	}

	uint32_t time_ms = acc_integration_get_time();
 80011b4:	f000 f882 	bl	80012bc <acc_integration_get_time>
 80011b8:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
	char     level_ch;

	unsigned int timestamp    = time_ms;
 80011bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80011c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 80011c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80011c8:	4a2c      	ldr	r2, [pc, #176]	@ (800127c <acc_integration_log+0x110>)
 80011ca:	fba2 2303 	umull	r2, r3, r2, r3
 80011ce:	0d5b      	lsrs	r3, r3, #21
 80011d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 80011d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80011d8:	4a29      	ldr	r2, [pc, #164]	@ (8001280 <acc_integration_log+0x114>)
 80011da:	fba2 2303 	umull	r2, r3, r2, r3
 80011de:	0b9a      	lsrs	r2, r3, #14
 80011e0:	4b28      	ldr	r3, [pc, #160]	@ (8001284 <acc_integration_log+0x118>)
 80011e2:	fba3 1302 	umull	r1, r3, r3, r2
 80011e6:	0959      	lsrs	r1, r3, #5
 80011e8:	460b      	mov	r3, r1
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	1a5b      	subs	r3, r3, r1
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	unsigned int seconds      = timestamp / 1000 % 60;
 80011f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80011fa:	4a23      	ldr	r2, [pc, #140]	@ (8001288 <acc_integration_log+0x11c>)
 80011fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001200:	099a      	lsrs	r2, r3, #6
 8001202:	4b20      	ldr	r3, [pc, #128]	@ (8001284 <acc_integration_log+0x118>)
 8001204:	fba3 1302 	umull	r1, r3, r3, r2
 8001208:	0959      	lsrs	r1, r3, #5
 800120a:	460b      	mov	r3, r1
 800120c:	011b      	lsls	r3, r3, #4
 800120e:	1a5b      	subs	r3, r3, r1
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	unsigned int milliseconds = timestamp % 1000;
 8001218:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800121c:	4a1a      	ldr	r2, [pc, #104]	@ (8001288 <acc_integration_log+0x11c>)
 800121e:	fba2 1203 	umull	r1, r2, r2, r3
 8001222:	0992      	lsrs	r2, r2, #6
 8001224:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001228:	fb01 f202 	mul.w	r2, r1, r2
 800122c:	1a9b      	subs	r3, r3, r2
 800122e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	2b04      	cmp	r3, #4
 8001236:	d803      	bhi.n	8001240 <acc_integration_log+0xd4>
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	4a14      	ldr	r2, [pc, #80]	@ (800128c <acc_integration_log+0x120>)
 800123c:	5cd3      	ldrb	r3, [r2, r3]
 800123e:	e000      	b.n	8001242 <acc_integration_log+0xd6>
 8001240:	233f      	movs	r3, #63	@ 0x3f
 8001242:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, level_ch, module, log_buffer);
 8001246:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800124a:	f107 020c 	add.w	r2, r7, #12
 800124e:	9203      	str	r2, [sp, #12]
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	9202      	str	r2, [sp, #8]
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001260:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001264:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8001268:	4809      	ldr	r0, [pc, #36]	@ (8001290 <acc_integration_log+0x124>)
 800126a:	f011 faf9 	bl	8012860 <iprintf>

	va_end(ap);
}
 800126e:	bf00      	nop
 8001270:	37c0      	adds	r7, #192	@ 0xc0
 8001272:	46bd      	mov	sp, r7
 8001274:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001278:	b002      	add	sp, #8
 800127a:	4770      	bx	lr
 800127c:	95217cb1 	.word	0x95217cb1
 8001280:	45e7b273 	.word	0x45e7b273
 8001284:	88888889 	.word	0x88888889
 8001288:	10624dd3 	.word	0x10624dd3
 800128c:	080155bc 	.word	0x080155bc
 8001290:	08015598 	.word	0x08015598

08001294 <acc_integration_sleep_us>:
	HAL_Delay(time_msec);
}


void acc_integration_sleep_us(uint32_t time_usec)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	uint32_t time_msec = (time_usec / 1000);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a06      	ldr	r2, [pc, #24]	@ (80012b8 <acc_integration_sleep_us+0x24>)
 80012a0:	fba2 2303 	umull	r2, r3, r2, r3
 80012a4:	099b      	lsrs	r3, r3, #6
 80012a6:	60fb      	str	r3, [r7, #12]

	HAL_Delay(time_msec);
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f000 fa34 	bl	8001716 <HAL_Delay>
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	10624dd3 	.word	0x10624dd3

080012bc <acc_integration_get_time>:


uint32_t acc_integration_get_time(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80012c0:	f002 fee8 	bl	8004094 <HAL_GetTick>
 80012c4:	4603      	mov	r3, r0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	bd80      	pop	{r7, pc}

080012ca <acc_integration_mem_alloc>:


void *acc_integration_mem_alloc(size_t size)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
	return malloc(size);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f010 fcec 	bl	8011cb0 <malloc>
 80012d8:	4603      	mov	r3, r0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <acc_integration_mem_free>:
	return calloc(nmemb, size);
}


void acc_integration_mem_free(void *ptr)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
	free(ptr);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f010 fce8 	bl	8011cc0 <free>
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 80012f8:	b5b0      	push	{r4, r5, r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80012fe:	4b0b      	ldr	r3, [pc, #44]	@ (800132c <APPD_EnableCPU2+0x34>)
 8001300:	1d3c      	adds	r4, r7, #4
 8001302:	461d      	mov	r5, r3
 8001304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001308:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800130c:	c403      	stmia	r4!, {r0, r1}
 800130e:	8022      	strh	r2, [r4, #0]
 8001310:	3402      	adds	r4, #2
 8001312:	0c13      	lsrs	r3, r2, #16
 8001314:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8001316:	f009 f8ad 	bl	800a474 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	4618      	mov	r0, r3
 800131e:	f008 fb3e 	bl	800999e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8001322:	bf00      	nop
}
 8001324:	3720      	adds	r7, #32
 8001326:	46bd      	mov	sp, r7
 8001328:	bdb0      	pop	{r4, r5, r7, pc}
 800132a:	bf00      	nop
 800132c:	080155c4 	.word	0x080155c4

08001330 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001338:	4b07      	ldr	r3, [pc, #28]	@ (8001358 <LL_C2_PWR_SetPowerMode+0x28>)
 800133a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800133e:	f023 0207 	bic.w	r2, r3, #7
 8001342:	4905      	ldr	r1, [pc, #20]	@ (8001358 <LL_C2_PWR_SetPowerMode+0x28>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4313      	orrs	r3, r2
 8001348:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	58000400 	.word	0x58000400

0800135c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001364:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <LL_EXTI_EnableIT_32_63+0x24>)
 8001366:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800136a:	4905      	ldr	r1, [pc, #20]	@ (8001380 <LL_EXTI_EnableIT_32_63+0x24>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4313      	orrs	r3, r2
 8001370:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	58000800 	.word	0x58000800

08001384 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800138c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001390:	4a0a      	ldr	r2, [pc, #40]	@ (80013bc <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001392:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001396:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800139a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800139e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	021b      	lsls	r3, r3, #8
 80013a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013aa:	4313      	orrs	r3, r2
 80013ac:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	cafecafe 	.word	0xcafecafe

080013c0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80013c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80013d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4313      	orrs	r3, r2
 80013da:	608b      	str	r3, [r1, #8]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80013ec:	4b04      	ldr	r3, [pc, #16]	@ (8001400 <LL_DBGMCU_GetDeviceID+0x18>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e0042000 	.word	0xe0042000

08001404 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001408:	4b04      	ldr	r3, [pc, #16]	@ (800141c <LL_DBGMCU_GetRevisionID+0x18>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	0c1b      	lsrs	r3, r3, #16
 800140e:	b29b      	uxth	r3, r3
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e0042000 	.word	0xe0042000

08001420 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001424:	4b05      	ldr	r3, [pc, #20]	@ (800143c <LL_LPM_EnableSleep+0x1c>)
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	4a04      	ldr	r2, [pc, #16]	@ (800143c <LL_LPM_EnableSleep+0x1c>)
 800142a:	f023 0304 	bic.w	r3, r3, #4
 800142e:	6113      	str	r3, [r2, #16]
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	22ff      	movs	r2, #255	@ 0xff
 800144c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	22ca      	movs	r2, #202	@ 0xca
 8001466:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2253      	movs	r2, #83	@ 0x53
 800146c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f023 0207 	bic.w	r2, r3, #7
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	431a      	orrs	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	609a      	str	r2, [r3, #8]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80014a4:	4b04      	ldr	r3, [pc, #16]	@ (80014b8 <MX_APPE_Config+0x18>)
 80014a6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014aa:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80014ac:	f000 f824 	bl	80014f8 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80014b0:	f000 f829 	bl	8001506 <Config_HSE>

  return;
 80014b4:	bf00      	nop
}
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	58004000 	.word	0x58004000

080014bc <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80014c0:	f000 f835 	bl	800152e <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80014c4:	f000 f84e 	bl	8001564 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80014c8:	4903      	ldr	r1, [pc, #12]	@ (80014d8 <MX_APPE_Init+0x1c>)
 80014ca:	2000      	movs	r0, #0
 80014cc:	f001 f8d6 	bl	800267c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80014d0:	f000 f856 	bl	8001580 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80014d4:	bf00      	nop
}
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000538 	.word	0x20000538

080014dc <Init_Smps>:

void Init_Smps(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80014e0:	bf00      	nop
}
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <Init_Exti>:

void Init_Exti(void)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80014ee:	2050      	movs	r0, #80	@ 0x50
 80014f0:	f7ff ff34 	bl	800135c <LL_EXTI_EnableIT_32_63>

  return;
 80014f4:	bf00      	nop
}
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80014fc:	bf00      	nop
}
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800150c:	2000      	movs	r0, #0
 800150e:	f009 f83d 	bl	800a58c <OTP_Read>
 8001512:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d005      	beq.n	8001526 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	799b      	ldrb	r3, [r3, #6]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff ff30 	bl	8001384 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001524:	bf00      	nop
 8001526:	bf00      	nop
}
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <System_Init>:

static void System_Init(void)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	af00      	add	r7, sp, #0
  Init_Smps();
 8001532:	f7ff ffd3 	bl	80014dc <Init_Smps>

  Init_Exti();
 8001536:	f7ff ffd8 	bl	80014ea <Init_Exti>

  Init_Rtc();
 800153a:	f000 f803 	bl	8001544 <Init_Rtc>

  return;
 800153e:	bf00      	nop
}
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001548:	4805      	ldr	r0, [pc, #20]	@ (8001560 <Init_Rtc+0x1c>)
 800154a:	f7ff ff86 	bl	800145a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800154e:	2100      	movs	r1, #0
 8001550:	4803      	ldr	r0, [pc, #12]	@ (8001560 <Init_Rtc+0x1c>)
 8001552:	f7ff ff92 	bl	800147a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001556:	4802      	ldr	r0, [pc, #8]	@ (8001560 <Init_Rtc+0x1c>)
 8001558:	f7ff ff72 	bl	8001440 <LL_RTC_EnableWriteProtection>

  return;
 800155c:	bf00      	nop
}
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40002800 	.word	0x40002800

08001564 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001568:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800156c:	f7ff ff28 	bl	80013c0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001570:	f00a f8b6 	bl	800b6e0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001574:	2004      	movs	r0, #4
 8001576:	f7ff fedb 	bl	8001330 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800157a:	bf00      	nop
}
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001586:	f008 fdbf 	bl	800a108 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800158a:	4a11      	ldr	r2, [pc, #68]	@ (80015d0 <appe_Tl_Init+0x50>)
 800158c:	2100      	movs	r1, #0
 800158e:	2008      	movs	r0, #8
 8001590:	f00a f9e4 	bl	800b95c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001594:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <appe_Tl_Init+0x54>)
 8001596:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001598:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <appe_Tl_Init+0x58>)
 800159a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800159c:	463b      	mov	r3, r7
 800159e:	4619      	mov	r1, r3
 80015a0:	480e      	ldr	r0, [pc, #56]	@ (80015dc <appe_Tl_Init+0x5c>)
 80015a2:	f008 fc73 	bl	8009e8c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <appe_Tl_Init+0x60>)
 80015a8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <appe_Tl_Init+0x64>)
 80015ac:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <appe_Tl_Init+0x68>)
 80015b0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80015b2:	f240 533c 	movw	r3, #1340	@ 0x53c
 80015b6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80015b8:	f107 0308 	add.w	r3, r7, #8
 80015bc:	4618      	mov	r0, r3
 80015be:	f008 fee5 	bl	800a38c <TL_MM_Init>

  TL_Enable();
 80015c2:	f008 fd9b 	bl	800a0fc <TL_Enable>

  return;
 80015c6:	bf00      	nop
}
 80015c8:	3720      	adds	r7, #32
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	08009ec5 	.word	0x08009ec5
 80015d4:	20030734 	.word	0x20030734
 80015d8:	080015ed 	.word	0x080015ed
 80015dc:	08001605 	.word	0x08001605
 80015e0:	2003094c 	.word	0x2003094c
 80015e4:	20030840 	.word	0x20030840
 80015e8:	200301f8 	.word	0x200301f8

080015ec <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80015f6:	bf00      	nop
}
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	330b      	adds	r3, #11
 8001612:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	b29b      	uxth	r3, r3
 800161a:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 800161e:	2b07      	cmp	r3, #7
 8001620:	d81f      	bhi.n	8001662 <APPE_SysUserEvtRx+0x5e>
 8001622:	a201      	add	r2, pc, #4	@ (adr r2, 8001628 <APPE_SysUserEvtRx+0x24>)
 8001624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001628:	08001649 	.word	0x08001649
 800162c:	0800165b 	.word	0x0800165b
 8001630:	08001663 	.word	0x08001663
 8001634:	08001663 	.word	0x08001663
 8001638:	08001663 	.word	0x08001663
 800163c:	08001663 	.word	0x08001663
 8001640:	08001663 	.word	0x08001663
 8001644:	08001663 	.word	0x08001663
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	4618      	mov	r0, r3
 800164e:	f008 f9d3 	bl	80099f8 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 f81b 	bl	800168e <APPE_SysEvtReadyProcessing>
    break;
 8001658:	e004      	b.n	8001664 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 f806 	bl	800166c <APPE_SysEvtError>
    break;
 8001660:	e000      	b.n	8001664 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8001662:	bf00      	nop
  }

  return;
 8001664:	bf00      	nop
}
 8001666:	3720      	adds	r7, #32
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	330b      	adds	r3, #11
 800167a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	3302      	adds	r3, #2
 8001680:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001682:	bf00      	nop
}
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b08a      	sub	sp, #40	@ 0x28
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001696:	f107 0308 	add.w	r3, r7, #8
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	330b      	adds	r3, #11
 80016b2:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	3302      	adds	r3, #2
 80016b8:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d11d      	bne.n	80016fe <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80016c2:	f7ff fe19 	bl	80012f8 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80016c6:	230f      	movs	r3, #15
 80016c8:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80016ca:	237f      	movs	r3, #127	@ 0x7f
 80016cc:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80016ce:	f7ff fe99 	bl	8001404 <LL_DBGMCU_GetRevisionID>
 80016d2:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 80016d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80016da:	f7ff fe85 	bl	80013e8 <LL_DBGMCU_GetDeviceID>
 80016de:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80016e6:	f107 0308 	add.w	r3, r7, #8
 80016ea:	4618      	mov	r0, r3
 80016ec:	f008 f96e 	bl	80099cc <SHCI_C2_Config>

    APP_BLE_Init();
 80016f0:	f009 f856 	bl	800a7a0 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80016f4:	2100      	movs	r1, #0
 80016f6:	2001      	movs	r0, #1
 80016f8:	f00a f804 	bl	800b704 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80016fc:	e007      	b.n	800170e <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d103      	bne.n	800170e <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
  return;
 800170c:	bf00      	nop
 800170e:	bf00      	nop
}
 8001710:	3728      	adds	r7, #40	@ 0x28
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b084      	sub	sp, #16
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800171e:	f002 fcb9 	bl	8004094 <HAL_GetTick>
 8001722:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800172e:	d00a      	beq.n	8001746 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001730:	f002 fcc8 	bl	80040c4 <HAL_GetTickFreq>
 8001734:	4603      	mov	r3, r0
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800173e:	e002      	b.n	8001746 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001740:	f7ff fe6e 	bl	8001420 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8001744:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001746:	f002 fca5 	bl	8004094 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	429a      	cmp	r2, r3
 8001754:	d8f4      	bhi.n	8001740 <HAL_Delay+0x2a>
  }
}
 8001756:	bf00      	nop
 8001758:	bf00      	nop
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001764:	f04f 30ff 	mov.w	r0, #4294967295
 8001768:	f009 fffc 	bl	800b764 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001774:	bf00      	nop
}
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f009 ffea 	bl	800b764 <UTIL_SEQ_Run>
  return;
 8001790:	bf00      	nop
}
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80017a0:	2100      	movs	r1, #0
 80017a2:	2008      	movs	r0, #8
 80017a4:	f00a f8fc 	bl	800b9a0 <UTIL_SEQ_SetTask>
  return;
 80017a8:	bf00      	nop
}
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80017b8:	2002      	movs	r0, #2
 80017ba:	f00a f95d 	bl	800ba78 <UTIL_SEQ_SetEvt>
  return;
 80017be:	bf00      	nop
}
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80017ce:	2002      	movs	r0, #2
 80017d0:	f00a f972 	bl	800bab8 <UTIL_SEQ_WaitEvt>
  return;
 80017d4:	bf00      	nop
}
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <acc_example_service_init>:

bool acc_example_service_init();
int acc_example_service(int argc, uint8_t argv[]);

bool acc_example_service_init()
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
    const acc_hal_a121_t *hal = acc_hal_rss_integration_get_implementation();
 80017e2:	f7ff fcb9 	bl	8001158 <acc_hal_rss_integration_get_implementation>
 80017e6:	6078      	str	r0, [r7, #4]

    if (!acc_rss_hal_register(hal))
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f00a f9f5 	bl	800bbd8 <acc_rss_hal_register>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f083 0301 	eor.w	r3, r3, #1
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <acc_example_service_init+0x22>
    {
        return false;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e08a      	b.n	8001914 <acc_example_service_init+0x138>
    }

    config = acc_config_create();
 80017fe:	f00a fbd3 	bl	800bfa8 <acc_config_create>
 8001802:	4603      	mov	r3, r0
 8001804:	4a45      	ldr	r2, [pc, #276]	@ (800191c <acc_example_service_init+0x140>)
 8001806:	6013      	str	r3, [r2, #0]
    if (config == NULL)
 8001808:	4b44      	ldr	r3, [pc, #272]	@ (800191c <acc_example_service_init+0x140>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d106      	bne.n	800181e <acc_example_service_init+0x42>
    {
        printf("acc_config_create() failed\n");
 8001810:	4843      	ldr	r0, [pc, #268]	@ (8001920 <acc_example_service_init+0x144>)
 8001812:	f011 f88d 	bl	8012930 <puts>
        cleanup();
 8001816:	f000 fa45 	bl	8001ca4 <cleanup>
        return false;
 800181a:	2300      	movs	r3, #0
 800181c:	e07a      	b.n	8001914 <acc_example_service_init+0x138>
    }

    set_config(config);
 800181e:	4b3f      	ldr	r3, [pc, #252]	@ (800191c <acc_example_service_init+0x140>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f992 	bl	8001b4c <set_config>

    // Print the configuration
    acc_config_log(config);
 8001828:	4b3c      	ldr	r3, [pc, #240]	@ (800191c <acc_example_service_init+0x140>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f00a fa01 	bl	800bc34 <acc_config_log>

    processing = acc_processing_create(config, &proc_meta);
 8001832:	4b3a      	ldr	r3, [pc, #232]	@ (800191c <acc_example_service_init+0x140>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	493b      	ldr	r1, [pc, #236]	@ (8001924 <acc_example_service_init+0x148>)
 8001838:	4618      	mov	r0, r3
 800183a:	f00a fdcf 	bl	800c3dc <acc_processing_create>
 800183e:	4603      	mov	r3, r0
 8001840:	4a39      	ldr	r2, [pc, #228]	@ (8001928 <acc_example_service_init+0x14c>)
 8001842:	6013      	str	r3, [r2, #0]
    if (processing == NULL)
 8001844:	4b38      	ldr	r3, [pc, #224]	@ (8001928 <acc_example_service_init+0x14c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d106      	bne.n	800185a <acc_example_service_init+0x7e>
    {
        printf("acc_processing_create() failed\n");
 800184c:	4837      	ldr	r0, [pc, #220]	@ (800192c <acc_example_service_init+0x150>)
 800184e:	f011 f86f 	bl	8012930 <puts>
        cleanup();
 8001852:	f000 fa27 	bl	8001ca4 <cleanup>
        return false;
 8001856:	2300      	movs	r3, #0
 8001858:	e05c      	b.n	8001914 <acc_example_service_init+0x138>
    }

    if (!acc_rss_get_buffer_size(config, &buffer_size))
 800185a:	4b30      	ldr	r3, [pc, #192]	@ (800191c <acc_example_service_init+0x140>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4934      	ldr	r1, [pc, #208]	@ (8001930 <acc_example_service_init+0x154>)
 8001860:	4618      	mov	r0, r3
 8001862:	f00a f9bd 	bl	800bbe0 <acc_rss_get_buffer_size>
 8001866:	4603      	mov	r3, r0
 8001868:	f083 0301 	eor.w	r3, r3, #1
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d006      	beq.n	8001880 <acc_example_service_init+0xa4>
    {
        printf("acc_rss_get_buffer_size() failed\n");
 8001872:	4830      	ldr	r0, [pc, #192]	@ (8001934 <acc_example_service_init+0x158>)
 8001874:	f011 f85c 	bl	8012930 <puts>
        cleanup();
 8001878:	f000 fa14 	bl	8001ca4 <cleanup>
        return false;
 800187c:	2300      	movs	r3, #0
 800187e:	e049      	b.n	8001914 <acc_example_service_init+0x138>
    }

    buffer = acc_integration_mem_alloc(buffer_size);
 8001880:	4b2b      	ldr	r3, [pc, #172]	@ (8001930 <acc_example_service_init+0x154>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fd20 	bl	80012ca <acc_integration_mem_alloc>
 800188a:	4603      	mov	r3, r0
 800188c:	4a2a      	ldr	r2, [pc, #168]	@ (8001938 <acc_example_service_init+0x15c>)
 800188e:	6013      	str	r3, [r2, #0]
    if (buffer == NULL)
 8001890:	4b29      	ldr	r3, [pc, #164]	@ (8001938 <acc_example_service_init+0x15c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d106      	bne.n	80018a6 <acc_example_service_init+0xca>
    {
        printf("Buffer allocation failed\n");
 8001898:	4828      	ldr	r0, [pc, #160]	@ (800193c <acc_example_service_init+0x160>)
 800189a:	f011 f849 	bl	8012930 <puts>
        cleanup();
 800189e:	f000 fa01 	bl	8001ca4 <cleanup>
        return false;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e036      	b.n	8001914 <acc_example_service_init+0x138>
    }

    acc_hal_integration_sensor_supply_on(SENSOR_ID);
 80018a6:	2002      	movs	r0, #2
 80018a8:	f7ff fb98 	bl	8000fdc <acc_hal_integration_sensor_supply_on>
    acc_hal_integration_sensor_enable(SENSOR_ID);
 80018ac:	2002      	movs	r0, #2
 80018ae:	f7ff fbb5 	bl	800101c <acc_hal_integration_sensor_enable>

    sensor = acc_sensor_create(SENSOR_ID);
 80018b2:	2002      	movs	r0, #2
 80018b4:	f00a fe26 	bl	800c504 <acc_sensor_create>
 80018b8:	4603      	mov	r3, r0
 80018ba:	4a21      	ldr	r2, [pc, #132]	@ (8001940 <acc_example_service_init+0x164>)
 80018bc:	6013      	str	r3, [r2, #0]
    if (sensor == NULL)
 80018be:	4b20      	ldr	r3, [pc, #128]	@ (8001940 <acc_example_service_init+0x164>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d106      	bne.n	80018d4 <acc_example_service_init+0xf8>
    {
        printf("acc_sensor_create() failed\n");
 80018c6:	481f      	ldr	r0, [pc, #124]	@ (8001944 <acc_example_service_init+0x168>)
 80018c8:	f011 f832 	bl	8012930 <puts>
        cleanup();
 80018cc:	f000 f9ea 	bl	8001ca4 <cleanup>
        return false;
 80018d0:	2300      	movs	r3, #0
 80018d2:	e01f      	b.n	8001914 <acc_example_service_init+0x138>
    }

    if (!do_sensor_calibration_and_prepare(sensor, config, buffer, buffer_size))
 80018d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001940 <acc_example_service_init+0x164>)
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	4b10      	ldr	r3, [pc, #64]	@ (800191c <acc_example_service_init+0x140>)
 80018da:	6819      	ldr	r1, [r3, #0]
 80018dc:	4b16      	ldr	r3, [pc, #88]	@ (8001938 <acc_example_service_init+0x15c>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b13      	ldr	r3, [pc, #76]	@ (8001930 <acc_example_service_init+0x154>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f000 f96a 	bl	8001bbc <do_sensor_calibration_and_prepare>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f083 0301 	eor.w	r3, r3, #1
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00b      	beq.n	800190c <acc_example_service_init+0x130>
    {
        printf("do_sensor_calibration_and_prepare() failed\n");
 80018f4:	4814      	ldr	r0, [pc, #80]	@ (8001948 <acc_example_service_init+0x16c>)
 80018f6:	f011 f81b 	bl	8012930 <puts>
        acc_sensor_status(sensor);
 80018fa:	4b11      	ldr	r3, [pc, #68]	@ (8001940 <acc_example_service_init+0x164>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f00a ff3a 	bl	800c778 <acc_sensor_status>
        cleanup();
 8001904:	f000 f9ce 	bl	8001ca4 <cleanup>
        return false;
 8001908:	2300      	movs	r3, #0
 800190a:	e003      	b.n	8001914 <acc_example_service_init+0x138>
    }

    is_initialized = true; // Mark as initialized
 800190c:	4b0f      	ldr	r3, [pc, #60]	@ (800194c <acc_example_service_init+0x170>)
 800190e:	2201      	movs	r2, #1
 8001910:	701a      	strb	r2, [r3, #0]
    return true;
 8001912:	2301      	movs	r3, #1
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200003fc 	.word	0x200003fc
 8001920:	080155e0 	.word	0x080155e0
 8001924:	20000410 	.word	0x20000410
 8001928:	20000400 	.word	0x20000400
 800192c:	080155fc 	.word	0x080155fc
 8001930:	2000040c 	.word	0x2000040c
 8001934:	0801561c 	.word	0x0801561c
 8001938:	20000408 	.word	0x20000408
 800193c:	08015640 	.word	0x08015640
 8001940:	20000404 	.word	0x20000404
 8001944:	0801565c 	.word	0x0801565c
 8001948:	08015678 	.word	0x08015678
 800194c:	2000042c 	.word	0x2000042c

08001950 <acc_example_service>:

int acc_example_service(int argc, uint8_t argv[])
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
     //Initialize on first run
    if (!is_initialized)
 800195a:	4b6e      	ldr	r3, [pc, #440]	@ (8001b14 <acc_example_service+0x1c4>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	f083 0301 	eor.w	r3, r3, #1
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d009      	beq.n	800197c <acc_example_service+0x2c>
    {
        if (!acc_example_service_init())
 8001968:	f7ff ff38 	bl	80017dc <acc_example_service_init>
 800196c:	4603      	mov	r3, r0
 800196e:	f083 0301 	eor.w	r3, r3, #1
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <acc_example_service+0x2c>
        {
            return EXIT_FAILURE;
 8001978:	2301      	movs	r3, #1
 800197a:	e0c7      	b.n	8001b0c <acc_example_service+0x1bc>
        }
    }

    acc_processing_result_t proc_result;

    if (!acc_sensor_measure(sensor))
 800197c:	4b66      	ldr	r3, [pc, #408]	@ (8001b18 <acc_example_service+0x1c8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f00a fe91 	bl	800c6a8 <acc_sensor_measure>
 8001986:	4603      	mov	r3, r0
 8001988:	f083 0301 	eor.w	r3, r3, #1
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00b      	beq.n	80019aa <acc_example_service+0x5a>
    {
        printf("acc_sensor_measure failed\n");
 8001992:	4862      	ldr	r0, [pc, #392]	@ (8001b1c <acc_example_service+0x1cc>)
 8001994:	f010 ffcc 	bl	8012930 <puts>
        acc_sensor_status(sensor);
 8001998:	4b5f      	ldr	r3, [pc, #380]	@ (8001b18 <acc_example_service+0x1c8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f00a feeb 	bl	800c778 <acc_sensor_status>
        cleanup();
 80019a2:	f000 f97f 	bl	8001ca4 <cleanup>
        return EXIT_FAILURE;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e0b0      	b.n	8001b0c <acc_example_service+0x1bc>
    }

    if (!acc_hal_integration_wait_for_sensor_interrupt(SENSOR_ID, SENSOR_TIMEOUT_MS))
 80019aa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80019ae:	2002      	movs	r0, #2
 80019b0:	f7ff fb80 	bl	80010b4 <acc_hal_integration_wait_for_sensor_interrupt>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f083 0301 	eor.w	r3, r3, #1
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00b      	beq.n	80019d8 <acc_example_service+0x88>
    {
        printf("Sensor interrupt timeout\n");
 80019c0:	4857      	ldr	r0, [pc, #348]	@ (8001b20 <acc_example_service+0x1d0>)
 80019c2:	f010 ffb5 	bl	8012930 <puts>
        acc_sensor_status(sensor);
 80019c6:	4b54      	ldr	r3, [pc, #336]	@ (8001b18 <acc_example_service+0x1c8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f00a fed4 	bl	800c778 <acc_sensor_status>
        cleanup();
 80019d0:	f000 f968 	bl	8001ca4 <cleanup>
        return EXIT_FAILURE;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e099      	b.n	8001b0c <acc_example_service+0x1bc>
    }

    if (!acc_sensor_read(sensor, buffer, buffer_size))
 80019d8:	4b4f      	ldr	r3, [pc, #316]	@ (8001b18 <acc_example_service+0x1c8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a51      	ldr	r2, [pc, #324]	@ (8001b24 <acc_example_service+0x1d4>)
 80019de:	6811      	ldr	r1, [r2, #0]
 80019e0:	4a51      	ldr	r2, [pc, #324]	@ (8001b28 <acc_example_service+0x1d8>)
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f00a fe87 	bl	800c6f8 <acc_sensor_read>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f083 0301 	eor.w	r3, r3, #1
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00b      	beq.n	8001a0e <acc_example_service+0xbe>
    {
        printf("acc_sensor_read failed\n");
 80019f6:	484d      	ldr	r0, [pc, #308]	@ (8001b2c <acc_example_service+0x1dc>)
 80019f8:	f010 ff9a 	bl	8012930 <puts>
        acc_sensor_status(sensor);
 80019fc:	4b46      	ldr	r3, [pc, #280]	@ (8001b18 <acc_example_service+0x1c8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f00a feb9 	bl	800c778 <acc_sensor_status>
        cleanup();
 8001a06:	f000 f94d 	bl	8001ca4 <cleanup>
        return EXIT_FAILURE;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e07e      	b.n	8001b0c <acc_example_service+0x1bc>
    }

    acc_processing_execute(processing, buffer, &proc_result);
 8001a0e:	4b48      	ldr	r3, [pc, #288]	@ (8001b30 <acc_example_service+0x1e0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a44      	ldr	r2, [pc, #272]	@ (8001b24 <acc_example_service+0x1d4>)
 8001a14:	6811      	ldr	r1, [r2, #0]
 8001a16:	f107 0208 	add.w	r2, r7, #8
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f00a fc7e 	bl	800c31c <acc_processing_execute>

    if (proc_result.calibration_needed)
 8001a20:	7abb      	ldrb	r3, [r7, #10]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d025      	beq.n	8001a72 <acc_example_service+0x122>
    {
        printf("The current calibration is not valid for the current temperature.\n");
 8001a26:	4843      	ldr	r0, [pc, #268]	@ (8001b34 <acc_example_service+0x1e4>)
 8001a28:	f010 ff82 	bl	8012930 <puts>
        printf("The sensor needs to be re-calibrated.\n");
 8001a2c:	4842      	ldr	r0, [pc, #264]	@ (8001b38 <acc_example_service+0x1e8>)
 8001a2e:	f010 ff7f 	bl	8012930 <puts>

        if (!do_sensor_calibration_and_prepare(sensor, config, buffer, buffer_size))
 8001a32:	4b39      	ldr	r3, [pc, #228]	@ (8001b18 <acc_example_service+0x1c8>)
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	4b41      	ldr	r3, [pc, #260]	@ (8001b3c <acc_example_service+0x1ec>)
 8001a38:	6819      	ldr	r1, [r3, #0]
 8001a3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b24 <acc_example_service+0x1d4>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b28 <acc_example_service+0x1d8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f000 f8bb 	bl	8001bbc <do_sensor_calibration_and_prepare>
 8001a46:	4603      	mov	r3, r0
 8001a48:	f083 0301 	eor.w	r3, r3, #1
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00b      	beq.n	8001a6a <acc_example_service+0x11a>
        {
            printf("do_sensor_calibration_and_prepare() failed\n");
 8001a52:	483b      	ldr	r0, [pc, #236]	@ (8001b40 <acc_example_service+0x1f0>)
 8001a54:	f010 ff6c 	bl	8012930 <puts>
            acc_sensor_status(sensor);
 8001a58:	4b2f      	ldr	r3, [pc, #188]	@ (8001b18 <acc_example_service+0x1c8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f00a fe8b 	bl	800c778 <acc_sensor_status>
            cleanup();
 8001a62:	f000 f91f 	bl	8001ca4 <cleanup>
            return EXIT_FAILURE;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e050      	b.n	8001b0c <acc_example_service+0x1bc>
        }

        printf("The sensor was successfully re-calibrated.\n");
 8001a6a:	4836      	ldr	r0, [pc, #216]	@ (8001b44 <acc_example_service+0x1f4>)
 8001a6c:	f010 ff60 	bl	8012930 <puts>
 8001a70:	e04b      	b.n	8001b0a <acc_example_service+0x1ba>
    }
    else
    {

		for (uint16_t j = 0; (j < proc_meta.frame_data_length) && (4*(j+1) <= argc); j++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	82fb      	strh	r3, [r7, #22]
 8001a76:	e03d      	b.n	8001af4 <acc_example_service+0x1a4>

		{

            argv[1+4*j] = (uint8_t)(proc_result.frame[j].real & 0xFF);
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	8afb      	ldrh	r3, [r7, #22]
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a84:	8afb      	ldrh	r3, [r7, #22]
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	3301      	adds	r3, #1
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	440b      	add	r3, r1
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	701a      	strb	r2, [r3, #0]
            argv[0+4*j] = (uint8_t)((proc_result.frame[j].real >> 8) & 0xFF);
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	8afb      	ldrh	r3, [r7, #22]
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa0:	121b      	asrs	r3, r3, #8
 8001aa2:	b21a      	sxth	r2, r3
 8001aa4:	8afb      	ldrh	r3, [r7, #22]
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	440b      	add	r3, r1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	701a      	strb	r2, [r3, #0]
            argv[3+4*j] = (uint8_t)(proc_result.frame[j].imag & 0xFF);
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	8afb      	ldrh	r3, [r7, #22]
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001abe:	8afb      	ldrh	r3, [r7, #22]
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	3303      	adds	r3, #3
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	440b      	add	r3, r1
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	701a      	strb	r2, [r3, #0]
            argv[2+4*j] = (uint8_t)((proc_result.frame[j].imag >> 8) & 0xFF);
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	8afb      	ldrh	r3, [r7, #22]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ada:	121b      	asrs	r3, r3, #8
 8001adc:	b21a      	sxth	r2, r3
 8001ade:	8afb      	ldrh	r3, [r7, #22]
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	440b      	add	r3, r1
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	701a      	strb	r2, [r3, #0]
		for (uint16_t j = 0; (j < proc_meta.frame_data_length) && (4*(j+1) <= argc); j++)
 8001aee:	8afb      	ldrh	r3, [r7, #22]
 8001af0:	3301      	adds	r3, #1
 8001af2:	82fb      	strh	r3, [r7, #22]
 8001af4:	4b14      	ldr	r3, [pc, #80]	@ (8001b48 <acc_example_service+0x1f8>)
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	8afa      	ldrh	r2, [r7, #22]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d205      	bcs.n	8001b0a <acc_example_service+0x1ba>
 8001afe:	8afb      	ldrh	r3, [r7, #22]
 8001b00:	3301      	adds	r3, #1
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	dab6      	bge.n	8001a78 <acc_example_service+0x128>
		}
//        print_data(proc_result.frame, proc_meta.frame_data_length);
    }

    return EXIT_SUCCESS;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	2000042c 	.word	0x2000042c
 8001b18:	20000404 	.word	0x20000404
 8001b1c:	080156a4 	.word	0x080156a4
 8001b20:	080156c0 	.word	0x080156c0
 8001b24:	20000408 	.word	0x20000408
 8001b28:	2000040c 	.word	0x2000040c
 8001b2c:	080156dc 	.word	0x080156dc
 8001b30:	20000400 	.word	0x20000400
 8001b34:	080156f4 	.word	0x080156f4
 8001b38:	08015738 	.word	0x08015738
 8001b3c:	200003fc 	.word	0x200003fc
 8001b40:	08015678 	.word	0x08015678
 8001b44:	08015760 	.word	0x08015760
 8001b48:	20000410 	.word	0x20000410

08001b4c <set_config>:
//
//}


static void set_config(acc_config_t *config)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	acc_config_sweep_rate_set(config,110.0f);
 8001b54:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8001bb8 <set_config+0x6c>
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f00a fb39 	bl	800c1d0 <acc_config_sweep_rate_set>
    acc_config_hwaas_set(config,100);
 8001b5e:	2164      	movs	r1, #100	@ 0x64
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f00a fb2d 	bl	800c1c0 <acc_config_hwaas_set>
    acc_config_start_point_set(config, 20);
 8001b66:	2114      	movs	r1, #20
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f00a fb19 	bl	800c1a0 <acc_config_start_point_set>
    acc_config_num_points_set(config, 40);
 8001b6e:	2128      	movs	r1, #40	@ 0x28
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f00a fb19 	bl	800c1a8 <acc_config_num_points_set>
    acc_config_step_length_set(config,1);
 8001b76:	2101      	movs	r1, #1
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f00a fb19 	bl	800c1b0 <acc_config_step_length_set>
    acc_config_profile_set (config , ACC_CONFIG_PROFILE_1);
 8001b7e:	2101      	movs	r1, #1
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f00a fb19 	bl	800c1b8 <acc_config_profile_set>
    acc_config_continuous_sweep_mode_set(config,true);
 8001b86:	2101      	movs	r1, #1
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f00a fb37 	bl	800c1fc <acc_config_continuous_sweep_mode_set>
    acc_config_receiver_gain_set(config,12);
 8001b8e:	210c      	movs	r1, #12
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f00a fb19 	bl	800c1c8 <acc_config_receiver_gain_set>
    acc_config_inter_sweep_idle_state_set(config,ACC_CONFIG_IDLE_STATE_READY);
 8001b96:	2102      	movs	r1, #2
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f00a fb5b 	bl	800c254 <acc_config_inter_sweep_idle_state_set>
    acc_config_inter_frame_idle_state_set(config,ACC_CONFIG_IDLE_STATE_READY);
 8001b9e:	2102      	movs	r1, #2
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f00a fb41 	bl	800c228 <acc_config_inter_frame_idle_state_set>
    acc_config_prf_set(config,ACC_CONFIG_PRF_19_5_MHZ);
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f00a fba3 	bl	800c2f4 <acc_config_prf_set>
//    acc_config_phase_enhancement_set(config,true);
//    acc_config_double_buffering_set(config,true);
//    acc_config_enable_loopback_set(config,true);
//    acc_detector_distance_config_start_set()

}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	42dc0000 	.word	0x42dc0000

08001bbc <do_sensor_calibration_and_prepare>:

static bool do_sensor_calibration_and_prepare(acc_sensor_t *sensor, acc_config_t *config, void *buffer, uint32_t buffer_size)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b0b8      	sub	sp, #224	@ 0xe0
 8001bc0:	af02      	add	r7, sp, #8
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	603b      	str	r3, [r7, #0]
    bool status = false;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    bool cal_complete = false;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    acc_cal_result_t cal_result;
    const uint16_t calibration_retries = 1U;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2

    // Random disturbances may cause the calibration to fail. At failure, retry at least once.
    for (uint16_t i = 0; !status && (i <= calibration_retries); i++)
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
 8001be2:	e035      	b.n	8001c50 <do_sensor_calibration_and_prepare+0x94>
    {
        // Reset sensor before calibration by disabling/enabling it
        acc_hal_integration_sensor_disable(SENSOR_ID);
 8001be4:	2002      	movs	r0, #2
 8001be6:	f7ff fa3f 	bl	8001068 <acc_hal_integration_sensor_disable>
        acc_hal_integration_sensor_enable(SENSOR_ID);
 8001bea:	2002      	movs	r0, #2
 8001bec:	f7ff fa16 	bl	800101c <acc_hal_integration_sensor_enable>

        do
        {
            status = acc_sensor_calibrate(sensor, &cal_complete, &cal_result, buffer, buffer_size);
 8001bf0:	f107 0210 	add.w	r2, r7, #16
 8001bf4:	f107 01d1 	add.w	r1, r7, #209	@ 0xd1
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f00a fcca 	bl	800c598 <acc_sensor_calibrate>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7

            if (status && !cal_complete)
 8001c0a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00e      	beq.n	8001c30 <do_sensor_calibration_and_prepare+0x74>
 8001c12:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8001c16:	f083 0301 	eor.w	r3, r3, #1
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d007      	beq.n	8001c30 <do_sensor_calibration_and_prepare+0x74>
            {
                status = acc_hal_integration_wait_for_sensor_interrupt(SENSOR_ID, SENSOR_TIMEOUT_MS);
 8001c20:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c24:	2002      	movs	r0, #2
 8001c26:	f7ff fa45 	bl	80010b4 <acc_hal_integration_wait_for_sensor_interrupt>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
            }
        } while (status && !cal_complete);
 8001c30:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d006      	beq.n	8001c46 <do_sensor_calibration_and_prepare+0x8a>
 8001c38:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8001c3c:	f083 0301 	eor.w	r3, r3, #1
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1d4      	bne.n	8001bf0 <do_sensor_calibration_and_prepare+0x34>
    for (uint16_t i = 0; !status && (i <= calibration_retries); i++)
 8001c46:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
 8001c50:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8001c54:	f083 0301 	eor.w	r3, r3, #1
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d005      	beq.n	8001c6a <do_sensor_calibration_and_prepare+0xae>
 8001c5e:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	@ 0xd4
 8001c62:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d9bc      	bls.n	8001be4 <do_sensor_calibration_and_prepare+0x28>
    }

    if (status)
 8001c6a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d011      	beq.n	8001c96 <do_sensor_calibration_and_prepare+0xda>
    {
        // Reset sensor after calibration by disabling/enabling it
        acc_hal_integration_sensor_disable(SENSOR_ID);
 8001c72:	2002      	movs	r0, #2
 8001c74:	f7ff f9f8 	bl	8001068 <acc_hal_integration_sensor_disable>
        acc_hal_integration_sensor_enable(SENSOR_ID);
 8001c78:	2002      	movs	r0, #2
 8001c7a:	f7ff f9cf 	bl	800101c <acc_hal_integration_sensor_enable>

        status = acc_sensor_prepare(sensor, config, &cal_result, buffer, buffer_size);
 8001c7e:	f107 0210 	add.w	r2, r7, #16
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f00a fcb6 	bl	800c5fc <acc_sensor_prepare>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    }

    return status;
 8001c96:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	37d8      	adds	r7, #216	@ 0xd8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <cleanup>:

    printf("\n");
}

static void cleanup()
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
    acc_hal_integration_sensor_disable(SENSOR_ID);
 8001ca8:	2002      	movs	r0, #2
 8001caa:	f7ff f9dd 	bl	8001068 <acc_hal_integration_sensor_disable>
    acc_hal_integration_sensor_supply_off(SENSOR_ID);
 8001cae:	2002      	movs	r0, #2
 8001cb0:	f7ff f9a4 	bl	8000ffc <acc_hal_integration_sensor_supply_off>

    if (sensor != NULL)
 8001cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d20 <cleanup+0x7c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d007      	beq.n	8001ccc <cleanup+0x28>
    {
        acc_sensor_destroy(sensor);
 8001cbc:	4b18      	ldr	r3, [pc, #96]	@ (8001d20 <cleanup+0x7c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f00a fbfd 	bl	800c4c0 <acc_sensor_destroy>
        sensor = NULL;
 8001cc6:	4b16      	ldr	r3, [pc, #88]	@ (8001d20 <cleanup+0x7c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
    }

    if (processing != NULL)
 8001ccc:	4b15      	ldr	r3, [pc, #84]	@ (8001d24 <cleanup+0x80>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d007      	beq.n	8001ce4 <cleanup+0x40>
    {
        acc_processing_destroy(processing);
 8001cd4:	4b13      	ldr	r3, [pc, #76]	@ (8001d24 <cleanup+0x80>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f00a fb5b 	bl	800c394 <acc_processing_destroy>
        processing = NULL;
 8001cde:	4b11      	ldr	r3, [pc, #68]	@ (8001d24 <cleanup+0x80>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
    }

    if (config != NULL)
 8001ce4:	4b10      	ldr	r3, [pc, #64]	@ (8001d28 <cleanup+0x84>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d007      	beq.n	8001cfc <cleanup+0x58>
    {
        acc_config_destroy(config);
 8001cec:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <cleanup+0x84>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f00a f971 	bl	800bfd8 <acc_config_destroy>
        config = NULL;
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <cleanup+0x84>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
    }

    if (buffer != NULL)
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <cleanup+0x88>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d007      	beq.n	8001d14 <cleanup+0x70>
    {
        acc_integration_mem_free(buffer);
 8001d04:	4b09      	ldr	r3, [pc, #36]	@ (8001d2c <cleanup+0x88>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff faea 	bl	80012e2 <acc_integration_mem_free>
        buffer = NULL;
 8001d0e:	4b07      	ldr	r3, [pc, #28]	@ (8001d2c <cleanup+0x88>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
    }

    is_initialized = false; // Reset initialization flag
 8001d14:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <cleanup+0x8c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	701a      	strb	r2, [r3, #0]
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000404 	.word	0x20000404
 8001d24:	20000400 	.word	0x20000400
 8001d28:	200003fc 	.word	0x200003fc
 8001d2c:	20000408 	.word	0x20000408
 8001d30:	2000042c 	.word	0x2000042c

08001d34 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d40:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d50:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4013      	ands	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d58:	68fb      	ldr	r3, [r7, #12]
}
 8001d5a:	bf00      	nop
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7c:	2004      	movs	r0, #4
 8001d7e:	f7ff ffd9 	bl	8001d34 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	2001      	movs	r0, #1
 8001d84:	f7ff ffd6 	bl	8001d34 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d88:	2002      	movs	r0, #2
 8001d8a:	f7ff ffd3 	bl	8001d34 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI_SEL2_Pin|SPI_SEL1_Pin|SEN_EN2_Pin, GPIO_PIN_RESET);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f240 4103 	movw	r1, #1027	@ 0x403
 8001d94:	482d      	ldr	r0, [pc, #180]	@ (8001e4c <MX_GPIO_Init+0xe4>)
 8001d96:	f002 fcc3 	bl	8004720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEN_EN1_Pin|SPI_SEL0_Pin, GPIO_PIN_RESET);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2103      	movs	r1, #3
 8001d9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001da2:	f002 fcbd 	bl	8004720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A121_SPI_SS_GPIO_Port, A121_SPI_SS_Pin, GPIO_PIN_SET);
 8001da6:	2201      	movs	r2, #1
 8001da8:	2110      	movs	r1, #16
 8001daa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dae:	f002 fcb7 	bl	8004720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001db2:	2201      	movs	r2, #1
 8001db4:	2140      	movs	r1, #64	@ 0x40
 8001db6:	4825      	ldr	r0, [pc, #148]	@ (8001e4c <MX_GPIO_Init+0xe4>)
 8001db8:	f002 fcb2 	bl	8004720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2120      	movs	r1, #32
 8001dc0:	4823      	ldr	r0, [pc, #140]	@ (8001e50 <MX_GPIO_Init+0xe8>)
 8001dc2:	f002 fcad 	bl	8004720 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SEN_INT2_Pin|SEN_INT1_Pin;
 8001dc6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001dca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dcc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001dd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	4619      	mov	r1, r3
 8001dda:	481c      	ldr	r0, [pc, #112]	@ (8001e4c <MX_GPIO_Init+0xe4>)
 8001ddc:	f002 fb18 	bl	8004410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SPI_SEL2_Pin|SPI_SEL1_Pin|SPI2_CS_Pin|SEN_EN2_Pin;
 8001de0:	f240 4343 	movw	r3, #1091	@ 0x443
 8001de4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de6:	2301      	movs	r3, #1
 8001de8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dee:	2303      	movs	r3, #3
 8001df0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	4619      	mov	r1, r3
 8001df6:	4815      	ldr	r0, [pc, #84]	@ (8001e4c <MX_GPIO_Init+0xe4>)
 8001df8:	f002 fb0a 	bl	8004410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SEN_EN1_Pin|SPI_SEL0_Pin|A121_SPI_SS_Pin;
 8001dfc:	2313      	movs	r3, #19
 8001dfe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e00:	2301      	movs	r3, #1
 8001e02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e14:	f002 fafc 	bl	8004410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001e18:	2320      	movs	r3, #32
 8001e1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4808      	ldr	r0, [pc, #32]	@ (8001e50 <MX_GPIO_Init+0xe8>)
 8001e2e:	f002 faef 	bl	8004410 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	2028      	movs	r0, #40	@ 0x28
 8001e38:	f002 fa8b 	bl	8004352 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e3c:	2028      	movs	r0, #40	@ 0x28
 8001e3e:	f002 faa2 	bl	8004386 <HAL_NVIC_EnableIRQ>

}
 8001e42:	bf00      	nop
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	48000800 	.word	0x48000800
 8001e50:	48000400 	.word	0x48000400

08001e54 <LL_EXTI_EnableIT_0_31>:
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001e5c:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <LL_EXTI_EnableIT_0_31+0x24>)
 8001e5e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001e62:	4905      	ldr	r1, [pc, #20]	@ (8001e78 <LL_EXTI_EnableIT_0_31+0x24>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	58000800 	.word	0x58000800

08001e7c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001e84:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4904      	ldr	r1, [pc, #16]	@ (8001e9c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	600b      	str	r3, [r1, #0]

}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	58000800 	.word	0x58000800

08001ea0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8001edc <ReadRtcSsrValue+0x3c>)
 8001ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001eae:	4b0b      	ldr	r3, [pc, #44]	@ (8001edc <ReadRtcSsrValue+0x3c>)
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001eb6:	e005      	b.n	8001ec4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001ebc:	4b07      	ldr	r3, [pc, #28]	@ (8001edc <ReadRtcSsrValue+0x3c>)
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d1f5      	bne.n	8001eb8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001ecc:	683b      	ldr	r3, [r7, #0]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40002800 	.word	0x40002800

08001ee0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	460a      	mov	r2, r1
 8001eea:	71fb      	strb	r3, [r7, #7]
 8001eec:	4613      	mov	r3, r2
 8001eee:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001ef0:	79ba      	ldrb	r2, [r7, #6]
 8001ef2:	491d      	ldr	r1, [pc, #116]	@ (8001f68 <LinkTimerAfter+0x88>)
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4413      	add	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	440b      	add	r3, r1
 8001efe:	3315      	adds	r3, #21
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	2b06      	cmp	r3, #6
 8001f08:	d009      	beq.n	8001f1e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001f0a:	7bfa      	ldrb	r2, [r7, #15]
 8001f0c:	4916      	ldr	r1, [pc, #88]	@ (8001f68 <LinkTimerAfter+0x88>)
 8001f0e:	4613      	mov	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4413      	add	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	440b      	add	r3, r1
 8001f18:	3314      	adds	r3, #20
 8001f1a:	79fa      	ldrb	r2, [r7, #7]
 8001f1c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001f1e:	79fa      	ldrb	r2, [r7, #7]
 8001f20:	4911      	ldr	r1, [pc, #68]	@ (8001f68 <LinkTimerAfter+0x88>)
 8001f22:	4613      	mov	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4413      	add	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	440b      	add	r3, r1
 8001f2c:	3315      	adds	r3, #21
 8001f2e:	7bfa      	ldrb	r2, [r7, #15]
 8001f30:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001f32:	79fa      	ldrb	r2, [r7, #7]
 8001f34:	490c      	ldr	r1, [pc, #48]	@ (8001f68 <LinkTimerAfter+0x88>)
 8001f36:	4613      	mov	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	4413      	add	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	440b      	add	r3, r1
 8001f40:	3314      	adds	r3, #20
 8001f42:	79ba      	ldrb	r2, [r7, #6]
 8001f44:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001f46:	79ba      	ldrb	r2, [r7, #6]
 8001f48:	4907      	ldr	r1, [pc, #28]	@ (8001f68 <LinkTimerAfter+0x88>)
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	440b      	add	r3, r1
 8001f54:	3315      	adds	r3, #21
 8001f56:	79fa      	ldrb	r2, [r7, #7]
 8001f58:	701a      	strb	r2, [r3, #0]

  return;
 8001f5a:	bf00      	nop
}
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	20000430 	.word	0x20000430

08001f6c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	460a      	mov	r2, r1
 8001f76:	71fb      	strb	r3, [r7, #7]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001f7c:	4b29      	ldr	r3, [pc, #164]	@ (8002024 <LinkTimerBefore+0xb8>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	79ba      	ldrb	r2, [r7, #6]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d032      	beq.n	8001fee <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001f88:	79ba      	ldrb	r2, [r7, #6]
 8001f8a:	4927      	ldr	r1, [pc, #156]	@ (8002028 <LinkTimerBefore+0xbc>)
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	440b      	add	r3, r1
 8001f96:	3314      	adds	r3, #20
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001f9c:	7bfa      	ldrb	r2, [r7, #15]
 8001f9e:	4922      	ldr	r1, [pc, #136]	@ (8002028 <LinkTimerBefore+0xbc>)
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4413      	add	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	440b      	add	r3, r1
 8001faa:	3315      	adds	r3, #21
 8001fac:	79fa      	ldrb	r2, [r7, #7]
 8001fae:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001fb0:	79fa      	ldrb	r2, [r7, #7]
 8001fb2:	491d      	ldr	r1, [pc, #116]	@ (8002028 <LinkTimerBefore+0xbc>)
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4413      	add	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	440b      	add	r3, r1
 8001fbe:	3315      	adds	r3, #21
 8001fc0:	79ba      	ldrb	r2, [r7, #6]
 8001fc2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001fc4:	79fa      	ldrb	r2, [r7, #7]
 8001fc6:	4918      	ldr	r1, [pc, #96]	@ (8002028 <LinkTimerBefore+0xbc>)
 8001fc8:	4613      	mov	r3, r2
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	4413      	add	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	440b      	add	r3, r1
 8001fd2:	3314      	adds	r3, #20
 8001fd4:	7bfa      	ldrb	r2, [r7, #15]
 8001fd6:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001fd8:	79ba      	ldrb	r2, [r7, #6]
 8001fda:	4913      	ldr	r1, [pc, #76]	@ (8002028 <LinkTimerBefore+0xbc>)
 8001fdc:	4613      	mov	r3, r2
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	4413      	add	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	440b      	add	r3, r1
 8001fe6:	3314      	adds	r3, #20
 8001fe8:	79fa      	ldrb	r2, [r7, #7]
 8001fea:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001fec:	e014      	b.n	8002018 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001fee:	79fa      	ldrb	r2, [r7, #7]
 8001ff0:	490d      	ldr	r1, [pc, #52]	@ (8002028 <LinkTimerBefore+0xbc>)
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4413      	add	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	440b      	add	r3, r1
 8001ffc:	3315      	adds	r3, #21
 8001ffe:	79ba      	ldrb	r2, [r7, #6]
 8002000:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002002:	79ba      	ldrb	r2, [r7, #6]
 8002004:	4908      	ldr	r1, [pc, #32]	@ (8002028 <LinkTimerBefore+0xbc>)
 8002006:	4613      	mov	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	4413      	add	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	440b      	add	r3, r1
 8002010:	3314      	adds	r3, #20
 8002012:	79fa      	ldrb	r2, [r7, #7]
 8002014:	701a      	strb	r2, [r3, #0]
  return;
 8002016:	bf00      	nop
}
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	200004c0 	.word	0x200004c0
 8002028:	20000430 	.word	0x20000430

0800202c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002036:	4b4e      	ldr	r3, [pc, #312]	@ (8002170 <linkTimer+0x144>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b06      	cmp	r3, #6
 800203e:	d118      	bne.n	8002072 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002040:	4b4b      	ldr	r3, [pc, #300]	@ (8002170 <linkTimer+0x144>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4b4b      	ldr	r3, [pc, #300]	@ (8002174 <linkTimer+0x148>)
 8002048:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800204a:	4a49      	ldr	r2, [pc, #292]	@ (8002170 <linkTimer+0x144>)
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002050:	79fa      	ldrb	r2, [r7, #7]
 8002052:	4949      	ldr	r1, [pc, #292]	@ (8002178 <linkTimer+0x14c>)
 8002054:	4613      	mov	r3, r2
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	4413      	add	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	440b      	add	r3, r1
 800205e:	3315      	adds	r3, #21
 8002060:	2206      	movs	r2, #6
 8002062:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002064:	4b45      	ldr	r3, [pc, #276]	@ (800217c <linkTimer+0x150>)
 8002066:	f04f 32ff 	mov.w	r2, #4294967295
 800206a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	81fb      	strh	r3, [r7, #14]
 8002070:	e078      	b.n	8002164 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002072:	f000 f909 	bl	8002288 <ReturnTimeElapsed>
 8002076:	4603      	mov	r3, r0
 8002078:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800207a:	79fa      	ldrb	r2, [r7, #7]
 800207c:	493e      	ldr	r1, [pc, #248]	@ (8002178 <linkTimer+0x14c>)
 800207e:	4613      	mov	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	440b      	add	r3, r1
 8002088:	3308      	adds	r3, #8
 800208a:	6819      	ldr	r1, [r3, #0]
 800208c:	89fb      	ldrh	r3, [r7, #14]
 800208e:	79fa      	ldrb	r2, [r7, #7]
 8002090:	4419      	add	r1, r3
 8002092:	4839      	ldr	r0, [pc, #228]	@ (8002178 <linkTimer+0x14c>)
 8002094:	4613      	mov	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4403      	add	r3, r0
 800209e:	3308      	adds	r3, #8
 80020a0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80020a2:	79fa      	ldrb	r2, [r7, #7]
 80020a4:	4934      	ldr	r1, [pc, #208]	@ (8002178 <linkTimer+0x14c>)
 80020a6:	4613      	mov	r3, r2
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	4413      	add	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	440b      	add	r3, r1
 80020b0:	3308      	adds	r3, #8
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80020b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002170 <linkTimer+0x144>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	4619      	mov	r1, r3
 80020be:	4a2e      	ldr	r2, [pc, #184]	@ (8002178 <linkTimer+0x14c>)
 80020c0:	460b      	mov	r3, r1
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	440b      	add	r3, r1
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4413      	add	r3, r2
 80020ca:	3308      	adds	r3, #8
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d337      	bcc.n	8002144 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80020d4:	4b26      	ldr	r3, [pc, #152]	@ (8002170 <linkTimer+0x144>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80020da:	7b7a      	ldrb	r2, [r7, #13]
 80020dc:	4926      	ldr	r1, [pc, #152]	@ (8002178 <linkTimer+0x14c>)
 80020de:	4613      	mov	r3, r2
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	4413      	add	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	440b      	add	r3, r1
 80020e8:	3315      	adds	r3, #21
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80020ee:	e013      	b.n	8002118 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80020f0:	7b7a      	ldrb	r2, [r7, #13]
 80020f2:	4921      	ldr	r1, [pc, #132]	@ (8002178 <linkTimer+0x14c>)
 80020f4:	4613      	mov	r3, r2
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	4413      	add	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	440b      	add	r3, r1
 80020fe:	3315      	adds	r3, #21
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002104:	7b7a      	ldrb	r2, [r7, #13]
 8002106:	491c      	ldr	r1, [pc, #112]	@ (8002178 <linkTimer+0x14c>)
 8002108:	4613      	mov	r3, r2
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	440b      	add	r3, r1
 8002112:	3315      	adds	r3, #21
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002118:	7b3b      	ldrb	r3, [r7, #12]
 800211a:	2b06      	cmp	r3, #6
 800211c:	d00b      	beq.n	8002136 <linkTimer+0x10a>
 800211e:	7b3a      	ldrb	r2, [r7, #12]
 8002120:	4915      	ldr	r1, [pc, #84]	@ (8002178 <linkTimer+0x14c>)
 8002122:	4613      	mov	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4413      	add	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	440b      	add	r3, r1
 800212c:	3308      	adds	r3, #8
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	429a      	cmp	r2, r3
 8002134:	d2dc      	bcs.n	80020f0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002136:	7b7a      	ldrb	r2, [r7, #13]
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fecf 	bl	8001ee0 <LinkTimerAfter>
 8002142:	e00f      	b.n	8002164 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002144:	4b0a      	ldr	r3, [pc, #40]	@ (8002170 <linkTimer+0x144>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	b2da      	uxtb	r2, r3
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	4611      	mov	r1, r2
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ff0c 	bl	8001f6c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002154:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <linkTimer+0x144>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	b2da      	uxtb	r2, r3
 800215a:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <linkTimer+0x148>)
 800215c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800215e:	4a04      	ldr	r2, [pc, #16]	@ (8002170 <linkTimer+0x144>)
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002164:	89fb      	ldrh	r3, [r7, #14]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200004c0 	.word	0x200004c0
 8002174:	200004c1 	.word	0x200004c1
 8002178:	20000430 	.word	0x20000430
 800217c:	200004c4 	.word	0x200004c4

08002180 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	460a      	mov	r2, r1
 800218a:	71fb      	strb	r3, [r7, #7]
 800218c:	4613      	mov	r3, r2
 800218e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002190:	4b39      	ldr	r3, [pc, #228]	@ (8002278 <UnlinkTimer+0xf8>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	79fa      	ldrb	r2, [r7, #7]
 8002198:	429a      	cmp	r2, r3
 800219a:	d111      	bne.n	80021c0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 800219c:	4b36      	ldr	r3, [pc, #216]	@ (8002278 <UnlinkTimer+0xf8>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4b36      	ldr	r3, [pc, #216]	@ (800227c <UnlinkTimer+0xfc>)
 80021a4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80021a6:	79fa      	ldrb	r2, [r7, #7]
 80021a8:	4935      	ldr	r1, [pc, #212]	@ (8002280 <UnlinkTimer+0x100>)
 80021aa:	4613      	mov	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4413      	add	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	440b      	add	r3, r1
 80021b4:	3315      	adds	r3, #21
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002278 <UnlinkTimer+0xf8>)
 80021bc:	701a      	strb	r2, [r3, #0]
 80021be:	e03e      	b.n	800223e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80021c0:	79fa      	ldrb	r2, [r7, #7]
 80021c2:	492f      	ldr	r1, [pc, #188]	@ (8002280 <UnlinkTimer+0x100>)
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	440b      	add	r3, r1
 80021ce:	3314      	adds	r3, #20
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80021d4:	79fa      	ldrb	r2, [r7, #7]
 80021d6:	492a      	ldr	r1, [pc, #168]	@ (8002280 <UnlinkTimer+0x100>)
 80021d8:	4613      	mov	r3, r2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	4413      	add	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	440b      	add	r3, r1
 80021e2:	3315      	adds	r3, #21
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80021e8:	79f9      	ldrb	r1, [r7, #7]
 80021ea:	7bfa      	ldrb	r2, [r7, #15]
 80021ec:	4824      	ldr	r0, [pc, #144]	@ (8002280 <UnlinkTimer+0x100>)
 80021ee:	460b      	mov	r3, r1
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	440b      	add	r3, r1
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4403      	add	r3, r0
 80021f8:	3315      	adds	r3, #21
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	b2d8      	uxtb	r0, r3
 80021fe:	4920      	ldr	r1, [pc, #128]	@ (8002280 <UnlinkTimer+0x100>)
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	440b      	add	r3, r1
 800220a:	3315      	adds	r3, #21
 800220c:	4602      	mov	r2, r0
 800220e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002210:	7bbb      	ldrb	r3, [r7, #14]
 8002212:	2b06      	cmp	r3, #6
 8002214:	d013      	beq.n	800223e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002216:	79f9      	ldrb	r1, [r7, #7]
 8002218:	7bba      	ldrb	r2, [r7, #14]
 800221a:	4819      	ldr	r0, [pc, #100]	@ (8002280 <UnlinkTimer+0x100>)
 800221c:	460b      	mov	r3, r1
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	440b      	add	r3, r1
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4403      	add	r3, r0
 8002226:	3314      	adds	r3, #20
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	b2d8      	uxtb	r0, r3
 800222c:	4914      	ldr	r1, [pc, #80]	@ (8002280 <UnlinkTimer+0x100>)
 800222e:	4613      	mov	r3, r2
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	4413      	add	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	440b      	add	r3, r1
 8002238:	3314      	adds	r3, #20
 800223a:	4602      	mov	r2, r0
 800223c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800223e:	79fa      	ldrb	r2, [r7, #7]
 8002240:	490f      	ldr	r1, [pc, #60]	@ (8002280 <UnlinkTimer+0x100>)
 8002242:	4613      	mov	r3, r2
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4413      	add	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	440b      	add	r3, r1
 800224c:	330c      	adds	r3, #12
 800224e:	2201      	movs	r2, #1
 8002250:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002252:	4b09      	ldr	r3, [pc, #36]	@ (8002278 <UnlinkTimer+0xf8>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b06      	cmp	r3, #6
 800225a:	d107      	bne.n	800226c <UnlinkTimer+0xec>
 800225c:	79bb      	ldrb	r3, [r7, #6]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d104      	bne.n	800226c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002262:	4b08      	ldr	r3, [pc, #32]	@ (8002284 <UnlinkTimer+0x104>)
 8002264:	f04f 32ff 	mov.w	r2, #4294967295
 8002268:	601a      	str	r2, [r3, #0]
  }

  return;
 800226a:	bf00      	nop
 800226c:	bf00      	nop
}
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	200004c0 	.word	0x200004c0
 800227c:	200004c1 	.word	0x200004c1
 8002280:	20000430 	.word	0x20000430
 8002284:	200004c4 	.word	0x200004c4

08002288 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800228e:	4b1a      	ldr	r3, [pc, #104]	@ (80022f8 <ReturnTimeElapsed+0x70>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002296:	d026      	beq.n	80022e6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002298:	f7ff fe02 	bl	8001ea0 <ReadRtcSsrValue>
 800229c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800229e:	4b16      	ldr	r3, [pc, #88]	@ (80022f8 <ReturnTimeElapsed+0x70>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d805      	bhi.n	80022b4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80022a8:	4b13      	ldr	r3, [pc, #76]	@ (80022f8 <ReturnTimeElapsed+0x70>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	607b      	str	r3, [r7, #4]
 80022b2:	e00a      	b.n	80022ca <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80022b4:	4b11      	ldr	r3, [pc, #68]	@ (80022fc <ReturnTimeElapsed+0x74>)
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80022c0:	4b0d      	ldr	r3, [pc, #52]	@ (80022f8 <ReturnTimeElapsed+0x70>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	4413      	add	r3, r2
 80022c8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80022ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002300 <ReturnTimeElapsed+0x78>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	fb02 f303 	mul.w	r3, r2, r3
 80022d6:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80022d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002304 <ReturnTimeElapsed+0x7c>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	461a      	mov	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	40d3      	lsrs	r3, r2
 80022e2:	607b      	str	r3, [r7, #4]
 80022e4:	e001      	b.n	80022ea <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	b29b      	uxth	r3, r3
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	200004c4 	.word	0x200004c4
 80022fc:	200004cc 	.word	0x200004cc
 8002300:	200004ca 	.word	0x200004ca
 8002304:	200004c9 	.word	0x200004c9

08002308 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8002312:	88fb      	ldrh	r3, [r7, #6]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d108      	bne.n	800232a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002318:	f7ff fdc2 	bl	8001ea0 <ReadRtcSsrValue>
 800231c:	4603      	mov	r3, r0
 800231e:	4a21      	ldr	r2, [pc, #132]	@ (80023a4 <RestartWakeupCounter+0x9c>)
 8002320:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002322:	2003      	movs	r0, #3
 8002324:	f002 f857 	bl	80043d6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002328:	e039      	b.n	800239e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d803      	bhi.n	8002338 <RestartWakeupCounter+0x30>
 8002330:	4b1d      	ldr	r3, [pc, #116]	@ (80023a8 <RestartWakeupCounter+0xa0>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d002      	beq.n	800233e <RestartWakeupCounter+0x36>
      Value -= 1;
 8002338:	88fb      	ldrh	r3, [r7, #6]
 800233a:	3b01      	subs	r3, #1
 800233c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800233e:	bf00      	nop
 8002340:	4b1a      	ldr	r3, [pc, #104]	@ (80023ac <RestartWakeupCounter+0xa4>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f8      	beq.n	8002340 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800234e:	4b17      	ldr	r3, [pc, #92]	@ (80023ac <RestartWakeupCounter+0xa4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	b2da      	uxtb	r2, r3
 8002356:	4b15      	ldr	r3, [pc, #84]	@ (80023ac <RestartWakeupCounter+0xa4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800235e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002360:	4b13      	ldr	r3, [pc, #76]	@ (80023b0 <RestartWakeupCounter+0xa8>)
 8002362:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002366:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002368:	2003      	movs	r0, #3
 800236a:	f002 f842 	bl	80043f2 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800236e:	4b11      	ldr	r3, [pc, #68]	@ (80023b4 <RestartWakeupCounter+0xac>)
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	0c1b      	lsrs	r3, r3, #16
 8002374:	041b      	lsls	r3, r3, #16
 8002376:	88fa      	ldrh	r2, [r7, #6]
 8002378:	490e      	ldr	r1, [pc, #56]	@ (80023b4 <RestartWakeupCounter+0xac>)
 800237a:	4313      	orrs	r3, r2
 800237c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800237e:	f7ff fd8f 	bl	8001ea0 <ReadRtcSsrValue>
 8002382:	4603      	mov	r3, r0
 8002384:	4a07      	ldr	r2, [pc, #28]	@ (80023a4 <RestartWakeupCounter+0x9c>)
 8002386:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8002388:	4b08      	ldr	r3, [pc, #32]	@ (80023ac <RestartWakeupCounter+0xa4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	4b07      	ldr	r3, [pc, #28]	@ (80023ac <RestartWakeupCounter+0xa4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002396:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002398:	f3af 8000 	nop.w
  return ;
 800239c:	bf00      	nop
}
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	200004c4 	.word	0x200004c4
 80023a8:	200004c9 	.word	0x200004c9
 80023ac:	20000538 	.word	0x20000538
 80023b0:	58000800 	.word	0x58000800
 80023b4:	40002800 	.word	0x40002800

080023b8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80023be:	4b45      	ldr	r3, [pc, #276]	@ (80024d4 <RescheduleTimerList+0x11c>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023ca:	d107      	bne.n	80023dc <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80023cc:	bf00      	nop
 80023ce:	4b42      	ldr	r3, [pc, #264]	@ (80024d8 <RescheduleTimerList+0x120>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f8      	bne.n	80023ce <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80023dc:	4b3e      	ldr	r3, [pc, #248]	@ (80024d8 <RescheduleTimerList+0x120>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	4b3d      	ldr	r3, [pc, #244]	@ (80024d8 <RescheduleTimerList+0x120>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023ea:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80023ec:	4b3b      	ldr	r3, [pc, #236]	@ (80024dc <RescheduleTimerList+0x124>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80023f2:	7bfa      	ldrb	r2, [r7, #15]
 80023f4:	493a      	ldr	r1, [pc, #232]	@ (80024e0 <RescheduleTimerList+0x128>)
 80023f6:	4613      	mov	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	440b      	add	r3, r1
 8002400:	3308      	adds	r3, #8
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002406:	f7ff ff3f 	bl	8002288 <ReturnTimeElapsed>
 800240a:	4603      	mov	r3, r0
 800240c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800240e:	88fb      	ldrh	r3, [r7, #6]
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	429a      	cmp	r2, r3
 8002414:	d205      	bcs.n	8002422 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800241a:	4b32      	ldr	r3, [pc, #200]	@ (80024e4 <RescheduleTimerList+0x12c>)
 800241c:	2201      	movs	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]
 8002420:	e04d      	b.n	80024be <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002422:	88fb      	ldrh	r3, [r7, #6]
 8002424:	4a30      	ldr	r2, [pc, #192]	@ (80024e8 <RescheduleTimerList+0x130>)
 8002426:	8812      	ldrh	r2, [r2, #0]
 8002428:	b292      	uxth	r2, r2
 800242a:	4413      	add	r3, r2
 800242c:	461a      	mov	r2, r3
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	4293      	cmp	r3, r2
 8002432:	d906      	bls.n	8002442 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002434:	4b2c      	ldr	r3, [pc, #176]	@ (80024e8 <RescheduleTimerList+0x130>)
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800243a:	4b2a      	ldr	r3, [pc, #168]	@ (80024e4 <RescheduleTimerList+0x12c>)
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
 8002440:	e03d      	b.n	80024be <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	b29a      	uxth	r2, r3
 8002446:	88fb      	ldrh	r3, [r7, #6]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800244c:	4b25      	ldr	r3, [pc, #148]	@ (80024e4 <RescheduleTimerList+0x12c>)
 800244e:	2201      	movs	r2, #1
 8002450:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002452:	e034      	b.n	80024be <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002454:	7bfa      	ldrb	r2, [r7, #15]
 8002456:	4922      	ldr	r1, [pc, #136]	@ (80024e0 <RescheduleTimerList+0x128>)
 8002458:	4613      	mov	r3, r2
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	4413      	add	r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	440b      	add	r3, r1
 8002462:	3308      	adds	r3, #8
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	88fb      	ldrh	r3, [r7, #6]
 8002468:	429a      	cmp	r2, r3
 800246a:	d20a      	bcs.n	8002482 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800246c:	7bfa      	ldrb	r2, [r7, #15]
 800246e:	491c      	ldr	r1, [pc, #112]	@ (80024e0 <RescheduleTimerList+0x128>)
 8002470:	4613      	mov	r3, r2
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	4413      	add	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	440b      	add	r3, r1
 800247a:	3308      	adds	r3, #8
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e013      	b.n	80024aa <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002482:	7bfa      	ldrb	r2, [r7, #15]
 8002484:	4916      	ldr	r1, [pc, #88]	@ (80024e0 <RescheduleTimerList+0x128>)
 8002486:	4613      	mov	r3, r2
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	4413      	add	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	440b      	add	r3, r1
 8002490:	3308      	adds	r3, #8
 8002492:	6819      	ldr	r1, [r3, #0]
 8002494:	88fb      	ldrh	r3, [r7, #6]
 8002496:	7bfa      	ldrb	r2, [r7, #15]
 8002498:	1ac9      	subs	r1, r1, r3
 800249a:	4811      	ldr	r0, [pc, #68]	@ (80024e0 <RescheduleTimerList+0x128>)
 800249c:	4613      	mov	r3, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	4413      	add	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4403      	add	r3, r0
 80024a6:	3308      	adds	r3, #8
 80024a8:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80024aa:	7bfa      	ldrb	r2, [r7, #15]
 80024ac:	490c      	ldr	r1, [pc, #48]	@ (80024e0 <RescheduleTimerList+0x128>)
 80024ae:	4613      	mov	r3, r2
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	4413      	add	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	440b      	add	r3, r1
 80024b8:	3315      	adds	r3, #21
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	2b06      	cmp	r3, #6
 80024c2:	d1c7      	bne.n	8002454 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80024c4:	89bb      	ldrh	r3, [r7, #12]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff ff1e 	bl	8002308 <RestartWakeupCounter>

  return ;
 80024cc:	bf00      	nop
}
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40002800 	.word	0x40002800
 80024d8:	20000538 	.word	0x20000538
 80024dc:	200004c0 	.word	0x200004c0
 80024e0:	20000430 	.word	0x20000430
 80024e4:	200004c8 	.word	0x200004c8
 80024e8:	200004ce 	.word	0x200004ce

080024ec <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08a      	sub	sp, #40	@ 0x28
 80024f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024f2:	f3ef 8310 	mrs	r3, PRIMASK
 80024f6:	617b      	str	r3, [r7, #20]
  return(result);
 80024f8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80024fa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80024fc:	b672      	cpsid	i
}
 80024fe:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002500:	4b59      	ldr	r3, [pc, #356]	@ (8002668 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	22ca      	movs	r2, #202	@ 0xca
 8002506:	625a      	str	r2, [r3, #36]	@ 0x24
 8002508:	4b57      	ldr	r3, [pc, #348]	@ (8002668 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2253      	movs	r2, #83	@ 0x53
 800250e:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002510:	4b55      	ldr	r3, [pc, #340]	@ (8002668 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	4b54      	ldr	r3, [pc, #336]	@ (8002668 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800251e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002520:	4b52      	ldr	r3, [pc, #328]	@ (800266c <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002528:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800252c:	4950      	ldr	r1, [pc, #320]	@ (8002670 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800252e:	4613      	mov	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4413      	add	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	440b      	add	r3, r1
 8002538:	330c      	adds	r3, #12
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d16e      	bne.n	8002620 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002542:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002546:	494a      	ldr	r1, [pc, #296]	@ (8002670 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002548:	4613      	mov	r3, r2
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	4413      	add	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	440b      	add	r3, r1
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002556:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800255a:	4945      	ldr	r1, [pc, #276]	@ (8002670 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800255c:	4613      	mov	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4413      	add	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	440b      	add	r3, r1
 8002566:	3310      	adds	r3, #16
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800256c:	4b41      	ldr	r3, [pc, #260]	@ (8002674 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d04c      	beq.n	8002610 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002576:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800257a:	493d      	ldr	r1, [pc, #244]	@ (8002670 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	440b      	add	r3, r1
 8002586:	330d      	adds	r3, #13
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b01      	cmp	r3, #1
 800258e:	d124      	bne.n	80025da <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002590:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002594:	2101      	movs	r1, #1
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fdf2 	bl	8002180 <UnlinkTimer>
 800259c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	f383 8810 	msr	PRIMASK, r3
}
 80025a6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80025a8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80025ac:	4930      	ldr	r1, [pc, #192]	@ (8002670 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80025ae:	4613      	mov	r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	4413      	add	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	440b      	add	r3, r1
 80025b8:	3304      	adds	r3, #4
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80025c0:	4611      	mov	r1, r2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 f9b8 	bl	8002938 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80025c8:	4b27      	ldr	r3, [pc, #156]	@ (8002668 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	22ca      	movs	r2, #202	@ 0xca
 80025ce:	625a      	str	r2, [r3, #36]	@ 0x24
 80025d0:	4b25      	ldr	r3, [pc, #148]	@ (8002668 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2253      	movs	r2, #83	@ 0x53
 80025d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80025d8:	e012      	b.n	8002600 <HW_TS_RTC_Wakeup_Handler+0x114>
 80025da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f383 8810 	msr	PRIMASK, r3
}
 80025e4:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80025e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 f920 	bl	8002830 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80025f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002668 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	22ca      	movs	r2, #202	@ 0xca
 80025f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80025f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002668 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2253      	movs	r2, #83	@ 0x53
 80025fe:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002600:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002604:	69fa      	ldr	r2, [r7, #28]
 8002606:	4619      	mov	r1, r3
 8002608:	69b8      	ldr	r0, [r7, #24]
 800260a:	f000 fa1b 	bl	8002a44 <HW_TS_RTC_Int_AppNot>
 800260e:	e022      	b.n	8002656 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002610:	f7ff fed2 	bl	80023b8 <RescheduleTimerList>
 8002614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002616:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	f383 8810 	msr	PRIMASK, r3
}
 800261e:	e01a      	b.n	8002656 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002620:	bf00      	nop
 8002622:	4b11      	ldr	r3, [pc, #68]	@ (8002668 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f8      	beq.n	8002622 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002630:	4b0d      	ldr	r3, [pc, #52]	@ (8002668 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	b2da      	uxtb	r2, r3
 8002638:	4b0b      	ldr	r3, [pc, #44]	@ (8002668 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002640:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002642:	4b0d      	ldr	r3, [pc, #52]	@ (8002678 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002644:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f383 8810 	msr	PRIMASK, r3
}
 8002654:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002656:	4b04      	ldr	r3, [pc, #16]	@ (8002668 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	22ff      	movs	r2, #255	@ 0xff
 800265c:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 800265e:	bf00      	nop
}
 8002660:	3728      	adds	r7, #40	@ 0x28
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000538 	.word	0x20000538
 800266c:	200004c0 	.word	0x200004c0
 8002670:	20000430 	.word	0x20000430
 8002674:	200004c8 	.word	0x200004c8
 8002678:	58000800 	.word	0x58000800

0800267c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	6039      	str	r1, [r7, #0]
 8002686:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002688:	4b5e      	ldr	r3, [pc, #376]	@ (8002804 <HW_TS_Init+0x188>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	22ca      	movs	r2, #202	@ 0xca
 800268e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002690:	4b5c      	ldr	r3, [pc, #368]	@ (8002804 <HW_TS_Init+0x188>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2253      	movs	r2, #83	@ 0x53
 8002696:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002698:	4b5b      	ldr	r3, [pc, #364]	@ (8002808 <HW_TS_Init+0x18c>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	4a5a      	ldr	r2, [pc, #360]	@ (8002808 <HW_TS_Init+0x18c>)
 800269e:	f043 0320 	orr.w	r3, r3, #32
 80026a2:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80026a4:	4b58      	ldr	r3, [pc, #352]	@ (8002808 <HW_TS_Init+0x18c>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	f1c3 0304 	rsb	r3, r3, #4
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	4b55      	ldr	r3, [pc, #340]	@ (800280c <HW_TS_Init+0x190>)
 80026b8:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80026ba:	4b53      	ldr	r3, [pc, #332]	@ (8002808 <HW_TS_Init+0x18c>)
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80026c2:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 80026c6:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	fa92 f2a2 	rbit	r2, r2
 80026ce:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	2a00      	cmp	r2, #0
 80026d8:	d101      	bne.n	80026de <HW_TS_Init+0x62>
  {
    return 32U;
 80026da:	2220      	movs	r2, #32
 80026dc:	e003      	b.n	80026e6 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	fab2 f282 	clz	r2, r2
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	40d3      	lsrs	r3, r2
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	3301      	adds	r3, #1
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	4b48      	ldr	r3, [pc, #288]	@ (8002810 <HW_TS_Init+0x194>)
 80026f0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80026f2:	4b45      	ldr	r3, [pc, #276]	@ (8002808 <HW_TS_Init+0x18c>)
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3301      	adds	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	4b44      	ldr	r3, [pc, #272]	@ (8002814 <HW_TS_Init+0x198>)
 8002704:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002706:	4b43      	ldr	r3, [pc, #268]	@ (8002814 <HW_TS_Init+0x198>)
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	3b01      	subs	r3, #1
 800270c:	4a40      	ldr	r2, [pc, #256]	@ (8002810 <HW_TS_Init+0x194>)
 800270e:	7812      	ldrb	r2, [r2, #0]
 8002710:	fb02 f303 	mul.w	r3, r2, r3
 8002714:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002718:	4a3c      	ldr	r2, [pc, #240]	@ (800280c <HW_TS_Init+0x190>)
 800271a:	7812      	ldrb	r2, [r2, #0]
 800271c:	40d3      	lsrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002726:	4293      	cmp	r3, r2
 8002728:	d904      	bls.n	8002734 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800272a:	4b3b      	ldr	r3, [pc, #236]	@ (8002818 <HW_TS_Init+0x19c>)
 800272c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002730:	801a      	strh	r2, [r3, #0]
 8002732:	e003      	b.n	800273c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	b29a      	uxth	r2, r3
 8002738:	4b37      	ldr	r3, [pc, #220]	@ (8002818 <HW_TS_Init+0x19c>)
 800273a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800273c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002740:	f7ff fb9c 	bl	8001e7c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002744:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002748:	f7ff fb84 	bl	8001e54 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d13d      	bne.n	80027ce <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002752:	4b32      	ldr	r3, [pc, #200]	@ (800281c <HW_TS_Init+0x1a0>)
 8002754:	2201      	movs	r2, #1
 8002756:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002758:	4b31      	ldr	r3, [pc, #196]	@ (8002820 <HW_TS_Init+0x1a4>)
 800275a:	f04f 32ff 	mov.w	r2, #4294967295
 800275e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002760:	2300      	movs	r3, #0
 8002762:	77fb      	strb	r3, [r7, #31]
 8002764:	e00c      	b.n	8002780 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002766:	7ffa      	ldrb	r2, [r7, #31]
 8002768:	492e      	ldr	r1, [pc, #184]	@ (8002824 <HW_TS_Init+0x1a8>)
 800276a:	4613      	mov	r3, r2
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	4413      	add	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	440b      	add	r3, r1
 8002774:	330c      	adds	r3, #12
 8002776:	2200      	movs	r2, #0
 8002778:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800277a:	7ffb      	ldrb	r3, [r7, #31]
 800277c:	3301      	adds	r3, #1
 800277e:	77fb      	strb	r3, [r7, #31]
 8002780:	7ffb      	ldrb	r3, [r7, #31]
 8002782:	2b05      	cmp	r3, #5
 8002784:	d9ef      	bls.n	8002766 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002786:	4b28      	ldr	r3, [pc, #160]	@ (8002828 <HW_TS_Init+0x1ac>)
 8002788:	2206      	movs	r2, #6
 800278a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800278c:	4b1d      	ldr	r3, [pc, #116]	@ (8002804 <HW_TS_Init+0x188>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	4b1c      	ldr	r3, [pc, #112]	@ (8002804 <HW_TS_Init+0x188>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800279a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800279c:	4b19      	ldr	r3, [pc, #100]	@ (8002804 <HW_TS_Init+0x188>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	4b17      	ldr	r3, [pc, #92]	@ (8002804 <HW_TS_Init+0x188>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80027ac:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80027ae:	4b1f      	ldr	r3, [pc, #124]	@ (800282c <HW_TS_Init+0x1b0>)
 80027b0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80027b4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80027b6:	2003      	movs	r0, #3
 80027b8:	f001 fe1b 	bl	80043f2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80027bc:	4b11      	ldr	r3, [pc, #68]	@ (8002804 <HW_TS_Init+0x188>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	4b10      	ldr	r3, [pc, #64]	@ (8002804 <HW_TS_Init+0x188>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	e009      	b.n	80027e2 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80027ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002804 <HW_TS_Init+0x188>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80027dc:	2003      	movs	r0, #3
 80027de:	f001 fdfa 	bl	80043d6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80027e2:	4b08      	ldr	r3, [pc, #32]	@ (8002804 <HW_TS_Init+0x188>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	22ff      	movs	r2, #255	@ 0xff
 80027e8:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80027ea:	2200      	movs	r2, #0
 80027ec:	2103      	movs	r1, #3
 80027ee:	2003      	movs	r0, #3
 80027f0:	f001 fdaf 	bl	8004352 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80027f4:	2003      	movs	r0, #3
 80027f6:	f001 fdc6 	bl	8004386 <HAL_NVIC_EnableIRQ>

  return;
 80027fa:	bf00      	nop
}
 80027fc:	3720      	adds	r7, #32
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000538 	.word	0x20000538
 8002808:	40002800 	.word	0x40002800
 800280c:	200004c9 	.word	0x200004c9
 8002810:	200004ca 	.word	0x200004ca
 8002814:	200004cc 	.word	0x200004cc
 8002818:	200004ce 	.word	0x200004ce
 800281c:	200004c8 	.word	0x200004c8
 8002820:	200004c4 	.word	0x200004c4
 8002824:	20000430 	.word	0x20000430
 8002828:	200004c0 	.word	0x200004c0
 800282c:	58000800 	.word	0x58000800

08002830 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800283a:	f3ef 8310 	mrs	r3, PRIMASK
 800283e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002840:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002842:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002844:	b672      	cpsid	i
}
 8002846:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002848:	2003      	movs	r0, #3
 800284a:	f001 fdaa 	bl	80043a2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800284e:	4b34      	ldr	r3, [pc, #208]	@ (8002920 <HW_TS_Stop+0xf0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	22ca      	movs	r2, #202	@ 0xca
 8002854:	625a      	str	r2, [r3, #36]	@ 0x24
 8002856:	4b32      	ldr	r3, [pc, #200]	@ (8002920 <HW_TS_Stop+0xf0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2253      	movs	r2, #83	@ 0x53
 800285c:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800285e:	79fa      	ldrb	r2, [r7, #7]
 8002860:	4930      	ldr	r1, [pc, #192]	@ (8002924 <HW_TS_Stop+0xf4>)
 8002862:	4613      	mov	r3, r2
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	4413      	add	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	440b      	add	r3, r1
 800286c:	330c      	adds	r3, #12
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d142      	bne.n	80028fc <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	2100      	movs	r1, #0
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fc80 	bl	8002180 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002880:	4b29      	ldr	r3, [pc, #164]	@ (8002928 <HW_TS_Stop+0xf8>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002886:	7cfb      	ldrb	r3, [r7, #19]
 8002888:	2b06      	cmp	r3, #6
 800288a:	d12f      	bne.n	80028ec <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800288c:	4b27      	ldr	r3, [pc, #156]	@ (800292c <HW_TS_Stop+0xfc>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002894:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002898:	d107      	bne.n	80028aa <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800289a:	bf00      	nop
 800289c:	4b20      	ldr	r3, [pc, #128]	@ (8002920 <HW_TS_Stop+0xf0>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f8      	bne.n	800289c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80028aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002920 <HW_TS_Stop+0xf0>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002920 <HW_TS_Stop+0xf0>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028b8:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80028ba:	bf00      	nop
 80028bc:	4b18      	ldr	r3, [pc, #96]	@ (8002920 <HW_TS_Stop+0xf0>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f8      	beq.n	80028bc <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80028ca:	4b15      	ldr	r3, [pc, #84]	@ (8002920 <HW_TS_Stop+0xf0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	4b13      	ldr	r3, [pc, #76]	@ (8002920 <HW_TS_Stop+0xf0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80028da:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80028dc:	4b14      	ldr	r3, [pc, #80]	@ (8002930 <HW_TS_Stop+0x100>)
 80028de:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80028e2:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80028e4:	2003      	movs	r0, #3
 80028e6:	f001 fd84 	bl	80043f2 <HAL_NVIC_ClearPendingIRQ>
 80028ea:	e007      	b.n	80028fc <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80028ec:	4b11      	ldr	r3, [pc, #68]	@ (8002934 <HW_TS_Stop+0x104>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	7cfa      	ldrb	r2, [r7, #19]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d001      	beq.n	80028fc <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80028f8:	f7ff fd5e 	bl	80023b8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80028fc:	4b08      	ldr	r3, [pc, #32]	@ (8002920 <HW_TS_Stop+0xf0>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	22ff      	movs	r2, #255	@ 0xff
 8002902:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002904:	2003      	movs	r0, #3
 8002906:	f001 fd3e 	bl	8004386 <HAL_NVIC_EnableIRQ>
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	f383 8810 	msr	PRIMASK, r3
}
 8002914:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002916:	bf00      	nop
}
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000538 	.word	0x20000538
 8002924:	20000430 	.word	0x20000430
 8002928:	200004c0 	.word	0x200004c0
 800292c:	40002800 	.word	0x40002800
 8002930:	58000800 	.word	0x58000800
 8002934:	200004c1 	.word	0x200004c1

08002938 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	6039      	str	r1, [r7, #0]
 8002942:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002944:	79fa      	ldrb	r2, [r7, #7]
 8002946:	493b      	ldr	r1, [pc, #236]	@ (8002a34 <HW_TS_Start+0xfc>)
 8002948:	4613      	mov	r3, r2
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	4413      	add	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	440b      	add	r3, r1
 8002952:	330c      	adds	r3, #12
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d103      	bne.n	8002964 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff ff66 	bl	8002830 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002964:	f3ef 8310 	mrs	r3, PRIMASK
 8002968:	60fb      	str	r3, [r7, #12]
  return(result);
 800296a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800296c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800296e:	b672      	cpsid	i
}
 8002970:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002972:	2003      	movs	r0, #3
 8002974:	f001 fd15 	bl	80043a2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002978:	4b2f      	ldr	r3, [pc, #188]	@ (8002a38 <HW_TS_Start+0x100>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	22ca      	movs	r2, #202	@ 0xca
 800297e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002980:	4b2d      	ldr	r3, [pc, #180]	@ (8002a38 <HW_TS_Start+0x100>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2253      	movs	r2, #83	@ 0x53
 8002986:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002988:	79fa      	ldrb	r2, [r7, #7]
 800298a:	492a      	ldr	r1, [pc, #168]	@ (8002a34 <HW_TS_Start+0xfc>)
 800298c:	4613      	mov	r3, r2
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	4413      	add	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	440b      	add	r3, r1
 8002996:	330c      	adds	r3, #12
 8002998:	2202      	movs	r2, #2
 800299a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800299c:	79fa      	ldrb	r2, [r7, #7]
 800299e:	4925      	ldr	r1, [pc, #148]	@ (8002a34 <HW_TS_Start+0xfc>)
 80029a0:	4613      	mov	r3, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	4413      	add	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	440b      	add	r3, r1
 80029aa:	3308      	adds	r3, #8
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80029b0:	79fa      	ldrb	r2, [r7, #7]
 80029b2:	4920      	ldr	r1, [pc, #128]	@ (8002a34 <HW_TS_Start+0xfc>)
 80029b4:	4613      	mov	r3, r2
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	4413      	add	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	440b      	add	r3, r1
 80029be:	3304      	adds	r3, #4
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fb30 	bl	800202c <linkTimer>
 80029cc:	4603      	mov	r3, r0
 80029ce:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80029d0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a3c <HW_TS_Start+0x104>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80029d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a40 <HW_TS_Start+0x108>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	7c7a      	ldrb	r2, [r7, #17]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d002      	beq.n	80029e8 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80029e2:	f7ff fce9 	bl	80023b8 <RescheduleTimerList>
 80029e6:	e013      	b.n	8002a10 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80029e8:	79fa      	ldrb	r2, [r7, #7]
 80029ea:	4912      	ldr	r1, [pc, #72]	@ (8002a34 <HW_TS_Start+0xfc>)
 80029ec:	4613      	mov	r3, r2
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	4413      	add	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	440b      	add	r3, r1
 80029f6:	3308      	adds	r3, #8
 80029f8:	6819      	ldr	r1, [r3, #0]
 80029fa:	8a7b      	ldrh	r3, [r7, #18]
 80029fc:	79fa      	ldrb	r2, [r7, #7]
 80029fe:	1ac9      	subs	r1, r1, r3
 8002a00:	480c      	ldr	r0, [pc, #48]	@ (8002a34 <HW_TS_Start+0xfc>)
 8002a02:	4613      	mov	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4413      	add	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4403      	add	r3, r0
 8002a0c:	3308      	adds	r3, #8
 8002a0e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002a10:	4b09      	ldr	r3, [pc, #36]	@ (8002a38 <HW_TS_Start+0x100>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	22ff      	movs	r2, #255	@ 0xff
 8002a16:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002a18:	2003      	movs	r0, #3
 8002a1a:	f001 fcb4 	bl	8004386 <HAL_NVIC_EnableIRQ>
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	f383 8810 	msr	PRIMASK, r3
}
 8002a28:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002a2a:	bf00      	nop
}
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000430 	.word	0x20000430
 8002a38:	20000538 	.word	0x20000538
 8002a3c:	200004c0 	.word	0x200004c0
 8002a40:	200004c1 	.word	0x200004c1

08002a44 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	607a      	str	r2, [r7, #4]
 8002a50:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4798      	blx	r3

  return;
 8002a56:	bf00      	nop
}
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <accel_gyro_init_read>:
axises my_gyro;
axises my_accel;
axises my_mag;

/* Main Functions */
void accel_gyro_init_read(int argc, uint8_t argv[]){
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
	int initialByte=160;
 8002a6a:	23a0      	movs	r3, #160	@ 0xa0
 8002a6c:	60fb      	str	r3, [r7, #12]
    if (!is_initialized)
 8002a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae8 <accel_gyro_init_read+0x88>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	f083 0301 	eor.w	r3, r3, #1
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d004      	beq.n	8002a86 <accel_gyro_init_read+0x26>
    {
    	icm20948_init();
 8002a7c:	f000 f83a 	bl	8002af4 <icm20948_init>
    	is_initialized = true;
 8002a80:	4b19      	ldr	r3, [pc, #100]	@ (8002ae8 <accel_gyro_init_read+0x88>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	701a      	strb	r2, [r3, #0]

    }
    icm20948_gyro_read_dps();
 8002a86:	f000 f8eb 	bl	8002c60 <icm20948_gyro_read_dps>
    icm20948_accel_read_g();
 8002a8a:	f000 f915 	bl	8002cb8 <icm20948_accel_read_g>

//    printf("%f %f %f\n",my_accel.x,my_accel.y,my_accel.z);
//    printf("%f %f %f\n",my_gyro.x,my_gyro.y,my_gyro.z);

    memcpy(&argv[initialByte+0], (uint8_t*)&my_accel.x, 4);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	4413      	add	r3, r2
 8002a94:	4a15      	ldr	r2, [pc, #84]	@ (8002aec <accel_gyro_init_read+0x8c>)
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	601a      	str	r2, [r3, #0]
    memcpy(&argv[initialByte+4], (uint8_t*)&my_accel.y, 4);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	4a12      	ldr	r2, [pc, #72]	@ (8002aec <accel_gyro_init_read+0x8c>)
 8002aa4:	6852      	ldr	r2, [r2, #4]
 8002aa6:	601a      	str	r2, [r3, #0]
    memcpy(&argv[initialByte+8], (uint8_t*)&my_accel.z, 4);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	3308      	adds	r3, #8
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	4413      	add	r3, r2
 8002ab0:	4a0e      	ldr	r2, [pc, #56]	@ (8002aec <accel_gyro_init_read+0x8c>)
 8002ab2:	6892      	ldr	r2, [r2, #8]
 8002ab4:	601a      	str	r2, [r3, #0]

    // Copy my_gyro.x, my_gyro.y, my_gyro.z (each float is 4 bytes)
    memcpy(&argv[initialByte+12], (uint8_t*)&my_gyro.x, 4);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	330c      	adds	r3, #12
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	4413      	add	r3, r2
 8002abe:	4a0c      	ldr	r2, [pc, #48]	@ (8002af0 <accel_gyro_init_read+0x90>)
 8002ac0:	6812      	ldr	r2, [r2, #0]
 8002ac2:	601a      	str	r2, [r3, #0]
    memcpy(&argv[initialByte+16], (uint8_t*)&my_gyro.y, 4);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	3310      	adds	r3, #16
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	4413      	add	r3, r2
 8002acc:	4a08      	ldr	r2, [pc, #32]	@ (8002af0 <accel_gyro_init_read+0x90>)
 8002ace:	6852      	ldr	r2, [r2, #4]
 8002ad0:	601a      	str	r2, [r3, #0]
    memcpy(&argv[initialByte+20], (uint8_t*)&my_gyro.z, 4);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	3314      	adds	r3, #20
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	4413      	add	r3, r2
 8002ada:	4a05      	ldr	r2, [pc, #20]	@ (8002af0 <accel_gyro_init_read+0x90>)
 8002adc:	6892      	ldr	r2, [r2, #8]
 8002ade:	601a      	str	r2, [r3, #0]
}
 8002ae0:	bf00      	nop
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	200004d8 	.word	0x200004d8
 8002aec:	200004e8 	.word	0x200004e8
 8002af0:	200004dc 	.word	0x200004dc

08002af4 <icm20948_init>:

void icm20948_init()
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 8002af8:	bf00      	nop
 8002afa:	f000 f909 	bl	8002d10 <icm20948_who_am_i>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f083 0301 	eor.w	r3, r3, #1
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f7      	bne.n	8002afa <icm20948_init+0x6>

	icm20948_device_reset();
 8002b0a:	f000 f914 	bl	8002d36 <icm20948_device_reset>
	icm20948_wakeup();
 8002b0e:	f000 f91e 	bl	8002d4e <icm20948_wakeup>

	icm20948_clock_source(1);
 8002b12:	2001      	movs	r0, #1
 8002b14:	f000 f94c 	bl	8002db0 <icm20948_clock_source>
	icm20948_odr_align_enable();
 8002b18:	f000 f963 	bl	8002de2 <icm20948_odr_align_enable>
	
	icm20948_spi_slave_enable();
 8002b1c:	f000 f931 	bl	8002d82 <icm20948_spi_slave_enable>
	
	icm20948_gyro_low_pass_filter(0);
 8002b20:	2000      	movs	r0, #0
 8002b22:	f000 f967 	bl	8002df4 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 8002b26:	2000      	movs	r0, #0
 8002b28:	f000 f981 	bl	8002e2e <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	f000 f99b 	bl	8002e68 <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 8002b32:	2000      	movs	r0, #0
 8002b34:	f000 f9a7 	bl	8002e86 <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 8002b38:	f000 f9c4 	bl	8002ec4 <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 8002b3c:	f000 fa5e 	bl	8002ffc <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_1000dps);
 8002b40:	2002      	movs	r0, #2
 8002b42:	f000 fb69 	bl	8003218 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_8g);
 8002b46:	2002      	movs	r0, #2
 8002b48:	f000 fbb0 	bl	80032ac <icm20948_accel_full_scale_select>
}
 8002b4c:	bf00      	nop
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <icm20948_gyro_read>:
	ak09916_soft_reset();
	ak09916_operation_mode_setting(continuous_measurement_100hz);
}

void icm20948_gyro_read()
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8002b56:	2206      	movs	r2, #6
 8002b58:	2133      	movs	r1, #51	@ 0x33
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	f000 fc6e 	bl	800343c <read_multiple_icm20948_reg>
 8002b60:	6078      	str	r0, [r7, #4]

	my_gyro.x = (int16_t)(temp[0] << 8 | temp[1]);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	b21a      	sxth	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	b21b      	sxth	r3, r3
 8002b72:	4313      	orrs	r3, r2
 8002b74:	b21b      	sxth	r3, r3
 8002b76:	ee07 3a90 	vmov	s15, r3
 8002b7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b7e:	4b15      	ldr	r3, [pc, #84]	@ (8002bd4 <icm20948_gyro_read+0x84>)
 8002b80:	edc3 7a00 	vstr	s15, [r3]
	my_gyro.y = (int16_t)(temp[2] << 8 | temp[3]);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3302      	adds	r3, #2
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	021b      	lsls	r3, r3, #8
 8002b8c:	b21a      	sxth	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3303      	adds	r3, #3
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	b21b      	sxth	r3, r3
 8002b96:	4313      	orrs	r3, r2
 8002b98:	b21b      	sxth	r3, r3
 8002b9a:	ee07 3a90 	vmov	s15, r3
 8002b9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd4 <icm20948_gyro_read+0x84>)
 8002ba4:	edc3 7a01 	vstr	s15, [r3, #4]
	my_gyro.z = (int16_t)(temp[4] << 8 | temp[5]);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3304      	adds	r3, #4
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	b21a      	sxth	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3305      	adds	r3, #5
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	b21b      	sxth	r3, r3
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	b21b      	sxth	r3, r3
 8002bbe:	ee07 3a90 	vmov	s15, r3
 8002bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bc6:	4b03      	ldr	r3, [pc, #12]	@ (8002bd4 <icm20948_gyro_read+0x84>)
 8002bc8:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002bcc:	bf00      	nop
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	200004dc 	.word	0x200004dc

08002bd8 <icm20948_accel_read>:

void icm20948_accel_read()
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8002bde:	2206      	movs	r2, #6
 8002be0:	212d      	movs	r1, #45	@ 0x2d
 8002be2:	2000      	movs	r0, #0
 8002be4:	f000 fc2a 	bl	800343c <read_multiple_icm20948_reg>
 8002be8:	6078      	str	r0, [r7, #4]

	my_accel.x = (int16_t)(temp[0] << 8 | temp[1]);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	021b      	lsls	r3, r3, #8
 8002bf0:	b21a      	sxth	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	b21b      	sxth	r3, r3
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	b21b      	sxth	r3, r3
 8002bfe:	ee07 3a90 	vmov	s15, r3
 8002c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c06:	4b15      	ldr	r3, [pc, #84]	@ (8002c5c <icm20948_accel_read+0x84>)
 8002c08:	edc3 7a00 	vstr	s15, [r3]
	my_accel.y = (int16_t)(temp[2] << 8 | temp[3]);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3302      	adds	r3, #2
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	021b      	lsls	r3, r3, #8
 8002c14:	b21a      	sxth	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3303      	adds	r3, #3
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	b21b      	sxth	r3, r3
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	b21b      	sxth	r3, r3
 8002c22:	ee07 3a90 	vmov	s15, r3
 8002c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c5c <icm20948_accel_read+0x84>)
 8002c2c:	edc3 7a01 	vstr	s15, [r3, #4]
	my_accel.z = (int16_t)(temp[4] << 8 | temp[5]);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3304      	adds	r3, #4
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	021b      	lsls	r3, r3, #8
 8002c38:	b21a      	sxth	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3305      	adds	r3, #5
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	b21b      	sxth	r3, r3
 8002c42:	4313      	orrs	r3, r2
 8002c44:	b21b      	sxth	r3, r3
 8002c46:	ee07 3a90 	vmov	s15, r3
 8002c4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c4e:	4b03      	ldr	r3, [pc, #12]	@ (8002c5c <icm20948_accel_read+0x84>)
 8002c50:	edc3 7a02 	vstr	s15, [r3, #8]
//	my_accel.z = (int16_t)(temp[4] << 8 | temp[5])+accel_scale_factor ;
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 8002c54:	bf00      	nop
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	200004e8 	.word	0x200004e8

08002c60 <icm20948_gyro_read_dps>:

	return true;
}

void icm20948_gyro_read_dps()
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
	icm20948_gyro_read();
 8002c64:	f7ff ff74 	bl	8002b50 <icm20948_gyro_read>

	my_gyro.x /= gyro_scale_factor;
 8002c68:	4b11      	ldr	r3, [pc, #68]	@ (8002cb0 <icm20948_gyro_read_dps+0x50>)
 8002c6a:	edd3 6a00 	vldr	s13, [r3]
 8002c6e:	4b11      	ldr	r3, [pc, #68]	@ (8002cb4 <icm20948_gyro_read_dps+0x54>)
 8002c70:	ed93 7a00 	vldr	s14, [r3]
 8002c74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c78:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb0 <icm20948_gyro_read_dps+0x50>)
 8002c7a:	edc3 7a00 	vstr	s15, [r3]
	my_gyro.y /= gyro_scale_factor;
 8002c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb0 <icm20948_gyro_read_dps+0x50>)
 8002c80:	edd3 6a01 	vldr	s13, [r3, #4]
 8002c84:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb4 <icm20948_gyro_read_dps+0x54>)
 8002c86:	ed93 7a00 	vldr	s14, [r3]
 8002c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c8e:	4b08      	ldr	r3, [pc, #32]	@ (8002cb0 <icm20948_gyro_read_dps+0x50>)
 8002c90:	edc3 7a01 	vstr	s15, [r3, #4]
	my_gyro.z /= gyro_scale_factor;
 8002c94:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <icm20948_gyro_read_dps+0x50>)
 8002c96:	edd3 6a02 	vldr	s13, [r3, #8]
 8002c9a:	4b06      	ldr	r3, [pc, #24]	@ (8002cb4 <icm20948_gyro_read_dps+0x54>)
 8002c9c:	ed93 7a00 	vldr	s14, [r3]
 8002ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ca4:	4b02      	ldr	r3, [pc, #8]	@ (8002cb0 <icm20948_gyro_read_dps+0x50>)
 8002ca6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	200004dc 	.word	0x200004dc
 8002cb4:	200004d0 	.word	0x200004d0

08002cb8 <icm20948_accel_read_g>:

void icm20948_accel_read_g()
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
	icm20948_accel_read();
 8002cbc:	f7ff ff8c 	bl	8002bd8 <icm20948_accel_read>

	my_accel.x /= accel_scale_factor;
 8002cc0:	4b11      	ldr	r3, [pc, #68]	@ (8002d08 <icm20948_accel_read_g+0x50>)
 8002cc2:	edd3 6a00 	vldr	s13, [r3]
 8002cc6:	4b11      	ldr	r3, [pc, #68]	@ (8002d0c <icm20948_accel_read_g+0x54>)
 8002cc8:	ed93 7a00 	vldr	s14, [r3]
 8002ccc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8002d08 <icm20948_accel_read_g+0x50>)
 8002cd2:	edc3 7a00 	vstr	s15, [r3]
	my_accel.y /= accel_scale_factor;
 8002cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8002d08 <icm20948_accel_read_g+0x50>)
 8002cd8:	edd3 6a01 	vldr	s13, [r3, #4]
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d0c <icm20948_accel_read_g+0x54>)
 8002cde:	ed93 7a00 	vldr	s14, [r3]
 8002ce2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ce6:	4b08      	ldr	r3, [pc, #32]	@ (8002d08 <icm20948_accel_read_g+0x50>)
 8002ce8:	edc3 7a01 	vstr	s15, [r3, #4]
	my_accel.z /= accel_scale_factor;
 8002cec:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <icm20948_accel_read_g+0x50>)
 8002cee:	edd3 6a02 	vldr	s13, [r3, #8]
 8002cf2:	4b06      	ldr	r3, [pc, #24]	@ (8002d0c <icm20948_accel_read_g+0x54>)
 8002cf4:	ed93 7a00 	vldr	s14, [r3]
 8002cf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cfc:	4b02      	ldr	r3, [pc, #8]	@ (8002d08 <icm20948_accel_read_g+0x50>)
 8002cfe:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	200004e8 	.word	0x200004e8
 8002d0c:	200004d4 	.word	0x200004d4

08002d10 <icm20948_who_am_i>:
}	


/* Sub Functions */
bool icm20948_who_am_i()
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 8002d16:	2100      	movs	r1, #0
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f000 fb3f 	bl	800339c <read_single_icm20948_reg>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	71fb      	strb	r3, [r7, #7]

	if(icm20948_id == ICM20948_ID)
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	2bea      	cmp	r3, #234	@ 0xea
 8002d26:	d101      	bne.n	8002d2c <icm20948_who_am_i+0x1c>
		return true;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <icm20948_who_am_i+0x1e>
	else
		return false;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <icm20948_device_reset>:
	else
		return false;
}

void icm20948_device_reset()
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 8002d3a:	22c1      	movs	r2, #193	@ 0xc1
 8002d3c:	2106      	movs	r1, #6
 8002d3e:	2000      	movs	r0, #0
 8002d40:	f000 fb58 	bl	80033f4 <write_single_icm20948_reg>
	HAL_Delay(100);
 8002d44:	2064      	movs	r0, #100	@ 0x64
 8002d46:	f7fe fce6 	bl	8001716 <HAL_Delay>
}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <icm20948_wakeup>:
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
	HAL_Delay(100);
}

void icm20948_wakeup()
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8002d54:	2106      	movs	r1, #6
 8002d56:	2000      	movs	r0, #0
 8002d58:	f000 fb20 	bl	800339c <read_single_icm20948_reg>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d66:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8002d68:	79fb      	ldrb	r3, [r7, #7]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	2106      	movs	r1, #6
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f000 fb40 	bl	80033f4 <write_single_icm20948_reg>
	HAL_Delay(100);
 8002d74:	2064      	movs	r0, #100	@ 0x64
 8002d76:	f7fe fcce 	bl	8001716 <HAL_Delay>
}
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8002d88:	2103      	movs	r1, #3
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f000 fb06 	bl	800339c <read_single_icm20948_reg>
 8002d90:	4603      	mov	r3, r0
 8002d92:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x10;
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	f043 0310 	orr.w	r3, r3, #16
 8002d9a:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	2103      	movs	r1, #3
 8002da2:	2000      	movs	r0, #0
 8002da4:	f000 fb26 	bl	80033f4 <write_single_icm20948_reg>
}
 8002da8:	bf00      	nop
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <icm20948_clock_source>:

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);	
}

void icm20948_clock_source(uint8_t source)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8002dba:	2106      	movs	r1, #6
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f000 faed 	bl	800339c <read_single_icm20948_reg>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 8002dc6:	7bfa      	ldrb	r2, [r7, #15]
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	2106      	movs	r1, #6
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	f000 fb0d 	bl	80033f4 <write_single_icm20948_reg>
}
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8002de6:	2201      	movs	r2, #1
 8002de8:	2109      	movs	r1, #9
 8002dea:	2020      	movs	r0, #32
 8002dec:	f000 fb02 	bl	80033f4 <write_single_icm20948_reg>
}
 8002df0:	bf00      	nop
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8002dfe:	2101      	movs	r1, #1
 8002e00:	2020      	movs	r0, #32
 8002e02:	f000 facb 	bl	800339c <read_single_icm20948_reg>
 8002e06:	4603      	mov	r3, r0
 8002e08:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	b25a      	sxtb	r2, r3
 8002e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	b25b      	sxtb	r3, r3
 8002e18:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	2101      	movs	r1, #1
 8002e20:	2020      	movs	r0, #32
 8002e22:	f000 fae7 	bl	80033f4 <write_single_icm20948_reg>
}
 8002e26:	bf00      	nop
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b084      	sub	sp, #16
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	4603      	mov	r3, r0
 8002e36:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8002e38:	2114      	movs	r1, #20
 8002e3a:	2020      	movs	r0, #32
 8002e3c:	f000 faae 	bl	800339c <read_single_icm20948_reg>
 8002e40:	4603      	mov	r3, r0
 8002e42:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	b25a      	sxtb	r2, r3
 8002e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	b25b      	sxtb	r3, r3
 8002e52:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
 8002e56:	461a      	mov	r2, r3
 8002e58:	2114      	movs	r1, #20
 8002e5a:	2020      	movs	r0, #32
 8002e5c:	f000 faca 	bl	80033f4 <write_single_icm20948_reg>
}
 8002e60:	bf00      	nop
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 8002e72:	79fb      	ldrb	r3, [r7, #7]
 8002e74:	461a      	mov	r2, r3
 8002e76:	2100      	movs	r1, #0
 8002e78:	2020      	movs	r0, #32
 8002e7a:	f000 fabb 	bl	80033f4 <write_single_icm20948_reg>
}
 8002e7e:	bf00      	nop
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b084      	sub	sp, #16
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 8002e90:	88fb      	ldrh	r3, [r7, #6]
 8002e92:	0a1b      	lsrs	r3, r3, #8
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 8002e98:	88fb      	ldrh	r3, [r7, #6]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	2110      	movs	r1, #16
 8002ea8:	2020      	movs	r0, #32
 8002eaa:	f000 faa3 	bl	80033f4 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 8002eae:	7bbb      	ldrb	r3, [r7, #14]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	2111      	movs	r1, #17
 8002eb4:	2020      	movs	r0, #32
 8002eb6:	f000 fa9d 	bl	80033f4 <write_single_icm20948_reg>
}
 8002eba:	bf00      	nop
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <icm20948_gyro_calibration>:
	write_single_ak09916_reg(MAG_CNTL2, mode);
	HAL_Delay(100);
}

void icm20948_gyro_calibration()
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	@ 0x28
 8002ec8:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 8002eca:	f107 030c 	add.w	r3, r7, #12
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	605a      	str	r2, [r3, #4]
 8002ed4:	609a      	str	r2, [r3, #8]
	uint8_t gyro_offset[6] = {0};
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	607b      	str	r3, [r7, #4]
 8002eda:	2300      	movs	r3, #0
 8002edc:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 100; i++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ee2:	e031      	b.n	8002f48 <icm20948_gyro_calibration+0x84>
	{
		icm20948_gyro_read(&temp);
 8002ee4:	f107 0318 	add.w	r3, r7, #24
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff fe31 	bl	8002b50 <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	ee07 3a90 	vmov	s15, r3
 8002ef4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ef8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f04:	ee17 3a90 	vmov	r3, s15
 8002f08:	60fb      	str	r3, [r7, #12]
		gyro_bias[1] += temp.y;
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	ee07 3a90 	vmov	s15, r3
 8002f10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f14:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f20:	ee17 3a90 	vmov	r3, s15
 8002f24:	613b      	str	r3, [r7, #16]
		gyro_bias[2] += temp.z;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	ee07 3a90 	vmov	s15, r3
 8002f2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f30:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f3c:	ee17 3a90 	vmov	r3, s15
 8002f40:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 100; i++)
 8002f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f44:	3301      	adds	r3, #1
 8002f46:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4a:	2b63      	cmp	r3, #99	@ 0x63
 8002f4c:	ddca      	ble.n	8002ee4 <icm20948_gyro_calibration+0x20>
	}

	gyro_bias[0] /= 100;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	4a29      	ldr	r2, [pc, #164]	@ (8002ff8 <icm20948_gyro_calibration+0x134>)
 8002f52:	fb82 1203 	smull	r1, r2, r2, r3
 8002f56:	1152      	asrs	r2, r2, #5
 8002f58:	17db      	asrs	r3, r3, #31
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	60fb      	str	r3, [r7, #12]
	gyro_bias[1] /= 100;
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4a25      	ldr	r2, [pc, #148]	@ (8002ff8 <icm20948_gyro_calibration+0x134>)
 8002f62:	fb82 1203 	smull	r1, r2, r2, r3
 8002f66:	1152      	asrs	r2, r2, #5
 8002f68:	17db      	asrs	r3, r3, #31
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	613b      	str	r3, [r7, #16]
	gyro_bias[2] /= 100;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	4a21      	ldr	r2, [pc, #132]	@ (8002ff8 <icm20948_gyro_calibration+0x134>)
 8002f72:	fb82 1203 	smull	r1, r2, r2, r3
 8002f76:	1152      	asrs	r2, r2, #5
 8002f78:	17db      	asrs	r3, r3, #31
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	617b      	str	r3, [r7, #20]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF; 
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	425b      	negs	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	da00      	bge.n	8002f88 <icm20948_gyro_calibration+0xc4>
 8002f86:	3303      	adds	r3, #3
 8002f88:	109b      	asrs	r3, r3, #2
 8002f8a:	121b      	asrs	r3, r3, #8
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	713b      	strb	r3, [r7, #4]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF; 
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	425b      	negs	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	da00      	bge.n	8002f9a <icm20948_gyro_calibration+0xd6>
 8002f98:	3303      	adds	r3, #3
 8002f9a:	109b      	asrs	r3, r3, #2
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	717b      	strb	r3, [r7, #5]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	425b      	negs	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	da00      	bge.n	8002faa <icm20948_gyro_calibration+0xe6>
 8002fa8:	3303      	adds	r3, #3
 8002faa:	109b      	asrs	r3, r3, #2
 8002fac:	121b      	asrs	r3, r3, #8
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	71bb      	strb	r3, [r7, #6]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	425b      	negs	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	da00      	bge.n	8002fbc <icm20948_gyro_calibration+0xf8>
 8002fba:	3303      	adds	r3, #3
 8002fbc:	109b      	asrs	r3, r3, #2
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	71fb      	strb	r3, [r7, #7]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	425b      	negs	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	da00      	bge.n	8002fcc <icm20948_gyro_calibration+0x108>
 8002fca:	3303      	adds	r3, #3
 8002fcc:	109b      	asrs	r3, r3, #2
 8002fce:	121b      	asrs	r3, r3, #8
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	723b      	strb	r3, [r7, #8]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	425b      	negs	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	da00      	bge.n	8002fde <icm20948_gyro_calibration+0x11a>
 8002fdc:	3303      	adds	r3, #3
 8002fde:	109b      	asrs	r3, r3, #2
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	727b      	strb	r3, [r7, #9]
	
	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 8002fe4:	1d3a      	adds	r2, r7, #4
 8002fe6:	2306      	movs	r3, #6
 8002fe8:	2103      	movs	r1, #3
 8002fea:	2020      	movs	r0, #32
 8002fec:	f000 fa56 	bl	800349c <write_multiple_icm20948_reg>
}
 8002ff0:	bf00      	nop
 8002ff2:	3728      	adds	r7, #40	@ 0x28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	51eb851f 	.word	0x51eb851f

08002ffc <icm20948_accel_calibration>:


void icm20948_accel_calibration()
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b090      	sub	sp, #64	@ 0x40
 8003000:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;
	
	int32_t accel_bias[3] = {0};
 8003002:	f107 0318 	add.w	r3, r7, #24
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	605a      	str	r2, [r3, #4]
 800300c:	609a      	str	r2, [r3, #8]
	int32_t accel_bias_reg[3] = {0};
 800300e:	f107 030c 	add.w	r3, r7, #12
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	605a      	str	r2, [r3, #4]
 8003018:	609a      	str	r2, [r3, #8]
	uint8_t accel_offset[6] = {0};
 800301a:	2300      	movs	r3, #0
 800301c:	607b      	str	r3, [r7, #4]
 800301e:	2300      	movs	r3, #0
 8003020:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 100; i++)
 8003022:	2300      	movs	r3, #0
 8003024:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003026:	e031      	b.n	800308c <icm20948_accel_calibration+0x90>
	{
		icm20948_accel_read(&temp);
 8003028:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff fdd3 	bl	8002bd8 <icm20948_accel_read>
		accel_bias[0] += temp.x;
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	ee07 3a90 	vmov	s15, r3
 8003038:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800303c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003044:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003048:	ee17 3a90 	vmov	r3, s15
 800304c:	61bb      	str	r3, [r7, #24]
		accel_bias[1] += temp.y;
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	ee07 3a90 	vmov	s15, r3
 8003054:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003058:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800305c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003064:	ee17 3a90 	vmov	r3, s15
 8003068:	61fb      	str	r3, [r7, #28]
		accel_bias[2] += temp.z;
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	ee07 3a90 	vmov	s15, r3
 8003070:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003074:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800307c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003080:	ee17 3a90 	vmov	r3, s15
 8003084:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < 100; i++)
 8003086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003088:	3301      	adds	r3, #1
 800308a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800308c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800308e:	2b63      	cmp	r3, #99	@ 0x63
 8003090:	ddca      	ble.n	8003028 <icm20948_accel_calibration+0x2c>
	}

	accel_bias[0] /= 100;
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	4a5e      	ldr	r2, [pc, #376]	@ (8003210 <icm20948_accel_calibration+0x214>)
 8003096:	fb82 1203 	smull	r1, r2, r2, r3
 800309a:	1152      	asrs	r2, r2, #5
 800309c:	17db      	asrs	r3, r3, #31
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	61bb      	str	r3, [r7, #24]
	accel_bias[1] /= 100;
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	4a5a      	ldr	r2, [pc, #360]	@ (8003210 <icm20948_accel_calibration+0x214>)
 80030a6:	fb82 1203 	smull	r1, r2, r2, r3
 80030aa:	1152      	asrs	r2, r2, #5
 80030ac:	17db      	asrs	r3, r3, #31
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	61fb      	str	r3, [r7, #28]
	accel_bias[2] /= 100;
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	4a56      	ldr	r2, [pc, #344]	@ (8003210 <icm20948_accel_calibration+0x214>)
 80030b6:	fb82 1203 	smull	r1, r2, r2, r3
 80030ba:	1152      	asrs	r2, r2, #5
 80030bc:	17db      	asrs	r3, r3, #31
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	623b      	str	r3, [r7, #32]

	uint8_t mask_bit[3] = {0, 0, 0};
 80030c2:	4a54      	ldr	r2, [pc, #336]	@ (8003214 <icm20948_accel_calibration+0x218>)
 80030c4:	463b      	mov	r3, r7
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	4611      	mov	r1, r2
 80030ca:	8019      	strh	r1, [r3, #0]
 80030cc:	3302      	adds	r3, #2
 80030ce:	0c12      	lsrs	r2, r2, #16
 80030d0:	701a      	strb	r2, [r3, #0]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 80030d2:	2202      	movs	r2, #2
 80030d4:	2114      	movs	r1, #20
 80030d6:	2010      	movs	r0, #16
 80030d8:	f000 f9b0 	bl	800343c <read_multiple_icm20948_reg>
 80030dc:	63b8      	str	r0, [r7, #56]	@ 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 80030de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	021b      	lsls	r3, r3, #8
 80030e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80030e6:	3201      	adds	r2, #1
 80030e8:	7812      	ldrb	r2, [r2, #0]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
	mask_bit[0] = temp2[1] & 0x01;
 80030ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030f0:	3301      	adds	r3, #1
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	703b      	strb	r3, [r7, #0]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 80030fc:	2202      	movs	r2, #2
 80030fe:	2117      	movs	r1, #23
 8003100:	2010      	movs	r0, #16
 8003102:	f000 f99b 	bl	800343c <read_multiple_icm20948_reg>
 8003106:	6378      	str	r0, [r7, #52]	@ 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 8003108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	021b      	lsls	r3, r3, #8
 800310e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003110:	3201      	adds	r2, #1
 8003112:	7812      	ldrb	r2, [r2, #0]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
	mask_bit[1] = temp3[1] & 0x01;
 8003118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800311a:	3301      	adds	r3, #1
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	b2db      	uxtb	r3, r3
 8003124:	707b      	strb	r3, [r7, #1]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 8003126:	2202      	movs	r2, #2
 8003128:	211a      	movs	r1, #26
 800312a:	2010      	movs	r0, #16
 800312c:	f000 f986 	bl	800343c <read_multiple_icm20948_reg>
 8003130:	6338      	str	r0, [r7, #48]	@ 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 8003132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	021b      	lsls	r3, r3, #8
 8003138:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800313a:	3201      	adds	r2, #1
 800313c:	7812      	ldrb	r2, [r2, #0]
 800313e:	4313      	orrs	r3, r2
 8003140:	617b      	str	r3, [r7, #20]
	mask_bit[2] = temp4[1] & 0x01;
 8003142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003144:	3301      	adds	r3, #1
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	b2db      	uxtb	r3, r3
 800314e:	70bb      	strb	r3, [r7, #2]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	2b00      	cmp	r3, #0
 8003156:	da00      	bge.n	800315a <icm20948_accel_calibration+0x15e>
 8003158:	3307      	adds	r3, #7
 800315a:	10db      	asrs	r3, r3, #3
 800315c:	425b      	negs	r3, r3
 800315e:	4413      	add	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	2b00      	cmp	r3, #0
 8003168:	da00      	bge.n	800316c <icm20948_accel_calibration+0x170>
 800316a:	3307      	adds	r3, #7
 800316c:	10db      	asrs	r3, r3, #3
 800316e:	425b      	negs	r3, r3
 8003170:	4413      	add	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	2b00      	cmp	r3, #0
 800317a:	da00      	bge.n	800317e <icm20948_accel_calibration+0x182>
 800317c:	3307      	adds	r3, #7
 800317e:	10db      	asrs	r3, r3, #3
 8003180:	425b      	negs	r3, r3
 8003182:	4413      	add	r3, r2
 8003184:	617b      	str	r3, [r7, #20]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	121b      	asrs	r3, r3, #8
 800318a:	b2db      	uxtb	r3, r3
 800318c:	713b      	strb	r3, [r7, #4]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	f023 0301 	bic.w	r3, r3, #1
 8003196:	b2db      	uxtb	r3, r3
 8003198:	717b      	strb	r3, [r7, #5]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 800319a:	797a      	ldrb	r2, [r7, #5]
 800319c:	783b      	ldrb	r3, [r7, #0]
 800319e:	4313      	orrs	r3, r2
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	717b      	strb	r3, [r7, #5]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	121b      	asrs	r3, r3, #8
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	71bb      	strb	r3, [r7, #6]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	f023 0301 	bic.w	r3, r3, #1
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	71fb      	strb	r3, [r7, #7]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 80031b8:	79fa      	ldrb	r2, [r7, #7]
 80031ba:	787b      	ldrb	r3, [r7, #1]
 80031bc:	4313      	orrs	r3, r2
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	71fb      	strb	r3, [r7, #7]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	121b      	asrs	r3, r3, #8
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	723b      	strb	r3, [r7, #8]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	f023 0301 	bic.w	r3, r3, #1
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	727b      	strb	r3, [r7, #9]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 80031d6:	7a7a      	ldrb	r2, [r7, #9]
 80031d8:	78bb      	ldrb	r3, [r7, #2]
 80031da:	4313      	orrs	r3, r2
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	727b      	strb	r3, [r7, #9]
	
	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 80031e0:	1d3a      	adds	r2, r7, #4
 80031e2:	2302      	movs	r3, #2
 80031e4:	2114      	movs	r1, #20
 80031e6:	2010      	movs	r0, #16
 80031e8:	f000 f958 	bl	800349c <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 80031ec:	1d3b      	adds	r3, r7, #4
 80031ee:	1c9a      	adds	r2, r3, #2
 80031f0:	2302      	movs	r3, #2
 80031f2:	2117      	movs	r1, #23
 80031f4:	2010      	movs	r0, #16
 80031f6:	f000 f951 	bl	800349c <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 80031fa:	1d3b      	adds	r3, r7, #4
 80031fc:	1d1a      	adds	r2, r3, #4
 80031fe:	2302      	movs	r3, #2
 8003200:	211a      	movs	r1, #26
 8003202:	2010      	movs	r0, #16
 8003204:	f000 f94a 	bl	800349c <write_multiple_icm20948_reg>
}
 8003208:	bf00      	nop
 800320a:	3740      	adds	r7, #64	@ 0x40
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	51eb851f 	.word	0x51eb851f
 8003214:	080157b0 	.word	0x080157b0

08003218 <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8003222:	2101      	movs	r1, #1
 8003224:	2020      	movs	r0, #32
 8003226:	f000 f8b9 	bl	800339c <read_single_icm20948_reg>
 800322a:	4603      	mov	r3, r0
 800322c:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	2b03      	cmp	r3, #3
 8003232:	d827      	bhi.n	8003284 <icm20948_gyro_full_scale_select+0x6c>
 8003234:	a201      	add	r2, pc, #4	@ (adr r2, 800323c <icm20948_gyro_full_scale_select+0x24>)
 8003236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323a:	bf00      	nop
 800323c:	0800324d 	.word	0x0800324d
 8003240:	08003255 	.word	0x08003255
 8003244:	08003265 	.word	0x08003265
 8003248:	08003275 	.word	0x08003275
	{
		case _250dps :
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 800324c:	4b12      	ldr	r3, [pc, #72]	@ (8003298 <icm20948_gyro_full_scale_select+0x80>)
 800324e:	4a13      	ldr	r2, [pc, #76]	@ (800329c <icm20948_gyro_full_scale_select+0x84>)
 8003250:	601a      	str	r2, [r3, #0]
			break;
 8003252:	e017      	b.n	8003284 <icm20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 8003254:	7bfb      	ldrb	r3, [r7, #15]
 8003256:	f043 0302 	orr.w	r3, r3, #2
 800325a:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 800325c:	4b0e      	ldr	r3, [pc, #56]	@ (8003298 <icm20948_gyro_full_scale_select+0x80>)
 800325e:	4a10      	ldr	r2, [pc, #64]	@ (80032a0 <icm20948_gyro_full_scale_select+0x88>)
 8003260:	601a      	str	r2, [r3, #0]
			break;
 8003262:	e00f      	b.n	8003284 <icm20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 8003264:	7bfb      	ldrb	r3, [r7, #15]
 8003266:	f043 0304 	orr.w	r3, r3, #4
 800326a:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 800326c:	4b0a      	ldr	r3, [pc, #40]	@ (8003298 <icm20948_gyro_full_scale_select+0x80>)
 800326e:	4a0d      	ldr	r2, [pc, #52]	@ (80032a4 <icm20948_gyro_full_scale_select+0x8c>)
 8003270:	601a      	str	r2, [r3, #0]
			break;
 8003272:	e007      	b.n	8003284 <icm20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 8003274:	7bfb      	ldrb	r3, [r7, #15]
 8003276:	f043 0306 	orr.w	r3, r3, #6
 800327a:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 800327c:	4b06      	ldr	r3, [pc, #24]	@ (8003298 <icm20948_gyro_full_scale_select+0x80>)
 800327e:	4a0a      	ldr	r2, [pc, #40]	@ (80032a8 <icm20948_gyro_full_scale_select+0x90>)
 8003280:	601a      	str	r2, [r3, #0]
			break;
 8003282:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	461a      	mov	r2, r3
 8003288:	2101      	movs	r1, #1
 800328a:	2020      	movs	r0, #32
 800328c:	f000 f8b2 	bl	80033f4 <write_single_icm20948_reg>
}
 8003290:	bf00      	nop
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	200004d0 	.word	0x200004d0
 800329c:	43030000 	.word	0x43030000
 80032a0:	42830000 	.word	0x42830000
 80032a4:	42033333 	.word	0x42033333
 80032a8:	41833333 	.word	0x41833333

080032ac <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 80032b6:	2114      	movs	r1, #20
 80032b8:	2020      	movs	r0, #32
 80032ba:	f000 f86f 	bl	800339c <read_single_icm20948_reg>
 80032be:	4603      	mov	r3, r0
 80032c0:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d82b      	bhi.n	8003320 <icm20948_accel_full_scale_select+0x74>
 80032c8:	a201      	add	r2, pc, #4	@ (adr r2, 80032d0 <icm20948_accel_full_scale_select+0x24>)
 80032ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ce:	bf00      	nop
 80032d0:	080032e1 	.word	0x080032e1
 80032d4:	080032eb 	.word	0x080032eb
 80032d8:	080032fd 	.word	0x080032fd
 80032dc:	0800330f 	.word	0x0800330f
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 80032e0:	4b14      	ldr	r3, [pc, #80]	@ (8003334 <icm20948_accel_full_scale_select+0x88>)
 80032e2:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 80032e6:	601a      	str	r2, [r3, #0]
			break;
 80032e8:	e01a      	b.n	8003320 <icm20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	f043 0302 	orr.w	r3, r3, #2
 80032f0:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 80032f2:	4b10      	ldr	r3, [pc, #64]	@ (8003334 <icm20948_accel_full_scale_select+0x88>)
 80032f4:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 80032f8:	601a      	str	r2, [r3, #0]
			break;
 80032fa:	e011      	b.n	8003320 <icm20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	f043 0304 	orr.w	r3, r3, #4
 8003302:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 8003304:	4b0b      	ldr	r3, [pc, #44]	@ (8003334 <icm20948_accel_full_scale_select+0x88>)
 8003306:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 800330a:	601a      	str	r2, [r3, #0]
			break;
 800330c:	e008      	b.n	8003320 <icm20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 800330e:	7bfb      	ldrb	r3, [r7, #15]
 8003310:	f043 0306 	orr.w	r3, r3, #6
 8003314:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 8003316:	4b07      	ldr	r3, [pc, #28]	@ (8003334 <icm20948_accel_full_scale_select+0x88>)
 8003318:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 800331c:	601a      	str	r2, [r3, #0]
			break;
 800331e:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8003320:	7bfb      	ldrb	r3, [r7, #15]
 8003322:	461a      	mov	r2, r3
 8003324:	2114      	movs	r1, #20
 8003326:	2020      	movs	r0, #32
 8003328:	f000 f864 	bl	80033f4 <write_single_icm20948_reg>
}
 800332c:	bf00      	nop
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	200004d4 	.word	0x200004d4

08003338 <cs_high>:


/* Static Functions */
static void cs_high()
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);	
 800333c:	2201      	movs	r2, #1
 800333e:	2140      	movs	r1, #64	@ 0x40
 8003340:	4802      	ldr	r0, [pc, #8]	@ (800334c <cs_high+0x14>)
 8003342:	f001 f9ed 	bl	8004720 <HAL_GPIO_WritePin>
}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	48000800 	.word	0x48000800

08003350 <cs_low>:

static void cs_low()
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 8003354:	2200      	movs	r2, #0
 8003356:	2140      	movs	r1, #64	@ 0x40
 8003358:	4802      	ldr	r0, [pc, #8]	@ (8003364 <cs_low+0x14>)
 800335a:	f001 f9e1 	bl	8004720 <HAL_GPIO_WritePin>
}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	48000800 	.word	0x48000800

08003368 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 8003372:	237f      	movs	r3, #127	@ 0x7f
 8003374:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	737b      	strb	r3, [r7, #13]

	cs_low();
 800337a:	f7ff ffe9 	bl	8003350 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 800337e:	f107 010c 	add.w	r1, r7, #12
 8003382:	230a      	movs	r3, #10
 8003384:	2202      	movs	r2, #2
 8003386:	4804      	ldr	r0, [pc, #16]	@ (8003398 <select_user_bank+0x30>)
 8003388:	f003 faf5 	bl	8006976 <HAL_SPI_Transmit>
	cs_high();
 800338c:	f7ff ffd4 	bl	8003338 <cs_high>
}
 8003390:	bf00      	nop
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	200005c0 	.word	0x200005c0

0800339c <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	460a      	mov	r2, r1
 80033a6:	71fb      	strb	r3, [r7, #7]
 80033a8:	4613      	mov	r3, r2
 80033aa:	71bb      	strb	r3, [r7, #6]
	uint8_t read_reg = READ | reg;
 80033ac:	79bb      	ldrb	r3, [r7, #6]
 80033ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;
	select_user_bank(ub);
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff ffd5 	bl	8003368 <select_user_bank>

	cs_low();
 80033be:	f7ff ffc7 	bl	8003350 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 80033c2:	f107 010f 	add.w	r1, r7, #15
 80033c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033ca:	2201      	movs	r2, #1
 80033cc:	4808      	ldr	r0, [pc, #32]	@ (80033f0 <read_single_icm20948_reg+0x54>)
 80033ce:	f003 fad2 	bl	8006976 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 80033d2:	f107 010e 	add.w	r1, r7, #14
 80033d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033da:	2201      	movs	r2, #1
 80033dc:	4804      	ldr	r0, [pc, #16]	@ (80033f0 <read_single_icm20948_reg+0x54>)
 80033de:	f003 fc3f 	bl	8006c60 <HAL_SPI_Receive>
	cs_high();
 80033e2:	f7ff ffa9 	bl	8003338 <cs_high>

	return reg_val;
 80033e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	200005c0 	.word	0x200005c0

080033f4 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	71fb      	strb	r3, [r7, #7]
 80033fe:	460b      	mov	r3, r1
 8003400:	71bb      	strb	r3, [r7, #6]
 8003402:	4613      	mov	r3, r2
 8003404:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 8003406:	79bb      	ldrb	r3, [r7, #6]
 8003408:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 800340a:	797b      	ldrb	r3, [r7, #5]
 800340c:	737b      	strb	r3, [r7, #13]

	select_user_bank(ub);
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff ffa9 	bl	8003368 <select_user_bank>

	cs_low();
 8003416:	f7ff ff9b 	bl	8003350 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 800341a:	f107 010c 	add.w	r1, r7, #12
 800341e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003422:	2202      	movs	r2, #2
 8003424:	4804      	ldr	r0, [pc, #16]	@ (8003438 <write_single_icm20948_reg+0x44>)
 8003426:	f003 faa6 	bl	8006976 <HAL_SPI_Transmit>
	cs_high();
 800342a:	f7ff ff85 	bl	8003338 <cs_high>
}
 800342e:	bf00      	nop
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	200005c0 	.word	0x200005c0

0800343c <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	71fb      	strb	r3, [r7, #7]
 8003446:	460b      	mov	r3, r1
 8003448:	71bb      	strb	r3, [r7, #6]
 800344a:	4613      	mov	r3, r2
 800344c:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 800344e:	79bb      	ldrb	r3, [r7, #6]
 8003450:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003454:	b2db      	uxtb	r3, r3
 8003456:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 8003458:	79fb      	ldrb	r3, [r7, #7]
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff ff84 	bl	8003368 <select_user_bank>

	cs_low();
 8003460:	f7ff ff76 	bl	8003350 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8003464:	f107 010f 	add.w	r1, r7, #15
 8003468:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800346c:	2201      	movs	r2, #1
 800346e:	4809      	ldr	r0, [pc, #36]	@ (8003494 <read_multiple_icm20948_reg+0x58>)
 8003470:	f003 fa81 	bl	8006976 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 8003474:	797b      	ldrb	r3, [r7, #5]
 8003476:	b29a      	uxth	r2, r3
 8003478:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800347c:	4906      	ldr	r1, [pc, #24]	@ (8003498 <read_multiple_icm20948_reg+0x5c>)
 800347e:	4805      	ldr	r0, [pc, #20]	@ (8003494 <read_multiple_icm20948_reg+0x58>)
 8003480:	f003 fbee 	bl	8006c60 <HAL_SPI_Receive>
	cs_high();
 8003484:	f7ff ff58 	bl	8003338 <cs_high>

	return reg_val;
 8003488:	4b03      	ldr	r3, [pc, #12]	@ (8003498 <read_multiple_icm20948_reg+0x5c>)
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	200005c0 	.word	0x200005c0
 8003498:	200004f4 	.word	0x200004f4

0800349c <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	603a      	str	r2, [r7, #0]
 80034a4:	461a      	mov	r2, r3
 80034a6:	4603      	mov	r3, r0
 80034a8:	71fb      	strb	r3, [r7, #7]
 80034aa:	460b      	mov	r3, r1
 80034ac:	71bb      	strb	r3, [r7, #6]
 80034ae:	4613      	mov	r3, r2
 80034b0:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg = WRITE | reg;
 80034b2:	79bb      	ldrb	r3, [r7, #6]
 80034b4:	73fb      	strb	r3, [r7, #15]
	select_user_bank(ub);
 80034b6:	79fb      	ldrb	r3, [r7, #7]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff ff55 	bl	8003368 <select_user_bank>

	cs_low();
 80034be:	f7ff ff47 	bl	8003350 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 80034c2:	f107 010f 	add.w	r1, r7, #15
 80034c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034ca:	2201      	movs	r2, #1
 80034cc:	4808      	ldr	r0, [pc, #32]	@ (80034f0 <write_multiple_icm20948_reg+0x54>)
 80034ce:	f003 fa52 	bl	8006976 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 80034d2:	797b      	ldrb	r3, [r7, #5]
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034da:	6839      	ldr	r1, [r7, #0]
 80034dc:	4804      	ldr	r0, [pc, #16]	@ (80034f0 <write_multiple_icm20948_reg+0x54>)
 80034de:	f003 fa4a 	bl	8006976 <HAL_SPI_Transmit>
	cs_high();
 80034e2:	f7ff ff29 	bl	8003338 <cs_high>
}
 80034e6:	bf00      	nop
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	200005c0 	.word	0x200005c0

080034f4 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80034fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003500:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003502:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4313      	orrs	r3, r2
 800350a:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800350c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003510:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4013      	ands	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003518:	68fb      	ldr	r3, [r7, #12]
}
 800351a:	bf00      	nop
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
	...

08003528 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 800352c:	4b06      	ldr	r3, [pc, #24]	@ (8003548 <MX_IPCC_Init+0x20>)
 800352e:	4a07      	ldr	r2, [pc, #28]	@ (800354c <MX_IPCC_Init+0x24>)
 8003530:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8003532:	4805      	ldr	r0, [pc, #20]	@ (8003548 <MX_IPCC_Init+0x20>)
 8003534:	f001 f96e 	bl	8004814 <HAL_IPCC_Init>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800353e:	f000 f8f7 	bl	8003730 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8003542:	bf00      	nop
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	200004fc 	.word	0x200004fc
 800354c:	58000c00 	.word	0x58000c00

08003550 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a0d      	ldr	r2, [pc, #52]	@ (8003594 <HAL_IPCC_MspInit+0x44>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d113      	bne.n	800358a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8003562:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003566:	f7ff ffc5 	bl	80034f4 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800356a:	2200      	movs	r2, #0
 800356c:	2100      	movs	r1, #0
 800356e:	202c      	movs	r0, #44	@ 0x2c
 8003570:	f000 feef 	bl	8004352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003574:	202c      	movs	r0, #44	@ 0x2c
 8003576:	f000 ff06 	bl	8004386 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800357a:	2200      	movs	r2, #0
 800357c:	2100      	movs	r1, #0
 800357e:	202d      	movs	r0, #45	@ 0x2d
 8003580:	f000 fee7 	bl	8004352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003584:	202d      	movs	r0, #45	@ 0x2d
 8003586:	f000 fefe 	bl	8004386 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 800358a:	bf00      	nop
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	58000c00 	.word	0x58000c00

08003598 <LL_RCC_LSE_SetDriveCapability>:
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80035a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a8:	f023 0218 	bic.w	r2, r3, #24
 80035ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
    (void)file;
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 0xFFFF);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035d8:	68b9      	ldr	r1, [r7, #8]
 80035da:	4804      	ldr	r0, [pc, #16]	@ (80035ec <_write+0x28>)
 80035dc:	f004 f8c6 	bl	800776c <HAL_UART_Transmit>
    return len;
 80035e0:	687b      	ldr	r3, [r7, #4]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000628 	.word	0x20000628

080035f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035f4:	f000 fce0 	bl	8003fb8 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80035f8:	f7fd ff52 	bl	80014a0 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035fc:	f000 f816 	bl	800362c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003600:	f000 f876 	bl	80036f0 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8003604:	f7ff ff90 	bl	8003528 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003608:	f7fe fbae 	bl	8001d68 <MX_GPIO_Init>
  MX_SPI1_Init();
 800360c:	f000 f97c 	bl	8003908 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8003610:	f000 fc06 	bl	8003e20 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8003614:	f000 f8c4 	bl	80037a0 <MX_RTC_Init>
  MX_SPI2_Init();
 8003618:	f000 f9b4 	bl	8003984 <MX_SPI2_Init>
  MX_RF_Init();
 800361c:	f000 f88e 	bl	800373c <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8003620:	f7fd ff4c 	bl	80014bc <MX_APPE_Init>
  while (1)
  {
//	  HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
//	  HAL_Delay(10);
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8003624:	f7fe f89c 	bl	8001760 <MX_APPE_Process>
 8003628:	e7fc      	b.n	8003624 <main+0x34>
	...

0800362c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b09a      	sub	sp, #104	@ 0x68
 8003630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003632:	f107 0320 	add.w	r3, r7, #32
 8003636:	2248      	movs	r2, #72	@ 0x48
 8003638:	2100      	movs	r1, #0
 800363a:	4618      	mov	r0, r3
 800363c:	f00f faaa 	bl	8012b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003640:	1d3b      	adds	r3, r7, #4
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	605a      	str	r2, [r3, #4]
 8003648:	609a      	str	r2, [r3, #8]
 800364a:	60da      	str	r2, [r3, #12]
 800364c:	611a      	str	r2, [r3, #16]
 800364e:	615a      	str	r2, [r3, #20]
 8003650:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003652:	f001 f965 	bl	8004920 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8003656:	2010      	movs	r0, #16
 8003658:	f7ff ff9e 	bl	8003598 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800365c:	4b23      	ldr	r3, [pc, #140]	@ (80036ec <SystemClock_Config+0xc0>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003664:	4a21      	ldr	r2, [pc, #132]	@ (80036ec <SystemClock_Config+0xc0>)
 8003666:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	4b1f      	ldr	r3, [pc, #124]	@ (80036ec <SystemClock_Config+0xc0>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003674:	603b      	str	r3, [r7, #0]
 8003676:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8003678:	2327      	movs	r3, #39	@ 0x27
 800367a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800367c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003680:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003682:	2301      	movs	r3, #1
 8003684:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003686:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800368a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800368c:	2301      	movs	r3, #1
 800368e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003690:	2340      	movs	r3, #64	@ 0x40
 8003692:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8003694:	2300      	movs	r3, #0
 8003696:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8003698:	23a0      	movs	r3, #160	@ 0xa0
 800369a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800369c:	2300      	movs	r3, #0
 800369e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036a0:	f107 0320 	add.w	r3, r7, #32
 80036a4:	4618      	mov	r0, r3
 80036a6:	f001 fccf 	bl	8005048 <HAL_RCC_OscConfig>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80036b0:	f000 f83e 	bl	8003730 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80036b4:	236f      	movs	r3, #111	@ 0x6f
 80036b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80036c0:	2300      	movs	r3, #0
 80036c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80036c8:	2300      	movs	r3, #0
 80036ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80036cc:	2300      	movs	r3, #0
 80036ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	2101      	movs	r1, #1
 80036d4:	4618      	mov	r0, r3
 80036d6:	f002 f82b 	bl	8005730 <HAL_RCC_ClockConfig>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80036e0:	f000 f826 	bl	8003730 <Error_Handler>
  }
}
 80036e4:	bf00      	nop
 80036e6:	3768      	adds	r7, #104	@ 0x68
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	58000400 	.word	0x58000400

080036f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b094      	sub	sp, #80	@ 0x50
 80036f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036f6:	463b      	mov	r3, r7
 80036f8:	2250      	movs	r2, #80	@ 0x50
 80036fa:	2100      	movs	r1, #0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f00f fa49 	bl	8012b94 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8003702:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003706:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8003708:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800370c:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800370e:	2300      	movs	r3, #0
 8003710:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8003712:	2300      	movs	r3, #0
 8003714:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003716:	463b      	mov	r3, r7
 8003718:	4618      	mov	r0, r3
 800371a:	f002 fc46 	bl	8005faa <HAL_RCCEx_PeriphCLKConfig>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8003724:	f000 f804 	bl	8003730 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8003728:	bf00      	nop
 800372a:	3750      	adds	r7, #80	@ 0x50
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003734:	b672      	cpsid	i
}
 8003736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003738:	bf00      	nop
 800373a:	e7fd      	b.n	8003738 <Error_Handler+0x8>

0800373c <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8003740:	bf00      	nop
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800374a:	b480      	push	{r7}
 800374c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800374e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003756:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800375a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800375e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003762:	bf00      	nop
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003774:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003778:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800377a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4313      	orrs	r3, r2
 8003782:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003784:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003788:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4013      	ands	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003790:	68fb      	ldr	r3, [r7, #12]
}
 8003792:	bf00      	nop
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
	...

080037a0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80037a4:	4b16      	ldr	r3, [pc, #88]	@ (8003800 <MX_RTC_Init+0x60>)
 80037a6:	4a17      	ldr	r2, [pc, #92]	@ (8003804 <MX_RTC_Init+0x64>)
 80037a8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80037aa:	4b15      	ldr	r3, [pc, #84]	@ (8003800 <MX_RTC_Init+0x60>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80037b0:	4b13      	ldr	r3, [pc, #76]	@ (8003800 <MX_RTC_Init+0x60>)
 80037b2:	220f      	movs	r2, #15
 80037b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80037b6:	4b12      	ldr	r3, [pc, #72]	@ (8003800 <MX_RTC_Init+0x60>)
 80037b8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80037bc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80037be:	4b10      	ldr	r3, [pc, #64]	@ (8003800 <MX_RTC_Init+0x60>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80037c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003800 <MX_RTC_Init+0x60>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80037ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003800 <MX_RTC_Init+0x60>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80037d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003800 <MX_RTC_Init+0x60>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80037d6:	480a      	ldr	r0, [pc, #40]	@ (8003800 <MX_RTC_Init+0x60>)
 80037d8:	f002 fe6e 	bl	80064b8 <HAL_RTC_Init>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80037e2:	f7ff ffa5 	bl	8003730 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80037e6:	2200      	movs	r2, #0
 80037e8:	2100      	movs	r1, #0
 80037ea:	4805      	ldr	r0, [pc, #20]	@ (8003800 <MX_RTC_Init+0x60>)
 80037ec:	f002 ff64 	bl	80066b8 <HAL_RTCEx_SetWakeUpTimer_IT>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80037f6:	f7ff ff9b 	bl	8003730 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000538 	.word	0x20000538
 8003804:	40002800 	.word	0x40002800

08003808 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b096      	sub	sp, #88	@ 0x58
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003810:	f107 0308 	add.w	r3, r7, #8
 8003814:	2250      	movs	r2, #80	@ 0x50
 8003816:	2100      	movs	r1, #0
 8003818:	4618      	mov	r0, r3
 800381a:	f00f f9bb 	bl	8012b94 <memset>
  if(rtcHandle->Instance==RTC)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a12      	ldr	r2, [pc, #72]	@ (800386c <HAL_RTC_MspInit+0x64>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d11d      	bne.n	8003864 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003828:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800382c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800382e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003832:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003834:	f107 0308 	add.w	r3, r7, #8
 8003838:	4618      	mov	r0, r3
 800383a:	f002 fbb6 	bl	8005faa <HAL_RCCEx_PeriphCLKConfig>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003844:	f7ff ff74 	bl	8003730 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003848:	f7ff ff7f 	bl	800374a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800384c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003850:	f7ff ff8c 	bl	800376c <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003854:	2200      	movs	r2, #0
 8003856:	2100      	movs	r1, #0
 8003858:	2003      	movs	r0, #3
 800385a:	f000 fd7a 	bl	8004352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800385e:	2003      	movs	r0, #3
 8003860:	f000 fd91 	bl	8004386 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003864:	bf00      	nop
 8003866:	3758      	adds	r7, #88	@ 0x58
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40002800 	.word	0x40002800

08003870 <LL_AHB2_GRP1_EnableClock>:
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003878:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800387c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800387e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4313      	orrs	r3, r2
 8003886:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800388c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4013      	ands	r3, r2
 8003892:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003894:	68fb      	ldr	r3, [r7, #12]
}
 8003896:	bf00      	nop
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <LL_APB1_GRP1_EnableClock>:
{
 80038a2:	b480      	push	{r7}
 80038a4:	b085      	sub	sp, #20
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80038aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038ae:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80038b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80038ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038be:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4013      	ands	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80038c6:	68fb      	ldr	r3, [r7, #12]
}
 80038c8:	bf00      	nop
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80038dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80038e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80038ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4013      	ands	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80038f8:	68fb      	ldr	r3, [r7, #12]
}
 80038fa:	bf00      	nop
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
	...

08003908 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800390c:	4b1b      	ldr	r3, [pc, #108]	@ (800397c <MX_SPI1_Init+0x74>)
 800390e:	4a1c      	ldr	r2, [pc, #112]	@ (8003980 <MX_SPI1_Init+0x78>)
 8003910:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003912:	4b1a      	ldr	r3, [pc, #104]	@ (800397c <MX_SPI1_Init+0x74>)
 8003914:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003918:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800391a:	4b18      	ldr	r3, [pc, #96]	@ (800397c <MX_SPI1_Init+0x74>)
 800391c:	2200      	movs	r2, #0
 800391e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003920:	4b16      	ldr	r3, [pc, #88]	@ (800397c <MX_SPI1_Init+0x74>)
 8003922:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003926:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003928:	4b14      	ldr	r3, [pc, #80]	@ (800397c <MX_SPI1_Init+0x74>)
 800392a:	2200      	movs	r2, #0
 800392c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800392e:	4b13      	ldr	r3, [pc, #76]	@ (800397c <MX_SPI1_Init+0x74>)
 8003930:	2200      	movs	r2, #0
 8003932:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003934:	4b11      	ldr	r3, [pc, #68]	@ (800397c <MX_SPI1_Init+0x74>)
 8003936:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800393a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800393c:	4b0f      	ldr	r3, [pc, #60]	@ (800397c <MX_SPI1_Init+0x74>)
 800393e:	2208      	movs	r2, #8
 8003940:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003942:	4b0e      	ldr	r3, [pc, #56]	@ (800397c <MX_SPI1_Init+0x74>)
 8003944:	2200      	movs	r2, #0
 8003946:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003948:	4b0c      	ldr	r3, [pc, #48]	@ (800397c <MX_SPI1_Init+0x74>)
 800394a:	2200      	movs	r2, #0
 800394c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800394e:	4b0b      	ldr	r3, [pc, #44]	@ (800397c <MX_SPI1_Init+0x74>)
 8003950:	2200      	movs	r2, #0
 8003952:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003954:	4b09      	ldr	r3, [pc, #36]	@ (800397c <MX_SPI1_Init+0x74>)
 8003956:	2207      	movs	r2, #7
 8003958:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800395a:	4b08      	ldr	r3, [pc, #32]	@ (800397c <MX_SPI1_Init+0x74>)
 800395c:	2200      	movs	r2, #0
 800395e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003960:	4b06      	ldr	r3, [pc, #24]	@ (800397c <MX_SPI1_Init+0x74>)
 8003962:	2208      	movs	r2, #8
 8003964:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003966:	4805      	ldr	r0, [pc, #20]	@ (800397c <MX_SPI1_Init+0x74>)
 8003968:	f002 ff62 	bl	8006830 <HAL_SPI_Init>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003972:	f7ff fedd 	bl	8003730 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	2000055c 	.word	0x2000055c
 8003980:	40013000 	.word	0x40013000

08003984 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003988:	4b1b      	ldr	r3, [pc, #108]	@ (80039f8 <MX_SPI2_Init+0x74>)
 800398a:	4a1c      	ldr	r2, [pc, #112]	@ (80039fc <MX_SPI2_Init+0x78>)
 800398c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800398e:	4b1a      	ldr	r3, [pc, #104]	@ (80039f8 <MX_SPI2_Init+0x74>)
 8003990:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003994:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003996:	4b18      	ldr	r3, [pc, #96]	@ (80039f8 <MX_SPI2_Init+0x74>)
 8003998:	2200      	movs	r2, #0
 800399a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800399c:	4b16      	ldr	r3, [pc, #88]	@ (80039f8 <MX_SPI2_Init+0x74>)
 800399e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80039a2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80039a4:	4b14      	ldr	r3, [pc, #80]	@ (80039f8 <MX_SPI2_Init+0x74>)
 80039a6:	2202      	movs	r2, #2
 80039a8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80039aa:	4b13      	ldr	r3, [pc, #76]	@ (80039f8 <MX_SPI2_Init+0x74>)
 80039ac:	2201      	movs	r2, #1
 80039ae:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80039b0:	4b11      	ldr	r3, [pc, #68]	@ (80039f8 <MX_SPI2_Init+0x74>)
 80039b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039b6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80039b8:	4b0f      	ldr	r3, [pc, #60]	@ (80039f8 <MX_SPI2_Init+0x74>)
 80039ba:	2210      	movs	r2, #16
 80039bc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039be:	4b0e      	ldr	r3, [pc, #56]	@ (80039f8 <MX_SPI2_Init+0x74>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80039c4:	4b0c      	ldr	r3, [pc, #48]	@ (80039f8 <MX_SPI2_Init+0x74>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039ca:	4b0b      	ldr	r3, [pc, #44]	@ (80039f8 <MX_SPI2_Init+0x74>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80039d0:	4b09      	ldr	r3, [pc, #36]	@ (80039f8 <MX_SPI2_Init+0x74>)
 80039d2:	2207      	movs	r2, #7
 80039d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80039d6:	4b08      	ldr	r3, [pc, #32]	@ (80039f8 <MX_SPI2_Init+0x74>)
 80039d8:	2200      	movs	r2, #0
 80039da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80039dc:	4b06      	ldr	r3, [pc, #24]	@ (80039f8 <MX_SPI2_Init+0x74>)
 80039de:	2200      	movs	r2, #0
 80039e0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80039e2:	4805      	ldr	r0, [pc, #20]	@ (80039f8 <MX_SPI2_Init+0x74>)
 80039e4:	f002 ff24 	bl	8006830 <HAL_SPI_Init>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80039ee:	f7ff fe9f 	bl	8003730 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80039f2:	bf00      	nop
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	200005c0 	.word	0x200005c0
 80039fc:	40003800 	.word	0x40003800

08003a00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a08:	f107 030c 	add.w	r3, r7, #12
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	605a      	str	r2, [r3, #4]
 8003a12:	609a      	str	r2, [r3, #8]
 8003a14:	60da      	str	r2, [r3, #12]
 8003a16:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a28      	ldr	r2, [pc, #160]	@ (8003ac0 <HAL_SPI_MspInit+0xc0>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d118      	bne.n	8003a54 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a22:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003a26:	f7ff ff55 	bl	80038d4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2a:	2001      	movs	r0, #1
 8003a2c:	f7ff ff20 	bl	8003870 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003a30:	23e0      	movs	r3, #224	@ 0xe0
 8003a32:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a34:	2302      	movs	r3, #2
 8003a36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a40:	2305      	movs	r3, #5
 8003a42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a44:	f107 030c 	add.w	r3, r7, #12
 8003a48:	4619      	mov	r1, r3
 8003a4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a4e:	f000 fcdf 	bl	8004410 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003a52:	e030      	b.n	8003ab6 <HAL_SPI_MspInit+0xb6>
  else if(spiHandle->Instance==SPI2)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a1a      	ldr	r2, [pc, #104]	@ (8003ac4 <HAL_SPI_MspInit+0xc4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d12b      	bne.n	8003ab6 <HAL_SPI_MspInit+0xb6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003a5e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003a62:	f7ff ff1e 	bl	80038a2 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a66:	2004      	movs	r0, #4
 8003a68:	f7ff ff02 	bl	8003870 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	f7ff feff 	bl	8003870 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a72:	230c      	movs	r3, #12
 8003a74:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a76:	2302      	movs	r3, #2
 8003a78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a82:	2305      	movs	r3, #5
 8003a84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a86:	f107 030c 	add.w	r3, r7, #12
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	480e      	ldr	r0, [pc, #56]	@ (8003ac8 <HAL_SPI_MspInit+0xc8>)
 8003a8e:	f000 fcbf 	bl	8004410 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003a92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a98:	2302      	movs	r3, #2
 8003a9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003aa4:	2305      	movs	r3, #5
 8003aa6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa8:	f107 030c 	add.w	r3, r7, #12
 8003aac:	4619      	mov	r1, r3
 8003aae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ab2:	f000 fcad 	bl	8004410 <HAL_GPIO_Init>
}
 8003ab6:	bf00      	nop
 8003ab8:	3720      	adds	r7, #32
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	40013000 	.word	0x40013000
 8003ac4:	40003800 	.word	0x40003800
 8003ac8:	48000800 	.word	0x48000800

08003acc <LL_AHB3_GRP1_EnableClock>:
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003ad4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ad8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003ada:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003ae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ae8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4013      	ands	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003af0:	68fb      	ldr	r3, [r7, #12]
}
 8003af2:	bf00      	nop
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003b02:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003b06:	f7ff ffe1 	bl	8003acc <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	202e      	movs	r0, #46	@ 0x2e
 8003b10:	f000 fc1f 	bl	8004352 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003b14:	202e      	movs	r0, #46	@ 0x2e
 8003b16:	f000 fc36 	bl	8004386 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b1a:	bf00      	nop
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b22:	bf00      	nop
 8003b24:	e7fd      	b.n	8003b22 <NMI_Handler+0x4>

08003b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b26:	b480      	push	{r7}
 8003b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b2a:	bf00      	nop
 8003b2c:	e7fd      	b.n	8003b2a <HardFault_Handler+0x4>

08003b2e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b32:	bf00      	nop
 8003b34:	e7fd      	b.n	8003b32 <MemManage_Handler+0x4>

08003b36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b36:	b480      	push	{r7}
 8003b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b3a:	bf00      	nop
 8003b3c:	e7fd      	b.n	8003b3a <BusFault_Handler+0x4>

08003b3e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b42:	bf00      	nop
 8003b44:	e7fd      	b.n	8003b42 <UsageFault_Handler+0x4>

08003b46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b46:	b480      	push	{r7}
 8003b48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b4a:	bf00      	nop
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b58:	bf00      	nop
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b62:	b480      	push	{r7}
 8003b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b66:	bf00      	nop
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b74:	f000 fa7a 	bl	800406c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b78:	bf00      	nop
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003b80:	f7fe fcb4 	bl	80024ec <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003b84:	bf00      	nop
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SEN_INT1_Pin);
 8003b8c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003b90:	f000 fdf8 	bl	8004784 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SEN_INT2_Pin);
 8003b94:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003b98:	f000 fdf4 	bl	8004784 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b9c:	bf00      	nop
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003ba4:	f007 fc5e 	bl	800b464 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003ba8:	bf00      	nop
 8003baa:	bd80      	pop	{r7, pc}

08003bac <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003bb0:	f007 fc8e 	bl	800b4d0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003bb4:	bf00      	nop
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003bbc:	f000 fe06 	bl	80047cc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003bc0:	bf00      	nop
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  return 1;
 8003bc8:	2301      	movs	r3, #1
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <_kill>:

int _kill(int pid, int sig)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003bde:	f00f f83b 	bl	8012c58 <__errno>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2216      	movs	r2, #22
 8003be6:	601a      	str	r2, [r3, #0]
  return -1;
 8003be8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <_exit>:

void _exit (int status)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff ffe7 	bl	8003bd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c06:	bf00      	nop
 8003c08:	e7fd      	b.n	8003c06 <_exit+0x12>

08003c0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b086      	sub	sp, #24
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	60f8      	str	r0, [r7, #12]
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	e00a      	b.n	8003c32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c1c:	f3af 8000 	nop.w
 8003c20:	4601      	mov	r1, r0
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	60ba      	str	r2, [r7, #8]
 8003c28:	b2ca      	uxtb	r2, r1
 8003c2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	dbf0      	blt.n	8003c1c <_read+0x12>
  }

  return len;
 8003c3a:	687b      	ldr	r3, [r7, #4]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c6c:	605a      	str	r2, [r3, #4]
  return 0;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <_isatty>:

int _isatty(int file)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c84:	2301      	movs	r3, #1
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b085      	sub	sp, #20
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	60f8      	str	r0, [r7, #12]
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cb4:	4a14      	ldr	r2, [pc, #80]	@ (8003d08 <_sbrk+0x5c>)
 8003cb6:	4b15      	ldr	r3, [pc, #84]	@ (8003d0c <_sbrk+0x60>)
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cc0:	4b13      	ldr	r3, [pc, #76]	@ (8003d10 <_sbrk+0x64>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d102      	bne.n	8003cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cc8:	4b11      	ldr	r3, [pc, #68]	@ (8003d10 <_sbrk+0x64>)
 8003cca:	4a12      	ldr	r2, [pc, #72]	@ (8003d14 <_sbrk+0x68>)
 8003ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cce:	4b10      	ldr	r3, [pc, #64]	@ (8003d10 <_sbrk+0x64>)
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d207      	bcs.n	8003cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cdc:	f00e ffbc 	bl	8012c58 <__errno>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	220c      	movs	r2, #12
 8003ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cea:	e009      	b.n	8003d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cec:	4b08      	ldr	r3, [pc, #32]	@ (8003d10 <_sbrk+0x64>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cf2:	4b07      	ldr	r3, [pc, #28]	@ (8003d10 <_sbrk+0x64>)
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	4a05      	ldr	r2, [pc, #20]	@ (8003d10 <_sbrk+0x64>)
 8003cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	20030000 	.word	0x20030000
 8003d0c:	00000400 	.word	0x00000400
 8003d10:	20000624 	.word	0x20000624
 8003d14:	20000bf0 	.word	0x20000bf0

08003d18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003d1c:	4b24      	ldr	r3, [pc, #144]	@ (8003db0 <SystemInit+0x98>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d22:	4a23      	ldr	r2, [pc, #140]	@ (8003db0 <SystemInit+0x98>)
 8003d24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003d2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d36:	f043 0301 	orr.w	r3, r3, #1
 8003d3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003d3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d40:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8003d44:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003d46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d50:	4b18      	ldr	r3, [pc, #96]	@ (8003db4 <SystemInit+0x9c>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003d56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d62:	f023 0305 	bic.w	r3, r3, #5
 8003d66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003d6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d76:	f023 0301 	bic.w	r3, r3, #1
 8003d7a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003d7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d82:	4a0d      	ldr	r2, [pc, #52]	@ (8003db8 <SystemInit+0xa0>)
 8003d84:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003d86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d8a:	4a0b      	ldr	r2, [pc, #44]	@ (8003db8 <SystemInit+0xa0>)
 8003d8c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d9c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003d9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003da2:	2200      	movs	r2, #0
 8003da4:	619a      	str	r2, [r3, #24]
}
 8003da6:	bf00      	nop
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	e000ed00 	.word	0xe000ed00
 8003db4:	faf6fefb 	.word	0xfaf6fefb
 8003db8:	22041000 	.word	0x22041000

08003dbc <LL_AHB2_GRP1_EnableClock>:
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003dc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dc8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003dca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003dd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dd8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003de0:	68fb      	ldr	r3, [r7, #12]
}
 8003de2:	bf00      	nop
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <LL_APB2_GRP1_EnableClock>:
{
 8003dee:	b480      	push	{r7}
 8003df0:	b085      	sub	sp, #20
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003df6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dfa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003dfc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003e06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e0a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003e12:	68fb      	ldr	r3, [r7, #12]
}
 8003e14:	bf00      	nop
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e24:	4b22      	ldr	r3, [pc, #136]	@ (8003eb0 <MX_USART1_UART_Init+0x90>)
 8003e26:	4a23      	ldr	r2, [pc, #140]	@ (8003eb4 <MX_USART1_UART_Init+0x94>)
 8003e28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003e2a:	4b21      	ldr	r3, [pc, #132]	@ (8003eb0 <MX_USART1_UART_Init+0x90>)
 8003e2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003e30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e32:	4b1f      	ldr	r3, [pc, #124]	@ (8003eb0 <MX_USART1_UART_Init+0x90>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e38:	4b1d      	ldr	r3, [pc, #116]	@ (8003eb0 <MX_USART1_UART_Init+0x90>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8003eb0 <MX_USART1_UART_Init+0x90>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e44:	4b1a      	ldr	r3, [pc, #104]	@ (8003eb0 <MX_USART1_UART_Init+0x90>)
 8003e46:	220c      	movs	r2, #12
 8003e48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e4a:	4b19      	ldr	r3, [pc, #100]	@ (8003eb0 <MX_USART1_UART_Init+0x90>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e50:	4b17      	ldr	r3, [pc, #92]	@ (8003eb0 <MX_USART1_UART_Init+0x90>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e56:	4b16      	ldr	r3, [pc, #88]	@ (8003eb0 <MX_USART1_UART_Init+0x90>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003e5c:	4b14      	ldr	r3, [pc, #80]	@ (8003eb0 <MX_USART1_UART_Init+0x90>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e62:	4b13      	ldr	r3, [pc, #76]	@ (8003eb0 <MX_USART1_UART_Init+0x90>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e68:	4811      	ldr	r0, [pc, #68]	@ (8003eb0 <MX_USART1_UART_Init+0x90>)
 8003e6a:	f003 fc2f 	bl	80076cc <HAL_UART_Init>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003e74:	f7ff fc5c 	bl	8003730 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e78:	2100      	movs	r1, #0
 8003e7a:	480d      	ldr	r0, [pc, #52]	@ (8003eb0 <MX_USART1_UART_Init+0x90>)
 8003e7c:	f004 f984 	bl	8008188 <HAL_UARTEx_SetTxFifoThreshold>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003e86:	f7ff fc53 	bl	8003730 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	4808      	ldr	r0, [pc, #32]	@ (8003eb0 <MX_USART1_UART_Init+0x90>)
 8003e8e:	f004 f9b9 	bl	8008204 <HAL_UARTEx_SetRxFifoThreshold>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003e98:	f7ff fc4a 	bl	8003730 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003e9c:	4804      	ldr	r0, [pc, #16]	@ (8003eb0 <MX_USART1_UART_Init+0x90>)
 8003e9e:	f004 f93a 	bl	8008116 <HAL_UARTEx_DisableFifoMode>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003ea8:	f7ff fc42 	bl	8003730 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003eac:	bf00      	nop
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	20000628 	.word	0x20000628
 8003eb4:	40013800 	.word	0x40013800

08003eb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b09c      	sub	sp, #112	@ 0x70
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	605a      	str	r2, [r3, #4]
 8003eca:	609a      	str	r2, [r3, #8]
 8003ecc:	60da      	str	r2, [r3, #12]
 8003ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ed0:	f107 030c 	add.w	r3, r7, #12
 8003ed4:	2250      	movs	r2, #80	@ 0x50
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f00e fe5b 	bl	8012b94 <memset>
  if(uartHandle->Instance==USART1)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a16      	ldr	r2, [pc, #88]	@ (8003f3c <HAL_UART_MspInit+0x84>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d124      	bne.n	8003f32 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003eec:	2300      	movs	r3, #0
 8003eee:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ef0:	f107 030c 	add.w	r3, r7, #12
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f002 f858 	bl	8005faa <HAL_RCCEx_PeriphCLKConfig>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003f00:	f7ff fc16 	bl	8003730 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f04:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003f08:	f7ff ff71 	bl	8003dee <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f0c:	2002      	movs	r0, #2
 8003f0e:	f7ff ff55 	bl	8003dbc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003f12:	23c0      	movs	r3, #192	@ 0xc0
 8003f14:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f16:	2302      	movs	r3, #2
 8003f18:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f22:	2307      	movs	r3, #7
 8003f24:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f26:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4804      	ldr	r0, [pc, #16]	@ (8003f40 <HAL_UART_MspInit+0x88>)
 8003f2e:	f000 fa6f 	bl	8004410 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003f32:	bf00      	nop
 8003f34:	3770      	adds	r7, #112	@ 0x70
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40013800 	.word	0x40013800
 8003f40:	48000400 	.word	0x48000400

08003f44 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003f44:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f46:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f48:	3304      	adds	r3, #4

08003f4a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f4a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f4c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003f4e:	d3f9      	bcc.n	8003f44 <CopyDataInit>
  bx lr
 8003f50:	4770      	bx	lr

08003f52 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003f52:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003f54:	3004      	adds	r0, #4

08003f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003f56:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003f58:	d3fb      	bcc.n	8003f52 <FillZerobss>
  bx lr
 8003f5a:	4770      	bx	lr

08003f5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003f5c:	480c      	ldr	r0, [pc, #48]	@ (8003f90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003f5e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003f60:	f7ff feda 	bl	8003d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003f64:	480b      	ldr	r0, [pc, #44]	@ (8003f94 <LoopForever+0x6>)
 8003f66:	490c      	ldr	r1, [pc, #48]	@ (8003f98 <LoopForever+0xa>)
 8003f68:	4a0c      	ldr	r2, [pc, #48]	@ (8003f9c <LoopForever+0xe>)
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	f7ff ffed 	bl	8003f4a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003f70:	480b      	ldr	r0, [pc, #44]	@ (8003fa0 <LoopForever+0x12>)
 8003f72:	490c      	ldr	r1, [pc, #48]	@ (8003fa4 <LoopForever+0x16>)
 8003f74:	4a0c      	ldr	r2, [pc, #48]	@ (8003fa8 <LoopForever+0x1a>)
 8003f76:	2300      	movs	r3, #0
 8003f78:	f7ff ffe7 	bl	8003f4a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003f7c:	480b      	ldr	r0, [pc, #44]	@ (8003fac <LoopForever+0x1e>)
 8003f7e:	490c      	ldr	r1, [pc, #48]	@ (8003fb0 <LoopForever+0x22>)
 8003f80:	2300      	movs	r3, #0
 8003f82:	f7ff ffe8 	bl	8003f56 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003f86:	f00e fe6d 	bl	8012c64 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003f8a:	f7ff fb31 	bl	80035f0 <main>

08003f8e <LoopForever>:

LoopForever:
  b LoopForever
 8003f8e:	e7fe      	b.n	8003f8e <LoopForever>
  ldr   r0, =_estack
 8003f90:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003f94:	20000008 	.word	0x20000008
 8003f98:	20000394 	.word	0x20000394
 8003f9c:	0801b460 	.word	0x0801b460
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003fa0:	200301e4 	.word	0x200301e4
 8003fa4:	20030a67 	.word	0x20030a67
 8003fa8:	0801b832 	.word	0x0801b832
  INIT_BSS _sbss, _ebss
 8003fac:	200003e0 	.word	0x200003e0
 8003fb0:	20000bf0 	.word	0x20000bf0

08003fb4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003fb4:	e7fe      	b.n	8003fb4 <ADC1_IRQHandler>
	...

08003fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff4 <HAL_Init+0x3c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a0b      	ldr	r2, [pc, #44]	@ (8003ff4 <HAL_Init+0x3c>)
 8003fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fcc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fce:	2003      	movs	r0, #3
 8003fd0:	f000 f9b4 	bl	800433c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	f000 f80f 	bl	8003ff8 <HAL_InitTick>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	71fb      	strb	r3, [r7, #7]
 8003fe4:	e001      	b.n	8003fea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003fe6:	f7ff fd8a 	bl	8003afe <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003fea:	79fb      	ldrb	r3, [r7, #7]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	58004000 	.word	0x58004000

08003ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004004:	4b17      	ldr	r3, [pc, #92]	@ (8004064 <HAL_InitTick+0x6c>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d024      	beq.n	8004056 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800400c:	f001 fd3c 	bl	8005a88 <HAL_RCC_GetHCLKFreq>
 8004010:	4602      	mov	r2, r0
 8004012:	4b14      	ldr	r3, [pc, #80]	@ (8004064 <HAL_InitTick+0x6c>)
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	4619      	mov	r1, r3
 8004018:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800401c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004020:	fbb2 f3f3 	udiv	r3, r2, r3
 8004024:	4618      	mov	r0, r3
 8004026:	f000 f9ca 	bl	80043be <HAL_SYSTICK_Config>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10f      	bne.n	8004050 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b0f      	cmp	r3, #15
 8004034:	d809      	bhi.n	800404a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004036:	2200      	movs	r2, #0
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	f04f 30ff 	mov.w	r0, #4294967295
 800403e:	f000 f988 	bl	8004352 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004042:	4a09      	ldr	r2, [pc, #36]	@ (8004068 <HAL_InitTick+0x70>)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	e007      	b.n	800405a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	73fb      	strb	r3, [r7, #15]
 800404e:	e004      	b.n	800405a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	73fb      	strb	r3, [r7, #15]
 8004054:	e001      	b.n	800405a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800405a:	7bfb      	ldrb	r3, [r7, #15]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20000010 	.word	0x20000010
 8004068:	2000000c 	.word	0x2000000c

0800406c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004070:	4b06      	ldr	r3, [pc, #24]	@ (800408c <HAL_IncTick+0x20>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	461a      	mov	r2, r3
 8004076:	4b06      	ldr	r3, [pc, #24]	@ (8004090 <HAL_IncTick+0x24>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4413      	add	r3, r2
 800407c:	4a04      	ldr	r2, [pc, #16]	@ (8004090 <HAL_IncTick+0x24>)
 800407e:	6013      	str	r3, [r2, #0]
}
 8004080:	bf00      	nop
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	20000010 	.word	0x20000010
 8004090:	200006bc 	.word	0x200006bc

08004094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  return uwTick;
 8004098:	4b03      	ldr	r3, [pc, #12]	@ (80040a8 <HAL_GetTick+0x14>)
 800409a:	681b      	ldr	r3, [r3, #0]
}
 800409c:	4618      	mov	r0, r3
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	200006bc 	.word	0x200006bc

080040ac <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80040b0:	4b03      	ldr	r3, [pc, #12]	@ (80040c0 <HAL_GetTickPrio+0x14>)
 80040b2:	681b      	ldr	r3, [r3, #0]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	2000000c 	.word	0x2000000c

080040c4 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80040c8:	4b03      	ldr	r3, [pc, #12]	@ (80040d8 <HAL_GetTickFreq+0x14>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	20000010 	.word	0x20000010

080040dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004120 <__NVIC_SetPriorityGrouping+0x44>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80040f8:	4013      	ands	r3, r2
 80040fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004104:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800410c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800410e:	4a04      	ldr	r2, [pc, #16]	@ (8004120 <__NVIC_SetPriorityGrouping+0x44>)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	60d3      	str	r3, [r2, #12]
}
 8004114:	bf00      	nop
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	e000ed00 	.word	0xe000ed00

08004124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004128:	4b04      	ldr	r3, [pc, #16]	@ (800413c <__NVIC_GetPriorityGrouping+0x18>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	0a1b      	lsrs	r3, r3, #8
 800412e:	f003 0307 	and.w	r3, r3, #7
}
 8004132:	4618      	mov	r0, r3
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	e000ed00 	.word	0xe000ed00

08004140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800414a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414e:	2b00      	cmp	r3, #0
 8004150:	db0b      	blt.n	800416a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004152:	79fb      	ldrb	r3, [r7, #7]
 8004154:	f003 021f 	and.w	r2, r3, #31
 8004158:	4907      	ldr	r1, [pc, #28]	@ (8004178 <__NVIC_EnableIRQ+0x38>)
 800415a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	2001      	movs	r0, #1
 8004162:	fa00 f202 	lsl.w	r2, r0, r2
 8004166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	e000e100 	.word	0xe000e100

0800417c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	4603      	mov	r3, r0
 8004184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418a:	2b00      	cmp	r3, #0
 800418c:	db12      	blt.n	80041b4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800418e:	79fb      	ldrb	r3, [r7, #7]
 8004190:	f003 021f 	and.w	r2, r3, #31
 8004194:	490a      	ldr	r1, [pc, #40]	@ (80041c0 <__NVIC_DisableIRQ+0x44>)
 8004196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	2001      	movs	r0, #1
 800419e:	fa00 f202 	lsl.w	r2, r0, r2
 80041a2:	3320      	adds	r3, #32
 80041a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80041a8:	f3bf 8f4f 	dsb	sy
}
 80041ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80041ae:	f3bf 8f6f 	isb	sy
}
 80041b2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	e000e100 	.word	0xe000e100

080041c4 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	4603      	mov	r3, r0
 80041cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	db0c      	blt.n	80041f0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041d6:	79fb      	ldrb	r3, [r7, #7]
 80041d8:	f003 021f 	and.w	r2, r3, #31
 80041dc:	4907      	ldr	r1, [pc, #28]	@ (80041fc <__NVIC_SetPendingIRQ+0x38>)
 80041de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	2001      	movs	r0, #1
 80041e6:	fa00 f202 	lsl.w	r2, r0, r2
 80041ea:	3340      	adds	r3, #64	@ 0x40
 80041ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	e000e100 	.word	0xe000e100

08004200 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	4603      	mov	r3, r0
 8004208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800420a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420e:	2b00      	cmp	r3, #0
 8004210:	db0c      	blt.n	800422c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004212:	79fb      	ldrb	r3, [r7, #7]
 8004214:	f003 021f 	and.w	r2, r3, #31
 8004218:	4907      	ldr	r1, [pc, #28]	@ (8004238 <__NVIC_ClearPendingIRQ+0x38>)
 800421a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800421e:	095b      	lsrs	r3, r3, #5
 8004220:	2001      	movs	r0, #1
 8004222:	fa00 f202 	lsl.w	r2, r0, r2
 8004226:	3360      	adds	r3, #96	@ 0x60
 8004228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	e000e100 	.word	0xe000e100

0800423c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	4603      	mov	r3, r0
 8004244:	6039      	str	r1, [r7, #0]
 8004246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424c:	2b00      	cmp	r3, #0
 800424e:	db0a      	blt.n	8004266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	b2da      	uxtb	r2, r3
 8004254:	490c      	ldr	r1, [pc, #48]	@ (8004288 <__NVIC_SetPriority+0x4c>)
 8004256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425a:	0112      	lsls	r2, r2, #4
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	440b      	add	r3, r1
 8004260:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004264:	e00a      	b.n	800427c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	b2da      	uxtb	r2, r3
 800426a:	4908      	ldr	r1, [pc, #32]	@ (800428c <__NVIC_SetPriority+0x50>)
 800426c:	79fb      	ldrb	r3, [r7, #7]
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	3b04      	subs	r3, #4
 8004274:	0112      	lsls	r2, r2, #4
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	440b      	add	r3, r1
 800427a:	761a      	strb	r2, [r3, #24]
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	e000e100 	.word	0xe000e100
 800428c:	e000ed00 	.word	0xe000ed00

08004290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004290:	b480      	push	{r7}
 8004292:	b089      	sub	sp, #36	@ 0x24
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	f1c3 0307 	rsb	r3, r3, #7
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	bf28      	it	cs
 80042ae:	2304      	movcs	r3, #4
 80042b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	3304      	adds	r3, #4
 80042b6:	2b06      	cmp	r3, #6
 80042b8:	d902      	bls.n	80042c0 <NVIC_EncodePriority+0x30>
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	3b03      	subs	r3, #3
 80042be:	e000      	b.n	80042c2 <NVIC_EncodePriority+0x32>
 80042c0:	2300      	movs	r3, #0
 80042c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042c4:	f04f 32ff 	mov.w	r2, #4294967295
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	43da      	mvns	r2, r3
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	401a      	ands	r2, r3
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042d8:	f04f 31ff 	mov.w	r1, #4294967295
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	fa01 f303 	lsl.w	r3, r1, r3
 80042e2:	43d9      	mvns	r1, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042e8:	4313      	orrs	r3, r2
         );
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3724      	adds	r7, #36	@ 0x24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
	...

080042f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3b01      	subs	r3, #1
 8004304:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004308:	d301      	bcc.n	800430e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800430a:	2301      	movs	r3, #1
 800430c:	e00f      	b.n	800432e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800430e:	4a0a      	ldr	r2, [pc, #40]	@ (8004338 <SysTick_Config+0x40>)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3b01      	subs	r3, #1
 8004314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004316:	210f      	movs	r1, #15
 8004318:	f04f 30ff 	mov.w	r0, #4294967295
 800431c:	f7ff ff8e 	bl	800423c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004320:	4b05      	ldr	r3, [pc, #20]	@ (8004338 <SysTick_Config+0x40>)
 8004322:	2200      	movs	r2, #0
 8004324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004326:	4b04      	ldr	r3, [pc, #16]	@ (8004338 <SysTick_Config+0x40>)
 8004328:	2207      	movs	r2, #7
 800432a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	e000e010 	.word	0xe000e010

0800433c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f7ff fec9 	bl	80040dc <__NVIC_SetPriorityGrouping>
}
 800434a:	bf00      	nop
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b086      	sub	sp, #24
 8004356:	af00      	add	r7, sp, #0
 8004358:	4603      	mov	r3, r0
 800435a:	60b9      	str	r1, [r7, #8]
 800435c:	607a      	str	r2, [r7, #4]
 800435e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004360:	f7ff fee0 	bl	8004124 <__NVIC_GetPriorityGrouping>
 8004364:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	68b9      	ldr	r1, [r7, #8]
 800436a:	6978      	ldr	r0, [r7, #20]
 800436c:	f7ff ff90 	bl	8004290 <NVIC_EncodePriority>
 8004370:	4602      	mov	r2, r0
 8004372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004376:	4611      	mov	r1, r2
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff ff5f 	bl	800423c <__NVIC_SetPriority>
}
 800437e:	bf00      	nop
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b082      	sub	sp, #8
 800438a:	af00      	add	r7, sp, #0
 800438c:	4603      	mov	r3, r0
 800438e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff fed3 	bl	8004140 <__NVIC_EnableIRQ>
}
 800439a:	bf00      	nop
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b082      	sub	sp, #8
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	4603      	mov	r3, r0
 80043aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80043ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff fee3 	bl	800417c <__NVIC_DisableIRQ>
}
 80043b6:	bf00      	nop
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b082      	sub	sp, #8
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff ff96 	bl	80042f8 <SysTick_Config>
 80043cc:	4603      	mov	r3, r0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b082      	sub	sp, #8
 80043da:	af00      	add	r7, sp, #0
 80043dc:	4603      	mov	r3, r0
 80043de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80043e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff feed 	bl	80041c4 <__NVIC_SetPendingIRQ>
}
 80043ea:	bf00      	nop
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b082      	sub	sp, #8
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	4603      	mov	r3, r0
 80043fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80043fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff fefd 	bl	8004200 <__NVIC_ClearPendingIRQ>
}
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800441a:	2300      	movs	r3, #0
 800441c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800441e:	e14c      	b.n	80046ba <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	2101      	movs	r1, #1
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	fa01 f303 	lsl.w	r3, r1, r3
 800442c:	4013      	ands	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 813e 	beq.w	80046b4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f003 0303 	and.w	r3, r3, #3
 8004440:	2b01      	cmp	r3, #1
 8004442:	d005      	beq.n	8004450 <HAL_GPIO_Init+0x40>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f003 0303 	and.w	r3, r3, #3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d130      	bne.n	80044b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	2203      	movs	r2, #3
 800445c:	fa02 f303 	lsl.w	r3, r2, r3
 8004460:	43db      	mvns	r3, r3
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4013      	ands	r3, r2
 8004466:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	4313      	orrs	r3, r2
 8004478:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004486:	2201      	movs	r2, #1
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	fa02 f303 	lsl.w	r3, r2, r3
 800448e:	43db      	mvns	r3, r3
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4013      	ands	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	091b      	lsrs	r3, r3, #4
 800449c:	f003 0201 	and.w	r2, r3, #1
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	fa02 f303 	lsl.w	r3, r2, r3
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	2b03      	cmp	r3, #3
 80044bc:	d017      	beq.n	80044ee <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	2203      	movs	r2, #3
 80044ca:	fa02 f303 	lsl.w	r3, r2, r3
 80044ce:	43db      	mvns	r3, r3
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	4013      	ands	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	fa02 f303 	lsl.w	r3, r2, r3
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d123      	bne.n	8004542 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	08da      	lsrs	r2, r3, #3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	3208      	adds	r2, #8
 8004502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004506:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	220f      	movs	r2, #15
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	43db      	mvns	r3, r3
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4013      	ands	r3, r2
 800451c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	691a      	ldr	r2, [r3, #16]
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	08da      	lsrs	r2, r3, #3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3208      	adds	r2, #8
 800453c:	6939      	ldr	r1, [r7, #16]
 800453e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	2203      	movs	r2, #3
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	43db      	mvns	r3, r3
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	4013      	ands	r3, r2
 8004558:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f003 0203 	and.w	r2, r3, #3
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	4313      	orrs	r3, r2
 800456e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 8098 	beq.w	80046b4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004584:	4a54      	ldr	r2, [pc, #336]	@ (80046d8 <HAL_GPIO_Init+0x2c8>)
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	089b      	lsrs	r3, r3, #2
 800458a:	3302      	adds	r3, #2
 800458c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004590:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f003 0303 	and.w	r3, r3, #3
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	220f      	movs	r2, #15
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	43db      	mvns	r3, r3
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4013      	ands	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80045ae:	d019      	beq.n	80045e4 <HAL_GPIO_Init+0x1d4>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a4a      	ldr	r2, [pc, #296]	@ (80046dc <HAL_GPIO_Init+0x2cc>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d013      	beq.n	80045e0 <HAL_GPIO_Init+0x1d0>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a49      	ldr	r2, [pc, #292]	@ (80046e0 <HAL_GPIO_Init+0x2d0>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d00d      	beq.n	80045dc <HAL_GPIO_Init+0x1cc>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a48      	ldr	r2, [pc, #288]	@ (80046e4 <HAL_GPIO_Init+0x2d4>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d007      	beq.n	80045d8 <HAL_GPIO_Init+0x1c8>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a47      	ldr	r2, [pc, #284]	@ (80046e8 <HAL_GPIO_Init+0x2d8>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d101      	bne.n	80045d4 <HAL_GPIO_Init+0x1c4>
 80045d0:	2304      	movs	r3, #4
 80045d2:	e008      	b.n	80045e6 <HAL_GPIO_Init+0x1d6>
 80045d4:	2307      	movs	r3, #7
 80045d6:	e006      	b.n	80045e6 <HAL_GPIO_Init+0x1d6>
 80045d8:	2303      	movs	r3, #3
 80045da:	e004      	b.n	80045e6 <HAL_GPIO_Init+0x1d6>
 80045dc:	2302      	movs	r3, #2
 80045de:	e002      	b.n	80045e6 <HAL_GPIO_Init+0x1d6>
 80045e0:	2301      	movs	r3, #1
 80045e2:	e000      	b.n	80045e6 <HAL_GPIO_Init+0x1d6>
 80045e4:	2300      	movs	r3, #0
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	f002 0203 	and.w	r2, r2, #3
 80045ec:	0092      	lsls	r2, r2, #2
 80045ee:	4093      	lsls	r3, r2
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80045f6:	4938      	ldr	r1, [pc, #224]	@ (80046d8 <HAL_GPIO_Init+0x2c8>)
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	089b      	lsrs	r3, r3, #2
 80045fc:	3302      	adds	r3, #2
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004604:	4b39      	ldr	r3, [pc, #228]	@ (80046ec <HAL_GPIO_Init+0x2dc>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	43db      	mvns	r3, r3
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4013      	ands	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4313      	orrs	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004628:	4a30      	ldr	r2, [pc, #192]	@ (80046ec <HAL_GPIO_Init+0x2dc>)
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800462e:	4b2f      	ldr	r3, [pc, #188]	@ (80046ec <HAL_GPIO_Init+0x2dc>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	43db      	mvns	r3, r3
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	4013      	ands	r3, r2
 800463c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004652:	4a26      	ldr	r2, [pc, #152]	@ (80046ec <HAL_GPIO_Init+0x2dc>)
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004658:	4b24      	ldr	r3, [pc, #144]	@ (80046ec <HAL_GPIO_Init+0x2dc>)
 800465a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800465e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	43db      	mvns	r3, r3
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4013      	ands	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4313      	orrs	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800467e:	4a1b      	ldr	r2, [pc, #108]	@ (80046ec <HAL_GPIO_Init+0x2dc>)
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8004686:	4b19      	ldr	r3, [pc, #100]	@ (80046ec <HAL_GPIO_Init+0x2dc>)
 8004688:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800468c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	43db      	mvns	r3, r3
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4013      	ands	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80046ac:	4a0f      	ldr	r2, [pc, #60]	@ (80046ec <HAL_GPIO_Init+0x2dc>)
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	3301      	adds	r3, #1
 80046b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	fa22 f303 	lsr.w	r3, r2, r3
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f47f aeab 	bne.w	8004420 <HAL_GPIO_Init+0x10>
  }
}
 80046ca:	bf00      	nop
 80046cc:	bf00      	nop
 80046ce:	371c      	adds	r7, #28
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	40010000 	.word	0x40010000
 80046dc:	48000400 	.word	0x48000400
 80046e0:	48000800 	.word	0x48000800
 80046e4:	48000c00 	.word	0x48000c00
 80046e8:	48001000 	.word	0x48001000
 80046ec:	58000800 	.word	0x58000800

080046f0 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	887b      	ldrh	r3, [r7, #2]
 8004702:	4013      	ands	r3, r2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004708:	2301      	movs	r3, #1
 800470a:	73fb      	strb	r3, [r7, #15]
 800470c:	e001      	b.n	8004712 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800470e:	2300      	movs	r3, #0
 8004710:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004712:	7bfb      	ldrb	r3, [r7, #15]
}
 8004714:	4618      	mov	r0, r3
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	460b      	mov	r3, r1
 800472a:	807b      	strh	r3, [r7, #2]
 800472c:	4613      	mov	r3, r2
 800472e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004730:	787b      	ldrb	r3, [r7, #1]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004736:	887a      	ldrh	r2, [r7, #2]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800473c:	e002      	b.n	8004744 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800473e:	887a      	ldrh	r2, [r7, #2]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	460b      	mov	r3, r1
 800475a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004762:	887a      	ldrh	r2, [r7, #2]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4013      	ands	r3, r2
 8004768:	041a      	lsls	r2, r3, #16
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	43d9      	mvns	r1, r3
 800476e:	887b      	ldrh	r3, [r7, #2]
 8004770:	400b      	ands	r3, r1
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	619a      	str	r2, [r3, #24]
}
 8004778:	bf00      	nop
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	4603      	mov	r3, r0
 800478c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800478e:	4b08      	ldr	r3, [pc, #32]	@ (80047b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	88fb      	ldrh	r3, [r7, #6]
 8004794:	4013      	ands	r3, r2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d006      	beq.n	80047a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800479a:	4a05      	ldr	r2, [pc, #20]	@ (80047b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800479c:	88fb      	ldrh	r3, [r7, #6]
 800479e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047a0:	88fb      	ldrh	r3, [r7, #6]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 f806 	bl	80047b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80047a8:	bf00      	nop
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	58000800 	.word	0x58000800

080047b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	4603      	mov	r3, r0
 80047bc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
	...

080047cc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80047d2:	4b0a      	ldr	r3, [pc, #40]	@ (80047fc <HAL_HSEM_IRQHandler+0x30>)
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80047d8:	4b08      	ldr	r3, [pc, #32]	@ (80047fc <HAL_HSEM_IRQHandler+0x30>)
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	43db      	mvns	r3, r3
 80047e0:	4906      	ldr	r1, [pc, #24]	@ (80047fc <HAL_HSEM_IRQHandler+0x30>)
 80047e2:	4013      	ands	r3, r2
 80047e4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80047e6:	4a05      	ldr	r2, [pc, #20]	@ (80047fc <HAL_HSEM_IRQHandler+0x30>)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f807 	bl	8004800 <HAL_HSEM_FreeCallback>
}
 80047f2:	bf00      	nop
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	58001500 	.word	0x58001500

08004800 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d01e      	beq.n	8004864 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004826:	4b13      	ldr	r3, [pc, #76]	@ (8004874 <HAL_IPCC_Init+0x60>)
 8004828:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d102      	bne.n	800483c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fe fe8a 	bl	8003550 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800483c:	68b8      	ldr	r0, [r7, #8]
 800483e:	f000 f85b 	bl	80048f8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f82c 	bl	80048ac <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8004862:	e001      	b.n	8004868 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004868:	7bfb      	ldrb	r3, [r7, #15]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	58000c00 	.word	0x58000c00

08004878 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	4613      	mov	r3, r2
 8004884:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004886:	bf00      	nop
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004892:	b480      	push	{r7}
 8004894:	b085      	sub	sp, #20
 8004896:	af00      	add	r7, sp, #0
 8004898:	60f8      	str	r0, [r7, #12]
 800489a:	60b9      	str	r1, [r7, #8]
 800489c:	4613      	mov	r3, r2
 800489e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	e00f      	b.n	80048da <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	4a0b      	ldr	r2, [pc, #44]	@ (80048f0 <IPCC_SetDefaultCallbacks+0x44>)
 80048c4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	3306      	adds	r3, #6
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	4a08      	ldr	r2, [pc, #32]	@ (80048f4 <IPCC_SetDefaultCallbacks+0x48>)
 80048d2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	3301      	adds	r3, #1
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b05      	cmp	r3, #5
 80048de:	d9ec      	bls.n	80048ba <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80048e0:	bf00      	nop
 80048e2:	bf00      	nop
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	08004879 	.word	0x08004879
 80048f4:	08004893 	.word	0x08004893

080048f8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800490c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	223f      	movs	r2, #63	@ 0x3f
 8004912:	609a      	str	r2, [r3, #8]
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004924:	4b05      	ldr	r3, [pc, #20]	@ (800493c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a04      	ldr	r2, [pc, #16]	@ (800493c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800492a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800492e:	6013      	str	r3, [r2, #0]
}
 8004930:	bf00      	nop
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	58000400 	.word	0x58000400

08004940 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004944:	4b04      	ldr	r3, [pc, #16]	@ (8004958 <HAL_PWREx_GetVoltageRange+0x18>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800494c:	4618      	mov	r0, r3
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	58000400 	.word	0x58000400

0800495c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004960:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800496a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800496e:	d101      	bne.n	8004974 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004970:	2301      	movs	r3, #1
 8004972:	e000      	b.n	8004976 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <LL_RCC_HSE_Enable>:
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004984:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800498e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004992:	6013      	str	r3, [r2, #0]
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <LL_RCC_HSE_Disable>:
{
 800499e:	b480      	push	{r7}
 80049a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80049a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049b0:	6013      	str	r3, [r2, #0]
}
 80049b2:	bf00      	nop
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <LL_RCC_HSE_IsReady>:
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80049c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049ce:	d101      	bne.n	80049d4 <LL_RCC_HSE_IsReady+0x18>
 80049d0:	2301      	movs	r3, #1
 80049d2:	e000      	b.n	80049d6 <LL_RCC_HSE_IsReady+0x1a>
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <LL_RCC_HSI_Enable>:
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80049e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049f2:	6013      	str	r3, [r2, #0]
}
 80049f4:	bf00      	nop
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <LL_RCC_HSI_Disable>:
{
 80049fe:	b480      	push	{r7}
 8004a00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004a02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a10:	6013      	str	r3, [r2, #0]
}
 8004a12:	bf00      	nop
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <LL_RCC_HSI_IsReady>:
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004a20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a2e:	d101      	bne.n	8004a34 <LL_RCC_HSI_IsReady+0x18>
 8004a30:	2301      	movs	r3, #1
 8004a32:	e000      	b.n	8004a36 <LL_RCC_HSI_IsReady+0x1a>
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004a48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	061b      	lsls	r3, r3, #24
 8004a56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	604b      	str	r3, [r1, #4]
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <LL_RCC_HSI48_Enable>:
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a7a:	f043 0301 	orr.w	r3, r3, #1
 8004a7e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8004a82:	bf00      	nop
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <LL_RCC_HSI48_Disable>:
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a9c:	f023 0301 	bic.w	r3, r3, #1
 8004aa0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8004aa4:	bf00      	nop
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <LL_RCC_HSI48_IsReady>:
{
 8004aae:	b480      	push	{r7}
 8004ab0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004ab2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ab6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d101      	bne.n	8004ac6 <LL_RCC_HSI48_IsReady+0x18>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e000      	b.n	8004ac8 <LL_RCC_HSI48_IsReady+0x1a>
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <LL_RCC_LSE_Enable>:
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004ad6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ade:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ae2:	f043 0301 	orr.w	r3, r3, #1
 8004ae6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004aea:	bf00      	nop
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <LL_RCC_LSE_Disable>:
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b04:	f023 0301 	bic.w	r3, r3, #1
 8004b08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004b0c:	bf00      	nop
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <LL_RCC_LSE_EnableBypass>:
{
 8004b16:	b480      	push	{r7}
 8004b18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004b1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b26:	f043 0304 	orr.w	r3, r3, #4
 8004b2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004b2e:	bf00      	nop
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <LL_RCC_LSE_DisableBypass>:
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004b3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b48:	f023 0304 	bic.w	r3, r3, #4
 8004b4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004b50:	bf00      	nop
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <LL_RCC_LSE_IsReady>:
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004b5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d101      	bne.n	8004b72 <LL_RCC_LSE_IsReady+0x18>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <LL_RCC_LSE_IsReady+0x1a>
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <LL_RCC_LSI1_Enable>:
{
 8004b7e:	b480      	push	{r7}
 8004b80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004b82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b8e:	f043 0301 	orr.w	r3, r3, #1
 8004b92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004b96:	bf00      	nop
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <LL_RCC_LSI1_Disable>:
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bb0:	f023 0301 	bic.w	r3, r3, #1
 8004bb4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004bb8:	bf00      	nop
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <LL_RCC_LSI1_IsReady>:
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004bc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d101      	bne.n	8004bda <LL_RCC_LSI1_IsReady+0x18>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <LL_RCC_LSI1_IsReady+0x1a>
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <LL_RCC_LSI2_Enable>:
{
 8004be6:	b480      	push	{r7}
 8004be8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004bea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bf2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bf6:	f043 0304 	orr.w	r3, r3, #4
 8004bfa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004bfe:	bf00      	nop
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <LL_RCC_LSI2_Disable>:
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c18:	f023 0304 	bic.w	r3, r3, #4
 8004c1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004c20:	bf00      	nop
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <LL_RCC_LSI2_IsReady>:
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004c2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c36:	f003 0308 	and.w	r3, r3, #8
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	d101      	bne.n	8004c42 <LL_RCC_LSI2_IsReady+0x18>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e000      	b.n	8004c44 <LL_RCC_LSI2_IsReady+0x1a>
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <LL_RCC_LSI2_SetTrimming>:
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004c56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c5e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	021b      	lsls	r3, r3, #8
 8004c66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <LL_RCC_MSI_Enable>:
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004c80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c8a:	f043 0301 	orr.w	r3, r3, #1
 8004c8e:	6013      	str	r3, [r2, #0]
}
 8004c90:	bf00      	nop
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <LL_RCC_MSI_Disable>:
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004c9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ca8:	f023 0301 	bic.w	r3, r3, #1
 8004cac:	6013      	str	r3, [r2, #0]
}
 8004cae:	bf00      	nop
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <LL_RCC_MSI_IsReady>:
{
 8004cb8:	b480      	push	{r7}
 8004cba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004cbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d101      	bne.n	8004cce <LL_RCC_MSI_IsReady+0x16>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <LL_RCC_MSI_IsReady+0x18>
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <LL_RCC_MSI_SetRange>:
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004ce2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	600b      	str	r3, [r1, #0]
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <LL_RCC_MSI_GetRange>:
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d12:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2bb0      	cmp	r3, #176	@ 0xb0
 8004d18:	d901      	bls.n	8004d1e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004d1a:	23b0      	movs	r3, #176	@ 0xb0
 8004d1c:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004d1e:	687b      	ldr	r3, [r7, #4]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <LL_RCC_MSI_SetCalibTrimming>:
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004d34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	021b      	lsls	r3, r3, #8
 8004d42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d46:	4313      	orrs	r3, r2
 8004d48:	604b      	str	r3, [r1, #4]
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <LL_RCC_SetSysClkSource>:
{
 8004d56:	b480      	push	{r7}
 8004d58:	b083      	sub	sp, #12
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004d5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f023 0203 	bic.w	r2, r3, #3
 8004d68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	608b      	str	r3, [r1, #8]
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <LL_RCC_GetSysClkSource>:
{
 8004d7e:	b480      	push	{r7}
 8004d80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004d82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 030c 	and.w	r3, r3, #12
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <LL_RCC_SetAHBPrescaler>:
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004d9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004da8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	608b      	str	r3, [r1, #8]
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <LL_C2_RCC_SetAHBPrescaler>:
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004dc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dca:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004dce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004dde:	bf00      	nop
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <LL_RCC_SetAHB4Prescaler>:
{
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004df2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004df6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004dfa:	f023 020f 	bic.w	r2, r3, #15
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	091b      	lsrs	r3, r3, #4
 8004e02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <LL_RCC_SetAPB1Prescaler>:
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004e20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	608b      	str	r3, [r1, #8]
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <LL_RCC_SetAPB2Prescaler>:
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004e48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	608b      	str	r3, [r1, #8]
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <LL_RCC_GetAHBPrescaler>:
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004e6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <LL_RCC_GetAHB4Prescaler>:
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004e84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e88:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <LL_RCC_GetAPB1Prescaler>:
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <LL_RCC_GetAPB2Prescaler>:
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004eb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004ed0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004eda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ede:	6013      	str	r3, [r2, #0]
}
 8004ee0:	bf00      	nop
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004eea:	b480      	push	{r7}
 8004eec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004eee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ef8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004efc:	6013      	str	r3, [r2, #0]
}
 8004efe:	bf00      	nop
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004f0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f1a:	d101      	bne.n	8004f20 <LL_RCC_PLL_IsReady+0x18>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e000      	b.n	8004f22 <LL_RCC_PLL_IsReady+0x1a>
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004f30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	0a1b      	lsrs	r3, r3, #8
 8004f38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004f46:	b480      	push	{r7}
 8004f48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004f4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004f62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004f76:	b480      	push	{r7}
 8004f78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004f7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f003 0303 	and.w	r3, r3, #3
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004f92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fa0:	d101      	bne.n	8004fa6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e000      	b.n	8004fa8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004fb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fba:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fc6:	d101      	bne.n	8004fcc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e000      	b.n	8004fce <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004fdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fe0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004fe4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fec:	d101      	bne.n	8004ff2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e000      	b.n	8004ff4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004ffe:	b480      	push	{r7}
 8005000:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800500c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005010:	d101      	bne.n	8005016 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005012:	2301      	movs	r3, #1
 8005014:	e000      	b.n	8005018 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005022:	b480      	push	{r7}
 8005024:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005026:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005030:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005034:	d101      	bne.n	800503a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
	...

08005048 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005048:	b590      	push	{r4, r7, lr}
 800504a:	b08d      	sub	sp, #52	@ 0x34
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e363      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0320 	and.w	r3, r3, #32
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 808d 	beq.w	8005182 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005068:	f7ff fe89 	bl	8004d7e <LL_RCC_GetSysClkSource>
 800506c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800506e:	f7ff ff82 	bl	8004f76 <LL_RCC_PLL_GetMainSource>
 8005072:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005076:	2b00      	cmp	r3, #0
 8005078:	d005      	beq.n	8005086 <HAL_RCC_OscConfig+0x3e>
 800507a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800507c:	2b0c      	cmp	r3, #12
 800507e:	d147      	bne.n	8005110 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005082:	2b01      	cmp	r3, #1
 8005084:	d144      	bne.n	8005110 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e347      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005096:	f7ff fe34 	bl	8004d02 <LL_RCC_MSI_GetRange>
 800509a:	4603      	mov	r3, r0
 800509c:	429c      	cmp	r4, r3
 800509e:	d914      	bls.n	80050ca <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 fd2f 	bl	8005b08 <RCC_SetFlashLatencyFromMSIRange>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d001      	beq.n	80050b4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e336      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7ff fe0e 	bl	8004cda <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7ff fe32 	bl	8004d2c <LL_RCC_MSI_SetCalibTrimming>
 80050c8:	e013      	b.n	80050f2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff fe03 	bl	8004cda <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	4618      	mov	r0, r3
 80050da:	f7ff fe27 	bl	8004d2c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 fd10 	bl	8005b08 <RCC_SetFlashLatencyFromMSIRange>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e317      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80050f2:	f000 fcc9 	bl	8005a88 <HAL_RCC_GetHCLKFreq>
 80050f6:	4603      	mov	r3, r0
 80050f8:	4aa4      	ldr	r2, [pc, #656]	@ (800538c <HAL_RCC_OscConfig+0x344>)
 80050fa:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80050fc:	4ba4      	ldr	r3, [pc, #656]	@ (8005390 <HAL_RCC_OscConfig+0x348>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4618      	mov	r0, r3
 8005102:	f7fe ff79 	bl	8003ff8 <HAL_InitTick>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d039      	beq.n	8005180 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e308      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d01e      	beq.n	8005156 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005118:	f7ff fdb0 	bl	8004c7c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800511c:	f7fe ffba 	bl	8004094 <HAL_GetTick>
 8005120:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005124:	f7fe ffb6 	bl	8004094 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e2f5      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005136:	f7ff fdbf 	bl	8004cb8 <LL_RCC_MSI_IsReady>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0f1      	beq.n	8005124 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005144:	4618      	mov	r0, r3
 8005146:	f7ff fdc8 	bl	8004cda <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff fdec 	bl	8004d2c <LL_RCC_MSI_SetCalibTrimming>
 8005154:	e015      	b.n	8005182 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005156:	f7ff fda0 	bl	8004c9a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800515a:	f7fe ff9b 	bl	8004094 <HAL_GetTick>
 800515e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005160:	e008      	b.n	8005174 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005162:	f7fe ff97 	bl	8004094 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d901      	bls.n	8005174 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e2d6      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005174:	f7ff fda0 	bl	8004cb8 <LL_RCC_MSI_IsReady>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1f1      	bne.n	8005162 <HAL_RCC_OscConfig+0x11a>
 800517e:	e000      	b.n	8005182 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005180:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d047      	beq.n	800521e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800518e:	f7ff fdf6 	bl	8004d7e <LL_RCC_GetSysClkSource>
 8005192:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005194:	f7ff feef 	bl	8004f76 <LL_RCC_PLL_GetMainSource>
 8005198:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	2b08      	cmp	r3, #8
 800519e:	d005      	beq.n	80051ac <HAL_RCC_OscConfig+0x164>
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	2b0c      	cmp	r3, #12
 80051a4:	d108      	bne.n	80051b8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d105      	bne.n	80051b8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d134      	bne.n	800521e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e2b4      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051c0:	d102      	bne.n	80051c8 <HAL_RCC_OscConfig+0x180>
 80051c2:	f7ff fbdd 	bl	8004980 <LL_RCC_HSE_Enable>
 80051c6:	e001      	b.n	80051cc <HAL_RCC_OscConfig+0x184>
 80051c8:	f7ff fbe9 	bl	800499e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d012      	beq.n	80051fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d4:	f7fe ff5e 	bl	8004094 <HAL_GetTick>
 80051d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051dc:	f7fe ff5a 	bl	8004094 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b64      	cmp	r3, #100	@ 0x64
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e299      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80051ee:	f7ff fbe5 	bl	80049bc <LL_RCC_HSE_IsReady>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0f1      	beq.n	80051dc <HAL_RCC_OscConfig+0x194>
 80051f8:	e011      	b.n	800521e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051fa:	f7fe ff4b 	bl	8004094 <HAL_GetTick>
 80051fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005200:	e008      	b.n	8005214 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005202:	f7fe ff47 	bl	8004094 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b64      	cmp	r3, #100	@ 0x64
 800520e:	d901      	bls.n	8005214 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e286      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005214:	f7ff fbd2 	bl	80049bc <LL_RCC_HSE_IsReady>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1f1      	bne.n	8005202 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d04c      	beq.n	80052c4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800522a:	f7ff fda8 	bl	8004d7e <LL_RCC_GetSysClkSource>
 800522e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005230:	f7ff fea1 	bl	8004f76 <LL_RCC_PLL_GetMainSource>
 8005234:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	2b04      	cmp	r3, #4
 800523a:	d005      	beq.n	8005248 <HAL_RCC_OscConfig+0x200>
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	2b0c      	cmp	r3, #12
 8005240:	d10e      	bne.n	8005260 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b02      	cmp	r3, #2
 8005246:	d10b      	bne.n	8005260 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e266      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff fbf1 	bl	8004a40 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800525e:	e031      	b.n	80052c4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d019      	beq.n	800529c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005268:	f7ff fbba 	bl	80049e0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526c:	f7fe ff12 	bl	8004094 <HAL_GetTick>
 8005270:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005272:	e008      	b.n	8005286 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005274:	f7fe ff0e 	bl	8004094 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e24d      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005286:	f7ff fbc9 	bl	8004a1c <LL_RCC_HSI_IsReady>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0f1      	beq.n	8005274 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	4618      	mov	r0, r3
 8005296:	f7ff fbd3 	bl	8004a40 <LL_RCC_HSI_SetCalibTrimming>
 800529a:	e013      	b.n	80052c4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800529c:	f7ff fbaf 	bl	80049fe <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a0:	f7fe fef8 	bl	8004094 <HAL_GetTick>
 80052a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052a8:	f7fe fef4 	bl	8004094 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e233      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80052ba:	f7ff fbaf 	bl	8004a1c <LL_RCC_HSI_IsReady>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1f1      	bne.n	80052a8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0308 	and.w	r3, r3, #8
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d106      	bne.n	80052de <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 80a3 	beq.w	8005424 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d076      	beq.n	80053d4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0310 	and.w	r3, r3, #16
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d046      	beq.n	8005380 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80052f2:	f7ff fc66 	bl	8004bc2 <LL_RCC_LSI1_IsReady>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d113      	bne.n	8005324 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80052fc:	f7ff fc3f 	bl	8004b7e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005300:	f7fe fec8 	bl	8004094 <HAL_GetTick>
 8005304:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005308:	f7fe fec4 	bl	8004094 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e203      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800531a:	f7ff fc52 	bl	8004bc2 <LL_RCC_LSI1_IsReady>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d0f1      	beq.n	8005308 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005324:	f7ff fc5f 	bl	8004be6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005328:	f7fe feb4 	bl	8004094 <HAL_GetTick>
 800532c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005330:	f7fe feb0 	bl	8004094 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b03      	cmp	r3, #3
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e1ef      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005342:	f7ff fc72 	bl	8004c2a <LL_RCC_LSI2_IsReady>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0f1      	beq.n	8005330 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	4618      	mov	r0, r3
 8005352:	f7ff fc7c 	bl	8004c4e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005356:	f7ff fc23 	bl	8004ba0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535a:	f7fe fe9b 	bl	8004094 <HAL_GetTick>
 800535e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005360:	e008      	b.n	8005374 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005362:	f7fe fe97 	bl	8004094 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b02      	cmp	r3, #2
 800536e:	d901      	bls.n	8005374 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e1d6      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005374:	f7ff fc25 	bl	8004bc2 <LL_RCC_LSI1_IsReady>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1f1      	bne.n	8005362 <HAL_RCC_OscConfig+0x31a>
 800537e:	e051      	b.n	8005424 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005380:	f7ff fbfd 	bl	8004b7e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005384:	f7fe fe86 	bl	8004094 <HAL_GetTick>
 8005388:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800538a:	e00c      	b.n	80053a6 <HAL_RCC_OscConfig+0x35e>
 800538c:	20000008 	.word	0x20000008
 8005390:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005394:	f7fe fe7e 	bl	8004094 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e1bd      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80053a6:	f7ff fc0c 	bl	8004bc2 <LL_RCC_LSI1_IsReady>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0f1      	beq.n	8005394 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80053b0:	f7ff fc2a 	bl	8004c08 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80053b4:	e008      	b.n	80053c8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80053b6:	f7fe fe6d 	bl	8004094 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b03      	cmp	r3, #3
 80053c2:	d901      	bls.n	80053c8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e1ac      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80053c8:	f7ff fc2f 	bl	8004c2a <LL_RCC_LSI2_IsReady>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f1      	bne.n	80053b6 <HAL_RCC_OscConfig+0x36e>
 80053d2:	e027      	b.n	8005424 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80053d4:	f7ff fc18 	bl	8004c08 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d8:	f7fe fe5c 	bl	8004094 <HAL_GetTick>
 80053dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80053e0:	f7fe fe58 	bl	8004094 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b03      	cmp	r3, #3
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e197      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80053f2:	f7ff fc1a 	bl	8004c2a <LL_RCC_LSI2_IsReady>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1f1      	bne.n	80053e0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80053fc:	f7ff fbd0 	bl	8004ba0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005400:	f7fe fe48 	bl	8004094 <HAL_GetTick>
 8005404:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005406:	e008      	b.n	800541a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005408:	f7fe fe44 	bl	8004094 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e183      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800541a:	f7ff fbd2 	bl	8004bc2 <LL_RCC_LSI1_IsReady>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1f1      	bne.n	8005408 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b00      	cmp	r3, #0
 800542e:	d05b      	beq.n	80054e8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005430:	4ba7      	ldr	r3, [pc, #668]	@ (80056d0 <HAL_RCC_OscConfig+0x688>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005438:	2b00      	cmp	r3, #0
 800543a:	d114      	bne.n	8005466 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800543c:	f7ff fa70 	bl	8004920 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005440:	f7fe fe28 	bl	8004094 <HAL_GetTick>
 8005444:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005448:	f7fe fe24 	bl	8004094 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e163      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800545a:	4b9d      	ldr	r3, [pc, #628]	@ (80056d0 <HAL_RCC_OscConfig+0x688>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0f0      	beq.n	8005448 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d102      	bne.n	8005474 <HAL_RCC_OscConfig+0x42c>
 800546e:	f7ff fb30 	bl	8004ad2 <LL_RCC_LSE_Enable>
 8005472:	e00c      	b.n	800548e <HAL_RCC_OscConfig+0x446>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2b05      	cmp	r3, #5
 800547a:	d104      	bne.n	8005486 <HAL_RCC_OscConfig+0x43e>
 800547c:	f7ff fb4b 	bl	8004b16 <LL_RCC_LSE_EnableBypass>
 8005480:	f7ff fb27 	bl	8004ad2 <LL_RCC_LSE_Enable>
 8005484:	e003      	b.n	800548e <HAL_RCC_OscConfig+0x446>
 8005486:	f7ff fb35 	bl	8004af4 <LL_RCC_LSE_Disable>
 800548a:	f7ff fb55 	bl	8004b38 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d014      	beq.n	80054c0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005496:	f7fe fdfd 	bl	8004094 <HAL_GetTick>
 800549a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800549c:	e00a      	b.n	80054b4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800549e:	f7fe fdf9 	bl	8004094 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e136      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80054b4:	f7ff fb51 	bl	8004b5a <LL_RCC_LSE_IsReady>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d0ef      	beq.n	800549e <HAL_RCC_OscConfig+0x456>
 80054be:	e013      	b.n	80054e8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c0:	f7fe fde8 	bl	8004094 <HAL_GetTick>
 80054c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80054c6:	e00a      	b.n	80054de <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054c8:	f7fe fde4 	bl	8004094 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e121      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80054de:	f7ff fb3c 	bl	8004b5a <LL_RCC_LSE_IsReady>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1ef      	bne.n	80054c8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d02c      	beq.n	800554e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d014      	beq.n	8005526 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054fc:	f7ff fab5 	bl	8004a6a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005500:	f7fe fdc8 	bl	8004094 <HAL_GetTick>
 8005504:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005506:	e008      	b.n	800551a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005508:	f7fe fdc4 	bl	8004094 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d901      	bls.n	800551a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e103      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800551a:	f7ff fac8 	bl	8004aae <LL_RCC_HSI48_IsReady>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d0f1      	beq.n	8005508 <HAL_RCC_OscConfig+0x4c0>
 8005524:	e013      	b.n	800554e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005526:	f7ff fab1 	bl	8004a8c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800552a:	f7fe fdb3 	bl	8004094 <HAL_GetTick>
 800552e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005530:	e008      	b.n	8005544 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005532:	f7fe fdaf 	bl	8004094 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	2b02      	cmp	r3, #2
 800553e:	d901      	bls.n	8005544 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e0ee      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005544:	f7ff fab3 	bl	8004aae <LL_RCC_HSI48_IsReady>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1f1      	bne.n	8005532 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 80e4 	beq.w	8005720 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005558:	f7ff fc11 	bl	8004d7e <LL_RCC_GetSysClkSource>
 800555c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800555e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556a:	2b02      	cmp	r3, #2
 800556c:	f040 80b4 	bne.w	80056d8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f003 0203 	and.w	r2, r3, #3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800557a:	429a      	cmp	r2, r3
 800557c:	d123      	bne.n	80055c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005588:	429a      	cmp	r2, r3
 800558a:	d11c      	bne.n	80055c6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	0a1b      	lsrs	r3, r3, #8
 8005590:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005598:	429a      	cmp	r2, r3
 800559a:	d114      	bne.n	80055c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d10d      	bne.n	80055c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d106      	bne.n	80055c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d05d      	beq.n	8005682 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	2b0c      	cmp	r3, #12
 80055ca:	d058      	beq.n	800567e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80055cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e0a1      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80055de:	f7ff fc84 	bl	8004eea <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80055e2:	f7fe fd57 	bl	8004094 <HAL_GetTick>
 80055e6:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055e8:	e008      	b.n	80055fc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ea:	f7fe fd53 	bl	8004094 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e092      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1ef      	bne.n	80055ea <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800560a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	4b30      	ldr	r3, [pc, #192]	@ (80056d4 <HAL_RCC_OscConfig+0x68c>)
 8005612:	4013      	ands	r3, r2
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800561c:	4311      	orrs	r1, r2
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005622:	0212      	lsls	r2, r2, #8
 8005624:	4311      	orrs	r1, r2
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800562a:	4311      	orrs	r1, r2
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005630:	4311      	orrs	r1, r2
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005636:	430a      	orrs	r2, r1
 8005638:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800563c:	4313      	orrs	r3, r2
 800563e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005640:	f7ff fc44 	bl	8004ecc <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005644:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800564e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005652:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005654:	f7fe fd1e 	bl	8004094 <HAL_GetTick>
 8005658:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800565c:	f7fe fd1a 	bl	8004094 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e059      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800566e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d0ef      	beq.n	800565c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800567c:	e050      	b.n	8005720 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e04f      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005682:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d147      	bne.n	8005720 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005690:	f7ff fc1c 	bl	8004ecc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005694:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800569e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80056a4:	f7fe fcf6 	bl	8004094 <HAL_GetTick>
 80056a8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ac:	f7fe fcf2 	bl	8004094 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e031      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0ef      	beq.n	80056ac <HAL_RCC_OscConfig+0x664>
 80056cc:	e028      	b.n	8005720 <HAL_RCC_OscConfig+0x6d8>
 80056ce:	bf00      	nop
 80056d0:	58000400 	.word	0x58000400
 80056d4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	2b0c      	cmp	r3, #12
 80056dc:	d01e      	beq.n	800571c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056de:	f7ff fc04 	bl	8004eea <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e2:	f7fe fcd7 	bl	8004094 <HAL_GetTick>
 80056e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056e8:	e008      	b.n	80056fc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ea:	f7fe fcd3 	bl	8004094 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d901      	bls.n	80056fc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e012      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1ef      	bne.n	80056ea <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800570a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800570e:	68da      	ldr	r2, [r3, #12]
 8005710:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005714:	4b05      	ldr	r3, [pc, #20]	@ (800572c <HAL_RCC_OscConfig+0x6e4>)
 8005716:	4013      	ands	r3, r2
 8005718:	60cb      	str	r3, [r1, #12]
 800571a:	e001      	b.n	8005720 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e000      	b.n	8005722 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3734      	adds	r7, #52	@ 0x34
 8005726:	46bd      	mov	sp, r7
 8005728:	bd90      	pop	{r4, r7, pc}
 800572a:	bf00      	nop
 800572c:	eefefffc 	.word	0xeefefffc

08005730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e12d      	b.n	80059a0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005744:	4b98      	ldr	r3, [pc, #608]	@ (80059a8 <HAL_RCC_ClockConfig+0x278>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0307 	and.w	r3, r3, #7
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	429a      	cmp	r2, r3
 8005750:	d91b      	bls.n	800578a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005752:	4b95      	ldr	r3, [pc, #596]	@ (80059a8 <HAL_RCC_ClockConfig+0x278>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f023 0207 	bic.w	r2, r3, #7
 800575a:	4993      	ldr	r1, [pc, #588]	@ (80059a8 <HAL_RCC_ClockConfig+0x278>)
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	4313      	orrs	r3, r2
 8005760:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005762:	f7fe fc97 	bl	8004094 <HAL_GetTick>
 8005766:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005768:	e008      	b.n	800577c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800576a:	f7fe fc93 	bl	8004094 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d901      	bls.n	800577c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e111      	b.n	80059a0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800577c:	4b8a      	ldr	r3, [pc, #552]	@ (80059a8 <HAL_RCC_ClockConfig+0x278>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	429a      	cmp	r2, r3
 8005788:	d1ef      	bne.n	800576a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d016      	beq.n	80057c4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff fafb 	bl	8004d96 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80057a0:	f7fe fc78 	bl	8004094 <HAL_GetTick>
 80057a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80057a8:	f7fe fc74 	bl	8004094 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e0f2      	b.n	80059a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80057ba:	f7ff fbe8 	bl	8004f8e <LL_RCC_IsActiveFlag_HPRE>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0f1      	beq.n	80057a8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0320 	and.w	r3, r3, #32
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d016      	beq.n	80057fe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7ff faf2 	bl	8004dbe <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80057da:	f7fe fc5b 	bl	8004094 <HAL_GetTick>
 80057de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80057e0:	e008      	b.n	80057f4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80057e2:	f7fe fc57 	bl	8004094 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e0d5      	b.n	80059a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80057f4:	f7ff fbdd 	bl	8004fb2 <LL_RCC_IsActiveFlag_C2HPRE>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d0f1      	beq.n	80057e2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005806:	2b00      	cmp	r3, #0
 8005808:	d016      	beq.n	8005838 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff faeb 	bl	8004dea <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005814:	f7fe fc3e 	bl	8004094 <HAL_GetTick>
 8005818:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800581a:	e008      	b.n	800582e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800581c:	f7fe fc3a 	bl	8004094 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d901      	bls.n	800582e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e0b8      	b.n	80059a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800582e:	f7ff fbd3 	bl	8004fd8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0f1      	beq.n	800581c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	2b00      	cmp	r3, #0
 8005842:	d016      	beq.n	8005872 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff fae5 	bl	8004e18 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800584e:	f7fe fc21 	bl	8004094 <HAL_GetTick>
 8005852:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005854:	e008      	b.n	8005868 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005856:	f7fe fc1d 	bl	8004094 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	2b02      	cmp	r3, #2
 8005862:	d901      	bls.n	8005868 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e09b      	b.n	80059a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005868:	f7ff fbc9 	bl	8004ffe <LL_RCC_IsActiveFlag_PPRE1>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0f1      	beq.n	8005856 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0308 	and.w	r3, r3, #8
 800587a:	2b00      	cmp	r3, #0
 800587c:	d017      	beq.n	80058ae <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	4618      	mov	r0, r3
 8005886:	f7ff fadb 	bl	8004e40 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800588a:	f7fe fc03 	bl	8004094 <HAL_GetTick>
 800588e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005890:	e008      	b.n	80058a4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005892:	f7fe fbff 	bl	8004094 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d901      	bls.n	80058a4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e07d      	b.n	80059a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80058a4:	f7ff fbbd 	bl	8005022 <LL_RCC_IsActiveFlag_PPRE2>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0f1      	beq.n	8005892 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d043      	beq.n	8005942 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d106      	bne.n	80058d0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80058c2:	f7ff f87b 	bl	80049bc <LL_RCC_HSE_IsReady>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d11e      	bne.n	800590a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e067      	b.n	80059a0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	2b03      	cmp	r3, #3
 80058d6:	d106      	bne.n	80058e6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80058d8:	f7ff fb16 	bl	8004f08 <LL_RCC_PLL_IsReady>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d113      	bne.n	800590a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e05c      	b.n	80059a0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d106      	bne.n	80058fc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80058ee:	f7ff f9e3 	bl	8004cb8 <LL_RCC_MSI_IsReady>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d108      	bne.n	800590a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e051      	b.n	80059a0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80058fc:	f7ff f88e 	bl	8004a1c <LL_RCC_HSI_IsReady>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e04a      	b.n	80059a0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff fa21 	bl	8004d56 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005914:	f7fe fbbe 	bl	8004094 <HAL_GetTick>
 8005918:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800591a:	e00a      	b.n	8005932 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800591c:	f7fe fbba 	bl	8004094 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800592a:	4293      	cmp	r3, r2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e036      	b.n	80059a0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005932:	f7ff fa24 	bl	8004d7e <LL_RCC_GetSysClkSource>
 8005936:	4602      	mov	r2, r0
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	429a      	cmp	r2, r3
 8005940:	d1ec      	bne.n	800591c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005942:	4b19      	ldr	r3, [pc, #100]	@ (80059a8 <HAL_RCC_ClockConfig+0x278>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0307 	and.w	r3, r3, #7
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	429a      	cmp	r2, r3
 800594e:	d21b      	bcs.n	8005988 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005950:	4b15      	ldr	r3, [pc, #84]	@ (80059a8 <HAL_RCC_ClockConfig+0x278>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f023 0207 	bic.w	r2, r3, #7
 8005958:	4913      	ldr	r1, [pc, #76]	@ (80059a8 <HAL_RCC_ClockConfig+0x278>)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	4313      	orrs	r3, r2
 800595e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005960:	f7fe fb98 	bl	8004094 <HAL_GetTick>
 8005964:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005966:	e008      	b.n	800597a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005968:	f7fe fb94 	bl	8004094 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d901      	bls.n	800597a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e012      	b.n	80059a0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800597a:	4b0b      	ldr	r3, [pc, #44]	@ (80059a8 <HAL_RCC_ClockConfig+0x278>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	429a      	cmp	r2, r3
 8005986:	d1ef      	bne.n	8005968 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005988:	f000 f87e 	bl	8005a88 <HAL_RCC_GetHCLKFreq>
 800598c:	4603      	mov	r3, r0
 800598e:	4a07      	ldr	r2, [pc, #28]	@ (80059ac <HAL_RCC_ClockConfig+0x27c>)
 8005990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005992:	f7fe fb8b 	bl	80040ac <HAL_GetTickPrio>
 8005996:	4603      	mov	r3, r0
 8005998:	4618      	mov	r0, r3
 800599a:	f7fe fb2d 	bl	8003ff8 <HAL_InitTick>
 800599e:	4603      	mov	r3, r0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	58004000 	.word	0x58004000
 80059ac:	20000008 	.word	0x20000008

080059b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059b0:	b590      	push	{r4, r7, lr}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059b6:	f7ff f9e2 	bl	8004d7e <LL_RCC_GetSysClkSource>
 80059ba:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10a      	bne.n	80059d8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80059c2:	f7ff f99e 	bl	8004d02 <LL_RCC_MSI_GetRange>
 80059c6:	4603      	mov	r3, r0
 80059c8:	091b      	lsrs	r3, r3, #4
 80059ca:	f003 030f 	and.w	r3, r3, #15
 80059ce:	4a2b      	ldr	r2, [pc, #172]	@ (8005a7c <HAL_RCC_GetSysClockFreq+0xcc>)
 80059d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059d4:	60fb      	str	r3, [r7, #12]
 80059d6:	e04b      	b.n	8005a70 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b04      	cmp	r3, #4
 80059dc:	d102      	bne.n	80059e4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059de:	4b28      	ldr	r3, [pc, #160]	@ (8005a80 <HAL_RCC_GetSysClockFreq+0xd0>)
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	e045      	b.n	8005a70 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b08      	cmp	r3, #8
 80059e8:	d10a      	bne.n	8005a00 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80059ea:	f7fe ffb7 	bl	800495c <LL_RCC_HSE_IsEnabledDiv2>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d102      	bne.n	80059fa <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80059f4:	4b22      	ldr	r3, [pc, #136]	@ (8005a80 <HAL_RCC_GetSysClockFreq+0xd0>)
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	e03a      	b.n	8005a70 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80059fa:	4b22      	ldr	r3, [pc, #136]	@ (8005a84 <HAL_RCC_GetSysClockFreq+0xd4>)
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	e037      	b.n	8005a70 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005a00:	f7ff fab9 	bl	8004f76 <LL_RCC_PLL_GetMainSource>
 8005a04:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d003      	beq.n	8005a14 <HAL_RCC_GetSysClockFreq+0x64>
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	d003      	beq.n	8005a1a <HAL_RCC_GetSysClockFreq+0x6a>
 8005a12:	e00d      	b.n	8005a30 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005a14:	4b1a      	ldr	r3, [pc, #104]	@ (8005a80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a16:	60bb      	str	r3, [r7, #8]
        break;
 8005a18:	e015      	b.n	8005a46 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005a1a:	f7fe ff9f 	bl	800495c <LL_RCC_HSE_IsEnabledDiv2>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d102      	bne.n	8005a2a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005a24:	4b16      	ldr	r3, [pc, #88]	@ (8005a80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a26:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005a28:	e00d      	b.n	8005a46 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005a2a:	4b16      	ldr	r3, [pc, #88]	@ (8005a84 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005a2c:	60bb      	str	r3, [r7, #8]
        break;
 8005a2e:	e00a      	b.n	8005a46 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005a30:	f7ff f967 	bl	8004d02 <LL_RCC_MSI_GetRange>
 8005a34:	4603      	mov	r3, r0
 8005a36:	091b      	lsrs	r3, r3, #4
 8005a38:	f003 030f 	and.w	r3, r3, #15
 8005a3c:	4a0f      	ldr	r2, [pc, #60]	@ (8005a7c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a42:	60bb      	str	r3, [r7, #8]
        break;
 8005a44:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005a46:	f7ff fa71 	bl	8004f2c <LL_RCC_PLL_GetN>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	fb03 f402 	mul.w	r4, r3, r2
 8005a52:	f7ff fa84 	bl	8004f5e <LL_RCC_PLL_GetDivider>
 8005a56:	4603      	mov	r3, r0
 8005a58:	091b      	lsrs	r3, r3, #4
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	fbb4 f4f3 	udiv	r4, r4, r3
 8005a60:	f7ff fa71 	bl	8004f46 <LL_RCC_PLL_GetR>
 8005a64:	4603      	mov	r3, r0
 8005a66:	0f5b      	lsrs	r3, r3, #29
 8005a68:	3301      	adds	r3, #1
 8005a6a:	fbb4 f3f3 	udiv	r3, r4, r3
 8005a6e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005a70:	68fb      	ldr	r3, [r7, #12]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd90      	pop	{r4, r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	08015ad0 	.word	0x08015ad0
 8005a80:	00f42400 	.word	0x00f42400
 8005a84:	01e84800 	.word	0x01e84800

08005a88 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a88:	b598      	push	{r3, r4, r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005a8c:	f7ff ff90 	bl	80059b0 <HAL_RCC_GetSysClockFreq>
 8005a90:	4604      	mov	r4, r0
 8005a92:	f7ff f9e9 	bl	8004e68 <LL_RCC_GetAHBPrescaler>
 8005a96:	4603      	mov	r3, r0
 8005a98:	091b      	lsrs	r3, r3, #4
 8005a9a:	f003 030f 	and.w	r3, r3, #15
 8005a9e:	4a03      	ldr	r2, [pc, #12]	@ (8005aac <HAL_RCC_GetHCLKFreq+0x24>)
 8005aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aa4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	bd98      	pop	{r3, r4, r7, pc}
 8005aac:	08015a70 	.word	0x08015a70

08005ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ab0:	b598      	push	{r3, r4, r7, lr}
 8005ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005ab4:	f7ff ffe8 	bl	8005a88 <HAL_RCC_GetHCLKFreq>
 8005ab8:	4604      	mov	r4, r0
 8005aba:	f7ff f9ef 	bl	8004e9c <LL_RCC_GetAPB1Prescaler>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	0a1b      	lsrs	r3, r3, #8
 8005ac2:	f003 0307 	and.w	r3, r3, #7
 8005ac6:	4a04      	ldr	r2, [pc, #16]	@ (8005ad8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005acc:	f003 031f 	and.w	r3, r3, #31
 8005ad0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	bd98      	pop	{r3, r4, r7, pc}
 8005ad8:	08015ab0 	.word	0x08015ab0

08005adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005adc:	b598      	push	{r3, r4, r7, lr}
 8005ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005ae0:	f7ff ffd2 	bl	8005a88 <HAL_RCC_GetHCLKFreq>
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	f7ff f9e5 	bl	8004eb4 <LL_RCC_GetAPB2Prescaler>
 8005aea:	4603      	mov	r3, r0
 8005aec:	0adb      	lsrs	r3, r3, #11
 8005aee:	f003 0307 	and.w	r3, r3, #7
 8005af2:	4a04      	ldr	r2, [pc, #16]	@ (8005b04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005af8:	f003 031f 	and.w	r3, r3, #31
 8005afc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	bd98      	pop	{r3, r4, r7, pc}
 8005b04:	08015ab0 	.word	0x08015ab0

08005b08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005b08:	b590      	push	{r4, r7, lr}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2bb0      	cmp	r3, #176	@ 0xb0
 8005b14:	d903      	bls.n	8005b1e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005b16:	4b15      	ldr	r3, [pc, #84]	@ (8005b6c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	e007      	b.n	8005b2e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	091b      	lsrs	r3, r3, #4
 8005b22:	f003 030f 	and.w	r3, r3, #15
 8005b26:	4a11      	ldr	r2, [pc, #68]	@ (8005b6c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b2c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005b2e:	f7ff f9a7 	bl	8004e80 <LL_RCC_GetAHB4Prescaler>
 8005b32:	4603      	mov	r3, r0
 8005b34:	091b      	lsrs	r3, r3, #4
 8005b36:	f003 030f 	and.w	r3, r3, #15
 8005b3a:	4a0d      	ldr	r2, [pc, #52]	@ (8005b70 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b46:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8005b74 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b50:	0c9c      	lsrs	r4, r3, #18
 8005b52:	f7fe fef5 	bl	8004940 <HAL_PWREx_GetVoltageRange>
 8005b56:	4603      	mov	r3, r0
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	f000 f80c 	bl	8005b78 <RCC_SetFlashLatency>
 8005b60:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd90      	pop	{r4, r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	08015ad0 	.word	0x08015ad0
 8005b70:	08015a70 	.word	0x08015a70
 8005b74:	431bde83 	.word	0x431bde83

08005b78 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005b78:	b590      	push	{r4, r7, lr}
 8005b7a:	b093      	sub	sp, #76	@ 0x4c
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005b82:	4b37      	ldr	r3, [pc, #220]	@ (8005c60 <RCC_SetFlashLatency+0xe8>)
 8005b84:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8005b88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005b8e:	4a35      	ldr	r2, [pc, #212]	@ (8005c64 <RCC_SetFlashLatency+0xec>)
 8005b90:	f107 031c 	add.w	r3, r7, #28
 8005b94:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005b9a:	4b33      	ldr	r3, [pc, #204]	@ (8005c68 <RCC_SetFlashLatency+0xf0>)
 8005b9c:	f107 040c 	add.w	r4, r7, #12
 8005ba0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ba2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bb0:	d11a      	bne.n	8005be8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bb6:	e013      	b.n	8005be0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005bb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	3348      	adds	r3, #72	@ 0x48
 8005bbe:	443b      	add	r3, r7
 8005bc0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d807      	bhi.n	8005bda <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005bca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	3348      	adds	r3, #72	@ 0x48
 8005bd0:	443b      	add	r3, r7
 8005bd2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005bd6:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8005bd8:	e020      	b.n	8005c1c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005bda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bdc:	3301      	adds	r3, #1
 8005bde:	643b      	str	r3, [r7, #64]	@ 0x40
 8005be0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	d9e8      	bls.n	8005bb8 <RCC_SetFlashLatency+0x40>
 8005be6:	e019      	b.n	8005c1c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005be8:	2300      	movs	r3, #0
 8005bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bec:	e013      	b.n	8005c16 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005bee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	3348      	adds	r3, #72	@ 0x48
 8005bf4:	443b      	add	r3, r7
 8005bf6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d807      	bhi.n	8005c10 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	3348      	adds	r3, #72	@ 0x48
 8005c06:	443b      	add	r3, r7
 8005c08:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005c0c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8005c0e:	e005      	b.n	8005c1c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005c10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c12:	3301      	adds	r3, #1
 8005c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d9e8      	bls.n	8005bee <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005c1c:	4b13      	ldr	r3, [pc, #76]	@ (8005c6c <RCC_SetFlashLatency+0xf4>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f023 0207 	bic.w	r2, r3, #7
 8005c24:	4911      	ldr	r1, [pc, #68]	@ (8005c6c <RCC_SetFlashLatency+0xf4>)
 8005c26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c2c:	f7fe fa32 	bl	8004094 <HAL_GetTick>
 8005c30:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005c32:	e008      	b.n	8005c46 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005c34:	f7fe fa2e 	bl	8004094 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d901      	bls.n	8005c46 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e007      	b.n	8005c56 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005c46:	4b09      	ldr	r3, [pc, #36]	@ (8005c6c <RCC_SetFlashLatency+0xf4>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d1ef      	bne.n	8005c34 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	374c      	adds	r7, #76	@ 0x4c
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd90      	pop	{r4, r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	080157b4 	.word	0x080157b4
 8005c64:	080157c4 	.word	0x080157c4
 8005c68:	080157d0 	.word	0x080157d0
 8005c6c:	58004000 	.word	0x58004000

08005c70 <LL_RCC_LSE_IsEnabled>:
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d101      	bne.n	8005c88 <LL_RCC_LSE_IsEnabled+0x18>
 8005c84:	2301      	movs	r3, #1
 8005c86:	e000      	b.n	8005c8a <LL_RCC_LSE_IsEnabled+0x1a>
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <LL_RCC_LSE_IsReady>:
{
 8005c94:	b480      	push	{r7}
 8005c96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005c98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d101      	bne.n	8005cac <LL_RCC_LSE_IsReady+0x18>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e000      	b.n	8005cae <LL_RCC_LSE_IsReady+0x1a>
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <LL_RCC_SetRFWKPClockSource>:
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005cc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cc8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005ccc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <LL_RCC_SetSMPSClockSource>:
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005cec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf2:	f023 0203 	bic.w	r2, r3, #3
 8005cf6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <LL_RCC_SetSMPSPrescaler>:
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005d14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005d1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <LL_RCC_SetUSARTClockSource>:
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005d3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d44:	f023 0203 	bic.w	r2, r3, #3
 8005d48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <LL_RCC_SetLPUARTClockSource>:
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005d68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d70:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005d74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <LL_RCC_SetI2CClockSource>:
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005d94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d98:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	091b      	lsrs	r3, r3, #4
 8005da0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005da4:	43db      	mvns	r3, r3
 8005da6:	401a      	ands	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	011b      	lsls	r3, r3, #4
 8005dac:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005db0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005db4:	4313      	orrs	r3, r2
 8005db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005dba:	bf00      	nop
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <LL_RCC_SetLPTIMClockSource>:
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005dce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	0c1b      	lsrs	r3, r3, #16
 8005dda:	041b      	lsls	r3, r3, #16
 8005ddc:	43db      	mvns	r3, r3
 8005dde:	401a      	ands	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	041b      	lsls	r3, r3, #16
 8005de4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005de8:	4313      	orrs	r3, r2
 8005dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <LL_RCC_SetSAIClockSource>:
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005e02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005e0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005e1a:	bf00      	nop
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <LL_RCC_SetRNGClockSource>:
{
 8005e26:	b480      	push	{r7}
 8005e28:	b083      	sub	sp, #12
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005e2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e36:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005e3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <LL_RCC_SetCLK48ClockSource>:
{
 8005e52:	b480      	push	{r7}
 8005e54:	b083      	sub	sp, #12
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005e5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005e72:	bf00      	nop
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <LL_RCC_SetUSBClockSource>:
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b082      	sub	sp, #8
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7ff ffe3 	bl	8005e52 <LL_RCC_SetCLK48ClockSource>
}
 8005e8c:	bf00      	nop
 8005e8e:	3708      	adds	r7, #8
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <LL_RCC_SetADCClockSource>:
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ea4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005ea8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <LL_RCC_SetRTCClockSource>:
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005ec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ed0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ed4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <LL_RCC_GetRTCClockSource>:
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005ef0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ef8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <LL_RCC_ForceBackupDomainReset>:
{
 8005f06:	b480      	push	{r7}
 8005f08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005f0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005f1e:	bf00      	nop
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005f28:	b480      	push	{r7}
 8005f2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005f2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005f40:	bf00      	nop
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <LL_RCC_PLLSAI1_Enable>:
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005f4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005f5c:	6013      	str	r3, [r2, #0]
}
 8005f5e:	bf00      	nop
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <LL_RCC_PLLSAI1_Disable>:
{
 8005f68:	b480      	push	{r7}
 8005f6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005f6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f7a:	6013      	str	r3, [r2, #0]
}
 8005f7c:	bf00      	nop
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <LL_RCC_PLLSAI1_IsReady>:
{
 8005f86:	b480      	push	{r7}
 8005f88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005f8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f98:	d101      	bne.n	8005f9e <LL_RCC_PLLSAI1_IsReady+0x18>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e000      	b.n	8005fa0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b088      	sub	sp, #32
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d034      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005fce:	d021      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005fd0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005fd4:	d81b      	bhi.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005fd6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005fda:	d01d      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005fdc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005fe0:	d815      	bhi.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00b      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005fe6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fea:	d110      	bne.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005fec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ffa:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005ffc:	e00d      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3304      	adds	r3, #4
 8006002:	4618      	mov	r0, r3
 8006004:	f000 f947 	bl	8006296 <RCCEx_PLLSAI1_ConfigNP>
 8006008:	4603      	mov	r3, r0
 800600a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800600c:	e005      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	77fb      	strb	r3, [r7, #31]
        break;
 8006012:	e002      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006014:	bf00      	nop
 8006016:	e000      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800601a:	7ffb      	ldrb	r3, [r7, #31]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d105      	bne.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff fee8 	bl	8005dfa <LL_RCC_SetSAIClockSource>
 800602a:	e001      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800602c:	7ffb      	ldrb	r3, [r7, #31]
 800602e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006038:	2b00      	cmp	r3, #0
 800603a:	d046      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800603c:	f7ff ff56 	bl	8005eec <LL_RCC_GetRTCClockSource>
 8006040:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	429a      	cmp	r2, r3
 800604a:	d03c      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800604c:	f7fe fc68 	bl	8004920 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d105      	bne.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605a:	4618      	mov	r0, r3
 800605c:	f7ff ff30 	bl	8005ec0 <LL_RCC_SetRTCClockSource>
 8006060:	e02e      	b.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006062:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800606a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800606c:	f7ff ff4b 	bl	8005f06 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006070:	f7ff ff5a 	bl	8005f28 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607e:	4313      	orrs	r3, r2
 8006080:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006082:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800608c:	f7ff fdf0 	bl	8005c70 <LL_RCC_LSE_IsEnabled>
 8006090:	4603      	mov	r3, r0
 8006092:	2b01      	cmp	r3, #1
 8006094:	d114      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006096:	f7fd fffd 	bl	8004094 <HAL_GetTick>
 800609a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800609c:	e00b      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800609e:	f7fd fff9 	bl	8004094 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d902      	bls.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	77fb      	strb	r3, [r7, #31]
              break;
 80060b4:	e004      	b.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80060b6:	f7ff fded 	bl	8005c94 <LL_RCC_LSE_IsReady>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d1ee      	bne.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80060c0:	7ffb      	ldrb	r3, [r7, #31]
 80060c2:	77bb      	strb	r3, [r7, #30]
 80060c4:	e001      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c6:	7ffb      	ldrb	r3, [r7, #31]
 80060c8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d004      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	4618      	mov	r0, r3
 80060dc:	f7ff fe2a 	bl	8005d34 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0302 	and.w	r3, r3, #2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d004      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff fe35 	bl	8005d60 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0310 	and.w	r3, r3, #16
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d004      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006106:	4618      	mov	r0, r3
 8006108:	f7ff fe5d 	bl	8005dc6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0320 	and.w	r3, r3, #32
 8006114:	2b00      	cmp	r3, #0
 8006116:	d004      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff fe52 	bl	8005dc6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0304 	and.w	r3, r3, #4
 800612a:	2b00      	cmp	r3, #0
 800612c:	d004      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	4618      	mov	r0, r3
 8006134:	f7ff fe2a 	bl	8005d8c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0308 	and.w	r3, r3, #8
 8006140:	2b00      	cmp	r3, #0
 8006142:	d004      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006148:	4618      	mov	r0, r3
 800614a:	f7ff fe1f 	bl	8005d8c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006156:	2b00      	cmp	r3, #0
 8006158:	d022      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800615e:	4618      	mov	r0, r3
 8006160:	f7ff fe8d 	bl	8005e7e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006168:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800616c:	d107      	bne.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800616e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006178:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800617c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006182:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006186:	d10b      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	3304      	adds	r3, #4
 800618c:	4618      	mov	r0, r3
 800618e:	f000 f8dd 	bl	800634c <RCCEx_PLLSAI1_ConfigNQ>
 8006192:	4603      	mov	r3, r0
 8006194:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006196:	7ffb      	ldrb	r3, [r7, #31]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d001      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800619c:	7ffb      	ldrb	r3, [r7, #31]
 800619e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d02b      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061b4:	d008      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061be:	d003      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d105      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7ff fe2a 	bl	8005e26 <LL_RCC_SetRNGClockSource>
 80061d2:	e00a      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x240>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061dc:	60fb      	str	r3, [r7, #12]
 80061de:	2000      	movs	r0, #0
 80061e0:	f7ff fe21 	bl	8005e26 <LL_RCC_SetRNGClockSource>
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f7ff fe34 	bl	8005e52 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ee:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80061f2:	d107      	bne.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80061f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006202:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800620c:	2b00      	cmp	r3, #0
 800620e:	d022      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff fe3d 	bl	8005e94 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800621e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006222:	d107      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006224:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800622e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006232:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006238:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800623c:	d10b      	bne.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	3304      	adds	r3, #4
 8006242:	4618      	mov	r0, r3
 8006244:	f000 f8dd 	bl	8006402 <RCCEx_PLLSAI1_ConfigNR>
 8006248:	4603      	mov	r3, r0
 800624a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800624c:	7ffb      	ldrb	r3, [r7, #31]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006252:	7ffb      	ldrb	r3, [r7, #31]
 8006254:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d004      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006266:	4618      	mov	r0, r3
 8006268:	f7ff fd26 	bl	8005cb8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d009      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800627c:	4618      	mov	r0, r3
 800627e:	f7ff fd45 	bl	8005d0c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006286:	4618      	mov	r0, r3
 8006288:	f7ff fd2c 	bl	8005ce4 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800628c:	7fbb      	ldrb	r3, [r7, #30]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3720      	adds	r7, #32
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b084      	sub	sp, #16
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80062a2:	f7ff fe61 	bl	8005f68 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80062a6:	f7fd fef5 	bl	8004094 <HAL_GetTick>
 80062aa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80062ac:	e009      	b.n	80062c2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80062ae:	f7fd fef1 	bl	8004094 <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d902      	bls.n	80062c2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	73fb      	strb	r3, [r7, #15]
      break;
 80062c0:	e004      	b.n	80062cc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80062c2:	f7ff fe60 	bl	8005f86 <LL_RCC_PLLSAI1_IsReady>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1f0      	bne.n	80062ae <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80062cc:	7bfb      	ldrb	r3, [r7, #15]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d137      	bne.n	8006342 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80062d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	021b      	lsls	r3, r3, #8
 80062e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062e6:	4313      	orrs	r3, r2
 80062e8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80062ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062fc:	4313      	orrs	r3, r2
 80062fe:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006300:	f7ff fe23 	bl	8005f4a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006304:	f7fd fec6 	bl	8004094 <HAL_GetTick>
 8006308:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800630a:	e009      	b.n	8006320 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800630c:	f7fd fec2 	bl	8004094 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	2b02      	cmp	r3, #2
 8006318:	d902      	bls.n	8006320 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	73fb      	strb	r3, [r7, #15]
        break;
 800631e:	e004      	b.n	800632a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006320:	f7ff fe31 	bl	8005f86 <LL_RCC_PLLSAI1_IsReady>
 8006324:	4603      	mov	r3, r0
 8006326:	2b01      	cmp	r3, #1
 8006328:	d1f0      	bne.n	800630c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800632a:	7bfb      	ldrb	r3, [r7, #15]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d108      	bne.n	8006342 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006330:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006334:	691a      	ldr	r2, [r3, #16]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800633e:	4313      	orrs	r3, r2
 8006340:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006342:	7bfb      	ldrb	r3, [r7, #15]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006354:	2300      	movs	r3, #0
 8006356:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006358:	f7ff fe06 	bl	8005f68 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800635c:	f7fd fe9a 	bl	8004094 <HAL_GetTick>
 8006360:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006362:	e009      	b.n	8006378 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006364:	f7fd fe96 	bl	8004094 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b02      	cmp	r3, #2
 8006370:	d902      	bls.n	8006378 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	73fb      	strb	r3, [r7, #15]
      break;
 8006376:	e004      	b.n	8006382 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006378:	f7ff fe05 	bl	8005f86 <LL_RCC_PLLSAI1_IsReady>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1f0      	bne.n	8006364 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006382:	7bfb      	ldrb	r3, [r7, #15]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d137      	bne.n	80063f8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006388:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	021b      	lsls	r3, r3, #8
 8006398:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800639c:	4313      	orrs	r3, r2
 800639e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80063a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063b2:	4313      	orrs	r3, r2
 80063b4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80063b6:	f7ff fdc8 	bl	8005f4a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063ba:	f7fd fe6b 	bl	8004094 <HAL_GetTick>
 80063be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80063c0:	e009      	b.n	80063d6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063c2:	f7fd fe67 	bl	8004094 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d902      	bls.n	80063d6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	73fb      	strb	r3, [r7, #15]
        break;
 80063d4:	e004      	b.n	80063e0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80063d6:	f7ff fdd6 	bl	8005f86 <LL_RCC_PLLSAI1_IsReady>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d1f0      	bne.n	80063c2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d108      	bne.n	80063f8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80063e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063ea:	691a      	ldr	r2, [r3, #16]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063f4:	4313      	orrs	r3, r2
 80063f6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b084      	sub	sp, #16
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800640a:	2300      	movs	r3, #0
 800640c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800640e:	f7ff fdab 	bl	8005f68 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006412:	f7fd fe3f 	bl	8004094 <HAL_GetTick>
 8006416:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006418:	e009      	b.n	800642e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800641a:	f7fd fe3b 	bl	8004094 <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	2b02      	cmp	r3, #2
 8006426:	d902      	bls.n	800642e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	73fb      	strb	r3, [r7, #15]
      break;
 800642c:	e004      	b.n	8006438 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800642e:	f7ff fdaa 	bl	8005f86 <LL_RCC_PLLSAI1_IsReady>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1f0      	bne.n	800641a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006438:	7bfb      	ldrb	r3, [r7, #15]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d137      	bne.n	80064ae <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800643e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	021b      	lsls	r3, r3, #8
 800644e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006452:	4313      	orrs	r3, r2
 8006454:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006456:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006468:	4313      	orrs	r3, r2
 800646a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800646c:	f7ff fd6d 	bl	8005f4a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006470:	f7fd fe10 	bl	8004094 <HAL_GetTick>
 8006474:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006476:	e009      	b.n	800648c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006478:	f7fd fe0c 	bl	8004094 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d902      	bls.n	800648c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	73fb      	strb	r3, [r7, #15]
        break;
 800648a:	e004      	b.n	8006496 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800648c:	f7ff fd7b 	bl	8005f86 <LL_RCC_PLLSAI1_IsReady>
 8006490:	4603      	mov	r3, r0
 8006492:	2b01      	cmp	r3, #1
 8006494:	d1f0      	bne.n	8006478 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006496:	7bfb      	ldrb	r3, [r7, #15]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d108      	bne.n	80064ae <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800649c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064a0:	691a      	ldr	r2, [r3, #16]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064aa:	4313      	orrs	r3, r2
 80064ac:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e09f      	b.n	800660a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d106      	bne.n	80064e4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7fd f992 	bl	8003808 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80064ec:	4b49      	ldr	r3, [pc, #292]	@ (8006614 <HAL_RTC_Init+0x15c>)
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f003 0310 	and.w	r3, r3, #16
 80064f4:	2b10      	cmp	r3, #16
 80064f6:	d07e      	beq.n	80065f6 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	22ca      	movs	r2, #202	@ 0xca
 80064fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2253      	movs	r2, #83	@ 0x53
 8006506:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f8ab 	bl	8006664 <RTC_EnterInitMode>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00a      	beq.n	800652a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	22ff      	movs	r2, #255	@ 0xff
 800651a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2204      	movs	r2, #4
 8006520:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	73fb      	strb	r3, [r7, #15]
 8006528:	e067      	b.n	80065fa <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	6812      	ldr	r2, [r2, #0]
 8006534:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006538:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800653c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6899      	ldr	r1, [r3, #8]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	431a      	orrs	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	431a      	orrs	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	430a      	orrs	r2, r1
 800655a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	68d2      	ldr	r2, [r2, #12]
 8006564:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6919      	ldr	r1, [r3, #16]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	041a      	lsls	r2, r3, #16
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68da      	ldr	r2, [r3, #12]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006588:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f022 0203 	bic.w	r2, r2, #3
 8006598:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	69da      	ldr	r2, [r3, #28]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	431a      	orrs	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f003 0320 	and.w	r3, r3, #32
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d113      	bne.n	80065e8 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 f829 	bl	8006618 <HAL_RTC_WaitForSynchro>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00d      	beq.n	80065e8 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	22ff      	movs	r2, #255	@ 0xff
 80065d2:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2204      	movs	r2, #4
 80065d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e010      	b.n	800660a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	22ff      	movs	r2, #255	@ 0xff
 80065ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	73fb      	strb	r3, [r7, #15]
 80065f4:	e001      	b.n	80065fa <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80065fa:	7bfb      	ldrb	r3, [r7, #15]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d103      	bne.n	8006608 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8006608:	7bfb      	ldrb	r3, [r7, #15]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	40002800 	.word	0x40002800

08006618 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800662e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006630:	f7fd fd30 	bl	8004094 <HAL_GetTick>
 8006634:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006636:	e009      	b.n	800664c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006638:	f7fd fd2c 	bl	8004094 <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006646:	d901      	bls.n	800664c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e007      	b.n	800665c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f003 0320 	and.w	r3, r3, #32
 8006656:	2b00      	cmp	r3, #0
 8006658:	d0ee      	beq.n	8006638 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006676:	2b00      	cmp	r3, #0
 8006678:	d119      	bne.n	80066ae <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f04f 32ff 	mov.w	r2, #4294967295
 8006682:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006684:	f7fd fd06 	bl	8004094 <HAL_GetTick>
 8006688:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800668a:	e009      	b.n	80066a0 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800668c:	f7fd fd02 	bl	8004094 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800669a:	d901      	bls.n	80066a0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e007      	b.n	80066b0 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d0ee      	beq.n	800668c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b086      	sub	sp, #24
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d101      	bne.n	80066d2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80066ce:	2302      	movs	r3, #2
 80066d0:	e0a8      	b.n	8006824 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2202      	movs	r2, #2
 80066de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	22ca      	movs	r2, #202	@ 0xca
 80066e8:	625a      	str	r2, [r3, #36]	@ 0x24
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2253      	movs	r2, #83	@ 0x53
 80066f0:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d020      	beq.n	8006742 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8006700:	f7fd fcc8 	bl	8004094 <HAL_GetTick>
 8006704:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006706:	e015      	b.n	8006734 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006708:	f7fd fcc4 	bl	8004094 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006716:	d90d      	bls.n	8006734 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	22ff      	movs	r2, #255	@ 0xff
 800671e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2203      	movs	r2, #3
 8006724:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e077      	b.n	8006824 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	f003 0304 	and.w	r3, r3, #4
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1e2      	bne.n	8006708 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689a      	ldr	r2, [r3, #8]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006750:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	b2da      	uxtb	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8006762:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006764:	f7fd fc96 	bl	8004094 <HAL_GetTick>
 8006768:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800676a:	e015      	b.n	8006798 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800676c:	f7fd fc92 	bl	8004094 <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800677a:	d90d      	bls.n	8006798 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	22ff      	movs	r2, #255	@ 0xff
 8006782:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2203      	movs	r2, #3
 8006788:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e045      	b.n	8006824 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	f003 0304 	and.w	r3, r3, #4
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d0e2      	beq.n	800676c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	689a      	ldr	r2, [r3, #8]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f022 0207 	bic.w	r2, r2, #7
 80067bc:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6899      	ldr	r1, [r3, #8]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80067ce:	4b17      	ldr	r3, [pc, #92]	@ (800682c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80067d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067d4:	4a15      	ldr	r2, [pc, #84]	@ (800682c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80067d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80067da:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80067de:	4b13      	ldr	r3, [pc, #76]	@ (800682c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a12      	ldr	r2, [pc, #72]	@ (800682c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80067e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80067e8:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067f8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006808:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	22ff      	movs	r2, #255	@ 0xff
 8006810:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3718      	adds	r7, #24
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	58000800 	.word	0x58000800

08006830 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e095      	b.n	800696e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006846:	2b00      	cmp	r3, #0
 8006848:	d108      	bne.n	800685c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006852:	d009      	beq.n	8006868 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	61da      	str	r2, [r3, #28]
 800685a:	e005      	b.n	8006868 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d106      	bne.n	8006888 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7fd f8bc 	bl	8003a00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800689e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80068a8:	d902      	bls.n	80068b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80068aa:	2300      	movs	r3, #0
 80068ac:	60fb      	str	r3, [r7, #12]
 80068ae:	e002      	b.n	80068b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80068b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80068b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80068be:	d007      	beq.n	80068d0 <HAL_SPI_Init+0xa0>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80068c8:	d002      	beq.n	80068d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80068e0:	431a      	orrs	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	431a      	orrs	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	f003 0301 	and.w	r3, r3, #1
 80068f4:	431a      	orrs	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068fe:	431a      	orrs	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	69db      	ldr	r3, [r3, #28]
 8006904:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006908:	431a      	orrs	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006912:	ea42 0103 	orr.w	r1, r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800691a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	0c1b      	lsrs	r3, r3, #16
 800692c:	f003 0204 	and.w	r2, r3, #4
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006934:	f003 0310 	and.w	r3, r3, #16
 8006938:	431a      	orrs	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800693e:	f003 0308 	and.w	r3, r3, #8
 8006942:	431a      	orrs	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800694c:	ea42 0103 	orr.w	r1, r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	430a      	orrs	r2, r1
 800695c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b088      	sub	sp, #32
 800697a:	af00      	add	r7, sp, #0
 800697c:	60f8      	str	r0, [r7, #12]
 800697e:	60b9      	str	r1, [r7, #8]
 8006980:	603b      	str	r3, [r7, #0]
 8006982:	4613      	mov	r3, r2
 8006984:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006986:	2300      	movs	r3, #0
 8006988:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006990:	2b01      	cmp	r3, #1
 8006992:	d101      	bne.n	8006998 <HAL_SPI_Transmit+0x22>
 8006994:	2302      	movs	r3, #2
 8006996:	e15f      	b.n	8006c58 <HAL_SPI_Transmit+0x2e2>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069a0:	f7fd fb78 	bl	8004094 <HAL_GetTick>
 80069a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80069a6:	88fb      	ldrh	r3, [r7, #6]
 80069a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d002      	beq.n	80069bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80069b6:	2302      	movs	r3, #2
 80069b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80069ba:	e148      	b.n	8006c4e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d002      	beq.n	80069c8 <HAL_SPI_Transmit+0x52>
 80069c2:	88fb      	ldrh	r3, [r7, #6]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d102      	bne.n	80069ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80069cc:	e13f      	b.n	8006c4e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2203      	movs	r2, #3
 80069d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	88fa      	ldrh	r2, [r7, #6]
 80069e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	88fa      	ldrh	r2, [r7, #6]
 80069ec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a18:	d10f      	bne.n	8006a3a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a44:	2b40      	cmp	r3, #64	@ 0x40
 8006a46:	d007      	beq.n	8006a58 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006a60:	d94f      	bls.n	8006b02 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d002      	beq.n	8006a70 <HAL_SPI_Transmit+0xfa>
 8006a6a:	8afb      	ldrh	r3, [r7, #22]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d142      	bne.n	8006af6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a74:	881a      	ldrh	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a80:	1c9a      	adds	r2, r3, #2
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a94:	e02f      	b.n	8006af6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f003 0302 	and.w	r3, r3, #2
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d112      	bne.n	8006aca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa8:	881a      	ldrh	r2, [r3, #0]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab4:	1c9a      	adds	r2, r3, #2
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ac8:	e015      	b.n	8006af6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006aca:	f7fd fae3 	bl	8004094 <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d803      	bhi.n	8006ae2 <HAL_SPI_Transmit+0x16c>
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae0:	d102      	bne.n	8006ae8 <HAL_SPI_Transmit+0x172>
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d106      	bne.n	8006af6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006af4:	e0ab      	b.n	8006c4e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1ca      	bne.n	8006a96 <HAL_SPI_Transmit+0x120>
 8006b00:	e080      	b.n	8006c04 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d002      	beq.n	8006b10 <HAL_SPI_Transmit+0x19a>
 8006b0a:	8afb      	ldrh	r3, [r7, #22]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d174      	bne.n	8006bfa <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d912      	bls.n	8006b40 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b1e:	881a      	ldrh	r2, [r3, #0]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b2a:	1c9a      	adds	r2, r3, #2
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	3b02      	subs	r3, #2
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006b3e:	e05c      	b.n	8006bfa <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	330c      	adds	r3, #12
 8006b4a:	7812      	ldrb	r2, [r2, #0]
 8006b4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b52:	1c5a      	adds	r2, r3, #1
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006b66:	e048      	b.n	8006bfa <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d12b      	bne.n	8006bce <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d912      	bls.n	8006ba6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b84:	881a      	ldrh	r2, [r3, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b90:	1c9a      	adds	r2, r3, #2
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	3b02      	subs	r3, #2
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ba4:	e029      	b.n	8006bfa <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	330c      	adds	r3, #12
 8006bb0:	7812      	ldrb	r2, [r2, #0]
 8006bb2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb8:	1c5a      	adds	r2, r3, #1
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006bcc:	e015      	b.n	8006bfa <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bce:	f7fd fa61 	bl	8004094 <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	683a      	ldr	r2, [r7, #0]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d803      	bhi.n	8006be6 <HAL_SPI_Transmit+0x270>
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be4:	d102      	bne.n	8006bec <HAL_SPI_Transmit+0x276>
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d106      	bne.n	8006bfa <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006bf8:	e029      	b.n	8006c4e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1b1      	bne.n	8006b68 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c04:	69ba      	ldr	r2, [r7, #24]
 8006c06:	6839      	ldr	r1, [r7, #0]
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f000 fcf9 	bl	8007600 <SPI_EndRxTxTransaction>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d002      	beq.n	8006c1a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2220      	movs	r2, #32
 8006c18:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10a      	bne.n	8006c38 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c22:	2300      	movs	r3, #0
 8006c24:	613b      	str	r3, [r7, #16]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	613b      	str	r3, [r7, #16]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	613b      	str	r3, [r7, #16]
 8006c36:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	77fb      	strb	r3, [r7, #31]
 8006c44:	e003      	b.n	8006c4e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006c56:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3720      	adds	r7, #32
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b088      	sub	sp, #32
 8006c64:	af02      	add	r7, sp, #8
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	603b      	str	r3, [r7, #0]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d002      	beq.n	8006c86 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006c80:	2302      	movs	r3, #2
 8006c82:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006c84:	e11a      	b.n	8006ebc <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c8e:	d112      	bne.n	8006cb6 <HAL_SPI_Receive+0x56>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10e      	bne.n	8006cb6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2204      	movs	r2, #4
 8006c9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006ca0:	88fa      	ldrh	r2, [r7, #6]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	68b9      	ldr	r1, [r7, #8]
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 f90e 	bl	8006ece <HAL_SPI_TransmitReceive>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	e107      	b.n	8006ec6 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d101      	bne.n	8006cc4 <HAL_SPI_Receive+0x64>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e100      	b.n	8006ec6 <HAL_SPI_Receive+0x266>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ccc:	f7fd f9e2 	bl	8004094 <HAL_GetTick>
 8006cd0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <HAL_SPI_Receive+0x7e>
 8006cd8:	88fb      	ldrh	r3, [r7, #6]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d102      	bne.n	8006ce4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ce2:	e0eb      	b.n	8006ebc <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2204      	movs	r2, #4
 8006ce8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	88fa      	ldrh	r2, [r7, #6]
 8006cfc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	88fa      	ldrh	r2, [r7, #6]
 8006d04:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d2e:	d908      	bls.n	8006d42 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685a      	ldr	r2, [r3, #4]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006d3e:	605a      	str	r2, [r3, #4]
 8006d40:	e007      	b.n	8006d52 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006d50:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d5a:	d10f      	bne.n	8006d7c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d6a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006d7a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d86:	2b40      	cmp	r3, #64	@ 0x40
 8006d88:	d007      	beq.n	8006d9a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d98:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006da2:	d86f      	bhi.n	8006e84 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006da4:	e034      	b.n	8006e10 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d117      	bne.n	8006de4 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f103 020c 	add.w	r2, r3, #12
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc0:	7812      	ldrb	r2, [r2, #0]
 8006dc2:	b2d2      	uxtb	r2, r2
 8006dc4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dca:	1c5a      	adds	r2, r3, #1
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006de2:	e015      	b.n	8006e10 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006de4:	f7fd f956 	bl	8004094 <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d803      	bhi.n	8006dfc <HAL_SPI_Receive+0x19c>
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfa:	d102      	bne.n	8006e02 <HAL_SPI_Receive+0x1a2>
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d106      	bne.n	8006e10 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006e0e:	e055      	b.n	8006ebc <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1c4      	bne.n	8006da6 <HAL_SPI_Receive+0x146>
 8006e1c:	e038      	b.n	8006e90 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d115      	bne.n	8006e58 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68da      	ldr	r2, [r3, #12]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e36:	b292      	uxth	r2, r2
 8006e38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e3e:	1c9a      	adds	r2, r3, #2
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006e56:	e015      	b.n	8006e84 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e58:	f7fd f91c 	bl	8004094 <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d803      	bhi.n	8006e70 <HAL_SPI_Receive+0x210>
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e6e:	d102      	bne.n	8006e76 <HAL_SPI_Receive+0x216>
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d106      	bne.n	8006e84 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006e82:	e01b      	b.n	8006ebc <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1c6      	bne.n	8006e1e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 fb5b 	bl	8007550 <SPI_EndRxTransaction>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d002      	beq.n	8006eb4 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	75fb      	strb	r3, [r7, #23]
 8006eb2:	e003      	b.n	8006ebc <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3718      	adds	r7, #24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b08a      	sub	sp, #40	@ 0x28
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	60f8      	str	r0, [r7, #12]
 8006ed6:	60b9      	str	r1, [r7, #8]
 8006ed8:	607a      	str	r2, [r7, #4]
 8006eda:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006edc:	2301      	movs	r3, #1
 8006ede:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d101      	bne.n	8006ef4 <HAL_SPI_TransmitReceive+0x26>
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	e20a      	b.n	800730a <HAL_SPI_TransmitReceive+0x43c>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006efc:	f7fd f8ca 	bl	8004094 <HAL_GetTick>
 8006f00:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f08:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006f10:	887b      	ldrh	r3, [r7, #2]
 8006f12:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006f14:	887b      	ldrh	r3, [r7, #2]
 8006f16:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006f18:	7efb      	ldrb	r3, [r7, #27]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d00e      	beq.n	8006f3c <HAL_SPI_TransmitReceive+0x6e>
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f24:	d106      	bne.n	8006f34 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d102      	bne.n	8006f34 <HAL_SPI_TransmitReceive+0x66>
 8006f2e:	7efb      	ldrb	r3, [r7, #27]
 8006f30:	2b04      	cmp	r3, #4
 8006f32:	d003      	beq.n	8006f3c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006f34:	2302      	movs	r3, #2
 8006f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006f3a:	e1e0      	b.n	80072fe <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d005      	beq.n	8006f4e <HAL_SPI_TransmitReceive+0x80>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <HAL_SPI_TransmitReceive+0x80>
 8006f48:	887b      	ldrh	r3, [r7, #2]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d103      	bne.n	8006f56 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006f54:	e1d3      	b.n	80072fe <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b04      	cmp	r3, #4
 8006f60:	d003      	beq.n	8006f6a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2205      	movs	r2, #5
 8006f66:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	887a      	ldrh	r2, [r7, #2]
 8006f7a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	887a      	ldrh	r2, [r7, #2]
 8006f82:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	887a      	ldrh	r2, [r7, #2]
 8006f90:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	887a      	ldrh	r2, [r7, #2]
 8006f96:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006fac:	d802      	bhi.n	8006fb4 <HAL_SPI_TransmitReceive+0xe6>
 8006fae:	8a3b      	ldrh	r3, [r7, #16]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d908      	bls.n	8006fc6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	685a      	ldr	r2, [r3, #4]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006fc2:	605a      	str	r2, [r3, #4]
 8006fc4:	e007      	b.n	8006fd6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006fd4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fe0:	2b40      	cmp	r3, #64	@ 0x40
 8006fe2:	d007      	beq.n	8006ff4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ff2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ffc:	f240 8081 	bls.w	8007102 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d002      	beq.n	800700e <HAL_SPI_TransmitReceive+0x140>
 8007008:	8a7b      	ldrh	r3, [r7, #18]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d16d      	bne.n	80070ea <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007012:	881a      	ldrh	r2, [r3, #0]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800701e:	1c9a      	adds	r2, r3, #2
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007028:	b29b      	uxth	r3, r3
 800702a:	3b01      	subs	r3, #1
 800702c:	b29a      	uxth	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007032:	e05a      	b.n	80070ea <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b02      	cmp	r3, #2
 8007040:	d11b      	bne.n	800707a <HAL_SPI_TransmitReceive+0x1ac>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007046:	b29b      	uxth	r3, r3
 8007048:	2b00      	cmp	r3, #0
 800704a:	d016      	beq.n	800707a <HAL_SPI_TransmitReceive+0x1ac>
 800704c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704e:	2b01      	cmp	r3, #1
 8007050:	d113      	bne.n	800707a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007056:	881a      	ldrh	r2, [r3, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007062:	1c9a      	adds	r2, r3, #2
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800706c:	b29b      	uxth	r3, r3
 800706e:	3b01      	subs	r3, #1
 8007070:	b29a      	uxth	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007076:	2300      	movs	r3, #0
 8007078:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	2b01      	cmp	r3, #1
 8007086:	d11c      	bne.n	80070c2 <HAL_SPI_TransmitReceive+0x1f4>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800708e:	b29b      	uxth	r3, r3
 8007090:	2b00      	cmp	r3, #0
 8007092:	d016      	beq.n	80070c2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800709e:	b292      	uxth	r2, r2
 80070a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a6:	1c9a      	adds	r2, r3, #2
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	3b01      	subs	r3, #1
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070be:	2301      	movs	r3, #1
 80070c0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80070c2:	f7fc ffe7 	bl	8004094 <HAL_GetTick>
 80070c6:	4602      	mov	r2, r0
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d80b      	bhi.n	80070ea <HAL_SPI_TransmitReceive+0x21c>
 80070d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d8:	d007      	beq.n	80070ea <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80070e8:	e109      	b.n	80072fe <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d19f      	bne.n	8007034 <HAL_SPI_TransmitReceive+0x166>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d199      	bne.n	8007034 <HAL_SPI_TransmitReceive+0x166>
 8007100:	e0e3      	b.n	80072ca <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <HAL_SPI_TransmitReceive+0x244>
 800710a:	8a7b      	ldrh	r3, [r7, #18]
 800710c:	2b01      	cmp	r3, #1
 800710e:	f040 80cf 	bne.w	80072b0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007116:	b29b      	uxth	r3, r3
 8007118:	2b01      	cmp	r3, #1
 800711a:	d912      	bls.n	8007142 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007120:	881a      	ldrh	r2, [r3, #0]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800712c:	1c9a      	adds	r2, r3, #2
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007136:	b29b      	uxth	r3, r3
 8007138:	3b02      	subs	r3, #2
 800713a:	b29a      	uxth	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007140:	e0b6      	b.n	80072b0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	330c      	adds	r3, #12
 800714c:	7812      	ldrb	r2, [r2, #0]
 800714e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007154:	1c5a      	adds	r2, r3, #1
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800715e:	b29b      	uxth	r3, r3
 8007160:	3b01      	subs	r3, #1
 8007162:	b29a      	uxth	r2, r3
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007168:	e0a2      	b.n	80072b0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f003 0302 	and.w	r3, r3, #2
 8007174:	2b02      	cmp	r3, #2
 8007176:	d134      	bne.n	80071e2 <HAL_SPI_TransmitReceive+0x314>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800717c:	b29b      	uxth	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d02f      	beq.n	80071e2 <HAL_SPI_TransmitReceive+0x314>
 8007182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007184:	2b01      	cmp	r3, #1
 8007186:	d12c      	bne.n	80071e2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800718c:	b29b      	uxth	r3, r3
 800718e:	2b01      	cmp	r3, #1
 8007190:	d912      	bls.n	80071b8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007196:	881a      	ldrh	r2, [r3, #0]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a2:	1c9a      	adds	r2, r3, #2
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	3b02      	subs	r3, #2
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80071b6:	e012      	b.n	80071de <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	330c      	adds	r3, #12
 80071c2:	7812      	ldrb	r2, [r2, #0]
 80071c4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ca:	1c5a      	adds	r2, r3, #1
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	3b01      	subs	r3, #1
 80071d8:	b29a      	uxth	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071de:	2300      	movs	r3, #0
 80071e0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d148      	bne.n	8007282 <HAL_SPI_TransmitReceive+0x3b4>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d042      	beq.n	8007282 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007202:	b29b      	uxth	r3, r3
 8007204:	2b01      	cmp	r3, #1
 8007206:	d923      	bls.n	8007250 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68da      	ldr	r2, [r3, #12]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007212:	b292      	uxth	r2, r2
 8007214:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800721a:	1c9a      	adds	r2, r3, #2
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007226:	b29b      	uxth	r3, r3
 8007228:	3b02      	subs	r3, #2
 800722a:	b29a      	uxth	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007238:	b29b      	uxth	r3, r3
 800723a:	2b01      	cmp	r3, #1
 800723c:	d81f      	bhi.n	800727e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800724c:	605a      	str	r2, [r3, #4]
 800724e:	e016      	b.n	800727e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f103 020c 	add.w	r2, r3, #12
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800725c:	7812      	ldrb	r2, [r2, #0]
 800725e:	b2d2      	uxtb	r2, r2
 8007260:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007272:	b29b      	uxth	r3, r3
 8007274:	3b01      	subs	r3, #1
 8007276:	b29a      	uxth	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800727e:	2301      	movs	r3, #1
 8007280:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007282:	f7fc ff07 	bl	8004094 <HAL_GetTick>
 8007286:	4602      	mov	r2, r0
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800728e:	429a      	cmp	r2, r3
 8007290:	d803      	bhi.n	800729a <HAL_SPI_TransmitReceive+0x3cc>
 8007292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007298:	d102      	bne.n	80072a0 <HAL_SPI_TransmitReceive+0x3d2>
 800729a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729c:	2b00      	cmp	r3, #0
 800729e:	d107      	bne.n	80072b0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80072ae:	e026      	b.n	80072fe <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f47f af57 	bne.w	800716a <HAL_SPI_TransmitReceive+0x29c>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f47f af50 	bne.w	800716a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072ca:	69fa      	ldr	r2, [r7, #28]
 80072cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f000 f996 	bl	8007600 <SPI_EndRxTxTransaction>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d005      	beq.n	80072e6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2220      	movs	r2, #32
 80072e4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d003      	beq.n	80072f6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072f4:	e003      	b.n	80072fe <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007306:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800730a:	4618      	mov	r0, r3
 800730c:	3728      	adds	r7, #40	@ 0x28
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
	...

08007314 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b088      	sub	sp, #32
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	603b      	str	r3, [r7, #0]
 8007320:	4613      	mov	r3, r2
 8007322:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007324:	f7fc feb6 	bl	8004094 <HAL_GetTick>
 8007328:	4602      	mov	r2, r0
 800732a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800732c:	1a9b      	subs	r3, r3, r2
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	4413      	add	r3, r2
 8007332:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007334:	f7fc feae 	bl	8004094 <HAL_GetTick>
 8007338:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800733a:	4b39      	ldr	r3, [pc, #228]	@ (8007420 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	015b      	lsls	r3, r3, #5
 8007340:	0d1b      	lsrs	r3, r3, #20
 8007342:	69fa      	ldr	r2, [r7, #28]
 8007344:	fb02 f303 	mul.w	r3, r2, r3
 8007348:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800734a:	e054      	b.n	80073f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007352:	d050      	beq.n	80073f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007354:	f7fc fe9e 	bl	8004094 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	69fa      	ldr	r2, [r7, #28]
 8007360:	429a      	cmp	r2, r3
 8007362:	d902      	bls.n	800736a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d13d      	bne.n	80073e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	685a      	ldr	r2, [r3, #4]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007378:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007382:	d111      	bne.n	80073a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800738c:	d004      	beq.n	8007398 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007396:	d107      	bne.n	80073a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073b0:	d10f      	bne.n	80073d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80073c0:	601a      	str	r2, [r3, #0]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80073d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e017      	b.n	8007416 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d101      	bne.n	80073f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80073ec:	2300      	movs	r3, #0
 80073ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	3b01      	subs	r3, #1
 80073f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689a      	ldr	r2, [r3, #8]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	4013      	ands	r3, r2
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	429a      	cmp	r2, r3
 8007404:	bf0c      	ite	eq
 8007406:	2301      	moveq	r3, #1
 8007408:	2300      	movne	r3, #0
 800740a:	b2db      	uxtb	r3, r3
 800740c:	461a      	mov	r2, r3
 800740e:	79fb      	ldrb	r3, [r7, #7]
 8007410:	429a      	cmp	r2, r3
 8007412:	d19b      	bne.n	800734c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3720      	adds	r7, #32
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	20000008 	.word	0x20000008

08007424 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b08a      	sub	sp, #40	@ 0x28
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
 8007430:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007432:	2300      	movs	r3, #0
 8007434:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007436:	f7fc fe2d 	bl	8004094 <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743e:	1a9b      	subs	r3, r3, r2
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	4413      	add	r3, r2
 8007444:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007446:	f7fc fe25 	bl	8004094 <HAL_GetTick>
 800744a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	330c      	adds	r3, #12
 8007452:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007454:	4b3d      	ldr	r3, [pc, #244]	@ (800754c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	4613      	mov	r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4413      	add	r3, r2
 800745e:	00da      	lsls	r2, r3, #3
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	0d1b      	lsrs	r3, r3, #20
 8007464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007466:	fb02 f303 	mul.w	r3, r2, r3
 800746a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800746c:	e060      	b.n	8007530 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007474:	d107      	bne.n	8007486 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d104      	bne.n	8007486 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	b2db      	uxtb	r3, r3
 8007482:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007484:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800748c:	d050      	beq.n	8007530 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800748e:	f7fc fe01 	bl	8004094 <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	6a3b      	ldr	r3, [r7, #32]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800749a:	429a      	cmp	r2, r3
 800749c:	d902      	bls.n	80074a4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800749e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d13d      	bne.n	8007520 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	685a      	ldr	r2, [r3, #4]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80074b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80074bc:	d111      	bne.n	80074e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074c6:	d004      	beq.n	80074d2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074d0:	d107      	bne.n	80074e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074ea:	d10f      	bne.n	800750c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80074fa:	601a      	str	r2, [r3, #0]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800750a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e010      	b.n	8007542 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007526:	2300      	movs	r3, #0
 8007528:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	3b01      	subs	r3, #1
 800752e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	689a      	ldr	r2, [r3, #8]
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	4013      	ands	r3, r2
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	429a      	cmp	r2, r3
 800753e:	d196      	bne.n	800746e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3728      	adds	r7, #40	@ 0x28
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	20000008 	.word	0x20000008

08007550 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af02      	add	r7, sp, #8
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007564:	d111      	bne.n	800758a <SPI_EndRxTransaction+0x3a>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800756e:	d004      	beq.n	800757a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007578:	d107      	bne.n	800758a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007588:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2200      	movs	r2, #0
 8007592:	2180      	movs	r1, #128	@ 0x80
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f7ff febd 	bl	8007314 <SPI_WaitFlagStateUntilTimeout>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d007      	beq.n	80075b0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075a4:	f043 0220 	orr.w	r2, r3, #32
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e023      	b.n	80075f8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075b8:	d11d      	bne.n	80075f6 <SPI_EndRxTransaction+0xa6>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075c2:	d004      	beq.n	80075ce <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075cc:	d113      	bne.n	80075f6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f7ff ff22 	bl	8007424 <SPI_WaitFifoStateUntilTimeout>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d007      	beq.n	80075f6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075ea:	f043 0220 	orr.w	r2, r3, #32
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e000      	b.n	80075f8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af02      	add	r7, sp, #8
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2200      	movs	r2, #0
 8007614:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f7ff ff03 	bl	8007424 <SPI_WaitFifoStateUntilTimeout>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d007      	beq.n	8007634 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007628:	f043 0220 	orr.w	r2, r3, #32
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	e027      	b.n	8007684 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	9300      	str	r3, [sp, #0]
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	2200      	movs	r2, #0
 800763c:	2180      	movs	r1, #128	@ 0x80
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f7ff fe68 	bl	8007314 <SPI_WaitFlagStateUntilTimeout>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d007      	beq.n	800765a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800764e:	f043 0220 	orr.w	r2, r3, #32
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	e014      	b.n	8007684 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	2200      	movs	r2, #0
 8007662:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f7ff fedc 	bl	8007424 <SPI_WaitFifoStateUntilTimeout>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d007      	beq.n	8007682 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007676:	f043 0220 	orr.w	r2, r3, #32
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e000      	b.n	8007684 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <LL_RCC_GetUSARTClockSource>:
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007694:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007698:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4013      	ands	r3, r2
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <LL_RCC_GetLPUARTClockSource>:
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80076b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4013      	ands	r3, r2
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d101      	bne.n	80076de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e042      	b.n	8007764 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d106      	bne.n	80076f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f7fc fbe1 	bl	8003eb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2224      	movs	r2, #36	@ 0x24
 80076fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f022 0201 	bic.w	r2, r2, #1
 800770c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007712:	2b00      	cmp	r3, #0
 8007714:	d002      	beq.n	800771c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fade 	bl	8007cd8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f8b3 	bl	8007888 <UART_SetConfig>
 8007722:	4603      	mov	r3, r0
 8007724:	2b01      	cmp	r3, #1
 8007726:	d101      	bne.n	800772c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e01b      	b.n	8007764 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	685a      	ldr	r2, [r3, #4]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800773a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	689a      	ldr	r2, [r3, #8]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800774a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f042 0201 	orr.w	r2, r2, #1
 800775a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fb5d 	bl	8007e1c <UART_CheckIdleState>
 8007762:	4603      	mov	r3, r0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b08a      	sub	sp, #40	@ 0x28
 8007770:	af02      	add	r7, sp, #8
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	603b      	str	r3, [r7, #0]
 8007778:	4613      	mov	r3, r2
 800777a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007782:	2b20      	cmp	r3, #32
 8007784:	d17b      	bne.n	800787e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d002      	beq.n	8007792 <HAL_UART_Transmit+0x26>
 800778c:	88fb      	ldrh	r3, [r7, #6]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d101      	bne.n	8007796 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e074      	b.n	8007880 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2221      	movs	r2, #33	@ 0x21
 80077a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077a6:	f7fc fc75 	bl	8004094 <HAL_GetTick>
 80077aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	88fa      	ldrh	r2, [r7, #6]
 80077b0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	88fa      	ldrh	r2, [r7, #6]
 80077b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077c4:	d108      	bne.n	80077d8 <HAL_UART_Transmit+0x6c>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d104      	bne.n	80077d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80077ce:	2300      	movs	r3, #0
 80077d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	61bb      	str	r3, [r7, #24]
 80077d6:	e003      	b.n	80077e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077dc:	2300      	movs	r3, #0
 80077de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80077e0:	e030      	b.n	8007844 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2200      	movs	r2, #0
 80077ea:	2180      	movs	r1, #128	@ 0x80
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f000 fbbf 	bl	8007f70 <UART_WaitOnFlagUntilTimeout>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d005      	beq.n	8007804 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2220      	movs	r2, #32
 80077fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e03d      	b.n	8007880 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10b      	bne.n	8007822 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	461a      	mov	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007818:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	3302      	adds	r3, #2
 800781e:	61bb      	str	r3, [r7, #24]
 8007820:	e007      	b.n	8007832 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	781a      	ldrb	r2, [r3, #0]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	3301      	adds	r3, #1
 8007830:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007838:	b29b      	uxth	r3, r3
 800783a:	3b01      	subs	r3, #1
 800783c:	b29a      	uxth	r2, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800784a:	b29b      	uxth	r3, r3
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1c8      	bne.n	80077e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	2200      	movs	r2, #0
 8007858:	2140      	movs	r1, #64	@ 0x40
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f000 fb88 	bl	8007f70 <UART_WaitOnFlagUntilTimeout>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d005      	beq.n	8007872 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2220      	movs	r2, #32
 800786a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e006      	b.n	8007880 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2220      	movs	r2, #32
 8007876:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	e000      	b.n	8007880 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800787e:	2302      	movs	r3, #2
  }
}
 8007880:	4618      	mov	r0, r3
 8007882:	3720      	adds	r7, #32
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800788c:	b08c      	sub	sp, #48	@ 0x30
 800788e:	af00      	add	r7, sp, #0
 8007890:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	689a      	ldr	r2, [r3, #8]
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	431a      	orrs	r2, r3
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	431a      	orrs	r2, r3
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	69db      	ldr	r3, [r3, #28]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	4baf      	ldr	r3, [pc, #700]	@ (8007b74 <UART_SetConfig+0x2ec>)
 80078b8:	4013      	ands	r3, r2
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	6812      	ldr	r2, [r2, #0]
 80078be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80078c0:	430b      	orrs	r3, r1
 80078c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	68da      	ldr	r2, [r3, #12]
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4aa4      	ldr	r2, [pc, #656]	@ (8007b78 <UART_SetConfig+0x2f0>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d004      	beq.n	80078f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078f0:	4313      	orrs	r3, r2
 80078f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80078fe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007902:	697a      	ldr	r2, [r7, #20]
 8007904:	6812      	ldr	r2, [r2, #0]
 8007906:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007908:	430b      	orrs	r3, r1
 800790a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007912:	f023 010f 	bic.w	r1, r3, #15
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	430a      	orrs	r2, r1
 8007920:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a95      	ldr	r2, [pc, #596]	@ (8007b7c <UART_SetConfig+0x2f4>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d125      	bne.n	8007978 <UART_SetConfig+0xf0>
 800792c:	2003      	movs	r0, #3
 800792e:	f7ff fead 	bl	800768c <LL_RCC_GetUSARTClockSource>
 8007932:	4603      	mov	r3, r0
 8007934:	2b03      	cmp	r3, #3
 8007936:	d81b      	bhi.n	8007970 <UART_SetConfig+0xe8>
 8007938:	a201      	add	r2, pc, #4	@ (adr r2, 8007940 <UART_SetConfig+0xb8>)
 800793a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793e:	bf00      	nop
 8007940:	08007951 	.word	0x08007951
 8007944:	08007961 	.word	0x08007961
 8007948:	08007959 	.word	0x08007959
 800794c:	08007969 	.word	0x08007969
 8007950:	2301      	movs	r3, #1
 8007952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007956:	e042      	b.n	80079de <UART_SetConfig+0x156>
 8007958:	2302      	movs	r3, #2
 800795a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800795e:	e03e      	b.n	80079de <UART_SetConfig+0x156>
 8007960:	2304      	movs	r3, #4
 8007962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007966:	e03a      	b.n	80079de <UART_SetConfig+0x156>
 8007968:	2308      	movs	r3, #8
 800796a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800796e:	e036      	b.n	80079de <UART_SetConfig+0x156>
 8007970:	2310      	movs	r3, #16
 8007972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007976:	e032      	b.n	80079de <UART_SetConfig+0x156>
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a7e      	ldr	r2, [pc, #504]	@ (8007b78 <UART_SetConfig+0x2f0>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d12a      	bne.n	80079d8 <UART_SetConfig+0x150>
 8007982:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8007986:	f7ff fe91 	bl	80076ac <LL_RCC_GetLPUARTClockSource>
 800798a:	4603      	mov	r3, r0
 800798c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007990:	d01a      	beq.n	80079c8 <UART_SetConfig+0x140>
 8007992:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007996:	d81b      	bhi.n	80079d0 <UART_SetConfig+0x148>
 8007998:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800799c:	d00c      	beq.n	80079b8 <UART_SetConfig+0x130>
 800799e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079a2:	d815      	bhi.n	80079d0 <UART_SetConfig+0x148>
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d003      	beq.n	80079b0 <UART_SetConfig+0x128>
 80079a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079ac:	d008      	beq.n	80079c0 <UART_SetConfig+0x138>
 80079ae:	e00f      	b.n	80079d0 <UART_SetConfig+0x148>
 80079b0:	2300      	movs	r3, #0
 80079b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079b6:	e012      	b.n	80079de <UART_SetConfig+0x156>
 80079b8:	2302      	movs	r3, #2
 80079ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079be:	e00e      	b.n	80079de <UART_SetConfig+0x156>
 80079c0:	2304      	movs	r3, #4
 80079c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079c6:	e00a      	b.n	80079de <UART_SetConfig+0x156>
 80079c8:	2308      	movs	r3, #8
 80079ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079ce:	e006      	b.n	80079de <UART_SetConfig+0x156>
 80079d0:	2310      	movs	r3, #16
 80079d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079d6:	e002      	b.n	80079de <UART_SetConfig+0x156>
 80079d8:	2310      	movs	r3, #16
 80079da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a65      	ldr	r2, [pc, #404]	@ (8007b78 <UART_SetConfig+0x2f0>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	f040 8097 	bne.w	8007b18 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80079ee:	2b08      	cmp	r3, #8
 80079f0:	d823      	bhi.n	8007a3a <UART_SetConfig+0x1b2>
 80079f2:	a201      	add	r2, pc, #4	@ (adr r2, 80079f8 <UART_SetConfig+0x170>)
 80079f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f8:	08007a1d 	.word	0x08007a1d
 80079fc:	08007a3b 	.word	0x08007a3b
 8007a00:	08007a25 	.word	0x08007a25
 8007a04:	08007a3b 	.word	0x08007a3b
 8007a08:	08007a2b 	.word	0x08007a2b
 8007a0c:	08007a3b 	.word	0x08007a3b
 8007a10:	08007a3b 	.word	0x08007a3b
 8007a14:	08007a3b 	.word	0x08007a3b
 8007a18:	08007a33 	.word	0x08007a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a1c:	f7fe f848 	bl	8005ab0 <HAL_RCC_GetPCLK1Freq>
 8007a20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a22:	e010      	b.n	8007a46 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a24:	4b56      	ldr	r3, [pc, #344]	@ (8007b80 <UART_SetConfig+0x2f8>)
 8007a26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a28:	e00d      	b.n	8007a46 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a2a:	f7fd ffc1 	bl	80059b0 <HAL_RCC_GetSysClockFreq>
 8007a2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a30:	e009      	b.n	8007a46 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a38:	e005      	b.n	8007a46 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007a44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f000 812b 	beq.w	8007ca4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a52:	4a4c      	ldr	r2, [pc, #304]	@ (8007b84 <UART_SetConfig+0x2fc>)
 8007a54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a60:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	4613      	mov	r3, r2
 8007a68:	005b      	lsls	r3, r3, #1
 8007a6a:	4413      	add	r3, r2
 8007a6c:	69ba      	ldr	r2, [r7, #24]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d305      	bcc.n	8007a7e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a78:	69ba      	ldr	r2, [r7, #24]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d903      	bls.n	8007a86 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007a84:	e10e      	b.n	8007ca4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a88:	2200      	movs	r2, #0
 8007a8a:	60bb      	str	r3, [r7, #8]
 8007a8c:	60fa      	str	r2, [r7, #12]
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a92:	4a3c      	ldr	r2, [pc, #240]	@ (8007b84 <UART_SetConfig+0x2fc>)
 8007a94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	603b      	str	r3, [r7, #0]
 8007a9e:	607a      	str	r2, [r7, #4]
 8007aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007aa4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007aa8:	f7f9 f856 	bl	8000b58 <__aeabi_uldivmod>
 8007aac:	4602      	mov	r2, r0
 8007aae:	460b      	mov	r3, r1
 8007ab0:	4610      	mov	r0, r2
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	f04f 0200 	mov.w	r2, #0
 8007ab8:	f04f 0300 	mov.w	r3, #0
 8007abc:	020b      	lsls	r3, r1, #8
 8007abe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ac2:	0202      	lsls	r2, r0, #8
 8007ac4:	6979      	ldr	r1, [r7, #20]
 8007ac6:	6849      	ldr	r1, [r1, #4]
 8007ac8:	0849      	lsrs	r1, r1, #1
 8007aca:	2000      	movs	r0, #0
 8007acc:	460c      	mov	r4, r1
 8007ace:	4605      	mov	r5, r0
 8007ad0:	eb12 0804 	adds.w	r8, r2, r4
 8007ad4:	eb43 0905 	adc.w	r9, r3, r5
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	469a      	mov	sl, r3
 8007ae0:	4693      	mov	fp, r2
 8007ae2:	4652      	mov	r2, sl
 8007ae4:	465b      	mov	r3, fp
 8007ae6:	4640      	mov	r0, r8
 8007ae8:	4649      	mov	r1, r9
 8007aea:	f7f9 f835 	bl	8000b58 <__aeabi_uldivmod>
 8007aee:	4602      	mov	r2, r0
 8007af0:	460b      	mov	r3, r1
 8007af2:	4613      	mov	r3, r2
 8007af4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007afc:	d308      	bcc.n	8007b10 <UART_SetConfig+0x288>
 8007afe:	6a3b      	ldr	r3, [r7, #32]
 8007b00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b04:	d204      	bcs.n	8007b10 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	6a3a      	ldr	r2, [r7, #32]
 8007b0c:	60da      	str	r2, [r3, #12]
 8007b0e:	e0c9      	b.n	8007ca4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007b16:	e0c5      	b.n	8007ca4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	69db      	ldr	r3, [r3, #28]
 8007b1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b20:	d16d      	bne.n	8007bfe <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007b22:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007b26:	3b01      	subs	r3, #1
 8007b28:	2b07      	cmp	r3, #7
 8007b2a:	d82d      	bhi.n	8007b88 <UART_SetConfig+0x300>
 8007b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8007b34 <UART_SetConfig+0x2ac>)
 8007b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b32:	bf00      	nop
 8007b34:	08007b55 	.word	0x08007b55
 8007b38:	08007b5d 	.word	0x08007b5d
 8007b3c:	08007b89 	.word	0x08007b89
 8007b40:	08007b63 	.word	0x08007b63
 8007b44:	08007b89 	.word	0x08007b89
 8007b48:	08007b89 	.word	0x08007b89
 8007b4c:	08007b89 	.word	0x08007b89
 8007b50:	08007b6b 	.word	0x08007b6b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b54:	f7fd ffc2 	bl	8005adc <HAL_RCC_GetPCLK2Freq>
 8007b58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b5a:	e01b      	b.n	8007b94 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b5c:	4b08      	ldr	r3, [pc, #32]	@ (8007b80 <UART_SetConfig+0x2f8>)
 8007b5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b60:	e018      	b.n	8007b94 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b62:	f7fd ff25 	bl	80059b0 <HAL_RCC_GetSysClockFreq>
 8007b66:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b68:	e014      	b.n	8007b94 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b70:	e010      	b.n	8007b94 <UART_SetConfig+0x30c>
 8007b72:	bf00      	nop
 8007b74:	cfff69f3 	.word	0xcfff69f3
 8007b78:	40008000 	.word	0x40008000
 8007b7c:	40013800 	.word	0x40013800
 8007b80:	00f42400 	.word	0x00f42400
 8007b84:	08015b10 	.word	0x08015b10
      default:
        pclk = 0U;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007b92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f000 8084 	beq.w	8007ca4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba0:	4a4b      	ldr	r2, [pc, #300]	@ (8007cd0 <UART_SetConfig+0x448>)
 8007ba2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007baa:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bae:	005a      	lsls	r2, r3, #1
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	085b      	lsrs	r3, r3, #1
 8007bb6:	441a      	add	r2, r3
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bc0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bc2:	6a3b      	ldr	r3, [r7, #32]
 8007bc4:	2b0f      	cmp	r3, #15
 8007bc6:	d916      	bls.n	8007bf6 <UART_SetConfig+0x36e>
 8007bc8:	6a3b      	ldr	r3, [r7, #32]
 8007bca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bce:	d212      	bcs.n	8007bf6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	f023 030f 	bic.w	r3, r3, #15
 8007bd8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	085b      	lsrs	r3, r3, #1
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	f003 0307 	and.w	r3, r3, #7
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	8bfb      	ldrh	r3, [r7, #30]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	8bfa      	ldrh	r2, [r7, #30]
 8007bf2:	60da      	str	r2, [r3, #12]
 8007bf4:	e056      	b.n	8007ca4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007bfc:	e052      	b.n	8007ca4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007bfe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007c02:	3b01      	subs	r3, #1
 8007c04:	2b07      	cmp	r3, #7
 8007c06:	d822      	bhi.n	8007c4e <UART_SetConfig+0x3c6>
 8007c08:	a201      	add	r2, pc, #4	@ (adr r2, 8007c10 <UART_SetConfig+0x388>)
 8007c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0e:	bf00      	nop
 8007c10:	08007c31 	.word	0x08007c31
 8007c14:	08007c39 	.word	0x08007c39
 8007c18:	08007c4f 	.word	0x08007c4f
 8007c1c:	08007c3f 	.word	0x08007c3f
 8007c20:	08007c4f 	.word	0x08007c4f
 8007c24:	08007c4f 	.word	0x08007c4f
 8007c28:	08007c4f 	.word	0x08007c4f
 8007c2c:	08007c47 	.word	0x08007c47
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c30:	f7fd ff54 	bl	8005adc <HAL_RCC_GetPCLK2Freq>
 8007c34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c36:	e010      	b.n	8007c5a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c38:	4b26      	ldr	r3, [pc, #152]	@ (8007cd4 <UART_SetConfig+0x44c>)
 8007c3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c3c:	e00d      	b.n	8007c5a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c3e:	f7fd feb7 	bl	80059b0 <HAL_RCC_GetSysClockFreq>
 8007c42:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c44:	e009      	b.n	8007c5a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c4c:	e005      	b.n	8007c5a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007c58:	bf00      	nop
    }

    if (pclk != 0U)
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d021      	beq.n	8007ca4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c64:	4a1a      	ldr	r2, [pc, #104]	@ (8007cd0 <UART_SetConfig+0x448>)
 8007c66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	085b      	lsrs	r3, r3, #1
 8007c78:	441a      	add	r2, r3
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c82:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c84:	6a3b      	ldr	r3, [r7, #32]
 8007c86:	2b0f      	cmp	r3, #15
 8007c88:	d909      	bls.n	8007c9e <UART_SetConfig+0x416>
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c90:	d205      	bcs.n	8007c9e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	60da      	str	r2, [r3, #12]
 8007c9c:	e002      	b.n	8007ca4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007cc0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3730      	adds	r7, #48	@ 0x30
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cce:	bf00      	nop
 8007cd0:	08015b10 	.word	0x08015b10
 8007cd4:	00f42400 	.word	0x00f42400

08007cd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ce4:	f003 0308 	and.w	r3, r3, #8
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00a      	beq.n	8007d02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	430a      	orrs	r2, r1
 8007d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00a      	beq.n	8007d24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	430a      	orrs	r2, r1
 8007d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d28:	f003 0302 	and.w	r3, r3, #2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00a      	beq.n	8007d46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	430a      	orrs	r2, r1
 8007d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d4a:	f003 0304 	and.w	r3, r3, #4
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00a      	beq.n	8007d68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	430a      	orrs	r2, r1
 8007d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d6c:	f003 0310 	and.w	r3, r3, #16
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00a      	beq.n	8007d8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	430a      	orrs	r2, r1
 8007d88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d8e:	f003 0320 	and.w	r3, r3, #32
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00a      	beq.n	8007dac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	430a      	orrs	r2, r1
 8007daa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d01a      	beq.n	8007dee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	430a      	orrs	r2, r1
 8007dcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dd6:	d10a      	bne.n	8007dee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	430a      	orrs	r2, r1
 8007dec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00a      	beq.n	8007e10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	430a      	orrs	r2, r1
 8007e0e:	605a      	str	r2, [r3, #4]
  }
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b098      	sub	sp, #96	@ 0x60
 8007e20:	af02      	add	r7, sp, #8
 8007e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e2c:	f7fc f932 	bl	8004094 <HAL_GetTick>
 8007e30:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0308 	and.w	r3, r3, #8
 8007e3c:	2b08      	cmp	r3, #8
 8007e3e:	d12f      	bne.n	8007ea0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e44:	9300      	str	r3, [sp, #0]
 8007e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f88e 	bl	8007f70 <UART_WaitOnFlagUntilTimeout>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d022      	beq.n	8007ea0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e62:	e853 3f00 	ldrex	r3, [r3]
 8007e66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	461a      	mov	r2, r3
 8007e76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e78:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e7a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e80:	e841 2300 	strex	r3, r2, [r1]
 8007e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1e6      	bne.n	8007e5a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2220      	movs	r2, #32
 8007e90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	e063      	b.n	8007f68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0304 	and.w	r3, r3, #4
 8007eaa:	2b04      	cmp	r3, #4
 8007eac:	d149      	bne.n	8007f42 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007eae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f857 	bl	8007f70 <UART_WaitOnFlagUntilTimeout>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d03c      	beq.n	8007f42 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed0:	e853 3f00 	ldrex	r3, [r3]
 8007ed4:	623b      	str	r3, [r7, #32]
   return(result);
 8007ed6:	6a3b      	ldr	r3, [r7, #32]
 8007ed8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007edc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ee6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ee8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007eec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007eee:	e841 2300 	strex	r3, r2, [r1]
 8007ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1e6      	bne.n	8007ec8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	3308      	adds	r3, #8
 8007f00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	e853 3f00 	ldrex	r3, [r3]
 8007f08:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f023 0301 	bic.w	r3, r3, #1
 8007f10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	3308      	adds	r3, #8
 8007f18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f1a:	61fa      	str	r2, [r7, #28]
 8007f1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1e:	69b9      	ldr	r1, [r7, #24]
 8007f20:	69fa      	ldr	r2, [r7, #28]
 8007f22:	e841 2300 	strex	r3, r2, [r1]
 8007f26:	617b      	str	r3, [r7, #20]
   return(result);
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1e5      	bne.n	8007efa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2220      	movs	r2, #32
 8007f32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e012      	b.n	8007f68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2220      	movs	r2, #32
 8007f46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2220      	movs	r2, #32
 8007f4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3758      	adds	r7, #88	@ 0x58
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	603b      	str	r3, [r7, #0]
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f80:	e04f      	b.n	8008022 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f88:	d04b      	beq.n	8008022 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f8a:	f7fc f883 	bl	8004094 <HAL_GetTick>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	69ba      	ldr	r2, [r7, #24]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d302      	bcc.n	8007fa0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d101      	bne.n	8007fa4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e04e      	b.n	8008042 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 0304 	and.w	r3, r3, #4
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d037      	beq.n	8008022 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	2b80      	cmp	r3, #128	@ 0x80
 8007fb6:	d034      	beq.n	8008022 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	2b40      	cmp	r3, #64	@ 0x40
 8007fbc:	d031      	beq.n	8008022 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	69db      	ldr	r3, [r3, #28]
 8007fc4:	f003 0308 	and.w	r3, r3, #8
 8007fc8:	2b08      	cmp	r3, #8
 8007fca:	d110      	bne.n	8007fee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2208      	movs	r2, #8
 8007fd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	f000 f838 	bl	800804a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2208      	movs	r2, #8
 8007fde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e029      	b.n	8008042 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	69db      	ldr	r3, [r3, #28]
 8007ff4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ff8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ffc:	d111      	bne.n	8008022 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008006:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f000 f81e 	bl	800804a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2220      	movs	r2, #32
 8008012:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800801e:	2303      	movs	r3, #3
 8008020:	e00f      	b.n	8008042 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	69da      	ldr	r2, [r3, #28]
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	4013      	ands	r3, r2
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	429a      	cmp	r2, r3
 8008030:	bf0c      	ite	eq
 8008032:	2301      	moveq	r3, #1
 8008034:	2300      	movne	r3, #0
 8008036:	b2db      	uxtb	r3, r3
 8008038:	461a      	mov	r2, r3
 800803a:	79fb      	ldrb	r3, [r7, #7]
 800803c:	429a      	cmp	r2, r3
 800803e:	d0a0      	beq.n	8007f82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800804a:	b480      	push	{r7}
 800804c:	b095      	sub	sp, #84	@ 0x54
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800805a:	e853 3f00 	ldrex	r3, [r3]
 800805e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008062:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008066:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	461a      	mov	r2, r3
 800806e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008070:	643b      	str	r3, [r7, #64]	@ 0x40
 8008072:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008074:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008076:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008078:	e841 2300 	strex	r3, r2, [r1]
 800807c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800807e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1e6      	bne.n	8008052 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3308      	adds	r3, #8
 800808a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808c:	6a3b      	ldr	r3, [r7, #32]
 800808e:	e853 3f00 	ldrex	r3, [r3]
 8008092:	61fb      	str	r3, [r7, #28]
   return(result);
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800809a:	f023 0301 	bic.w	r3, r3, #1
 800809e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	3308      	adds	r3, #8
 80080a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80080aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080b0:	e841 2300 	strex	r3, r2, [r1]
 80080b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80080b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1e3      	bne.n	8008084 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d118      	bne.n	80080f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	e853 3f00 	ldrex	r3, [r3]
 80080d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	f023 0310 	bic.w	r3, r3, #16
 80080d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	461a      	mov	r2, r3
 80080e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080e2:	61bb      	str	r3, [r7, #24]
 80080e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e6:	6979      	ldr	r1, [r7, #20]
 80080e8:	69ba      	ldr	r2, [r7, #24]
 80080ea:	e841 2300 	strex	r3, r2, [r1]
 80080ee:	613b      	str	r3, [r7, #16]
   return(result);
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1e6      	bne.n	80080c4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2220      	movs	r2, #32
 80080fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800810a:	bf00      	nop
 800810c:	3754      	adds	r7, #84	@ 0x54
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr

08008116 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008116:	b480      	push	{r7}
 8008118:	b085      	sub	sp, #20
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008124:	2b01      	cmp	r3, #1
 8008126:	d101      	bne.n	800812c <HAL_UARTEx_DisableFifoMode+0x16>
 8008128:	2302      	movs	r3, #2
 800812a:	e027      	b.n	800817c <HAL_UARTEx_DisableFifoMode+0x66>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2224      	movs	r2, #36	@ 0x24
 8008138:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f022 0201 	bic.w	r2, r2, #1
 8008152:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800815a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2220      	movs	r2, #32
 800816e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3714      	adds	r7, #20
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008198:	2b01      	cmp	r3, #1
 800819a:	d101      	bne.n	80081a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800819c:	2302      	movs	r3, #2
 800819e:	e02d      	b.n	80081fc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2224      	movs	r2, #36	@ 0x24
 80081ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f022 0201 	bic.w	r2, r2, #1
 80081c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	430a      	orrs	r2, r1
 80081da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 f84f 	bl	8008280 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2220      	movs	r2, #32
 80081ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008214:	2b01      	cmp	r3, #1
 8008216:	d101      	bne.n	800821c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008218:	2302      	movs	r3, #2
 800821a:	e02d      	b.n	8008278 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2224      	movs	r2, #36	@ 0x24
 8008228:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f022 0201 	bic.w	r2, r2, #1
 8008242:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	430a      	orrs	r2, r1
 8008256:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 f811 	bl	8008280 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2220      	movs	r2, #32
 800826a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800828c:	2b00      	cmp	r3, #0
 800828e:	d108      	bne.n	80082a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80082a0:	e031      	b.n	8008306 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80082a2:	2308      	movs	r3, #8
 80082a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80082a6:	2308      	movs	r3, #8
 80082a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	0e5b      	lsrs	r3, r3, #25
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	f003 0307 	and.w	r3, r3, #7
 80082b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	0f5b      	lsrs	r3, r3, #29
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	f003 0307 	and.w	r3, r3, #7
 80082c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082ca:	7bbb      	ldrb	r3, [r7, #14]
 80082cc:	7b3a      	ldrb	r2, [r7, #12]
 80082ce:	4911      	ldr	r1, [pc, #68]	@ (8008314 <UARTEx_SetNbDataToProcess+0x94>)
 80082d0:	5c8a      	ldrb	r2, [r1, r2]
 80082d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80082d6:	7b3a      	ldrb	r2, [r7, #12]
 80082d8:	490f      	ldr	r1, [pc, #60]	@ (8008318 <UARTEx_SetNbDataToProcess+0x98>)
 80082da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082e8:	7bfb      	ldrb	r3, [r7, #15]
 80082ea:	7b7a      	ldrb	r2, [r7, #13]
 80082ec:	4909      	ldr	r1, [pc, #36]	@ (8008314 <UARTEx_SetNbDataToProcess+0x94>)
 80082ee:	5c8a      	ldrb	r2, [r1, r2]
 80082f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80082f4:	7b7a      	ldrb	r2, [r7, #13]
 80082f6:	4908      	ldr	r1, [pc, #32]	@ (8008318 <UARTEx_SetNbDataToProcess+0x98>)
 80082f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80082fe:	b29a      	uxth	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008306:	bf00      	nop
 8008308:	3714      	adds	r7, #20
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	08015b28 	.word	0x08015b28
 8008318:	08015b30 	.word	0x08015b30

0800831c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b088      	sub	sp, #32
 8008320:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008322:	2300      	movs	r3, #0
 8008324:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008326:	f107 0308 	add.w	r3, r7, #8
 800832a:	2218      	movs	r2, #24
 800832c:	2100      	movs	r1, #0
 800832e:	4618      	mov	r0, r3
 8008330:	f001 f9f0 	bl	8009714 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008334:	233f      	movs	r3, #63	@ 0x3f
 8008336:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8008338:	2381      	movs	r3, #129	@ 0x81
 800833a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800833c:	1dfb      	adds	r3, r7, #7
 800833e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008340:	2301      	movs	r3, #1
 8008342:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008344:	f107 0308 	add.w	r3, r7, #8
 8008348:	2100      	movs	r1, #0
 800834a:	4618      	mov	r0, r3
 800834c:	f001 fc6c 	bl	8009c28 <hci_send_req>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	da01      	bge.n	800835a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008356:	23ff      	movs	r3, #255	@ 0xff
 8008358:	e000      	b.n	800835c <aci_gap_set_non_discoverable+0x40>
  return status;
 800835a:	79fb      	ldrb	r3, [r7, #7]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3720      	adds	r7, #32
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8008364:	b5b0      	push	{r4, r5, r7, lr}
 8008366:	b0ce      	sub	sp, #312	@ 0x138
 8008368:	af00      	add	r7, sp, #0
 800836a:	4605      	mov	r5, r0
 800836c:	460c      	mov	r4, r1
 800836e:	4610      	mov	r0, r2
 8008370:	4619      	mov	r1, r3
 8008372:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008376:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800837a:	462a      	mov	r2, r5
 800837c:	701a      	strb	r2, [r3, #0]
 800837e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008382:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008386:	4622      	mov	r2, r4
 8008388:	801a      	strh	r2, [r3, #0]
 800838a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800838e:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8008392:	4602      	mov	r2, r0
 8008394:	801a      	strh	r2, [r3, #0]
 8008396:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800839a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800839e:	460a      	mov	r2, r1
 80083a0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80083a2:	f107 0310 	add.w	r3, r7, #16
 80083a6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80083aa:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80083ae:	3308      	adds	r3, #8
 80083b0:	f107 0210 	add.w	r2, r7, #16
 80083b4:	4413      	add	r3, r2
 80083b6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80083ba:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80083be:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80083c2:	4413      	add	r3, r2
 80083c4:	3309      	adds	r3, #9
 80083c6:	f107 0210 	add.w	r2, r7, #16
 80083ca:	4413      	add	r3, r2
 80083cc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80083d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083d4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80083d8:	2200      	movs	r2, #0
 80083da:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80083dc:	2300      	movs	r3, #0
 80083de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 80083e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80083e6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80083ea:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80083ee:	7812      	ldrb	r2, [r2, #0]
 80083f0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80083f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80083f6:	3301      	adds	r3, #1
 80083f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80083fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008400:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008404:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8008408:	8812      	ldrh	r2, [r2, #0]
 800840a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800840e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008412:	3302      	adds	r3, #2
 8008414:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8008418:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800841c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008420:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8008424:	8812      	ldrh	r2, [r2, #0]
 8008426:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800842a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800842e:	3302      	adds	r3, #2
 8008430:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8008434:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008438:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800843c:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8008440:	7812      	ldrb	r2, [r2, #0]
 8008442:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008444:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008448:	3301      	adds	r3, #1
 800844a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800844e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008452:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8008456:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008458:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800845c:	3301      	adds	r3, #1
 800845e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8008462:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008466:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800846a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800846c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008470:	3301      	adds	r3, #1
 8008472:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8008476:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800847a:	3308      	adds	r3, #8
 800847c:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8008480:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8008484:	4618      	mov	r0, r3
 8008486:	f001 f935 	bl	80096f4 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800848a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800848e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8008492:	4413      	add	r3, r2
 8008494:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8008498:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800849c:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80084a0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80084a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80084a6:	3301      	adds	r3, #1
 80084a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80084ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80084b0:	3301      	adds	r3, #1
 80084b2:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80084b6:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 80084ba:	4618      	mov	r0, r3
 80084bc:	f001 f91a 	bl	80096f4 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80084c0:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80084c4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80084c8:	4413      	add	r3, r2
 80084ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 80084ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80084d2:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 80084d6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80084d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80084dc:	3302      	adds	r3, #2
 80084de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 80084e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80084e6:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 80084ea:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80084ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80084f0:	3302      	adds	r3, #2
 80084f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80084f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80084fa:	2218      	movs	r2, #24
 80084fc:	2100      	movs	r1, #0
 80084fe:	4618      	mov	r0, r3
 8008500:	f001 f908 	bl	8009714 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008504:	233f      	movs	r3, #63	@ 0x3f
 8008506:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800850a:	2383      	movs	r3, #131	@ 0x83
 800850c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008510:	f107 0310 	add.w	r3, r7, #16
 8008514:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008518:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800851c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008520:	f107 030f 	add.w	r3, r7, #15
 8008524:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008528:	2301      	movs	r3, #1
 800852a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800852e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008532:	2100      	movs	r1, #0
 8008534:	4618      	mov	r0, r3
 8008536:	f001 fb77 	bl	8009c28 <hci_send_req>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	da01      	bge.n	8008544 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8008540:	23ff      	movs	r3, #255	@ 0xff
 8008542:	e004      	b.n	800854e <aci_gap_set_discoverable+0x1ea>
  return status;
 8008544:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008548:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800854c:	781b      	ldrb	r3, [r3, #0]
}
 800854e:	4618      	mov	r0, r3
 8008550:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8008554:	46bd      	mov	sp, r7
 8008556:	bdb0      	pop	{r4, r5, r7, pc}

08008558 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b0cc      	sub	sp, #304	@ 0x130
 800855c:	af00      	add	r7, sp, #0
 800855e:	4602      	mov	r2, r0
 8008560:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008564:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008568:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800856a:	f107 0310 	add.w	r3, r7, #16
 800856e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008572:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008576:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800857a:	2200      	movs	r2, #0
 800857c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800857e:	2300      	movs	r3, #0
 8008580:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8008584:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008588:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800858c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008590:	7812      	ldrb	r2, [r2, #0]
 8008592:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008594:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008598:	3301      	adds	r3, #1
 800859a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800859e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80085a2:	2218      	movs	r2, #24
 80085a4:	2100      	movs	r1, #0
 80085a6:	4618      	mov	r0, r3
 80085a8:	f001 f8b4 	bl	8009714 <Osal_MemSet>
  rq.ogf = 0x3f;
 80085ac:	233f      	movs	r3, #63	@ 0x3f
 80085ae:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 80085b2:	2385      	movs	r3, #133	@ 0x85
 80085b4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80085b8:	f107 0310 	add.w	r3, r7, #16
 80085bc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80085c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80085c4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80085c8:	f107 030f 	add.w	r3, r7, #15
 80085cc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80085d0:	2301      	movs	r3, #1
 80085d2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80085d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80085da:	2100      	movs	r1, #0
 80085dc:	4618      	mov	r0, r3
 80085de:	f001 fb23 	bl	8009c28 <hci_send_req>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	da01      	bge.n	80085ec <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80085e8:	23ff      	movs	r3, #255	@ 0xff
 80085ea:	e004      	b.n	80085f6 <aci_gap_set_io_capability+0x9e>
  return status;
 80085ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80085f0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80085f4:	781b      	ldrb	r3, [r3, #0]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8008600:	b5b0      	push	{r4, r5, r7, lr}
 8008602:	b0cc      	sub	sp, #304	@ 0x130
 8008604:	af00      	add	r7, sp, #0
 8008606:	4605      	mov	r5, r0
 8008608:	460c      	mov	r4, r1
 800860a:	4610      	mov	r0, r2
 800860c:	4619      	mov	r1, r3
 800860e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008612:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008616:	462a      	mov	r2, r5
 8008618:	701a      	strb	r2, [r3, #0]
 800861a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800861e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008622:	4622      	mov	r2, r4
 8008624:	701a      	strb	r2, [r3, #0]
 8008626:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800862a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800862e:	4602      	mov	r2, r0
 8008630:	701a      	strb	r2, [r3, #0]
 8008632:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008636:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800863a:	460a      	mov	r2, r1
 800863c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800863e:	f107 0310 	add.w	r3, r7, #16
 8008642:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008646:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800864a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800864e:	2200      	movs	r2, #0
 8008650:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008652:	2300      	movs	r3, #0
 8008654:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8008658:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800865c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008660:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008664:	7812      	ldrb	r2, [r2, #0]
 8008666:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008668:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800866c:	3301      	adds	r3, #1
 800866e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8008672:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008676:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800867a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800867e:	7812      	ldrb	r2, [r2, #0]
 8008680:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008682:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008686:	3301      	adds	r3, #1
 8008688:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800868c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008690:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008694:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8008698:	7812      	ldrb	r2, [r2, #0]
 800869a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800869c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80086a0:	3301      	adds	r3, #1
 80086a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80086a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80086aa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80086ae:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80086b2:	7812      	ldrb	r2, [r2, #0]
 80086b4:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80086b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80086ba:	3301      	adds	r3, #1
 80086bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80086c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80086c4:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 80086c8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80086ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80086ce:	3301      	adds	r3, #1
 80086d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80086d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80086d8:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 80086dc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80086de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80086e2:	3301      	adds	r3, #1
 80086e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80086e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80086ec:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80086f0:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80086f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80086f6:	3301      	adds	r3, #1
 80086f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80086fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008700:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008704:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008708:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800870c:	3304      	adds	r3, #4
 800870e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8008712:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008716:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800871a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800871c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008720:	3301      	adds	r3, #1
 8008722:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008726:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800872a:	2218      	movs	r2, #24
 800872c:	2100      	movs	r1, #0
 800872e:	4618      	mov	r0, r3
 8008730:	f000 fff0 	bl	8009714 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008734:	233f      	movs	r3, #63	@ 0x3f
 8008736:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800873a:	2386      	movs	r3, #134	@ 0x86
 800873c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008740:	f107 0310 	add.w	r3, r7, #16
 8008744:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008748:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800874c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008750:	f107 030f 	add.w	r3, r7, #15
 8008754:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008758:	2301      	movs	r3, #1
 800875a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800875e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008762:	2100      	movs	r1, #0
 8008764:	4618      	mov	r0, r3
 8008766:	f001 fa5f 	bl	8009c28 <hci_send_req>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	da01      	bge.n	8008774 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8008770:	23ff      	movs	r3, #255	@ 0xff
 8008772:	e004      	b.n	800877e <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8008774:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008778:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800877c:	781b      	ldrb	r3, [r3, #0]
}
 800877e:	4618      	mov	r0, r3
 8008780:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008784:	46bd      	mov	sp, r7
 8008786:	bdb0      	pop	{r4, r5, r7, pc}

08008788 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b0cc      	sub	sp, #304	@ 0x130
 800878c:	af00      	add	r7, sp, #0
 800878e:	4602      	mov	r2, r0
 8008790:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008794:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008798:	6019      	str	r1, [r3, #0]
 800879a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800879e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80087a2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80087a4:	f107 0310 	add.w	r3, r7, #16
 80087a8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80087ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80087b0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80087b4:	2200      	movs	r2, #0
 80087b6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80087b8:	2300      	movs	r3, #0
 80087ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80087be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80087c2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80087c6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80087ca:	8812      	ldrh	r2, [r2, #0]
 80087cc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80087ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80087d2:	3302      	adds	r3, #2
 80087d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 80087d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80087dc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80087e0:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80087e4:	6812      	ldr	r2, [r2, #0]
 80087e6:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80087ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80087ee:	3304      	adds	r3, #4
 80087f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80087f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80087f8:	2218      	movs	r2, #24
 80087fa:	2100      	movs	r1, #0
 80087fc:	4618      	mov	r0, r3
 80087fe:	f000 ff89 	bl	8009714 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008802:	233f      	movs	r3, #63	@ 0x3f
 8008804:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8008808:	2388      	movs	r3, #136	@ 0x88
 800880a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800880e:	f107 0310 	add.w	r3, r7, #16
 8008812:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008816:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800881a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800881e:	f107 030f 	add.w	r3, r7, #15
 8008822:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008826:	2301      	movs	r3, #1
 8008828:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800882c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008830:	2100      	movs	r1, #0
 8008832:	4618      	mov	r0, r3
 8008834:	f001 f9f8 	bl	8009c28 <hci_send_req>
 8008838:	4603      	mov	r3, r0
 800883a:	2b00      	cmp	r3, #0
 800883c:	da01      	bge.n	8008842 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800883e:	23ff      	movs	r3, #255	@ 0xff
 8008840:	e004      	b.n	800884c <aci_gap_pass_key_resp+0xc4>
  return status;
 8008842:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008846:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800884a:	781b      	ldrb	r3, [r3, #0]
}
 800884c:	4618      	mov	r0, r3
 800884e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8008856:	b590      	push	{r4, r7, lr}
 8008858:	b0cd      	sub	sp, #308	@ 0x134
 800885a:	af00      	add	r7, sp, #0
 800885c:	4604      	mov	r4, r0
 800885e:	4608      	mov	r0, r1
 8008860:	4611      	mov	r1, r2
 8008862:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008866:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800886a:	6013      	str	r3, [r2, #0]
 800886c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008870:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008874:	4622      	mov	r2, r4
 8008876:	701a      	strb	r2, [r3, #0]
 8008878:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800887c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008880:	4602      	mov	r2, r0
 8008882:	701a      	strb	r2, [r3, #0]
 8008884:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008888:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800888c:	460a      	mov	r2, r1
 800888e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8008890:	f107 0310 	add.w	r3, r7, #16
 8008894:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008898:	f107 0308 	add.w	r3, r7, #8
 800889c:	2207      	movs	r2, #7
 800889e:	2100      	movs	r1, #0
 80088a0:	4618      	mov	r0, r3
 80088a2:	f000 ff37 	bl	8009714 <Osal_MemSet>
  int index_input = 0;
 80088a6:	2300      	movs	r3, #0
 80088a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 80088ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80088b0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80088b4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80088b8:	7812      	ldrb	r2, [r2, #0]
 80088ba:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80088bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80088c0:	3301      	adds	r3, #1
 80088c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 80088c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80088ca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80088ce:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80088d2:	7812      	ldrb	r2, [r2, #0]
 80088d4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80088d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80088da:	3301      	adds	r3, #1
 80088dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 80088e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80088e4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80088e8:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80088ec:	7812      	ldrb	r2, [r2, #0]
 80088ee:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80088f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80088f4:	3301      	adds	r3, #1
 80088f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80088fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80088fe:	2218      	movs	r2, #24
 8008900:	2100      	movs	r1, #0
 8008902:	4618      	mov	r0, r3
 8008904:	f000 ff06 	bl	8009714 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008908:	233f      	movs	r3, #63	@ 0x3f
 800890a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800890e:	238a      	movs	r3, #138	@ 0x8a
 8008910:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008914:	f107 0310 	add.w	r3, r7, #16
 8008918:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800891c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008920:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8008924:	f107 0308 	add.w	r3, r7, #8
 8008928:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800892c:	2307      	movs	r3, #7
 800892e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008932:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008936:	2100      	movs	r1, #0
 8008938:	4618      	mov	r0, r3
 800893a:	f001 f975 	bl	8009c28 <hci_send_req>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	da01      	bge.n	8008948 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8008944:	23ff      	movs	r3, #255	@ 0xff
 8008946:	e02e      	b.n	80089a6 <aci_gap_init+0x150>
  if ( resp.Status )
 8008948:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800894c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d005      	beq.n	8008962 <aci_gap_init+0x10c>
    return resp.Status;
 8008956:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800895a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	e021      	b.n	80089a6 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8008962:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008966:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800896a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800896e:	b29a      	uxth	r2, r3
 8008970:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008974:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800897c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008980:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008984:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008988:	b29a      	uxth	r2, r3
 800898a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800898e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8008990:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008994:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008998:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800899c:	b29a      	uxth	r2, r3
 800899e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80089a2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd90      	pop	{r4, r7, pc}

080089b0 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b0cc      	sub	sp, #304	@ 0x130
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	4602      	mov	r2, r0
 80089b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80089bc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80089c0:	6019      	str	r1, [r3, #0]
 80089c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80089c6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80089ca:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80089cc:	f107 0310 	add.w	r3, r7, #16
 80089d0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80089d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80089d8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80089dc:	2200      	movs	r2, #0
 80089de:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80089e0:	2300      	movs	r3, #0
 80089e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 80089e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80089ea:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80089ee:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80089f2:	7812      	ldrb	r2, [r2, #0]
 80089f4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80089f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80089fa:	3301      	adds	r3, #1
 80089fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8008a00:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008a04:	1c58      	adds	r0, r3, #1
 8008a06:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008a0a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008a0e:	781a      	ldrb	r2, [r3, #0]
 8008a10:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008a14:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008a18:	6819      	ldr	r1, [r3, #0]
 8008a1a:	f000 fe6b 	bl	80096f4 <Osal_MemCpy>
  index_input += AdvDataLen;
 8008a1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008a22:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8008a2c:	4413      	add	r3, r2
 8008a2e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008a36:	2218      	movs	r2, #24
 8008a38:	2100      	movs	r1, #0
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f000 fe6a 	bl	8009714 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008a40:	233f      	movs	r3, #63	@ 0x3f
 8008a42:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8008a46:	238e      	movs	r3, #142	@ 0x8e
 8008a48:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008a4c:	f107 0310 	add.w	r3, r7, #16
 8008a50:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008a54:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008a58:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008a5c:	f107 030f 	add.w	r3, r7, #15
 8008a60:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008a64:	2301      	movs	r3, #1
 8008a66:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008a6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008a6e:	2100      	movs	r1, #0
 8008a70:	4618      	mov	r0, r3
 8008a72:	f001 f8d9 	bl	8009c28 <hci_send_req>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	da01      	bge.n	8008a80 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8008a7c:	23ff      	movs	r3, #255	@ 0xff
 8008a7e:	e004      	b.n	8008a8a <aci_gap_update_adv_data+0xda>
  return status;
 8008a80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008a84:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008a88:	781b      	ldrb	r3, [r3, #0]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b088      	sub	sp, #32
 8008a98:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a9e:	f107 0308 	add.w	r3, r7, #8
 8008aa2:	2218      	movs	r2, #24
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f000 fe34 	bl	8009714 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008aac:	233f      	movs	r3, #63	@ 0x3f
 8008aae:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8008ab0:	2392      	movs	r3, #146	@ 0x92
 8008ab2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008ab4:	1dfb      	adds	r3, r7, #7
 8008ab6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008abc:	f107 0308 	add.w	r3, r7, #8
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f001 f8b0 	bl	8009c28 <hci_send_req>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	da01      	bge.n	8008ad2 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008ace:	23ff      	movs	r3, #255	@ 0xff
 8008ad0:	e000      	b.n	8008ad4 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8008ad2:	79fb      	ldrb	r3, [r7, #7]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3720      	adds	r7, #32
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b0cc      	sub	sp, #304	@ 0x130
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ae8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008aec:	801a      	strh	r2, [r3, #0]
 8008aee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008af2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8008af6:	460a      	mov	r2, r1
 8008af8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8008afa:	f107 0310 	add.w	r3, r7, #16
 8008afe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008b02:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008b06:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008b14:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008b18:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008b1c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008b20:	8812      	ldrh	r2, [r2, #0]
 8008b22:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008b24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008b28:	3302      	adds	r3, #2
 8008b2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8008b2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008b32:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008b36:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8008b3a:	7812      	ldrb	r2, [r2, #0]
 8008b3c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008b3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008b42:	3301      	adds	r3, #1
 8008b44:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008b4c:	2218      	movs	r2, #24
 8008b4e:	2100      	movs	r1, #0
 8008b50:	4618      	mov	r0, r3
 8008b52:	f000 fddf 	bl	8009714 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b56:	233f      	movs	r3, #63	@ 0x3f
 8008b58:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8008b5c:	23a5      	movs	r3, #165	@ 0xa5
 8008b5e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008b62:	f107 0310 	add.w	r3, r7, #16
 8008b66:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008b6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008b6e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008b72:	f107 030f 	add.w	r3, r7, #15
 8008b76:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008b80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008b84:	2100      	movs	r1, #0
 8008b86:	4618      	mov	r0, r3
 8008b88:	f001 f84e 	bl	8009c28 <hci_send_req>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	da01      	bge.n	8008b96 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8008b92:	23ff      	movs	r3, #255	@ 0xff
 8008b94:	e004      	b.n	8008ba0 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8008b96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008b9a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008b9e:	781b      	ldrb	r3, [r3, #0]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b088      	sub	sp, #32
 8008bae:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008bb4:	f107 0308 	add.w	r3, r7, #8
 8008bb8:	2218      	movs	r2, #24
 8008bba:	2100      	movs	r1, #0
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f000 fda9 	bl	8009714 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008bc2:	233f      	movs	r3, #63	@ 0x3f
 8008bc4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8008bc6:	f240 1301 	movw	r3, #257	@ 0x101
 8008bca:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008bcc:	1dfb      	adds	r3, r7, #7
 8008bce:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008bd4:	f107 0308 	add.w	r3, r7, #8
 8008bd8:	2100      	movs	r1, #0
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f001 f824 	bl	8009c28 <hci_send_req>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	da01      	bge.n	8008bea <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008be6:	23ff      	movs	r3, #255	@ 0xff
 8008be8:	e000      	b.n	8008bec <aci_gatt_init+0x42>
  return status;
 8008bea:	79fb      	ldrb	r3, [r7, #7]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3720      	adds	r7, #32
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8008bf4:	b590      	push	{r4, r7, lr}
 8008bf6:	b0cf      	sub	sp, #316	@ 0x13c
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	4604      	mov	r4, r0
 8008bfc:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8008c00:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8008c04:	6001      	str	r1, [r0, #0]
 8008c06:	4610      	mov	r0, r2
 8008c08:	4619      	mov	r1, r3
 8008c0a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c0e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008c12:	4622      	mov	r2, r4
 8008c14:	701a      	strb	r2, [r3, #0]
 8008c16:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c1a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8008c1e:	4602      	mov	r2, r0
 8008c20:	701a      	strb	r2, [r3, #0]
 8008c22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c26:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008c2a:	460a      	mov	r2, r1
 8008c2c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8008c2e:	f107 0310 	add.w	r3, r7, #16
 8008c32:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8008c36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c3a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d00a      	beq.n	8008c5a <aci_gatt_add_service+0x66>
 8008c44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c48:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d101      	bne.n	8008c56 <aci_gatt_add_service+0x62>
 8008c52:	2311      	movs	r3, #17
 8008c54:	e002      	b.n	8008c5c <aci_gatt_add_service+0x68>
 8008c56:	2301      	movs	r3, #1
 8008c58:	e000      	b.n	8008c5c <aci_gatt_add_service+0x68>
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	f107 0210 	add.w	r2, r7, #16
 8008c60:	4413      	add	r3, r2
 8008c62:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008c66:	f107 030c 	add.w	r3, r7, #12
 8008c6a:	2203      	movs	r2, #3
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 fd50 	bl	8009714 <Osal_MemSet>
  int index_input = 0;
 8008c74:	2300      	movs	r3, #0
 8008c76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8008c7a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008c7e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008c82:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8008c86:	7812      	ldrb	r2, [r2, #0]
 8008c88:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008c8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008c8e:	3301      	adds	r3, #1
 8008c90:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8008c94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c98:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d002      	beq.n	8008ca8 <aci_gatt_add_service+0xb4>
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d004      	beq.n	8008cb0 <aci_gatt_add_service+0xbc>
 8008ca6:	e007      	b.n	8008cb8 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8008ca8:	2302      	movs	r3, #2
 8008caa:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8008cae:	e005      	b.n	8008cbc <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8008cb0:	2310      	movs	r3, #16
 8008cb2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8008cb6:	e001      	b.n	8008cbc <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8008cb8:	2397      	movs	r3, #151	@ 0x97
 8008cba:	e06c      	b.n	8008d96 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8008cbc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008cc0:	1c58      	adds	r0, r3, #1
 8008cc2:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8008cc6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008cca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008cce:	6819      	ldr	r1, [r3, #0]
 8008cd0:	f000 fd10 	bl	80096f4 <Osal_MemCpy>
    index_input += size;
 8008cd4:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8008cd8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8008cdc:	4413      	add	r3, r2
 8008cde:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8008ce2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008ce6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008cea:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8008cee:	7812      	ldrb	r2, [r2, #0]
 8008cf0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008cf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8008cfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008d00:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008d04:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8008d08:	7812      	ldrb	r2, [r2, #0]
 8008d0a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8008d0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008d10:	3301      	adds	r3, #1
 8008d12:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008d16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d1a:	2218      	movs	r2, #24
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 fcf8 	bl	8009714 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008d24:	233f      	movs	r3, #63	@ 0x3f
 8008d26:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8008d2a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8008d2e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008d32:	f107 0310 	add.w	r3, r7, #16
 8008d36:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008d3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008d3e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8008d42:	f107 030c 	add.w	r3, r7, #12
 8008d46:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008d50:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d54:	2100      	movs	r1, #0
 8008d56:	4618      	mov	r0, r3
 8008d58:	f000 ff66 	bl	8009c28 <hci_send_req>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	da01      	bge.n	8008d66 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8008d62:	23ff      	movs	r3, #255	@ 0xff
 8008d64:	e017      	b.n	8008d96 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8008d66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d6a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d005      	beq.n	8008d80 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8008d74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	e00a      	b.n	8008d96 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8008d80:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d84:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008d88:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8008d92:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd90      	pop	{r4, r7, pc}

08008da0 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8008da0:	b590      	push	{r4, r7, lr}
 8008da2:	b0d1      	sub	sp, #324	@ 0x144
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	4604      	mov	r4, r0
 8008da8:	4608      	mov	r0, r1
 8008daa:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8008dae:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8008db2:	600a      	str	r2, [r1, #0]
 8008db4:	4619      	mov	r1, r3
 8008db6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008dba:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8008dbe:	4622      	mov	r2, r4
 8008dc0:	801a      	strh	r2, [r3, #0]
 8008dc2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008dc6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008dca:	4602      	mov	r2, r0
 8008dcc:	701a      	strb	r2, [r3, #0]
 8008dce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008dd2:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8008dd6:	460a      	mov	r2, r1
 8008dd8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8008dda:	f107 0318 	add.w	r3, r7, #24
 8008dde:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8008de2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008de6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d00a      	beq.n	8008e06 <aci_gatt_add_char+0x66>
 8008df0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008df4:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	d101      	bne.n	8008e02 <aci_gatt_add_char+0x62>
 8008dfe:	2313      	movs	r3, #19
 8008e00:	e002      	b.n	8008e08 <aci_gatt_add_char+0x68>
 8008e02:	2303      	movs	r3, #3
 8008e04:	e000      	b.n	8008e08 <aci_gatt_add_char+0x68>
 8008e06:	2305      	movs	r3, #5
 8008e08:	f107 0218 	add.w	r2, r7, #24
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008e12:	f107 0314 	add.w	r3, r7, #20
 8008e16:	2203      	movs	r2, #3
 8008e18:	2100      	movs	r1, #0
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 fc7a 	bl	8009714 <Osal_MemSet>
  int index_input = 0;
 8008e20:	2300      	movs	r3, #0
 8008e22:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8008e26:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8008e2a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8008e2e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8008e32:	8812      	ldrh	r2, [r2, #0]
 8008e34:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008e36:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008e3a:	3302      	adds	r3, #2
 8008e3c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8008e40:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8008e44:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8008e48:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8008e4c:	7812      	ldrb	r2, [r2, #0]
 8008e4e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008e50:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008e54:	3301      	adds	r3, #1
 8008e56:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8008e5a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008e5e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d002      	beq.n	8008e6e <aci_gatt_add_char+0xce>
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d004      	beq.n	8008e76 <aci_gatt_add_char+0xd6>
 8008e6c:	e007      	b.n	8008e7e <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8008e6e:	2302      	movs	r3, #2
 8008e70:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8008e74:	e005      	b.n	8008e82 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8008e76:	2310      	movs	r3, #16
 8008e78:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8008e7c:	e001      	b.n	8008e82 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8008e7e:	2397      	movs	r3, #151	@ 0x97
 8008e80:	e091      	b.n	8008fa6 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8008e82:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8008e86:	1cd8      	adds	r0, r3, #3
 8008e88:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8008e8c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008e90:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008e94:	6819      	ldr	r1, [r3, #0]
 8008e96:	f000 fc2d 	bl	80096f4 <Osal_MemCpy>
    index_input += size;
 8008e9a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8008e9e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8008ea8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008eac:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8008eb0:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8008eb4:	8812      	ldrh	r2, [r2, #0]
 8008eb6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008eb8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008ebc:	3302      	adds	r3, #2
 8008ebe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8008ec2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008ec6:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8008eca:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8008ecc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8008ed6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008eda:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8008ede:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8008ee0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8008eea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008eee:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8008ef2:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8008ef4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008ef8:	3301      	adds	r3, #1
 8008efa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8008efe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008f02:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8008f06:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8008f08:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8008f12:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008f16:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8008f1a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8008f1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008f20:	3301      	adds	r3, #1
 8008f22:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008f26:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8008f2a:	2218      	movs	r2, #24
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f000 fbf0 	bl	8009714 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008f34:	233f      	movs	r3, #63	@ 0x3f
 8008f36:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8008f3a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8008f3e:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8008f42:	f107 0318 	add.w	r3, r7, #24
 8008f46:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8008f4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008f4e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8008f52:	f107 0314 	add.w	r3, r7, #20
 8008f56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008f60:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8008f64:	2100      	movs	r1, #0
 8008f66:	4618      	mov	r0, r3
 8008f68:	f000 fe5e 	bl	8009c28 <hci_send_req>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	da01      	bge.n	8008f76 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8008f72:	23ff      	movs	r3, #255	@ 0xff
 8008f74:	e017      	b.n	8008fa6 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8008f76:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008f7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d005      	beq.n	8008f90 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8008f84:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008f88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	e00a      	b.n	8008fa6 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8008f90:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008f94:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008f98:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8008fa2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd90      	pop	{r4, r7, pc}

08008fb0 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8008fb0:	b5b0      	push	{r4, r5, r7, lr}
 8008fb2:	b0cc      	sub	sp, #304	@ 0x130
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	4605      	mov	r5, r0
 8008fb8:	460c      	mov	r4, r1
 8008fba:	4610      	mov	r0, r2
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008fc2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008fc6:	462a      	mov	r2, r5
 8008fc8:	801a      	strh	r2, [r3, #0]
 8008fca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008fce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008fd2:	4622      	mov	r2, r4
 8008fd4:	801a      	strh	r2, [r3, #0]
 8008fd6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008fda:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8008fde:	4602      	mov	r2, r0
 8008fe0:	701a      	strb	r2, [r3, #0]
 8008fe2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008fe6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8008fea:	460a      	mov	r2, r1
 8008fec:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8008fee:	f107 0310 	add.w	r3, r7, #16
 8008ff2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008ff6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ffa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008ffe:	2200      	movs	r2, #0
 8009000:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009002:	2300      	movs	r3, #0
 8009004:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8009008:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800900c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009010:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009014:	8812      	ldrh	r2, [r2, #0]
 8009016:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009018:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800901c:	3302      	adds	r3, #2
 800901e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8009022:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009026:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800902a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800902e:	8812      	ldrh	r2, [r2, #0]
 8009030:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009032:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009036:	3302      	adds	r3, #2
 8009038:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800903c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009040:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009044:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8009048:	7812      	ldrb	r2, [r2, #0]
 800904a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800904c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009050:	3301      	adds	r3, #1
 8009052:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8009056:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800905a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800905e:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8009062:	7812      	ldrb	r2, [r2, #0]
 8009064:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009066:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800906a:	3301      	adds	r3, #1
 800906c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8009070:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009074:	1d98      	adds	r0, r3, #6
 8009076:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800907a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	461a      	mov	r2, r3
 8009082:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8009086:	f000 fb35 	bl	80096f4 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800908a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800908e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009098:	4413      	add	r3, r2
 800909a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800909e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090a2:	2218      	movs	r2, #24
 80090a4:	2100      	movs	r1, #0
 80090a6:	4618      	mov	r0, r3
 80090a8:	f000 fb34 	bl	8009714 <Osal_MemSet>
  rq.ogf = 0x3f;
 80090ac:	233f      	movs	r3, #63	@ 0x3f
 80090ae:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 80090b2:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80090b6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80090ba:	f107 0310 	add.w	r3, r7, #16
 80090be:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80090c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80090c6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80090ca:	f107 030f 	add.w	r3, r7, #15
 80090ce:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80090d2:	2301      	movs	r3, #1
 80090d4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80090d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090dc:	2100      	movs	r1, #0
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 fda2 	bl	8009c28 <hci_send_req>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	da01      	bge.n	80090ee <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80090ea:	23ff      	movs	r3, #255	@ 0xff
 80090ec:	e004      	b.n	80090f8 <aci_gatt_update_char_value+0x148>
  return status;
 80090ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80090f2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80090f6:	781b      	ldrb	r3, [r3, #0]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80090fe:	46bd      	mov	sp, r7
 8009100:	bdb0      	pop	{r4, r5, r7, pc}

08009102 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b0cc      	sub	sp, #304	@ 0x130
 8009106:	af00      	add	r7, sp, #0
 8009108:	4602      	mov	r2, r0
 800910a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800910e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009112:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8009114:	f107 0310 	add.w	r3, r7, #16
 8009118:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800911c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009120:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009124:	2200      	movs	r2, #0
 8009126:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009128:	2300      	movs	r3, #0
 800912a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800912e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009132:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009136:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800913a:	8812      	ldrh	r2, [r2, #0]
 800913c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800913e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009142:	3302      	adds	r3, #2
 8009144:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009148:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800914c:	2218      	movs	r2, #24
 800914e:	2100      	movs	r1, #0
 8009150:	4618      	mov	r0, r3
 8009152:	f000 fadf 	bl	8009714 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009156:	233f      	movs	r3, #63	@ 0x3f
 8009158:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800915c:	f240 1325 	movw	r3, #293	@ 0x125
 8009160:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009164:	f107 0310 	add.w	r3, r7, #16
 8009168:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800916c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009170:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009174:	f107 030f 	add.w	r3, r7, #15
 8009178:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800917c:	2301      	movs	r3, #1
 800917e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009182:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009186:	2100      	movs	r1, #0
 8009188:	4618      	mov	r0, r3
 800918a:	f000 fd4d 	bl	8009c28 <hci_send_req>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	da01      	bge.n	8009198 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8009194:	23ff      	movs	r3, #255	@ 0xff
 8009196:	e004      	b.n	80091a2 <aci_gatt_confirm_indication+0xa0>
  return status;
 8009198:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800919c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80091a0:	781b      	ldrb	r3, [r3, #0]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <aci_gatt_update_char_value_ext>:
                                           uint8_t Update_Type,
                                           uint16_t Char_Length,
                                           uint16_t Value_Offset,
                                           uint8_t Value_Length,
                                           const uint8_t* Value )
{
 80091ac:	b5b0      	push	{r4, r5, r7, lr}
 80091ae:	b0cc      	sub	sp, #304	@ 0x130
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	4605      	mov	r5, r0
 80091b4:	460c      	mov	r4, r1
 80091b6:	4610      	mov	r0, r2
 80091b8:	4619      	mov	r1, r3
 80091ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80091be:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80091c2:	462a      	mov	r2, r5
 80091c4:	801a      	strh	r2, [r3, #0]
 80091c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80091ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80091ce:	4622      	mov	r2, r4
 80091d0:	801a      	strh	r2, [r3, #0]
 80091d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80091d6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80091da:	4602      	mov	r2, r0
 80091dc:	801a      	strh	r2, [r3, #0]
 80091de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80091e2:	f2a3 132f 	subw	r3, r3, #303	@ 0x12f
 80091e6:	460a      	mov	r2, r1
 80091e8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_ext_cp0 *cp0 = (aci_gatt_update_char_value_ext_cp0*)(cmd_buffer);
 80091ea:	f107 0310 	add.w	r3, r7, #16
 80091ee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80091f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80091f6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80091fa:	2200      	movs	r2, #0
 80091fc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80091fe:	2300      	movs	r3, #0
 8009200:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Handle_To_Notify = Conn_Handle_To_Notify;
 8009204:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009208:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800920c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009210:	8812      	ldrh	r2, [r2, #0]
 8009212:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009214:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009218:	3302      	adds	r3, #2
 800921a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800921e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009222:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009226:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800922a:	8812      	ldrh	r2, [r2, #0]
 800922c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800922e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009232:	3302      	adds	r3, #2
 8009234:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8009238:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800923c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009240:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8009244:	8812      	ldrh	r2, [r2, #0]
 8009246:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8009248:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800924c:	3302      	adds	r3, #2
 800924e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Update_Type = Update_Type;
 8009252:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009256:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800925a:	f2a2 122f 	subw	r2, r2, #303	@ 0x12f
 800925e:	7812      	ldrb	r2, [r2, #0]
 8009260:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009262:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009266:	3301      	adds	r3, #1
 8009268:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Length = Char_Length;
 800926c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009270:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 8009274:	f8a3 2007 	strh.w	r2, [r3, #7]
  index_input += 2;
 8009278:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800927c:	3302      	adds	r3, #2
 800927e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Value_Offset = Value_Offset;
 8009282:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009286:	f8b7 2144 	ldrh.w	r2, [r7, #324]	@ 0x144
 800928a:	f8a3 2009 	strh.w	r2, [r3, #9]
  index_input += 2;
 800928e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009292:	3302      	adds	r3, #2
 8009294:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Value_Length = Value_Length;
 8009298:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800929c:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80092a0:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80092a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80092a6:	3301      	adds	r3, #1
 80092a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Value_Length );
 80092ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80092b0:	330c      	adds	r3, #12
 80092b2:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80092b6:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 80092ba:	4618      	mov	r0, r3
 80092bc:	f000 fa1a 	bl	80096f4 <Osal_MemCpy>
  index_input += Value_Length;
 80092c0:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
 80092c4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80092c8:	4413      	add	r3, r2
 80092ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80092ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80092d2:	2218      	movs	r2, #24
 80092d4:	2100      	movs	r1, #0
 80092d6:	4618      	mov	r0, r3
 80092d8:	f000 fa1c 	bl	8009714 <Osal_MemSet>
  rq.ogf = 0x3f;
 80092dc:	233f      	movs	r3, #63	@ 0x3f
 80092de:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x12c;
 80092e2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80092e6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80092ea:	f107 0310 	add.w	r3, r7, #16
 80092ee:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80092f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80092f6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80092fa:	f107 030f 	add.w	r3, r7, #15
 80092fe:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009302:	2301      	movs	r3, #1
 8009304:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009308:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800930c:	2100      	movs	r1, #0
 800930e:	4618      	mov	r0, r3
 8009310:	f000 fc8a 	bl	8009c28 <hci_send_req>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	da01      	bge.n	800931e <aci_gatt_update_char_value_ext+0x172>
    return BLE_STATUS_TIMEOUT;
 800931a:	23ff      	movs	r3, #255	@ 0xff
 800931c:	e004      	b.n	8009328 <aci_gatt_update_char_value_ext+0x17c>
  return status;
 800931e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009322:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009326:	781b      	ldrb	r3, [r3, #0]
}
 8009328:	4618      	mov	r0, r3
 800932a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800932e:	46bd      	mov	sp, r7
 8009330:	bdb0      	pop	{r4, r5, r7, pc}

08009332 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b0cc      	sub	sp, #304	@ 0x130
 8009336:	af00      	add	r7, sp, #0
 8009338:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800933c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009340:	601a      	str	r2, [r3, #0]
 8009342:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009346:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800934a:	4602      	mov	r2, r0
 800934c:	701a      	strb	r2, [r3, #0]
 800934e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009352:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009356:	460a      	mov	r2, r1
 8009358:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800935a:	f107 0310 	add.w	r3, r7, #16
 800935e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009362:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009366:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800936a:	2200      	movs	r2, #0
 800936c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800936e:	2300      	movs	r3, #0
 8009370:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8009374:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009378:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800937c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009380:	7812      	ldrb	r2, [r2, #0]
 8009382:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009384:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009388:	3301      	adds	r3, #1
 800938a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800938e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009392:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009396:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800939a:	7812      	ldrb	r2, [r2, #0]
 800939c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800939e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80093a2:	3301      	adds	r3, #1
 80093a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80093a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80093ac:	1c98      	adds	r0, r3, #2
 80093ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80093b2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80093b6:	781a      	ldrb	r2, [r3, #0]
 80093b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80093bc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80093c0:	6819      	ldr	r1, [r3, #0]
 80093c2:	f000 f997 	bl	80096f4 <Osal_MemCpy>
  index_input += Length;
 80093c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80093ca:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80093d4:	4413      	add	r3, r2
 80093d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80093da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093de:	2218      	movs	r2, #24
 80093e0:	2100      	movs	r1, #0
 80093e2:	4618      	mov	r0, r3
 80093e4:	f000 f996 	bl	8009714 <Osal_MemSet>
  rq.ogf = 0x3f;
 80093e8:	233f      	movs	r3, #63	@ 0x3f
 80093ea:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 80093ee:	230c      	movs	r3, #12
 80093f0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80093f4:	f107 0310 	add.w	r3, r7, #16
 80093f8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80093fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009400:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009404:	f107 030f 	add.w	r3, r7, #15
 8009408:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800940c:	2301      	movs	r3, #1
 800940e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009412:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009416:	2100      	movs	r1, #0
 8009418:	4618      	mov	r0, r3
 800941a:	f000 fc05 	bl	8009c28 <hci_send_req>
 800941e:	4603      	mov	r3, r0
 8009420:	2b00      	cmp	r3, #0
 8009422:	da01      	bge.n	8009428 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8009424:	23ff      	movs	r3, #255	@ 0xff
 8009426:	e004      	b.n	8009432 <aci_hal_write_config_data+0x100>
  return status;
 8009428:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800942c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009430:	781b      	ldrb	r3, [r3, #0]
}
 8009432:	4618      	mov	r0, r3
 8009434:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b0cc      	sub	sp, #304	@ 0x130
 8009440:	af00      	add	r7, sp, #0
 8009442:	4602      	mov	r2, r0
 8009444:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009448:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800944c:	701a      	strb	r2, [r3, #0]
 800944e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009452:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009456:	460a      	mov	r2, r1
 8009458:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800945a:	f107 0310 	add.w	r3, r7, #16
 800945e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009462:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009466:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800946a:	2200      	movs	r2, #0
 800946c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800946e:	2300      	movs	r3, #0
 8009470:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8009474:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009478:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800947c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009480:	7812      	ldrb	r2, [r2, #0]
 8009482:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009484:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009488:	3301      	adds	r3, #1
 800948a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800948e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009492:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009496:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800949a:	7812      	ldrb	r2, [r2, #0]
 800949c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800949e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80094a2:	3301      	adds	r3, #1
 80094a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80094a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094ac:	2218      	movs	r2, #24
 80094ae:	2100      	movs	r1, #0
 80094b0:	4618      	mov	r0, r3
 80094b2:	f000 f92f 	bl	8009714 <Osal_MemSet>
  rq.ogf = 0x3f;
 80094b6:	233f      	movs	r3, #63	@ 0x3f
 80094b8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 80094bc:	230f      	movs	r3, #15
 80094be:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80094c2:	f107 0310 	add.w	r3, r7, #16
 80094c6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80094ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80094ce:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80094d2:	f107 030f 	add.w	r3, r7, #15
 80094d6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80094da:	2301      	movs	r3, #1
 80094dc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80094e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094e4:	2100      	movs	r1, #0
 80094e6:	4618      	mov	r0, r3
 80094e8:	f000 fb9e 	bl	8009c28 <hci_send_req>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	da01      	bge.n	80094f6 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80094f2:	23ff      	movs	r3, #255	@ 0xff
 80094f4:	e004      	b.n	8009500 <aci_hal_set_tx_power_level+0xc4>
  return status;
 80094f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80094fa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80094fe:	781b      	ldrb	r3, [r3, #0]
}
 8009500:	4618      	mov	r0, r3
 8009502:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b0cc      	sub	sp, #304	@ 0x130
 800950e:	af00      	add	r7, sp, #0
 8009510:	4602      	mov	r2, r0
 8009512:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009516:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800951a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800951c:	f107 0310 	add.w	r3, r7, #16
 8009520:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009524:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009528:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800952c:	2200      	movs	r2, #0
 800952e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009530:	2300      	movs	r3, #0
 8009532:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8009536:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800953a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800953e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009542:	8812      	ldrh	r2, [r2, #0]
 8009544:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009546:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800954a:	3302      	adds	r3, #2
 800954c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009550:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009554:	2218      	movs	r2, #24
 8009556:	2100      	movs	r1, #0
 8009558:	4618      	mov	r0, r3
 800955a:	f000 f8db 	bl	8009714 <Osal_MemSet>
  rq.ogf = 0x3f;
 800955e:	233f      	movs	r3, #63	@ 0x3f
 8009560:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8009564:	2318      	movs	r3, #24
 8009566:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800956a:	f107 0310 	add.w	r3, r7, #16
 800956e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009572:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009576:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800957a:	f107 030f 	add.w	r3, r7, #15
 800957e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009582:	2301      	movs	r3, #1
 8009584:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009588:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800958c:	2100      	movs	r1, #0
 800958e:	4618      	mov	r0, r3
 8009590:	f000 fb4a 	bl	8009c28 <hci_send_req>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	da01      	bge.n	800959e <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800959a:	23ff      	movs	r3, #255	@ 0xff
 800959c:	e004      	b.n	80095a8 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800959e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80095a2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80095a6:	781b      	ldrb	r3, [r3, #0]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b088      	sub	sp, #32
 80095b6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80095b8:	2300      	movs	r3, #0
 80095ba:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80095bc:	f107 0308 	add.w	r3, r7, #8
 80095c0:	2218      	movs	r2, #24
 80095c2:	2100      	movs	r1, #0
 80095c4:	4618      	mov	r0, r3
 80095c6:	f000 f8a5 	bl	8009714 <Osal_MemSet>
  rq.ogf = 0x03;
 80095ca:	2303      	movs	r3, #3
 80095cc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80095ce:	2303      	movs	r3, #3
 80095d0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80095d2:	1dfb      	adds	r3, r7, #7
 80095d4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80095d6:	2301      	movs	r3, #1
 80095d8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80095da:	f107 0308 	add.w	r3, r7, #8
 80095de:	2100      	movs	r1, #0
 80095e0:	4618      	mov	r0, r3
 80095e2:	f000 fb21 	bl	8009c28 <hci_send_req>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	da01      	bge.n	80095f0 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80095ec:	23ff      	movs	r3, #255	@ 0xff
 80095ee:	e000      	b.n	80095f2 <hci_reset+0x40>
  return status;
 80095f0:	79fb      	ldrb	r3, [r7, #7]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3720      	adds	r7, #32
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80095fa:	b590      	push	{r4, r7, lr}
 80095fc:	b0cd      	sub	sp, #308	@ 0x134
 80095fe:	af00      	add	r7, sp, #0
 8009600:	4604      	mov	r4, r0
 8009602:	4608      	mov	r0, r1
 8009604:	4611      	mov	r1, r2
 8009606:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800960a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800960e:	4622      	mov	r2, r4
 8009610:	701a      	strb	r2, [r3, #0]
 8009612:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009616:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800961a:	4602      	mov	r2, r0
 800961c:	701a      	strb	r2, [r3, #0]
 800961e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009622:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8009626:	460a      	mov	r2, r1
 8009628:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800962a:	f107 0310 	add.w	r3, r7, #16
 800962e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009632:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009636:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800963a:	2200      	movs	r2, #0
 800963c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800963e:	2300      	movs	r3, #0
 8009640:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8009644:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009648:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800964c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009650:	7812      	ldrb	r2, [r2, #0]
 8009652:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009654:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009658:	3301      	adds	r3, #1
 800965a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800965e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009662:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009666:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800966a:	7812      	ldrb	r2, [r2, #0]
 800966c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800966e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009672:	3301      	adds	r3, #1
 8009674:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8009678:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800967c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009680:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8009684:	7812      	ldrb	r2, [r2, #0]
 8009686:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009688:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800968c:	3301      	adds	r3, #1
 800968e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009692:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009696:	2218      	movs	r2, #24
 8009698:	2100      	movs	r1, #0
 800969a:	4618      	mov	r0, r3
 800969c:	f000 f83a 	bl	8009714 <Osal_MemSet>
  rq.ogf = 0x08;
 80096a0:	2308      	movs	r3, #8
 80096a2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 80096a6:	2331      	movs	r3, #49	@ 0x31
 80096a8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80096ac:	f107 0310 	add.w	r3, r7, #16
 80096b0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80096b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80096b8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80096bc:	f107 030f 	add.w	r3, r7, #15
 80096c0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80096c4:	2301      	movs	r3, #1
 80096c6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80096ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096ce:	2100      	movs	r1, #0
 80096d0:	4618      	mov	r0, r3
 80096d2:	f000 faa9 	bl	8009c28 <hci_send_req>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	da01      	bge.n	80096e0 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80096dc:	23ff      	movs	r3, #255	@ 0xff
 80096de:	e004      	b.n	80096ea <hci_le_set_default_phy+0xf0>
  return status;
 80096e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096e4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80096e8:	781b      	ldrb	r3, [r3, #0]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd90      	pop	{r4, r7, pc}

080096f4 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	68b9      	ldr	r1, [r7, #8]
 8009704:	68f8      	ldr	r0, [r7, #12]
 8009706:	f009 fad4 	bl	8012cb2 <memcpy>
 800970a:	4603      	mov	r3, r0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	68b9      	ldr	r1, [r7, #8]
 8009724:	68f8      	ldr	r0, [r7, #12]
 8009726:	f009 fa35 	bl	8012b94 <memset>
 800972a:	4603      	mov	r3, r0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8009734:	b480      	push	{r7}
 8009736:	af00      	add	r7, sp, #0
  return;
 8009738:	bf00      	nop
}
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr

08009742 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8009742:	b480      	push	{r7}
 8009744:	af00      	add	r7, sp, #0
  return;
 8009746:	bf00      	nop
}
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8009750:	b480      	push	{r7}
 8009752:	af00      	add	r7, sp, #0
  return;
 8009754:	bf00      	nop
}
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr

0800975e <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800975e:	b480      	push	{r7}
 8009760:	af00      	add	r7, sp, #0
  return;
 8009762:	bf00      	nop
}
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800976c:	b480      	push	{r7}
 800976e:	af00      	add	r7, sp, #0
  return;
 8009770:	bf00      	nop
}
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800977a:	b480      	push	{r7}
 800977c:	af00      	add	r7, sp, #0
  return;
 800977e:	bf00      	nop
}
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8009788:	b480      	push	{r7}
 800978a:	af00      	add	r7, sp, #0
  return;
 800978c:	bf00      	nop
}
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr

08009796 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8009796:	b480      	push	{r7}
 8009798:	af00      	add	r7, sp, #0
  return;
 800979a:	bf00      	nop
}
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80097a4:	b480      	push	{r7}
 80097a6:	af00      	add	r7, sp, #0
  return;
 80097a8:	bf00      	nop
}
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80097b2:	b480      	push	{r7}
 80097b4:	af00      	add	r7, sp, #0
  return;
 80097b6:	bf00      	nop
}
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80097c0:	b480      	push	{r7}
 80097c2:	af00      	add	r7, sp, #0
  return;
 80097c4:	bf00      	nop
}
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr

080097ce <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80097ce:	b480      	push	{r7}
 80097d0:	af00      	add	r7, sp, #0
  return;
 80097d2:	bf00      	nop
}
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 80097dc:	b480      	push	{r7}
 80097de:	af00      	add	r7, sp, #0
  return;
 80097e0:	bf00      	nop
}
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr

080097ea <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 80097ea:	b480      	push	{r7}
 80097ec:	af00      	add	r7, sp, #0
  return;
 80097ee:	bf00      	nop
}
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80097f8:	b480      	push	{r7}
 80097fa:	af00      	add	r7, sp, #0
  return;
 80097fc:	bf00      	nop
}
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8009806:	b480      	push	{r7}
 8009808:	af00      	add	r7, sp, #0
  return;
 800980a:	bf00      	nop
}
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8009814:	b480      	push	{r7}
 8009816:	af00      	add	r7, sp, #0
  return;
 8009818:	bf00      	nop
}
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
	...

08009824 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8009824:	b580      	push	{r7, lr}
 8009826:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8009828:	4b04      	ldr	r3, [pc, #16]	@ (800983c <SVCCTL_Init+0x18>)
 800982a:	2200      	movs	r2, #0
 800982c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800982e:	4b04      	ldr	r3, [pc, #16]	@ (8009840 <SVCCTL_Init+0x1c>)
 8009830:	2200      	movs	r2, #0
 8009832:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8009834:	f000 f806 	bl	8009844 <SVCCTL_SvcInit>

  return;
 8009838:	bf00      	nop
}
 800983a:	bd80      	pop	{r7, pc}
 800983c:	20000394 	.word	0x20000394
 8009840:	200003b4 	.word	0x200003b4

08009844 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	af00      	add	r7, sp, #0
  BAS_Init();
 8009848:	f7ff ff74 	bl	8009734 <BAS_Init>

  BLS_Init();
 800984c:	f7ff ff79 	bl	8009742 <BLS_Init>

  CRS_STM_Init();
 8009850:	f7ff ff7e 	bl	8009750 <CRS_STM_Init>

  DIS_Init();
 8009854:	f7ff ff83 	bl	800975e <DIS_Init>

  EDS_STM_Init();
 8009858:	f7ff ff88 	bl	800976c <EDS_STM_Init>

  HIDS_Init();
 800985c:	f7ff ff8d 	bl	800977a <HIDS_Init>

  HRS_Init();
 8009860:	f7ff ff92 	bl	8009788 <HRS_Init>

  HTS_Init();
 8009864:	f7ff ff97 	bl	8009796 <HTS_Init>

  IAS_Init();
 8009868:	f7ff ff9c 	bl	80097a4 <IAS_Init>

  LLS_Init();
 800986c:	f7ff ffa1 	bl	80097b2 <LLS_Init>

  TPS_Init();
 8009870:	f7ff ffa6 	bl	80097c0 <TPS_Init>

  MOTENV_STM_Init();
 8009874:	f7ff ffab 	bl	80097ce <MOTENV_STM_Init>

  P2PS_STM_Init();
 8009878:	f7ff ffb0 	bl	80097dc <P2PS_STM_Init>

  ZDD_STM_Init();
 800987c:	f7ff ffb5 	bl	80097ea <ZDD_STM_Init>

  OTAS_STM_Init();
 8009880:	f7ff ffba 	bl	80097f8 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8009884:	f7ff ffc6 	bl	8009814 <BVOPUS_STM_Init>

  MESH_Init();
 8009888:	f7ff ffbd 	bl	8009806 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800988c:	f001 fb92 	bl	800afb4 <SVCCTL_InitCustomSvc>
  
  return;
 8009890:	bf00      	nop
}
 8009892:	bd80      	pop	{r7, pc}

08009894 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800989c:	4b09      	ldr	r3, [pc, #36]	@ (80098c4 <SVCCTL_RegisterSvcHandler+0x30>)
 800989e:	7f1b      	ldrb	r3, [r3, #28]
 80098a0:	4619      	mov	r1, r3
 80098a2:	4a08      	ldr	r2, [pc, #32]	@ (80098c4 <SVCCTL_RegisterSvcHandler+0x30>)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80098aa:	4b06      	ldr	r3, [pc, #24]	@ (80098c4 <SVCCTL_RegisterSvcHandler+0x30>)
 80098ac:	7f1b      	ldrb	r3, [r3, #28]
 80098ae:	3301      	adds	r3, #1
 80098b0:	b2da      	uxtb	r2, r3
 80098b2:	4b04      	ldr	r3, [pc, #16]	@ (80098c4 <SVCCTL_RegisterSvcHandler+0x30>)
 80098b4:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80098b6:	bf00      	nop
}
 80098b8:	370c      	adds	r7, #12
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	20000394 	.word	0x20000394

080098c8 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b086      	sub	sp, #24
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	3301      	adds	r3, #1
 80098d4:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80098d6:	2300      	movs	r3, #0
 80098d8:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	2bff      	cmp	r3, #255	@ 0xff
 80098e0:	d125      	bne.n	800992e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	3302      	adds	r3, #2
 80098e6:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	881b      	ldrh	r3, [r3, #0]
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80098f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80098f6:	d118      	bne.n	800992a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80098f8:	2300      	movs	r3, #0
 80098fa:	757b      	strb	r3, [r7, #21]
 80098fc:	e00d      	b.n	800991a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80098fe:	7d7b      	ldrb	r3, [r7, #21]
 8009900:	4a1a      	ldr	r2, [pc, #104]	@ (800996c <SVCCTL_UserEvtRx+0xa4>)
 8009902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	4798      	blx	r3
 800990a:	4603      	mov	r3, r0
 800990c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800990e:	7dfb      	ldrb	r3, [r7, #23]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d108      	bne.n	8009926 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009914:	7d7b      	ldrb	r3, [r7, #21]
 8009916:	3301      	adds	r3, #1
 8009918:	757b      	strb	r3, [r7, #21]
 800991a:	4b14      	ldr	r3, [pc, #80]	@ (800996c <SVCCTL_UserEvtRx+0xa4>)
 800991c:	7f1b      	ldrb	r3, [r3, #28]
 800991e:	7d7a      	ldrb	r2, [r7, #21]
 8009920:	429a      	cmp	r2, r3
 8009922:	d3ec      	bcc.n	80098fe <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8009924:	e002      	b.n	800992c <SVCCTL_UserEvtRx+0x64>
              break;
 8009926:	bf00      	nop
          break;
 8009928:	e000      	b.n	800992c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800992a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800992c:	e000      	b.n	8009930 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800992e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8009930:	7dfb      	ldrb	r3, [r7, #23]
 8009932:	2b02      	cmp	r3, #2
 8009934:	d00f      	beq.n	8009956 <SVCCTL_UserEvtRx+0x8e>
 8009936:	2b02      	cmp	r3, #2
 8009938:	dc10      	bgt.n	800995c <SVCCTL_UserEvtRx+0x94>
 800993a:	2b00      	cmp	r3, #0
 800993c:	d002      	beq.n	8009944 <SVCCTL_UserEvtRx+0x7c>
 800993e:	2b01      	cmp	r3, #1
 8009940:	d006      	beq.n	8009950 <SVCCTL_UserEvtRx+0x88>
 8009942:	e00b      	b.n	800995c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 ff8f 	bl	800a868 <SVCCTL_App_Notification>
 800994a:	4603      	mov	r3, r0
 800994c:	75bb      	strb	r3, [r7, #22]
      break;
 800994e:	e008      	b.n	8009962 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009950:	2301      	movs	r3, #1
 8009952:	75bb      	strb	r3, [r7, #22]
      break;
 8009954:	e005      	b.n	8009962 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8009956:	2300      	movs	r3, #0
 8009958:	75bb      	strb	r3, [r7, #22]
      break;
 800995a:	e002      	b.n	8009962 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800995c:	2301      	movs	r3, #1
 800995e:	75bb      	strb	r3, [r7, #22]
      break;
 8009960:	bf00      	nop
  }

  return (return_status);
 8009962:	7dbb      	ldrb	r3, [r7, #22]
}
 8009964:	4618      	mov	r0, r3
 8009966:	3718      	adds	r7, #24
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	20000394 	.word	0x20000394

08009970 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b088      	sub	sp, #32
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009978:	f107 030c 	add.w	r3, r7, #12
 800997c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	212e      	movs	r1, #46	@ 0x2e
 8009988:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800998c:	f000 fae8 	bl	8009f60 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	330b      	adds	r3, #11
 8009994:	78db      	ldrb	r3, [r3, #3]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3720      	adds	r7, #32
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b088      	sub	sp, #32
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80099a6:	f107 030c 	add.w	r3, r7, #12
 80099aa:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	210f      	movs	r1, #15
 80099b6:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 80099ba:	f000 fad1 	bl	8009f60 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80099be:	69fb      	ldr	r3, [r7, #28]
 80099c0:	330b      	adds	r3, #11
 80099c2:	78db      	ldrb	r3, [r3, #3]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3720      	adds	r7, #32
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b088      	sub	sp, #32
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80099d4:	f107 030c 	add.w	r3, r7, #12
 80099d8:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	2110      	movs	r1, #16
 80099e0:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 80099e4:	f000 fabc 	bl	8009f60 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	330b      	adds	r3, #11
 80099ec:	78db      	ldrb	r3, [r3, #3]
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3720      	adds	r7, #32
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
	...

080099f8 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80099f8:	b480      	push	{r7}
 80099fa:	b08b      	sub	sp, #44	@ 0x2c
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009a00:	2300      	movs	r3, #0
 8009a02:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009a04:	2300      	movs	r3, #0
 8009a06:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8009a10:	2300      	movs	r3, #0
 8009a12:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8009a14:	2300      	movs	r3, #0
 8009a16:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8009a20:	4b4a      	ldr	r3, [pc, #296]	@ (8009b4c <SHCI_GetWirelessFwInfo+0x154>)
 8009a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a24:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009a28:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8009a32:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a44      	ldr	r2, [pc, #272]	@ (8009b50 <SHCI_GetWirelessFwInfo+0x158>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d10f      	bne.n	8009a64 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	695b      	ldr	r3, [r3, #20]
 8009a48:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	699b      	ldr	r3, [r3, #24]
 8009a4e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	69db      	ldr	r3, [r3, #28]
 8009a54:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	617b      	str	r3, [r7, #20]
 8009a62:	e01a      	b.n	8009a9a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8009a6c:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8009a70:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	695b      	ldr	r3, [r3, #20]
 8009a80:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	699b      	ldr	r3, [r3, #24]
 8009a88:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a9c:	0e1b      	lsrs	r3, r3, #24
 8009a9e:	b2da      	uxtb	r2, r3
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa6:	0c1b      	lsrs	r3, r3, #16
 8009aa8:	b2da      	uxtb	r2, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab0:	0a1b      	lsrs	r3, r3, #8
 8009ab2:	b2da      	uxtb	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8009ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aba:	091b      	lsrs	r3, r3, #4
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	f003 030f 	and.w	r3, r3, #15
 8009ac2:	b2da      	uxtb	r2, r3
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	f003 030f 	and.w	r3, r3, #15
 8009ad0:	b2da      	uxtb	r2, r3
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009ad6:	6a3b      	ldr	r3, [r7, #32]
 8009ad8:	0e1b      	lsrs	r3, r3, #24
 8009ada:	b2da      	uxtb	r2, r3
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009ae0:	6a3b      	ldr	r3, [r7, #32]
 8009ae2:	0c1b      	lsrs	r3, r3, #16
 8009ae4:	b2da      	uxtb	r2, r3
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8009aea:	6a3b      	ldr	r3, [r7, #32]
 8009aec:	0a1b      	lsrs	r3, r3, #8
 8009aee:	b2da      	uxtb	r2, r3
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009af4:	6a3b      	ldr	r3, [r7, #32]
 8009af6:	b2da      	uxtb	r2, r3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	b2da      	uxtb	r2, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009b04:	69bb      	ldr	r3, [r7, #24]
 8009b06:	0e1b      	lsrs	r3, r3, #24
 8009b08:	b2da      	uxtb	r2, r3
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	0c1b      	lsrs	r3, r3, #16
 8009b12:	b2da      	uxtb	r2, r3
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009b18:	69bb      	ldr	r3, [r7, #24]
 8009b1a:	0a1b      	lsrs	r3, r3, #8
 8009b1c:	b2da      	uxtb	r2, r3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	0e1b      	lsrs	r3, r3, #24
 8009b26:	b2da      	uxtb	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	0c1b      	lsrs	r3, r3, #16
 8009b30:	b2da      	uxtb	r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	b2da      	uxtb	r2, r3
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	372c      	adds	r7, #44	@ 0x2c
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr
 8009b4c:	58004000 	.word	0x58004000
 8009b50:	a94656b9 	.word	0xa94656b9

08009b54 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	4a08      	ldr	r2, [pc, #32]	@ (8009b84 <hci_init+0x30>)
 8009b64:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8009b66:	4a08      	ldr	r2, [pc, #32]	@ (8009b88 <hci_init+0x34>)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8009b6c:	4806      	ldr	r0, [pc, #24]	@ (8009b88 <hci_init+0x34>)
 8009b6e:	f000 f979 	bl	8009e64 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4618      	mov	r0, r3
 8009b78:	f000 f8da 	bl	8009d30 <TlInit>

  return;
 8009b7c:	bf00      	nop
}
 8009b7e:	3708      	adds	r7, #8
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	200006e8 	.word	0x200006e8
 8009b88:	200006c0 	.word	0x200006c0

08009b8c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009b92:	4822      	ldr	r0, [pc, #136]	@ (8009c1c <hci_user_evt_proc+0x90>)
 8009b94:	f000 fd32 	bl	800a5fc <LST_is_empty>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d12b      	bne.n	8009bf6 <hci_user_evt_proc+0x6a>
 8009b9e:	4b20      	ldr	r3, [pc, #128]	@ (8009c20 <hci_user_evt_proc+0x94>)
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d027      	beq.n	8009bf6 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009ba6:	f107 030c 	add.w	r3, r7, #12
 8009baa:	4619      	mov	r1, r3
 8009bac:	481b      	ldr	r0, [pc, #108]	@ (8009c1c <hci_user_evt_proc+0x90>)
 8009bae:	f000 fdb4 	bl	800a71a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8009bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8009c24 <hci_user_evt_proc+0x98>)
 8009bb4:	69db      	ldr	r3, [r3, #28]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d00c      	beq.n	8009bd4 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009bc2:	4b18      	ldr	r3, [pc, #96]	@ (8009c24 <hci_user_evt_proc+0x98>)
 8009bc4:	69db      	ldr	r3, [r3, #28]
 8009bc6:	1d3a      	adds	r2, r7, #4
 8009bc8:	4610      	mov	r0, r2
 8009bca:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8009bcc:	793a      	ldrb	r2, [r7, #4]
 8009bce:	4b14      	ldr	r3, [pc, #80]	@ (8009c20 <hci_user_evt_proc+0x94>)
 8009bd0:	701a      	strb	r2, [r3, #0]
 8009bd2:	e002      	b.n	8009bda <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009bd4:	4b12      	ldr	r3, [pc, #72]	@ (8009c20 <hci_user_evt_proc+0x94>)
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8009bda:	4b11      	ldr	r3, [pc, #68]	@ (8009c20 <hci_user_evt_proc+0x94>)
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d004      	beq.n	8009bec <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	4618      	mov	r0, r3
 8009be6:	f000 fc0d 	bl	800a404 <TL_MM_EvtDone>
 8009bea:	e004      	b.n	8009bf6 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	4619      	mov	r1, r3
 8009bf0:	480a      	ldr	r0, [pc, #40]	@ (8009c1c <hci_user_evt_proc+0x90>)
 8009bf2:	f000 fd25 	bl	800a640 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009bf6:	4809      	ldr	r0, [pc, #36]	@ (8009c1c <hci_user_evt_proc+0x90>)
 8009bf8:	f000 fd00 	bl	800a5fc <LST_is_empty>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d107      	bne.n	8009c12 <hci_user_evt_proc+0x86>
 8009c02:	4b07      	ldr	r3, [pc, #28]	@ (8009c20 <hci_user_evt_proc+0x94>)
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d003      	beq.n	8009c12 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8009c0a:	4804      	ldr	r0, [pc, #16]	@ (8009c1c <hci_user_evt_proc+0x90>)
 8009c0c:	f001 f852 	bl	800acb4 <hci_notify_asynch_evt>
  }


  return;
 8009c10:	bf00      	nop
 8009c12:	bf00      	nop
}
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	200003bc 	.word	0x200003bc
 8009c20:	200003c8 	.word	0x200003c8
 8009c24:	200006c0 	.word	0x200006c0

08009c28 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b088      	sub	sp, #32
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	460b      	mov	r3, r1
 8009c32:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8009c34:	2000      	movs	r0, #0
 8009c36:	f000 f8d1 	bl	8009ddc <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	885b      	ldrh	r3, [r3, #2]
 8009c42:	b21b      	sxth	r3, r3
 8009c44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c48:	b21a      	sxth	r2, r3
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	881b      	ldrh	r3, [r3, #0]
 8009c4e:	029b      	lsls	r3, r3, #10
 8009c50:	b21b      	sxth	r3, r3
 8009c52:	4313      	orrs	r3, r2
 8009c54:	b21b      	sxth	r3, r3
 8009c56:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8009c58:	4b33      	ldr	r3, [pc, #204]	@ (8009d28 <hci_send_req+0x100>)
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	b2d9      	uxtb	r1, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	689a      	ldr	r2, [r3, #8]
 8009c68:	8bbb      	ldrh	r3, [r7, #28]
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f000 f890 	bl	8009d90 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8009c70:	e04e      	b.n	8009d10 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8009c72:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8009c76:	f001 f834 	bl	800ace2 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009c7a:	e043      	b.n	8009d04 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8009c7c:	f107 030c 	add.w	r3, r7, #12
 8009c80:	4619      	mov	r1, r3
 8009c82:	482a      	ldr	r0, [pc, #168]	@ (8009d2c <hci_send_req+0x104>)
 8009c84:	f000 fd49 	bl	800a71a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	7a5b      	ldrb	r3, [r3, #9]
 8009c8c:	2b0f      	cmp	r3, #15
 8009c8e:	d114      	bne.n	8009cba <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	330b      	adds	r3, #11
 8009c94:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	885b      	ldrh	r3, [r3, #2]
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	8bba      	ldrh	r2, [r7, #28]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d104      	bne.n	8009cac <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	691b      	ldr	r3, [r3, #16]
 8009ca6:	693a      	ldr	r2, [r7, #16]
 8009ca8:	7812      	ldrb	r2, [r2, #0]
 8009caa:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	785b      	ldrb	r3, [r3, #1]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d027      	beq.n	8009d04 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	77fb      	strb	r3, [r7, #31]
 8009cb8:	e024      	b.n	8009d04 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	330b      	adds	r3, #11
 8009cbe:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	8bba      	ldrh	r2, [r7, #28]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d114      	bne.n	8009cf8 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	7a9b      	ldrb	r3, [r3, #10]
 8009cd2:	3b03      	subs	r3, #3
 8009cd4:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	695a      	ldr	r2, [r3, #20]
 8009cda:	7dfb      	ldrb	r3, [r7, #23]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	bfa8      	it	ge
 8009ce0:	461a      	movge	r2, r3
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6918      	ldr	r0, [r3, #16]
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	1cd9      	adds	r1, r3, #3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	695b      	ldr	r3, [r3, #20]
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	f008 ffdd 	bl	8012cb2 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8009cf8:	69bb      	ldr	r3, [r7, #24]
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d001      	beq.n	8009d04 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009d00:	2301      	movs	r3, #1
 8009d02:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009d04:	4809      	ldr	r0, [pc, #36]	@ (8009d2c <hci_send_req+0x104>)
 8009d06:	f000 fc79 	bl	800a5fc <LST_is_empty>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d0b5      	beq.n	8009c7c <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8009d10:	7ffb      	ldrb	r3, [r7, #31]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d0ad      	beq.n	8009c72 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8009d16:	2001      	movs	r0, #1
 8009d18:	f000 f860 	bl	8009ddc <NotifyCmdStatus>

  return 0;
 8009d1c:	2300      	movs	r3, #0
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3720      	adds	r7, #32
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	200006ec 	.word	0x200006ec
 8009d2c:	200006e0 	.word	0x200006e0

08009d30 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b086      	sub	sp, #24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8009d38:	480f      	ldr	r0, [pc, #60]	@ (8009d78 <TlInit+0x48>)
 8009d3a:	f000 fc4f 	bl	800a5dc <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8009d3e:	4a0f      	ldr	r2, [pc, #60]	@ (8009d7c <TlInit+0x4c>)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8009d44:	480e      	ldr	r0, [pc, #56]	@ (8009d80 <TlInit+0x50>)
 8009d46:	f000 fc49 	bl	800a5dc <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8009d84 <TlInit+0x54>)
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8009d50:	4b0d      	ldr	r3, [pc, #52]	@ (8009d88 <TlInit+0x58>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d00a      	beq.n	8009d6e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8009d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8009d8c <TlInit+0x5c>)
 8009d5e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8009d60:	4b09      	ldr	r3, [pc, #36]	@ (8009d88 <TlInit+0x58>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f107 0208 	add.w	r2, r7, #8
 8009d68:	4610      	mov	r0, r2
 8009d6a:	4798      	blx	r3
  }

  return;
 8009d6c:	bf00      	nop
 8009d6e:	bf00      	nop
}
 8009d70:	3718      	adds	r7, #24
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	200006e0 	.word	0x200006e0
 8009d7c:	200003c4 	.word	0x200003c4
 8009d80:	200003bc 	.word	0x200003bc
 8009d84:	200003c8 	.word	0x200003c8
 8009d88:	200006c0 	.word	0x200006c0
 8009d8c:	08009e1d 	.word	0x08009e1d

08009d90 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	4603      	mov	r3, r0
 8009d98:	603a      	str	r2, [r7, #0]
 8009d9a:	80fb      	strh	r3, [r7, #6]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009da0:	4b0c      	ldr	r3, [pc, #48]	@ (8009dd4 <SendCmd+0x44>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	88fa      	ldrh	r2, [r7, #6]
 8009da6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8009daa:	4b0a      	ldr	r3, [pc, #40]	@ (8009dd4 <SendCmd+0x44>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	797a      	ldrb	r2, [r7, #5]
 8009db0:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009db2:	4b08      	ldr	r3, [pc, #32]	@ (8009dd4 <SendCmd+0x44>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	330c      	adds	r3, #12
 8009db8:	797a      	ldrb	r2, [r7, #5]
 8009dba:	6839      	ldr	r1, [r7, #0]
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f008 ff78 	bl	8012cb2 <memcpy>

  hciContext.io.Send(0,0);
 8009dc2:	4b05      	ldr	r3, [pc, #20]	@ (8009dd8 <SendCmd+0x48>)
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	2000      	movs	r0, #0
 8009dca:	4798      	blx	r3

  return;
 8009dcc:	bf00      	nop
}
 8009dce:	3708      	adds	r7, #8
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	200003c4 	.word	0x200003c4
 8009dd8:	200006c0 	.word	0x200006c0

08009ddc <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	4603      	mov	r3, r0
 8009de4:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8009de6:	79fb      	ldrb	r3, [r7, #7]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d108      	bne.n	8009dfe <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8009dec:	4b0a      	ldr	r3, [pc, #40]	@ (8009e18 <NotifyCmdStatus+0x3c>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d00d      	beq.n	8009e10 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009df4:	4b08      	ldr	r3, [pc, #32]	@ (8009e18 <NotifyCmdStatus+0x3c>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2000      	movs	r0, #0
 8009dfa:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8009dfc:	e008      	b.n	8009e10 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8009dfe:	4b06      	ldr	r3, [pc, #24]	@ (8009e18 <NotifyCmdStatus+0x3c>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d004      	beq.n	8009e10 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8009e06:	4b04      	ldr	r3, [pc, #16]	@ (8009e18 <NotifyCmdStatus+0x3c>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2001      	movs	r0, #1
 8009e0c:	4798      	blx	r3
  return;
 8009e0e:	bf00      	nop
 8009e10:	bf00      	nop
}
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	200006e8 	.word	0x200006e8

08009e1c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	7a5b      	ldrb	r3, [r3, #9]
 8009e28:	2b0f      	cmp	r3, #15
 8009e2a:	d003      	beq.n	8009e34 <TlEvtReceived+0x18>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	7a5b      	ldrb	r3, [r3, #9]
 8009e30:	2b0e      	cmp	r3, #14
 8009e32:	d107      	bne.n	8009e44 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009e34:	6879      	ldr	r1, [r7, #4]
 8009e36:	4809      	ldr	r0, [pc, #36]	@ (8009e5c <TlEvtReceived+0x40>)
 8009e38:	f000 fc28 	bl	800a68c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	f000 ff45 	bl	800accc <hci_cmd_resp_release>
 8009e42:	e006      	b.n	8009e52 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009e44:	6879      	ldr	r1, [r7, #4]
 8009e46:	4806      	ldr	r0, [pc, #24]	@ (8009e60 <TlEvtReceived+0x44>)
 8009e48:	f000 fc20 	bl	800a68c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009e4c:	4804      	ldr	r0, [pc, #16]	@ (8009e60 <TlEvtReceived+0x44>)
 8009e4e:	f000 ff31 	bl	800acb4 <hci_notify_asynch_evt>
  }

  return;
 8009e52:	bf00      	nop
}
 8009e54:	3708      	adds	r7, #8
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	200006e0 	.word	0x200006e0
 8009e60:	200003bc 	.word	0x200003bc

08009e64 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4a05      	ldr	r2, [pc, #20]	@ (8009e84 <hci_register_io_bus+0x20>)
 8009e70:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	4a04      	ldr	r2, [pc, #16]	@ (8009e88 <hci_register_io_bus+0x24>)
 8009e76:	611a      	str	r2, [r3, #16]

  return;
 8009e78:	bf00      	nop
}
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr
 8009e84:	0800a17d 	.word	0x0800a17d
 8009e88:	0800a1e5 	.word	0x0800a1e5

08009e8c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	4a08      	ldr	r2, [pc, #32]	@ (8009ebc <shci_init+0x30>)
 8009e9c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009e9e:	4a08      	ldr	r2, [pc, #32]	@ (8009ec0 <shci_init+0x34>)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009ea4:	4806      	ldr	r0, [pc, #24]	@ (8009ec0 <shci_init+0x34>)
 8009ea6:	f000 f915 	bl	800a0d4 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f000 f898 	bl	8009fe4 <TlInit>

  return;
 8009eb4:	bf00      	nop
}
 8009eb6:	3708      	adds	r7, #8
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	20000710 	.word	0x20000710
 8009ec0:	200006f0 	.word	0x200006f0

08009ec4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009eca:	4822      	ldr	r0, [pc, #136]	@ (8009f54 <shci_user_evt_proc+0x90>)
 8009ecc:	f000 fb96 	bl	800a5fc <LST_is_empty>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d12b      	bne.n	8009f2e <shci_user_evt_proc+0x6a>
 8009ed6:	4b20      	ldr	r3, [pc, #128]	@ (8009f58 <shci_user_evt_proc+0x94>)
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d027      	beq.n	8009f2e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009ede:	f107 030c 	add.w	r3, r7, #12
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	481b      	ldr	r0, [pc, #108]	@ (8009f54 <shci_user_evt_proc+0x90>)
 8009ee6:	f000 fc18 	bl	800a71a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8009eea:	4b1c      	ldr	r3, [pc, #112]	@ (8009f5c <shci_user_evt_proc+0x98>)
 8009eec:	69db      	ldr	r3, [r3, #28]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d00c      	beq.n	8009f0c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009efa:	4b18      	ldr	r3, [pc, #96]	@ (8009f5c <shci_user_evt_proc+0x98>)
 8009efc:	69db      	ldr	r3, [r3, #28]
 8009efe:	1d3a      	adds	r2, r7, #4
 8009f00:	4610      	mov	r0, r2
 8009f02:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009f04:	793a      	ldrb	r2, [r7, #4]
 8009f06:	4b14      	ldr	r3, [pc, #80]	@ (8009f58 <shci_user_evt_proc+0x94>)
 8009f08:	701a      	strb	r2, [r3, #0]
 8009f0a:	e002      	b.n	8009f12 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009f0c:	4b12      	ldr	r3, [pc, #72]	@ (8009f58 <shci_user_evt_proc+0x94>)
 8009f0e:	2201      	movs	r2, #1
 8009f10:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009f12:	4b11      	ldr	r3, [pc, #68]	@ (8009f58 <shci_user_evt_proc+0x94>)
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d004      	beq.n	8009f24 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f000 fa71 	bl	800a404 <TL_MM_EvtDone>
 8009f22:	e004      	b.n	8009f2e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	4619      	mov	r1, r3
 8009f28:	480a      	ldr	r0, [pc, #40]	@ (8009f54 <shci_user_evt_proc+0x90>)
 8009f2a:	f000 fb89 	bl	800a640 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009f2e:	4809      	ldr	r0, [pc, #36]	@ (8009f54 <shci_user_evt_proc+0x90>)
 8009f30:	f000 fb64 	bl	800a5fc <LST_is_empty>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d107      	bne.n	8009f4a <shci_user_evt_proc+0x86>
 8009f3a:	4b07      	ldr	r3, [pc, #28]	@ (8009f58 <shci_user_evt_proc+0x94>)
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d003      	beq.n	8009f4a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8009f42:	4804      	ldr	r0, [pc, #16]	@ (8009f54 <shci_user_evt_proc+0x90>)
 8009f44:	f7f7 fc28 	bl	8001798 <shci_notify_asynch_evt>
  }


  return;
 8009f48:	bf00      	nop
 8009f4a:	bf00      	nop
}
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	200003cc 	.word	0x200003cc
 8009f58:	200003dc 	.word	0x200003dc
 8009f5c:	200006f0 	.word	0x200006f0

08009f60 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60ba      	str	r2, [r7, #8]
 8009f68:	607b      	str	r3, [r7, #4]
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	81fb      	strh	r3, [r7, #14]
 8009f6e:	460b      	mov	r3, r1
 8009f70:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009f72:	2000      	movs	r0, #0
 8009f74:	f000 f868 	bl	800a048 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8009f78:	4b17      	ldr	r3, [pc, #92]	@ (8009fd8 <shci_send+0x78>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	89fa      	ldrh	r2, [r7, #14]
 8009f7e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009f82:	4b15      	ldr	r3, [pc, #84]	@ (8009fd8 <shci_send+0x78>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	7b7a      	ldrb	r2, [r7, #13]
 8009f88:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8009f8a:	4b13      	ldr	r3, [pc, #76]	@ (8009fd8 <shci_send+0x78>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	330c      	adds	r3, #12
 8009f90:	7b7a      	ldrb	r2, [r7, #13]
 8009f92:	68b9      	ldr	r1, [r7, #8]
 8009f94:	4618      	mov	r0, r3
 8009f96:	f008 fe8c 	bl	8012cb2 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8009f9a:	4b10      	ldr	r3, [pc, #64]	@ (8009fdc <shci_send+0x7c>)
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8009fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8009fe0 <shci_send+0x80>)
 8009fa2:	691b      	ldr	r3, [r3, #16]
 8009fa4:	2100      	movs	r1, #0
 8009fa6:	2000      	movs	r0, #0
 8009fa8:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8009faa:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8009fae:	f7f7 fc0a 	bl	80017c6 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f103 0008 	add.w	r0, r3, #8
 8009fb8:	4b07      	ldr	r3, [pc, #28]	@ (8009fd8 <shci_send+0x78>)
 8009fba:	6819      	ldr	r1, [r3, #0]
 8009fbc:	4b06      	ldr	r3, [pc, #24]	@ (8009fd8 <shci_send+0x78>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	789b      	ldrb	r3, [r3, #2]
 8009fc2:	3303      	adds	r3, #3
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	f008 fe74 	bl	8012cb2 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009fca:	2001      	movs	r0, #1
 8009fcc:	f000 f83c 	bl	800a048 <Cmd_SetStatus>

  return;
 8009fd0:	bf00      	nop
}
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	200003d8 	.word	0x200003d8
 8009fdc:	20000714 	.word	0x20000714
 8009fe0:	200006f0 	.word	0x200006f0

08009fe4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b086      	sub	sp, #24
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8009fec:	4a10      	ldr	r2, [pc, #64]	@ (800a030 <TlInit+0x4c>)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8009ff2:	4810      	ldr	r0, [pc, #64]	@ (800a034 <TlInit+0x50>)
 8009ff4:	f000 faf2 	bl	800a5dc <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009ff8:	2001      	movs	r0, #1
 8009ffa:	f000 f825 	bl	800a048 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009ffe:	4b0e      	ldr	r3, [pc, #56]	@ (800a038 <TlInit+0x54>)
 800a000:	2201      	movs	r2, #1
 800a002:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800a004:	4b0d      	ldr	r3, [pc, #52]	@ (800a03c <TlInit+0x58>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d00c      	beq.n	800a026 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800a010:	4b0b      	ldr	r3, [pc, #44]	@ (800a040 <TlInit+0x5c>)
 800a012:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800a014:	4b0b      	ldr	r3, [pc, #44]	@ (800a044 <TlInit+0x60>)
 800a016:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800a018:	4b08      	ldr	r3, [pc, #32]	@ (800a03c <TlInit+0x58>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f107 020c 	add.w	r2, r7, #12
 800a020:	4610      	mov	r0, r2
 800a022:	4798      	blx	r3
  }

  return;
 800a024:	bf00      	nop
 800a026:	bf00      	nop
}
 800a028:	3718      	adds	r7, #24
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	200003d8 	.word	0x200003d8
 800a034:	200003cc 	.word	0x200003cc
 800a038:	200003dc 	.word	0x200003dc
 800a03c:	200006f0 	.word	0x200006f0
 800a040:	0800a099 	.word	0x0800a099
 800a044:	0800a0b1 	.word	0x0800a0b1

0800a048 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	4603      	mov	r3, r0
 800a050:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a052:	79fb      	ldrb	r3, [r7, #7]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d10b      	bne.n	800a070 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a058:	4b0d      	ldr	r3, [pc, #52]	@ (800a090 <Cmd_SetStatus+0x48>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d003      	beq.n	800a068 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a060:	4b0b      	ldr	r3, [pc, #44]	@ (800a090 <Cmd_SetStatus+0x48>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	2000      	movs	r0, #0
 800a066:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a068:	4b0a      	ldr	r3, [pc, #40]	@ (800a094 <Cmd_SetStatus+0x4c>)
 800a06a:	2200      	movs	r2, #0
 800a06c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a06e:	e00b      	b.n	800a088 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a070:	4b08      	ldr	r3, [pc, #32]	@ (800a094 <Cmd_SetStatus+0x4c>)
 800a072:	2201      	movs	r2, #1
 800a074:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a076:	4b06      	ldr	r3, [pc, #24]	@ (800a090 <Cmd_SetStatus+0x48>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d004      	beq.n	800a088 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a07e:	4b04      	ldr	r3, [pc, #16]	@ (800a090 <Cmd_SetStatus+0x48>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	2001      	movs	r0, #1
 800a084:	4798      	blx	r3
  return;
 800a086:	bf00      	nop
 800a088:	bf00      	nop
}
 800a08a:	3708      	adds	r7, #8
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	20000710 	.word	0x20000710
 800a094:	200003d4 	.word	0x200003d4

0800a098 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	f7f7 fb85 	bl	80017b0 <shci_cmd_resp_release>

  return;
 800a0a6:	bf00      	nop
}
 800a0a8:	3708      	adds	r7, #8
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
	...

0800a0b0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b082      	sub	sp, #8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a0b8:	6879      	ldr	r1, [r7, #4]
 800a0ba:	4805      	ldr	r0, [pc, #20]	@ (800a0d0 <TlUserEvtReceived+0x20>)
 800a0bc:	f000 fae6 	bl	800a68c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a0c0:	4803      	ldr	r0, [pc, #12]	@ (800a0d0 <TlUserEvtReceived+0x20>)
 800a0c2:	f7f7 fb69 	bl	8001798 <shci_notify_asynch_evt>

  return;
 800a0c6:	bf00      	nop
}
 800a0c8:	3708      	adds	r7, #8
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	200003cc 	.word	0x200003cc

0800a0d4 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4a05      	ldr	r2, [pc, #20]	@ (800a0f4 <shci_register_io_bus+0x20>)
 800a0e0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	4a04      	ldr	r2, [pc, #16]	@ (800a0f8 <shci_register_io_bus+0x24>)
 800a0e6:	611a      	str	r2, [r3, #16]

  return;
 800a0e8:	bf00      	nop
}
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr
 800a0f4:	0800a291 	.word	0x0800a291
 800a0f8:	0800a2e5 	.word	0x0800a2e5

0800a0fc <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a100:	f001 fa1c 	bl	800b53c <HW_IPCC_Enable>

  return;
 800a104:	bf00      	nop
}
 800a106:	bd80      	pop	{r7, pc}

0800a108 <TL_Init>:


void TL_Init( void )
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800a10c:	4b10      	ldr	r3, [pc, #64]	@ (800a150 <TL_Init+0x48>)
 800a10e:	4a11      	ldr	r2, [pc, #68]	@ (800a154 <TL_Init+0x4c>)
 800a110:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800a112:	4b0f      	ldr	r3, [pc, #60]	@ (800a150 <TL_Init+0x48>)
 800a114:	4a10      	ldr	r2, [pc, #64]	@ (800a158 <TL_Init+0x50>)
 800a116:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800a118:	4b0d      	ldr	r3, [pc, #52]	@ (800a150 <TL_Init+0x48>)
 800a11a:	4a10      	ldr	r2, [pc, #64]	@ (800a15c <TL_Init+0x54>)
 800a11c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800a11e:	4b0c      	ldr	r3, [pc, #48]	@ (800a150 <TL_Init+0x48>)
 800a120:	4a0f      	ldr	r2, [pc, #60]	@ (800a160 <TL_Init+0x58>)
 800a122:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800a124:	4b0a      	ldr	r3, [pc, #40]	@ (800a150 <TL_Init+0x48>)
 800a126:	4a0f      	ldr	r2, [pc, #60]	@ (800a164 <TL_Init+0x5c>)
 800a128:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800a12a:	4b09      	ldr	r3, [pc, #36]	@ (800a150 <TL_Init+0x48>)
 800a12c:	4a0e      	ldr	r2, [pc, #56]	@ (800a168 <TL_Init+0x60>)
 800a12e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800a130:	4b07      	ldr	r3, [pc, #28]	@ (800a150 <TL_Init+0x48>)
 800a132:	4a0e      	ldr	r2, [pc, #56]	@ (800a16c <TL_Init+0x64>)
 800a134:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800a136:	4b06      	ldr	r3, [pc, #24]	@ (800a150 <TL_Init+0x48>)
 800a138:	4a0d      	ldr	r2, [pc, #52]	@ (800a170 <TL_Init+0x68>)
 800a13a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a13c:	4b04      	ldr	r3, [pc, #16]	@ (800a150 <TL_Init+0x48>)
 800a13e:	4a0d      	ldr	r2, [pc, #52]	@ (800a174 <TL_Init+0x6c>)
 800a140:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800a142:	4b03      	ldr	r3, [pc, #12]	@ (800a150 <TL_Init+0x48>)
 800a144:	4a0c      	ldr	r2, [pc, #48]	@ (800a178 <TL_Init+0x70>)
 800a146:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800a148:	f001 fa0c 	bl	800b564 <HW_IPCC_Init>

  return;
 800a14c:	bf00      	nop
}
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	20030000 	.word	0x20030000
 800a154:	20030028 	.word	0x20030028
 800a158:	20030048 	.word	0x20030048
 800a15c:	20030058 	.word	0x20030058
 800a160:	20030068 	.word	0x20030068
 800a164:	20030070 	.word	0x20030070
 800a168:	20030078 	.word	0x20030078
 800a16c:	20030080 	.word	0x20030080
 800a170:	2003009c 	.word	0x2003009c
 800a174:	200300a0 	.word	0x200300a0
 800a178:	200300ac 	.word	0x200300ac

0800a17c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800a188:	4811      	ldr	r0, [pc, #68]	@ (800a1d0 <TL_BLE_Init+0x54>)
 800a18a:	f000 fa27 	bl	800a5dc <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800a18e:	4b11      	ldr	r3, [pc, #68]	@ (800a1d4 <TL_BLE_Init+0x58>)
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	689a      	ldr	r2, [r3, #8]
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	68da      	ldr	r2, [r3, #12]
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	4a0c      	ldr	r2, [pc, #48]	@ (800a1d8 <TL_BLE_Init+0x5c>)
 800a1a8:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	4a08      	ldr	r2, [pc, #32]	@ (800a1d0 <TL_BLE_Init+0x54>)
 800a1ae:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800a1b0:	f001 f9ee 	bl	800b590 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a08      	ldr	r2, [pc, #32]	@ (800a1dc <TL_BLE_Init+0x60>)
 800a1ba:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	4a07      	ldr	r2, [pc, #28]	@ (800a1e0 <TL_BLE_Init+0x64>)
 800a1c2:	6013      	str	r3, [r2, #0]

  return 0;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	200300c8 	.word	0x200300c8
 800a1d4:	20030000 	.word	0x20030000
 800a1d8:	20030a58 	.word	0x20030a58
 800a1dc:	20000720 	.word	0x20000720
 800a1e0:	20000724 	.word	0x20000724

0800a1e4 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800a1f0:	4b09      	ldr	r3, [pc, #36]	@ (800a218 <TL_BLE_SendCmd+0x34>)
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800a1fa:	4b07      	ldr	r3, [pc, #28]	@ (800a218 <TL_BLE_SendCmd+0x34>)
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4619      	mov	r1, r3
 800a202:	2001      	movs	r0, #1
 800a204:	f000 f96c 	bl	800a4e0 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800a208:	f001 f9cc 	bl	800b5a4 <HW_IPCC_BLE_SendCmd>

  return 0;
 800a20c:	2300      	movs	r3, #0
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3708      	adds	r7, #8
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	20030000 	.word	0x20030000

0800a21c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800a222:	e01c      	b.n	800a25e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800a224:	1d3b      	adds	r3, r7, #4
 800a226:	4619      	mov	r1, r3
 800a228:	4812      	ldr	r0, [pc, #72]	@ (800a274 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a22a:	f000 fa76 	bl	800a71a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	7a5b      	ldrb	r3, [r3, #9]
 800a232:	2b0f      	cmp	r3, #15
 800a234:	d003      	beq.n	800a23e <HW_IPCC_BLE_RxEvtNot+0x22>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	7a5b      	ldrb	r3, [r3, #9]
 800a23a:	2b0e      	cmp	r3, #14
 800a23c:	d105      	bne.n	800a24a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4619      	mov	r1, r3
 800a242:	2002      	movs	r0, #2
 800a244:	f000 f94c 	bl	800a4e0 <OutputDbgTrace>
 800a248:	e004      	b.n	800a254 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4619      	mov	r1, r3
 800a24e:	2003      	movs	r0, #3
 800a250:	f000 f946 	bl	800a4e0 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800a254:	4b08      	ldr	r3, [pc, #32]	@ (800a278 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	4610      	mov	r0, r2
 800a25c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800a25e:	4805      	ldr	r0, [pc, #20]	@ (800a274 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a260:	f000 f9cc 	bl	800a5fc <LST_is_empty>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d0dc      	beq.n	800a224 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800a26a:	bf00      	nop
}
 800a26c:	3708      	adds	r7, #8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	200300c8 	.word	0x200300c8
 800a278:	20000720 	.word	0x20000720

0800a27c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800a280:	4b02      	ldr	r3, [pc, #8]	@ (800a28c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4798      	blx	r3

  return;
 800a286:	bf00      	nop
}
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	20000724 	.word	0x20000724

0800a290 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800a29c:	480d      	ldr	r0, [pc, #52]	@ (800a2d4 <TL_SYS_Init+0x44>)
 800a29e:	f000 f99d 	bl	800a5dc <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800a2a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a2d8 <TL_SYS_Init+0x48>)
 800a2a4:	68db      	ldr	r3, [r3, #12]
 800a2a6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	689a      	ldr	r2, [r3, #8]
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	4a08      	ldr	r2, [pc, #32]	@ (800a2d4 <TL_SYS_Init+0x44>)
 800a2b4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800a2b6:	f001 f997 	bl	800b5e8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a07      	ldr	r2, [pc, #28]	@ (800a2dc <TL_SYS_Init+0x4c>)
 800a2c0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	4a06      	ldr	r2, [pc, #24]	@ (800a2e0 <TL_SYS_Init+0x50>)
 800a2c8:	6013      	str	r3, [r2, #0]

  return 0;
 800a2ca:	2300      	movs	r3, #0
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3710      	adds	r7, #16
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	200300d0 	.word	0x200300d0
 800a2d8:	20030000 	.word	0x20030000
 800a2dc:	20000728 	.word	0x20000728
 800a2e0:	2000072c 	.word	0x2000072c

0800a2e4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800a2f0:	4b09      	ldr	r3, [pc, #36]	@ (800a318 <TL_SYS_SendCmd+0x34>)
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2210      	movs	r2, #16
 800a2f8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800a2fa:	4b07      	ldr	r3, [pc, #28]	@ (800a318 <TL_SYS_SendCmd+0x34>)
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4619      	mov	r1, r3
 800a302:	2004      	movs	r0, #4
 800a304:	f000 f8ec 	bl	800a4e0 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800a308:	f001 f978 	bl	800b5fc <HW_IPCC_SYS_SendCmd>

  return 0;
 800a30c:	2300      	movs	r3, #0
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3708      	adds	r7, #8
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	20030000 	.word	0x20030000

0800a31c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a320:	4b07      	ldr	r3, [pc, #28]	@ (800a340 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4619      	mov	r1, r3
 800a328:	2005      	movs	r0, #5
 800a32a:	f000 f8d9 	bl	800a4e0 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a32e:	4b05      	ldr	r3, [pc, #20]	@ (800a344 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a03      	ldr	r2, [pc, #12]	@ (800a340 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a334:	68d2      	ldr	r2, [r2, #12]
 800a336:	6812      	ldr	r2, [r2, #0]
 800a338:	4610      	mov	r0, r2
 800a33a:	4798      	blx	r3

  return;
 800a33c:	bf00      	nop
}
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	20030000 	.word	0x20030000
 800a344:	20000728 	.word	0x20000728

0800a348 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a34e:	e00e      	b.n	800a36e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800a350:	1d3b      	adds	r3, r7, #4
 800a352:	4619      	mov	r1, r3
 800a354:	480b      	ldr	r0, [pc, #44]	@ (800a384 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a356:	f000 f9e0 	bl	800a71a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4619      	mov	r1, r3
 800a35e:	2006      	movs	r0, #6
 800a360:	f000 f8be 	bl	800a4e0 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800a364:	4b08      	ldr	r3, [pc, #32]	@ (800a388 <HW_IPCC_SYS_EvtNot+0x40>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	4610      	mov	r0, r2
 800a36c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a36e:	4805      	ldr	r0, [pc, #20]	@ (800a384 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a370:	f000 f944 	bl	800a5fc <LST_is_empty>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d0ea      	beq.n	800a350 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800a37a:	bf00      	nop
}
 800a37c:	3708      	adds	r7, #8
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	200300d0 	.word	0x200300d0
 800a388:	2000072c 	.word	0x2000072c

0800a38c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800a394:	4817      	ldr	r0, [pc, #92]	@ (800a3f4 <TL_MM_Init+0x68>)
 800a396:	f000 f921 	bl	800a5dc <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800a39a:	4817      	ldr	r0, [pc, #92]	@ (800a3f8 <TL_MM_Init+0x6c>)
 800a39c:	f000 f91e 	bl	800a5dc <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800a3a0:	4b16      	ldr	r3, [pc, #88]	@ (800a3fc <TL_MM_Init+0x70>)
 800a3a2:	691b      	ldr	r3, [r3, #16]
 800a3a4:	4a16      	ldr	r2, [pc, #88]	@ (800a400 <TL_MM_Init+0x74>)
 800a3a6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800a3a8:	4b15      	ldr	r3, [pc, #84]	@ (800a400 <TL_MM_Init+0x74>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	6892      	ldr	r2, [r2, #8]
 800a3b0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800a3b2:	4b13      	ldr	r3, [pc, #76]	@ (800a400 <TL_MM_Init+0x74>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	68d2      	ldr	r2, [r2, #12]
 800a3ba:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800a3bc:	4b10      	ldr	r3, [pc, #64]	@ (800a400 <TL_MM_Init+0x74>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a0c      	ldr	r2, [pc, #48]	@ (800a3f4 <TL_MM_Init+0x68>)
 800a3c2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800a3c4:	4b0e      	ldr	r3, [pc, #56]	@ (800a400 <TL_MM_Init+0x74>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	6812      	ldr	r2, [r2, #0]
 800a3cc:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800a3ce:	4b0c      	ldr	r3, [pc, #48]	@ (800a400 <TL_MM_Init+0x74>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	6852      	ldr	r2, [r2, #4]
 800a3d6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800a3d8:	4b09      	ldr	r3, [pc, #36]	@ (800a400 <TL_MM_Init+0x74>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	6912      	ldr	r2, [r2, #16]
 800a3e0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800a3e2:	4b07      	ldr	r3, [pc, #28]	@ (800a400 <TL_MM_Init+0x74>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	6952      	ldr	r2, [r2, #20]
 800a3ea:	619a      	str	r2, [r3, #24]

  return;
 800a3ec:	bf00      	nop
}
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	200300b8 	.word	0x200300b8
 800a3f8:	20000718 	.word	0x20000718
 800a3fc:	20030000 	.word	0x20030000
 800a400:	20000730 	.word	0x20000730

0800a404 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800a40c:	6879      	ldr	r1, [r7, #4]
 800a40e:	4807      	ldr	r0, [pc, #28]	@ (800a42c <TL_MM_EvtDone+0x28>)
 800a410:	f000 f93c 	bl	800a68c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800a414:	6879      	ldr	r1, [r7, #4]
 800a416:	2000      	movs	r0, #0
 800a418:	f000 f862 	bl	800a4e0 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800a41c:	4804      	ldr	r0, [pc, #16]	@ (800a430 <TL_MM_EvtDone+0x2c>)
 800a41e:	f001 f913 	bl	800b648 <HW_IPCC_MM_SendFreeBuf>

  return;
 800a422:	bf00      	nop
}
 800a424:	3708      	adds	r7, #8
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	20000718 	.word	0x20000718
 800a430:	0800a435 	.word	0x0800a435

0800a434 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a43a:	e00c      	b.n	800a456 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800a43c:	1d3b      	adds	r3, r7, #4
 800a43e:	4619      	mov	r1, r3
 800a440:	480a      	ldr	r0, [pc, #40]	@ (800a46c <SendFreeBuf+0x38>)
 800a442:	f000 f96a 	bl	800a71a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800a446:	4b0a      	ldr	r3, [pc, #40]	@ (800a470 <SendFreeBuf+0x3c>)
 800a448:	691b      	ldr	r3, [r3, #16]
 800a44a:	691b      	ldr	r3, [r3, #16]
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	4611      	mov	r1, r2
 800a450:	4618      	mov	r0, r3
 800a452:	f000 f91b 	bl	800a68c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a456:	4805      	ldr	r0, [pc, #20]	@ (800a46c <SendFreeBuf+0x38>)
 800a458:	f000 f8d0 	bl	800a5fc <LST_is_empty>
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d0ec      	beq.n	800a43c <SendFreeBuf+0x8>
  }

  return;
 800a462:	bf00      	nop
}
 800a464:	3708      	adds	r7, #8
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	20000718 	.word	0x20000718
 800a470:	20030000 	.word	0x20030000

0800a474 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800a474:	b580      	push	{r7, lr}
 800a476:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800a478:	4805      	ldr	r0, [pc, #20]	@ (800a490 <TL_TRACES_Init+0x1c>)
 800a47a:	f000 f8af 	bl	800a5dc <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800a47e:	4b05      	ldr	r3, [pc, #20]	@ (800a494 <TL_TRACES_Init+0x20>)
 800a480:	695b      	ldr	r3, [r3, #20]
 800a482:	4a03      	ldr	r2, [pc, #12]	@ (800a490 <TL_TRACES_Init+0x1c>)
 800a484:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800a486:	f001 f915 	bl	800b6b4 <HW_IPCC_TRACES_Init>

  return;
 800a48a:	bf00      	nop
}
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	200300c0 	.word	0x200300c0
 800a494:	20030000 	.word	0x20030000

0800a498 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a49e:	e008      	b.n	800a4b2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800a4a0:	1d3b      	adds	r3, r7, #4
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	4808      	ldr	r0, [pc, #32]	@ (800a4c8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a4a6:	f000 f938 	bl	800a71a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f000 f80d 	bl	800a4cc <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a4b2:	4805      	ldr	r0, [pc, #20]	@ (800a4c8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a4b4:	f000 f8a2 	bl	800a5fc <LST_is_empty>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d0f0      	beq.n	800a4a0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800a4be:	bf00      	nop
}
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	200300c0 	.word	0x200300c0

0800a4cc <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800a4d4:	bf00      	nop
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	6039      	str	r1, [r7, #0]
 800a4ea:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800a4ec:	79fb      	ldrb	r3, [r7, #7]
 800a4ee:	2b06      	cmp	r3, #6
 800a4f0:	d845      	bhi.n	800a57e <OutputDbgTrace+0x9e>
 800a4f2:	a201      	add	r2, pc, #4	@ (adr r2, 800a4f8 <OutputDbgTrace+0x18>)
 800a4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f8:	0800a515 	.word	0x0800a515
 800a4fc:	0800a539 	.word	0x0800a539
 800a500:	0800a53f 	.word	0x0800a53f
 800a504:	0800a553 	.word	0x0800a553
 800a508:	0800a55f 	.word	0x0800a55f
 800a50c:	0800a565 	.word	0x0800a565
 800a510:	0800a573 	.word	0x0800a573
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	7a5b      	ldrb	r3, [r3, #9]
 800a51c:	2bff      	cmp	r3, #255	@ 0xff
 800a51e:	d005      	beq.n	800a52c <OutputDbgTrace+0x4c>
 800a520:	2bff      	cmp	r3, #255	@ 0xff
 800a522:	dc05      	bgt.n	800a530 <OutputDbgTrace+0x50>
 800a524:	2b0e      	cmp	r3, #14
 800a526:	d005      	beq.n	800a534 <OutputDbgTrace+0x54>
 800a528:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800a52a:	e001      	b.n	800a530 <OutputDbgTrace+0x50>
          break;
 800a52c:	bf00      	nop
 800a52e:	e027      	b.n	800a580 <OutputDbgTrace+0xa0>
          break;
 800a530:	bf00      	nop
 800a532:	e025      	b.n	800a580 <OutputDbgTrace+0xa0>
          break;
 800a534:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800a536:	e023      	b.n	800a580 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a53c:	e020      	b.n	800a580 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	7a5b      	ldrb	r3, [r3, #9]
 800a546:	2b0e      	cmp	r3, #14
 800a548:	d001      	beq.n	800a54e <OutputDbgTrace+0x6e>
 800a54a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a54c:	e000      	b.n	800a550 <OutputDbgTrace+0x70>
          break;
 800a54e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a550:	e016      	b.n	800a580 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	7a5b      	ldrb	r3, [r3, #9]
 800a55a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a55c:	e010      	b.n	800a580 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a562:	e00d      	b.n	800a580 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	7a5b      	ldrb	r3, [r3, #9]
 800a56c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a56e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a570:	e006      	b.n	800a580 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	7a5b      	ldrb	r3, [r3, #9]
 800a57a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a57c:	e000      	b.n	800a580 <OutputDbgTrace+0xa0>

    default:
      break;
 800a57e:	bf00      	nop
  }

  return;
 800a580:	bf00      	nop
}
 800a582:	3714      	adds	r7, #20
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800a58c:	b480      	push	{r7}
 800a58e:	b085      	sub	sp, #20
 800a590:	af00      	add	r7, sp, #0
 800a592:	4603      	mov	r3, r0
 800a594:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800a596:	4b0f      	ldr	r3, [pc, #60]	@ (800a5d4 <OTP_Read+0x48>)
 800a598:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a59a:	e002      	b.n	800a5a2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	3b08      	subs	r3, #8
 800a5a0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	3307      	adds	r3, #7
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	79fa      	ldrb	r2, [r7, #7]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d003      	beq.n	800a5b6 <OTP_Read+0x2a>
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	4a09      	ldr	r2, [pc, #36]	@ (800a5d8 <OTP_Read+0x4c>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d1f2      	bne.n	800a59c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	3307      	adds	r3, #7
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	79fa      	ldrb	r2, [r7, #7]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d001      	beq.n	800a5c6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3714      	adds	r7, #20
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr
 800a5d4:	1fff73f8 	.word	0x1fff73f8
 800a5d8:	1fff7000 	.word	0x1fff7000

0800a5dc <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	605a      	str	r2, [r3, #4]
}
 800a5f0:	bf00      	nop
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b087      	sub	sp, #28
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a604:	f3ef 8310 	mrs	r3, PRIMASK
 800a608:	60fb      	str	r3, [r7, #12]
  return(result);
 800a60a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a60c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a60e:	b672      	cpsid	i
}
 800a610:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d102      	bne.n	800a622 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800a61c:	2301      	movs	r3, #1
 800a61e:	75fb      	strb	r3, [r7, #23]
 800a620:	e001      	b.n	800a626 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800a622:	2300      	movs	r3, #0
 800a624:	75fb      	strb	r3, [r7, #23]
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	f383 8810 	msr	PRIMASK, r3
}
 800a630:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a632:	7dfb      	ldrb	r3, [r7, #23]
}
 800a634:	4618      	mov	r0, r3
 800a636:	371c      	adds	r7, #28
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a640:	b480      	push	{r7}
 800a642:	b087      	sub	sp, #28
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a64a:	f3ef 8310 	mrs	r3, PRIMASK
 800a64e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a650:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a652:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a654:	b672      	cpsid	i
}
 800a656:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	687a      	ldr	r2, [r7, #4]
 800a664:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	683a      	ldr	r2, [r7, #0]
 800a66a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	683a      	ldr	r2, [r7, #0]
 800a672:	605a      	str	r2, [r3, #4]
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	f383 8810 	msr	PRIMASK, r3
}
 800a67e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a680:	bf00      	nop
 800a682:	371c      	adds	r7, #28
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b087      	sub	sp, #28
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a696:	f3ef 8310 	mrs	r3, PRIMASK
 800a69a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a69c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a69e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6a0:	b672      	cpsid	i
}
 800a6a2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	685a      	ldr	r2, [r3, #4]
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	683a      	ldr	r2, [r7, #0]
 800a6b6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	683a      	ldr	r2, [r7, #0]
 800a6be:	601a      	str	r2, [r3, #0]
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	f383 8810 	msr	PRIMASK, r3
}
 800a6ca:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a6cc:	bf00      	nop
 800a6ce:	371c      	adds	r7, #28
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b087      	sub	sp, #28
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6e0:	f3ef 8310 	mrs	r3, PRIMASK
 800a6e4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a6e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6ea:	b672      	cpsid	i
}
 800a6ec:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	6812      	ldr	r2, [r2, #0]
 800a6f6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	6852      	ldr	r2, [r2, #4]
 800a700:	605a      	str	r2, [r3, #4]
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	f383 8810 	msr	PRIMASK, r3
}
 800a70c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a70e:	bf00      	nop
 800a710:	371c      	adds	r7, #28
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr

0800a71a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b086      	sub	sp, #24
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
 800a722:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a724:	f3ef 8310 	mrs	r3, PRIMASK
 800a728:	60fb      	str	r3, [r7, #12]
  return(result);
 800a72a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a72c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a72e:	b672      	cpsid	i
}
 800a730:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4618      	mov	r0, r3
 800a740:	f7ff ffca 	bl	800a6d8 <LST_remove_node>
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	f383 8810 	msr	PRIMASK, r3
}
 800a74e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a750:	bf00      	nop
 800a752:	3718      	adds	r7, #24
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800a758:	b480      	push	{r7}
 800a75a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800a75c:	4b03      	ldr	r3, [pc, #12]	@ (800a76c <LL_FLASH_GetUDN+0x14>)
 800a75e:	681b      	ldr	r3, [r3, #0]
}
 800a760:	4618      	mov	r0, r3
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	1fff7580 	.word	0x1fff7580

0800a770 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800a770:	b480      	push	{r7}
 800a772:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800a774:	4b03      	ldr	r3, [pc, #12]	@ (800a784 <LL_FLASH_GetDeviceID+0x14>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	b2db      	uxtb	r3, r3
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr
 800a784:	1fff7584 	.word	0x1fff7584

0800a788 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800a788:	b480      	push	{r7}
 800a78a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800a78c:	4b03      	ldr	r3, [pc, #12]	@ (800a79c <LL_FLASH_GetSTCompanyID+0x14>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	0a1b      	lsrs	r3, r3, #8
}
 800a792:	4618      	mov	r0, r3
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr
 800a79c:	1fff7584 	.word	0x1fff7584

0800a7a0 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800a7a0:	b5b0      	push	{r4, r5, r7, lr}
 800a7a2:	b090      	sub	sp, #64	@ 0x40
 800a7a4:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a7a6:	2392      	movs	r3, #146	@ 0x92
 800a7a8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_MY_TASK, UTIL_SEQ_RFU, myTask);
 800a7ac:	4a29      	ldr	r2, [pc, #164]	@ (800a854 <APP_BLE_Init+0xb4>)
 800a7ae:	2100      	movs	r1, #0
 800a7b0:	2004      	movs	r0, #4
 800a7b2:	f001 f8d3 	bl	800b95c <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 800a7b6:	2100      	movs	r1, #0
 800a7b8:	2004      	movs	r0, #4
 800a7ba:	f001 f8f1 	bl	800b9a0 <UTIL_SEQ_SetTask>
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800a7be:	4b26      	ldr	r3, [pc, #152]	@ (800a858 <APP_BLE_Init+0xb8>)
 800a7c0:	1d3c      	adds	r4, r7, #4
 800a7c2:	461d      	mov	r5, r3
 800a7c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a7c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a7c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a7ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a7cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a7ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a7d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a7d4:	c403      	stmia	r4!, {r0, r1}
 800a7d6:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800a7d8:	f000 f914 	bl	800aa04 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800a7dc:	2101      	movs	r1, #1
 800a7de:	2002      	movs	r0, #2
 800a7e0:	f000 ff90 	bl	800b704 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800a7e4:	4a1d      	ldr	r2, [pc, #116]	@ (800a85c <APP_BLE_Init+0xbc>)
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	2002      	movs	r0, #2
 800a7ea:	f001 f8b7 	bl	800b95c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800a7ee:	1d3b      	adds	r3, r7, #4
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7ff f8bd 	bl	8009970 <SHCI_C2_BLE_Init>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800a7fc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800a800:	2b00      	cmp	r3, #0
 800a802:	d001      	beq.n	800a808 <APP_BLE_Init+0x68>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800a804:	f7f8 ff94 	bl	8003730 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800a808:	f000 f912 	bl	800aa30 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800a80c:	f7ff f80a 	bl	8009824 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a810:	4b13      	ldr	r3, [pc, #76]	@ (800a860 <APP_BLE_Init+0xc0>)
 800a812:	2200      	movs	r2, #0
 800a814:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800a818:	4b11      	ldr	r3, [pc, #68]	@ (800a860 <APP_BLE_Init+0xc0>)
 800a81a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a81e:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800a820:	4a10      	ldr	r2, [pc, #64]	@ (800a864 <APP_BLE_Init+0xc4>)
 800a822:	2100      	movs	r1, #0
 800a824:	2001      	movs	r0, #1
 800a826:	f001 f899 	bl	800b95c <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800a82a:	2006      	movs	r0, #6
 800a82c:	f7fe fe6d 	bl	800950a <aci_hal_set_radio_activity_mask>
 800a830:	4603      	mov	r3, r0
 800a832:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800a836:	f000 fae3 	bl	800ae00 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800a83a:	4b09      	ldr	r3, [pc, #36]	@ (800a860 <APP_BLE_Init+0xc0>)
 800a83c:	2200      	movs	r2, #0
 800a83e:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800a840:	4b07      	ldr	r3, [pc, #28]	@ (800a860 <APP_BLE_Init+0xc0>)
 800a842:	2200      	movs	r2, #0
 800a844:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800a846:	2001      	movs	r0, #1
 800a848:	f000 f9a6 	bl	800ab98 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800a84c:	bf00      	nop
}
 800a84e:	3740      	adds	r7, #64	@ 0x40
 800a850:	46bd      	mov	sp, r7
 800a852:	bdb0      	pop	{r4, r5, r7, pc}
 800a854:	0800ad69 	.word	0x0800ad69
 800a858:	080157e0 	.word	0x080157e0
 800a85c:	08009b8d 	.word	0x08009b8d
 800a860:	2000073c 	.word	0x2000073c
 800a864:	0800ac81 	.word	0x0800ac81

0800a868 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b08a      	sub	sp, #40	@ 0x28
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800a870:	2392      	movs	r3, #146	@ 0x92
 800a872:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	3301      	adds	r3, #1
 800a87a:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800a87c:	6a3b      	ldr	r3, [r7, #32]
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	2bff      	cmp	r3, #255	@ 0xff
 800a882:	d053      	beq.n	800a92c <SVCCTL_App_Notification+0xc4>
 800a884:	2bff      	cmp	r3, #255	@ 0xff
 800a886:	f300 80af 	bgt.w	800a9e8 <SVCCTL_App_Notification+0x180>
 800a88a:	2b05      	cmp	r3, #5
 800a88c:	d002      	beq.n	800a894 <SVCCTL_App_Notification+0x2c>
 800a88e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a890:	d020      	beq.n	800a8d4 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800a892:	e0a9      	b.n	800a9e8 <SVCCTL_App_Notification+0x180>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800a894:	6a3b      	ldr	r3, [r7, #32]
 800a896:	3302      	adds	r3, #2
 800a898:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a8a0:	b29a      	uxth	r2, r3
 800a8a2:	4b55      	ldr	r3, [pc, #340]	@ (800a9f8 <SVCCTL_App_Notification+0x190>)
 800a8a4:	8adb      	ldrh	r3, [r3, #22]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d106      	bne.n	800a8b8 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800a8aa:	4b53      	ldr	r3, [pc, #332]	@ (800a9f8 <SVCCTL_App_Notification+0x190>)
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a8b0:	4b51      	ldr	r3, [pc, #324]	@ (800a9f8 <SVCCTL_App_Notification+0x190>)
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800a8b8:	2001      	movs	r0, #1
 800a8ba:	f000 f96d 	bl	800ab98 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800a8be:	4b4f      	ldr	r3, [pc, #316]	@ (800a9fc <SVCCTL_App_Notification+0x194>)
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800a8c4:	4b4c      	ldr	r3, [pc, #304]	@ (800a9f8 <SVCCTL_App_Notification+0x190>)
 800a8c6:	8ada      	ldrh	r2, [r3, #22]
 800a8c8:	4b4c      	ldr	r3, [pc, #304]	@ (800a9fc <SVCCTL_App_Notification+0x194>)
 800a8ca:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800a8cc:	484b      	ldr	r0, [pc, #300]	@ (800a9fc <SVCCTL_App_Notification+0x194>)
 800a8ce:	f000 fa83 	bl	800add8 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800a8d2:	e08c      	b.n	800a9ee <SVCCTL_App_Notification+0x186>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800a8d4:	6a3b      	ldr	r3, [r7, #32]
 800a8d6:	3302      	adds	r3, #2
 800a8d8:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d001      	beq.n	800a8e6 <SVCCTL_App_Notification+0x7e>
 800a8e2:	2b03      	cmp	r3, #3
          break;
 800a8e4:	e021      	b.n	800a92a <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800a8ec:	4b42      	ldr	r3, [pc, #264]	@ (800a9f8 <SVCCTL_App_Notification+0x190>)
 800a8ee:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a8f2:	2b04      	cmp	r3, #4
 800a8f4:	d104      	bne.n	800a900 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800a8f6:	4b40      	ldr	r3, [pc, #256]	@ (800a9f8 <SVCCTL_App_Notification+0x190>)
 800a8f8:	2206      	movs	r2, #6
 800a8fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800a8fe:	e003      	b.n	800a908 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800a900:	4b3d      	ldr	r3, [pc, #244]	@ (800a9f8 <SVCCTL_App_Notification+0x190>)
 800a902:	2205      	movs	r2, #5
 800a904:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a90e:	b29a      	uxth	r2, r3
 800a910:	4b39      	ldr	r3, [pc, #228]	@ (800a9f8 <SVCCTL_App_Notification+0x190>)
 800a912:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800a914:	4b39      	ldr	r3, [pc, #228]	@ (800a9fc <SVCCTL_App_Notification+0x194>)
 800a916:	2200      	movs	r2, #0
 800a918:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800a91a:	4b37      	ldr	r3, [pc, #220]	@ (800a9f8 <SVCCTL_App_Notification+0x190>)
 800a91c:	8ada      	ldrh	r2, [r3, #22]
 800a91e:	4b37      	ldr	r3, [pc, #220]	@ (800a9fc <SVCCTL_App_Notification+0x194>)
 800a920:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800a922:	4836      	ldr	r0, [pc, #216]	@ (800a9fc <SVCCTL_App_Notification+0x194>)
 800a924:	f000 fa58 	bl	800add8 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800a928:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800a92a:	e060      	b.n	800a9ee <SVCCTL_App_Notification+0x186>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800a92c:	6a3b      	ldr	r3, [r7, #32]
 800a92e:	3302      	adds	r3, #2
 800a930:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800a932:	69fb      	ldr	r3, [r7, #28]
 800a934:	881b      	ldrh	r3, [r3, #0]
 800a936:	b29b      	uxth	r3, r3
 800a938:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d047      	beq.n	800a9d0 <SVCCTL_App_Notification+0x168>
 800a940:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800a944:	4293      	cmp	r3, r2
 800a946:	dc51      	bgt.n	800a9ec <SVCCTL_App_Notification+0x184>
 800a948:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a94c:	d046      	beq.n	800a9dc <SVCCTL_App_Notification+0x174>
 800a94e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a952:	dc4b      	bgt.n	800a9ec <SVCCTL_App_Notification+0x184>
 800a954:	2b04      	cmp	r3, #4
 800a956:	d043      	beq.n	800a9e0 <SVCCTL_App_Notification+0x178>
 800a958:	2b04      	cmp	r3, #4
 800a95a:	db47      	blt.n	800a9ec <SVCCTL_App_Notification+0x184>
 800a95c:	f240 420a 	movw	r2, #1034	@ 0x40a
 800a960:	4293      	cmp	r3, r2
 800a962:	dc43      	bgt.n	800a9ec <SVCCTL_App_Notification+0x184>
 800a964:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a968:	dd40      	ble.n	800a9ec <SVCCTL_App_Notification+0x184>
 800a96a:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800a96e:	2b09      	cmp	r3, #9
 800a970:	d83c      	bhi.n	800a9ec <SVCCTL_App_Notification+0x184>
 800a972:	a201      	add	r2, pc, #4	@ (adr r2, 800a978 <SVCCTL_App_Notification+0x110>)
 800a974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a978:	0800a9c9 	.word	0x0800a9c9
 800a97c:	0800a9a1 	.word	0x0800a9a1
 800a980:	0800a9ed 	.word	0x0800a9ed
 800a984:	0800a9ed 	.word	0x0800a9ed
 800a988:	0800a9ed 	.word	0x0800a9ed
 800a98c:	0800a9ed 	.word	0x0800a9ed
 800a990:	0800a9e5 	.word	0x0800a9e5
 800a994:	0800a9ed 	.word	0x0800a9ed
 800a998:	0800a9b5 	.word	0x0800a9b5
 800a99c:	0800a9e5 	.word	0x0800a9e5
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800a9a0:	4b15      	ldr	r3, [pc, #84]	@ (800a9f8 <SVCCTL_App_Notification+0x190>)
 800a9a2:	8adb      	ldrh	r3, [r3, #22]
 800a9a4:	4916      	ldr	r1, [pc, #88]	@ (800aa00 <SVCCTL_App_Notification+0x198>)
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7fd feee 	bl	8008788 <aci_gap_pass_key_resp>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800a9b2:	e018      	b.n	800a9e6 <SVCCTL_App_Notification+0x17e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800a9b4:	4b10      	ldr	r3, [pc, #64]	@ (800a9f8 <SVCCTL_App_Notification+0x190>)
 800a9b6:	8adb      	ldrh	r3, [r3, #22]
 800a9b8:	2101      	movs	r1, #1
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7fe f88e 	bl	8008adc <aci_gap_numeric_comparison_value_confirm_yesno>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800a9c6:	e00e      	b.n	800a9e6 <SVCCTL_App_Notification+0x17e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800a9c8:	69fb      	ldr	r3, [r7, #28]
 800a9ca:	3302      	adds	r3, #2
 800a9cc:	61bb      	str	r3, [r7, #24]
          break;
 800a9ce:	e00a      	b.n	800a9e6 <SVCCTL_App_Notification+0x17e>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800a9d0:	4b09      	ldr	r3, [pc, #36]	@ (800a9f8 <SVCCTL_App_Notification+0x190>)
 800a9d2:	8adb      	ldrh	r3, [r3, #22]
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7fe fb94 	bl	8009102 <aci_gatt_confirm_indication>
        break;
 800a9da:	e004      	b.n	800a9e6 <SVCCTL_App_Notification+0x17e>
          break;
 800a9dc:	bf00      	nop
 800a9de:	e005      	b.n	800a9ec <SVCCTL_App_Notification+0x184>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800a9e0:	bf00      	nop
 800a9e2:	e003      	b.n	800a9ec <SVCCTL_App_Notification+0x184>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800a9e4:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800a9e6:	e001      	b.n	800a9ec <SVCCTL_App_Notification+0x184>
      break;
 800a9e8:	bf00      	nop
 800a9ea:	e000      	b.n	800a9ee <SVCCTL_App_Notification+0x186>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800a9ec:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800a9ee:	2301      	movs	r3, #1
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3728      	adds	r7, #40	@ 0x28
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	2000073c 	.word	0x2000073c
 800a9fc:	200007c0 	.word	0x200007c0
 800aa00:	0001b207 	.word	0x0001b207

0800aa04 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800aa0a:	4b06      	ldr	r3, [pc, #24]	@ (800aa24 <Ble_Tl_Init+0x20>)
 800aa0c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800aa0e:	4b06      	ldr	r3, [pc, #24]	@ (800aa28 <Ble_Tl_Init+0x24>)
 800aa10:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800aa12:	463b      	mov	r3, r7
 800aa14:	4619      	mov	r1, r3
 800aa16:	4805      	ldr	r0, [pc, #20]	@ (800aa2c <Ble_Tl_Init+0x28>)
 800aa18:	f7ff f89c 	bl	8009b54 <hci_init>

  return;
 800aa1c:	bf00      	nop
}
 800aa1e:	3708      	adds	r7, #8
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	200300d8 	.word	0x200300d8
 800aa28:	0800ad31 	.word	0x0800ad31
 800aa2c:	0800acf9 	.word	0x0800acf9

0800aa30 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800aa30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa32:	b08d      	sub	sp, #52	@ 0x34
 800aa34:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800aa36:	2300      	movs	r3, #0
 800aa38:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800aa3a:	2392      	movs	r3, #146	@ 0x92
 800aa3c:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800aa3e:	f7fe fdb8 	bl	80095b2 <hci_reset>
 800aa42:	4603      	mov	r3, r0
 800aa44:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800aa46:	f000 f8d7 	bl	800abf8 <BleGetBdAddress>
 800aa4a:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800aa4c:	693a      	ldr	r2, [r7, #16]
 800aa4e:	2106      	movs	r1, #6
 800aa50:	2000      	movs	r0, #0
 800aa52:	f7fe fc6e 	bl	8009332 <aci_hal_write_config_data>
 800aa56:	4603      	mov	r3, r0
 800aa58:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800aa5a:	4a4a      	ldr	r2, [pc, #296]	@ (800ab84 <Ble_Hci_Gap_Gatt_Init+0x154>)
 800aa5c:	2110      	movs	r1, #16
 800aa5e:	2018      	movs	r0, #24
 800aa60:	f7fe fc67 	bl	8009332 <aci_hal_write_config_data>
 800aa64:	4603      	mov	r3, r0
 800aa66:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800aa68:	4a47      	ldr	r2, [pc, #284]	@ (800ab88 <Ble_Hci_Gap_Gatt_Init+0x158>)
 800aa6a:	2110      	movs	r1, #16
 800aa6c:	2008      	movs	r0, #8
 800aa6e:	f7fe fc60 	bl	8009332 <aci_hal_write_config_data>
 800aa72:	4603      	mov	r3, r0
 800aa74:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800aa76:	211c      	movs	r1, #28
 800aa78:	2001      	movs	r0, #1
 800aa7a:	f7fe fcdf 	bl	800943c <aci_hal_set_tx_power_level>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800aa82:	f7fe f892 	bl	8008baa <aci_gatt_init>
 800aa86:	4603      	mov	r3, r0
 800aa88:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800aa8e:	7bfb      	ldrb	r3, [r7, #15]
 800aa90:	f043 0301 	orr.w	r3, r3, #1
 800aa94:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800aa96:	7bfb      	ldrb	r3, [r7, #15]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d01f      	beq.n	800aadc <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800aa9c:	4b3b      	ldr	r3, [pc, #236]	@ (800ab8c <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800aa9e:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800aaa0:	1dba      	adds	r2, r7, #6
 800aaa2:	7bf8      	ldrb	r0, [r7, #15]
 800aaa4:	1cbb      	adds	r3, r7, #2
 800aaa6:	9301      	str	r3, [sp, #4]
 800aaa8:	1d3b      	adds	r3, r7, #4
 800aaaa:	9300      	str	r3, [sp, #0]
 800aaac:	4613      	mov	r3, r2
 800aaae:	2208      	movs	r2, #8
 800aab0:	2100      	movs	r1, #0
 800aab2:	f7fd fed0 	bl	8008856 <aci_gap_init>
 800aab6:	4603      	mov	r3, r0
 800aab8:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800aaba:	88fc      	ldrh	r4, [r7, #6]
 800aabc:	88bd      	ldrh	r5, [r7, #4]
 800aabe:	68b8      	ldr	r0, [r7, #8]
 800aac0:	f7f5 fbae 	bl	8000220 <strlen>
 800aac4:	4603      	mov	r3, r0
 800aac6:	b2da      	uxtb	r2, r3
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	9300      	str	r3, [sp, #0]
 800aacc:	4613      	mov	r3, r2
 800aace:	2200      	movs	r2, #0
 800aad0:	4629      	mov	r1, r5
 800aad2:	4620      	mov	r0, r4
 800aad4:	f7fe fa6c 	bl	8008fb0 <aci_gatt_update_char_value>
 800aad8:	4603      	mov	r3, r0
 800aada:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800aadc:	88f8      	ldrh	r0, [r7, #6]
 800aade:	8879      	ldrh	r1, [r7, #2]
 800aae0:	463b      	mov	r3, r7
 800aae2:	9300      	str	r3, [sp, #0]
 800aae4:	2302      	movs	r3, #2
 800aae6:	2200      	movs	r2, #0
 800aae8:	f7fe fa62 	bl	8008fb0 <aci_gatt_update_char_value>
 800aaec:	4603      	mov	r3, r0
 800aaee:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800aaf0:	2202      	movs	r2, #2
 800aaf2:	2102      	movs	r1, #2
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	f7fe fd80 	bl	80095fa <hci_le_set_default_phy>
 800aafa:	4603      	mov	r3, r0
 800aafc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800aafe:	4b24      	ldr	r3, [pc, #144]	@ (800ab90 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ab00:	2201      	movs	r2, #1
 800ab02:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800ab04:	4b22      	ldr	r3, [pc, #136]	@ (800ab90 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7fd fd25 	bl	8008558 <aci_gap_set_io_capability>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800ab12:	4b1f      	ldr	r3, [pc, #124]	@ (800ab90 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ab14:	2201      	movs	r2, #1
 800ab16:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800ab18:	4b1d      	ldr	r3, [pc, #116]	@ (800ab90 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ab1a:	2208      	movs	r2, #8
 800ab1c:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800ab1e:	4b1c      	ldr	r3, [pc, #112]	@ (800ab90 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ab20:	2210      	movs	r2, #16
 800ab22:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800ab24:	4b1a      	ldr	r3, [pc, #104]	@ (800ab90 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ab26:	2200      	movs	r2, #0
 800ab28:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800ab2a:	4b19      	ldr	r3, [pc, #100]	@ (800ab90 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ab2c:	4a19      	ldr	r2, [pc, #100]	@ (800ab94 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800ab2e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800ab30:	4b17      	ldr	r3, [pc, #92]	@ (800ab90 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ab32:	2200      	movs	r2, #0
 800ab34:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800ab36:	4b16      	ldr	r3, [pc, #88]	@ (800ab90 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ab38:	789c      	ldrb	r4, [r3, #2]
 800ab3a:	4b15      	ldr	r3, [pc, #84]	@ (800ab90 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ab3c:	785d      	ldrb	r5, [r3, #1]
 800ab3e:	4b14      	ldr	r3, [pc, #80]	@ (800ab90 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ab40:	791b      	ldrb	r3, [r3, #4]
 800ab42:	4a13      	ldr	r2, [pc, #76]	@ (800ab90 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ab44:	7952      	ldrb	r2, [r2, #5]
 800ab46:	4912      	ldr	r1, [pc, #72]	@ (800ab90 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ab48:	78c9      	ldrb	r1, [r1, #3]
 800ab4a:	4811      	ldr	r0, [pc, #68]	@ (800ab90 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ab4c:	6880      	ldr	r0, [r0, #8]
 800ab4e:	2600      	movs	r6, #0
 800ab50:	9604      	str	r6, [sp, #16]
 800ab52:	9003      	str	r0, [sp, #12]
 800ab54:	9102      	str	r1, [sp, #8]
 800ab56:	9201      	str	r2, [sp, #4]
 800ab58:	9300      	str	r3, [sp, #0]
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	4629      	mov	r1, r5
 800ab60:	4620      	mov	r0, r4
 800ab62:	f7fd fd4d 	bl	8008600 <aci_gap_set_authentication_requirement>
 800ab66:	4603      	mov	r3, r0
 800ab68:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800ab6a:	4b09      	ldr	r3, [pc, #36]	@ (800ab90 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ab6c:	789b      	ldrb	r3, [r3, #2]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d003      	beq.n	800ab7a <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800ab72:	f7fd ff8f 	bl	8008a94 <aci_gap_configure_filter_accept_list>
 800ab76:	4603      	mov	r3, r0
 800ab78:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800ab7a:	bf00      	nop
 800ab7c:	371c      	adds	r7, #28
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab82:	bf00      	nop
 800ab84:	08015b40 	.word	0x08015b40
 800ab88:	08015b50 	.word	0x08015b50
 800ab8c:	0801581c 	.word	0x0801581c
 800ab90:	2000073c 	.word	0x2000073c
 800ab94:	0001b207 	.word	0x0001b207

0800ab98 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b08c      	sub	sp, #48	@ 0x30
 800ab9c:	af08      	add	r7, sp, #32
 800ab9e:	4603      	mov	r3, r0
 800aba0:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800aba2:	2392      	movs	r3, #146	@ 0x92
 800aba4:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800aba6:	4a12      	ldr	r2, [pc, #72]	@ (800abf0 <Adv_Request+0x58>)
 800aba8:	79fb      	ldrb	r3, [r7, #7]
 800abaa:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800abae:	2300      	movs	r3, #0
 800abb0:	9306      	str	r3, [sp, #24]
 800abb2:	2300      	movs	r3, #0
 800abb4:	9305      	str	r3, [sp, #20]
 800abb6:	2300      	movs	r3, #0
 800abb8:	9304      	str	r3, [sp, #16]
 800abba:	2300      	movs	r3, #0
 800abbc:	9303      	str	r3, [sp, #12]
 800abbe:	2300      	movs	r3, #0
 800abc0:	9302      	str	r3, [sp, #8]
 800abc2:	2300      	movs	r3, #0
 800abc4:	9301      	str	r3, [sp, #4]
 800abc6:	2300      	movs	r3, #0
 800abc8:	9300      	str	r3, [sp, #0]
 800abca:	2300      	movs	r3, #0
 800abcc:	22a0      	movs	r2, #160	@ 0xa0
 800abce:	2180      	movs	r1, #128	@ 0x80
 800abd0:	2000      	movs	r0, #0
 800abd2:	f7fd fbc7 	bl	8008364 <aci_gap_set_discoverable>
 800abd6:	4603      	mov	r3, r0
 800abd8:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800abda:	4906      	ldr	r1, [pc, #24]	@ (800abf4 <Adv_Request+0x5c>)
 800abdc:	200b      	movs	r0, #11
 800abde:	f7fd fee7 	bl	80089b0 <aci_gap_update_adv_data>
 800abe2:	4603      	mov	r3, r0
 800abe4:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800abe6:	bf00      	nop
}
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	2000073c 	.word	0x2000073c
 800abf4:	20000014 	.word	0x20000014

0800abf8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b086      	sub	sp, #24
 800abfc:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800abfe:	f7ff fdab 	bl	800a758 <LL_FLASH_GetUDN>
 800ac02:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac0a:	d023      	beq.n	800ac54 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800ac0c:	f7ff fdbc 	bl	800a788 <LL_FLASH_GetSTCompanyID>
 800ac10:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800ac12:	f7ff fdad 	bl	800a770 <LL_FLASH_GetDeviceID>
 800ac16:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	b2da      	uxtb	r2, r3
 800ac1c:	4b16      	ldr	r3, [pc, #88]	@ (800ac78 <BleGetBdAddress+0x80>)
 800ac1e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	0a1b      	lsrs	r3, r3, #8
 800ac24:	b2da      	uxtb	r2, r3
 800ac26:	4b14      	ldr	r3, [pc, #80]	@ (800ac78 <BleGetBdAddress+0x80>)
 800ac28:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	b2da      	uxtb	r2, r3
 800ac2e:	4b12      	ldr	r3, [pc, #72]	@ (800ac78 <BleGetBdAddress+0x80>)
 800ac30:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	b2da      	uxtb	r2, r3
 800ac36:	4b10      	ldr	r3, [pc, #64]	@ (800ac78 <BleGetBdAddress+0x80>)
 800ac38:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	0a1b      	lsrs	r3, r3, #8
 800ac3e:	b2da      	uxtb	r2, r3
 800ac40:	4b0d      	ldr	r3, [pc, #52]	@ (800ac78 <BleGetBdAddress+0x80>)
 800ac42:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	0c1b      	lsrs	r3, r3, #16
 800ac48:	b2da      	uxtb	r2, r3
 800ac4a:	4b0b      	ldr	r3, [pc, #44]	@ (800ac78 <BleGetBdAddress+0x80>)
 800ac4c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800ac4e:	4b0a      	ldr	r3, [pc, #40]	@ (800ac78 <BleGetBdAddress+0x80>)
 800ac50:	617b      	str	r3, [r7, #20]
 800ac52:	e00b      	b.n	800ac6c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800ac54:	2000      	movs	r0, #0
 800ac56:	f7ff fc99 	bl	800a58c <OTP_Read>
 800ac5a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d002      	beq.n	800ac68 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	617b      	str	r3, [r7, #20]
 800ac66:	e001      	b.n	800ac6c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800ac68:	4b04      	ldr	r3, [pc, #16]	@ (800ac7c <BleGetBdAddress+0x84>)
 800ac6a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800ac6c:	697b      	ldr	r3, [r7, #20]
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3718      	adds	r7, #24
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	20000734 	.word	0x20000734
 800ac7c:	08015b38 	.word	0x08015b38

0800ac80 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800ac86:	4b0a      	ldr	r3, [pc, #40]	@ (800acb0 <Adv_Cancel+0x30>)
 800ac88:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ac8c:	2b05      	cmp	r3, #5
 800ac8e:	d00a      	beq.n	800aca6 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ac90:	2392      	movs	r3, #146	@ 0x92
 800ac92:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800ac94:	f7fd fb42 	bl	800831c <aci_gap_set_non_discoverable>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ac9c:	4b04      	ldr	r3, [pc, #16]	@ (800acb0 <Adv_Cancel+0x30>)
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800aca4:	bf00      	nop
 800aca6:	bf00      	nop
}
 800aca8:	3708      	adds	r7, #8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	2000073c 	.word	0x2000073c

0800acb4 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800acbc:	2100      	movs	r1, #0
 800acbe:	2002      	movs	r0, #2
 800acc0:	f000 fe6e 	bl	800b9a0 <UTIL_SEQ_SetTask>

  return;
 800acc4:	bf00      	nop
}
 800acc6:	3708      	adds	r7, #8
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800acd4:	2001      	movs	r0, #1
 800acd6:	f000 fecf 	bl	800ba78 <UTIL_SEQ_SetEvt>

  return;
 800acda:	bf00      	nop
}
 800acdc:	3708      	adds	r7, #8
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b082      	sub	sp, #8
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800acea:	2001      	movs	r0, #1
 800acec:	f000 fee4 	bl	800bab8 <UTIL_SEQ_WaitEvt>

  return;
 800acf0:	bf00      	nop
}
 800acf2:	3708      	adds	r7, #8
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	3308      	adds	r3, #8
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7fe fddc 	bl	80098c8 <SVCCTL_UserEvtRx>
 800ad10:	4603      	mov	r3, r0
 800ad12:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800ad14:	7afb      	ldrb	r3, [r7, #11]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d003      	beq.n	800ad22 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800ad20:	e003      	b.n	800ad2a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2200      	movs	r2, #0
 800ad26:	701a      	strb	r2, [r3, #0]
  return;
 800ad28:	bf00      	nop
}
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	4603      	mov	r3, r0
 800ad38:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800ad3a:	79fb      	ldrb	r3, [r7, #7]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d002      	beq.n	800ad46 <BLE_StatusNot+0x16>
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d006      	beq.n	800ad52 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800ad44:	e00b      	b.n	800ad5e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800ad46:	2307      	movs	r3, #7
 800ad48:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f000 fe54 	bl	800b9f8 <UTIL_SEQ_PauseTask>
      break;
 800ad50:	e005      	b.n	800ad5e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800ad52:	2307      	movs	r3, #7
 800ad54:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800ad56:	68f8      	ldr	r0, [r7, #12]
 800ad58:	f000 fe6e 	bl	800ba38 <UTIL_SEQ_ResumeTask>
      break;
 800ad5c:	bf00      	nop
  }

  return;
 800ad5e:	bf00      	nop
}
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
	...

0800ad68 <myTask>:
static void Custom_Mycharnotify_Update_Char(void);
static void Custom_Mycharnotify_Send_Notification(void);

/* USER CODE BEGIN PFP */
void myTask(void)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	af00      	add	r7, sp, #0
// 	  UpdateCharData[0] ^= 0x1;
	  if(acc_example_service(512,UpdateCharData)==EXIT_SUCCESS){
 800ad6c:	490a      	ldr	r1, [pc, #40]	@ (800ad98 <myTask+0x30>)
 800ad6e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ad72:	f7f6 fded 	bl	8001950 <acc_example_service>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d106      	bne.n	800ad8a <myTask+0x22>
		  accel_gyro_init_read(512,UpdateCharData);
 800ad7c:	4906      	ldr	r1, [pc, #24]	@ (800ad98 <myTask+0x30>)
 800ad7e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ad82:	f7f7 fe6d 	bl	8002a60 <accel_gyro_init_read>
		  Custom_Mycharnotify_Update_Char();
 800ad86:	f000 f843 	bl	800ae10 <Custom_Mycharnotify_Update_Char>
// 	  a+=1;
// 	  tr=0;
// 	  for(int i=0;i<512;i++){
// 		 printf("%c\n",UpdateCharData[i]);
// 	  }
   UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	2004      	movs	r0, #4
 800ad8e:	f000 fe07 	bl	800b9a0 <UTIL_SEQ_SetTask>
}
 800ad92:	bf00      	nop
 800ad94:	bd80      	pop	{r7, pc}
 800ad96:	bf00      	nop
 800ad98:	200007c4 	.word	0x200007c4

0800ad9c <Custom_STM_App_Notification>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	2b04      	cmp	r3, #4
 800adaa:	d80d      	bhi.n	800adc8 <Custom_STM_App_Notification+0x2c>
 800adac:	a201      	add	r2, pc, #4	@ (adr r2, 800adb4 <Custom_STM_App_Notification+0x18>)
 800adae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb2:	bf00      	nop
 800adb4:	0800adc9 	.word	0x0800adc9
 800adb8:	0800adc9 	.word	0x0800adc9
 800adbc:	0800adc9 	.word	0x0800adc9
 800adc0:	0800adc9 	.word	0x0800adc9
 800adc4:	0800adc9 	.word	0x0800adc9

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800adc8:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800adca:	bf00      	nop
}
 800adcc:	370c      	adds	r7, #12
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr
 800add6:	bf00      	nop

0800add8 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d002      	beq.n	800adee <Custom_APP_Notification+0x16>
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d002      	beq.n	800adf2 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800adec:	e002      	b.n	800adf4 <Custom_APP_Notification+0x1c>
      break;
 800adee:	bf00      	nop
 800adf0:	e000      	b.n	800adf4 <Custom_APP_Notification+0x1c>
      break;
 800adf2:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800adf4:	bf00      	nop
}
 800adf6:	370c      	adds	r7, #12
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800ae00:	b480      	push	{r7}
 800ae02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800ae04:	bf00      	nop
}
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr
	...

0800ae10 <Custom_Mycharnotify_Update_Char>:
 *
 *************************************************************/

/* mySvc */
__USED void Custom_Mycharnotify_Update_Char(void) /* Property Read */
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800ae16:	2300      	movs	r3, #0
 800ae18:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Mycharnotify_UC_1*/
  updateflag = 1;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE END Mycharnotify_UC_1*/

  if (updateflag != 0)
 800ae1e:	79fb      	ldrb	r3, [r7, #7]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d007      	beq.n	800ae34 <Custom_Mycharnotify_Update_Char+0x24>
  {
	Custom_STM_App_Update_Char_Ext(Connection_Handle, CUSTOM_STM_MYCHARNOTIFY, (uint8_t *)UpdateCharData);
 800ae24:	4b05      	ldr	r3, [pc, #20]	@ (800ae3c <Custom_Mycharnotify_Update_Char+0x2c>)
 800ae26:	881b      	ldrh	r3, [r3, #0]
 800ae28:	4a05      	ldr	r2, [pc, #20]	@ (800ae40 <Custom_Mycharnotify_Update_Char+0x30>)
 800ae2a:	2101      	movs	r1, #1
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f000 f971 	bl	800b114 <Custom_STM_App_Update_Char_Ext>
  }

  /* USER CODE BEGIN Mycharnotify_UC_Last*/

  /* USER CODE END Mycharnotify_UC_Last*/
  return;
 800ae32:	bf00      	nop
 800ae34:	bf00      	nop
}
 800ae36:	3708      	adds	r7, #8
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	200009c4 	.word	0x200009c4
 800ae40:	200007c4 	.word	0x200007c4

0800ae44 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b08c      	sub	sp, #48	@ 0x30
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	3301      	adds	r3, #1
 800ae56:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 800ae58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	2bff      	cmp	r3, #255	@ 0xff
 800ae5e:	f040 809d 	bne.w	800af9c <Custom_STM_Event_Handler+0x158>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800ae62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae64:	3302      	adds	r3, #2
 800ae66:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 800ae68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae6a:	881b      	ldrh	r3, [r3, #0]
 800ae6c:	b29b      	uxth	r3, r3
 800ae6e:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800ae72:	2b1a      	cmp	r3, #26
 800ae74:	f200 808e 	bhi.w	800af94 <Custom_STM_Event_Handler+0x150>
 800ae78:	a201      	add	r2, pc, #4	@ (adr r2, 800ae80 <Custom_STM_Event_Handler+0x3c>)
 800ae7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae7e:	bf00      	nop
 800ae80:	0800aeed 	.word	0x0800aeed
 800ae84:	0800af95 	.word	0x0800af95
 800ae88:	0800af95 	.word	0x0800af95
 800ae8c:	0800af95 	.word	0x0800af95
 800ae90:	0800af95 	.word	0x0800af95
 800ae94:	0800af95 	.word	0x0800af95
 800ae98:	0800af95 	.word	0x0800af95
 800ae9c:	0800af95 	.word	0x0800af95
 800aea0:	0800af95 	.word	0x0800af95
 800aea4:	0800af95 	.word	0x0800af95
 800aea8:	0800af95 	.word	0x0800af95
 800aeac:	0800af95 	.word	0x0800af95
 800aeb0:	0800af95 	.word	0x0800af95
 800aeb4:	0800af95 	.word	0x0800af95
 800aeb8:	0800af95 	.word	0x0800af95
 800aebc:	0800af95 	.word	0x0800af95
 800aec0:	0800af95 	.word	0x0800af95
 800aec4:	0800af95 	.word	0x0800af95
 800aec8:	0800af95 	.word	0x0800af95
 800aecc:	0800af95 	.word	0x0800af95
 800aed0:	0800af95 	.word	0x0800af95
 800aed4:	0800af95 	.word	0x0800af95
 800aed8:	0800af95 	.word	0x0800af95
 800aedc:	0800af95 	.word	0x0800af95
 800aee0:	0800af95 	.word	0x0800af95
 800aee4:	0800af95 	.word	0x0800af95
 800aee8:	0800af77 	.word	0x0800af77
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800aeec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeee:	3302      	adds	r3, #2
 800aef0:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	885b      	ldrh	r3, [r3, #2]
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	461a      	mov	r2, r3
 800aefa:	4b2c      	ldr	r3, [pc, #176]	@ (800afac <Custom_STM_Event_Handler+0x168>)
 800aefc:	889b      	ldrh	r3, [r3, #4]
 800aefe:	3302      	adds	r3, #2
 800af00:	429a      	cmp	r2, r3
 800af02:	d119      	bne.n	800af38 <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800af04:	2301      	movs	r3, #1
 800af06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 800af0a:	69fb      	ldr	r3, [r7, #28]
 800af0c:	7a1b      	ldrb	r3, [r3, #8]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d002      	beq.n	800af18 <Custom_STM_Event_Handler+0xd4>
 800af12:	2b01      	cmp	r3, #1
 800af14:	d008      	beq.n	800af28 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 800af16:	e02d      	b.n	800af74 <Custom_STM_Event_Handler+0x130>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT;
 800af18:	2303      	movs	r3, #3
 800af1a:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800af1c:	f107 0308 	add.w	r3, r7, #8
 800af20:	4618      	mov	r0, r3
 800af22:	f7ff ff3b 	bl	800ad9c <Custom_STM_App_Notification>
                break;
 800af26:	e025      	b.n	800af74 <Custom_STM_Event_Handler+0x130>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT;
 800af28:	2302      	movs	r3, #2
 800af2a:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800af2c:	f107 0308 	add.w	r3, r7, #8
 800af30:	4618      	mov	r0, r3
 800af32:	f7ff ff33 	bl	800ad9c <Custom_STM_App_Notification>
                break;
 800af36:	e01d      	b.n	800af74 <Custom_STM_Event_Handler+0x130>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800af38:	69fb      	ldr	r3, [r7, #28]
 800af3a:	885b      	ldrh	r3, [r3, #2]
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	461a      	mov	r2, r3
 800af40:	4b1a      	ldr	r3, [pc, #104]	@ (800afac <Custom_STM_Event_Handler+0x168>)
 800af42:	885b      	ldrh	r3, [r3, #2]
 800af44:	3301      	adds	r3, #1
 800af46:	429a      	cmp	r2, r3
 800af48:	d107      	bne.n	800af5a <Custom_STM_Event_Handler+0x116>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800af4a:	2301      	movs	r3, #1
 800af4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
            HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 800af50:	2120      	movs	r1, #32
 800af52:	4817      	ldr	r0, [pc, #92]	@ (800afb0 <Custom_STM_Event_Handler+0x16c>)
 800af54:	f7f9 fbfc 	bl	8004750 <HAL_GPIO_TogglePin>
            /* USER CODE END CUSTOM_STM_Service_1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 800af58:	e01e      	b.n	800af98 <Custom_STM_Event_Handler+0x154>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	885b      	ldrh	r3, [r3, #2]
 800af5e:	b29b      	uxth	r3, r3
 800af60:	461a      	mov	r2, r3
 800af62:	4b12      	ldr	r3, [pc, #72]	@ (800afac <Custom_STM_Event_Handler+0x168>)
 800af64:	889b      	ldrh	r3, [r3, #4]
 800af66:	3301      	adds	r3, #1
 800af68:	429a      	cmp	r2, r3
 800af6a:	d115      	bne.n	800af98 <Custom_STM_Event_Handler+0x154>
            return_value = SVCCTL_EvtAckFlowEnable;
 800af6c:	2301      	movs	r3, #1
 800af6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 800af72:	e011      	b.n	800af98 <Custom_STM_Event_Handler+0x154>
 800af74:	e010      	b.n	800af98 <Custom_STM_Event_Handler+0x154>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800af76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af78:	3302      	adds	r3, #2
 800af7a:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 800af7c:	2304      	movs	r3, #4
 800af7e:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 800af80:	6a3b      	ldr	r3, [r7, #32]
 800af82:	881b      	ldrh	r3, [r3, #0]
 800af84:	b29b      	uxth	r3, r3
 800af86:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 800af88:	f107 0308 	add.w	r3, r7, #8
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7ff ff05 	bl	800ad9c <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800af92:	e002      	b.n	800af9a <Custom_STM_Event_Handler+0x156>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800af94:	bf00      	nop
 800af96:	e002      	b.n	800af9e <Custom_STM_Event_Handler+0x15a>
          break;
 800af98:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800af9a:	e000      	b.n	800af9e <Custom_STM_Event_Handler+0x15a>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800af9c:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800af9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 800afa2:	4618      	mov	r0, r3
 800afa4:	3730      	adds	r7, #48	@ 0x30
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	200009c8 	.word	0x200009c8
 800afb0:	48000400 	.word	0x48000400

0800afb4 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b08c      	sub	sp, #48	@ 0x30
 800afb8:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800afba:	2392      	movs	r3, #146	@ 0x92
 800afbc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800afbe:	484f      	ldr	r0, [pc, #316]	@ (800b0fc <SVCCTL_InitCustomSvc+0x148>)
 800afc0:	f7fe fc68 	bl	8009894 <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 800afc4:	2306      	movs	r3, #6
 800afc6:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 800afc8:	238f      	movs	r3, #143	@ 0x8f
 800afca:	713b      	strb	r3, [r7, #4]
 800afcc:	23e5      	movs	r3, #229	@ 0xe5
 800afce:	717b      	strb	r3, [r7, #5]
 800afd0:	23b3      	movs	r3, #179	@ 0xb3
 800afd2:	71bb      	strb	r3, [r7, #6]
 800afd4:	23d5      	movs	r3, #213	@ 0xd5
 800afd6:	71fb      	strb	r3, [r7, #7]
 800afd8:	232e      	movs	r3, #46	@ 0x2e
 800afda:	723b      	strb	r3, [r7, #8]
 800afdc:	237f      	movs	r3, #127	@ 0x7f
 800afde:	727b      	strb	r3, [r7, #9]
 800afe0:	234a      	movs	r3, #74	@ 0x4a
 800afe2:	72bb      	strb	r3, [r7, #10]
 800afe4:	2398      	movs	r3, #152	@ 0x98
 800afe6:	72fb      	strb	r3, [r7, #11]
 800afe8:	232a      	movs	r3, #42	@ 0x2a
 800afea:	733b      	strb	r3, [r7, #12]
 800afec:	2348      	movs	r3, #72	@ 0x48
 800afee:	737b      	strb	r3, [r7, #13]
 800aff0:	237a      	movs	r3, #122	@ 0x7a
 800aff2:	73bb      	strb	r3, [r7, #14]
 800aff4:	23cc      	movs	r3, #204	@ 0xcc
 800aff6:	73fb      	strb	r3, [r7, #15]
 800aff8:	2300      	movs	r3, #0
 800affa:	743b      	strb	r3, [r7, #16]
 800affc:	2300      	movs	r3, #0
 800affe:	747b      	strb	r3, [r7, #17]
 800b000:	2300      	movs	r3, #0
 800b002:	74bb      	strb	r3, [r7, #18]
 800b004:	2300      	movs	r3, #0
 800b006:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800b008:	7dbb      	ldrb	r3, [r7, #22]
 800b00a:	1d39      	adds	r1, r7, #4
 800b00c:	4a3c      	ldr	r2, [pc, #240]	@ (800b100 <SVCCTL_InitCustomSvc+0x14c>)
 800b00e:	9200      	str	r2, [sp, #0]
 800b010:	2201      	movs	r2, #1
 800b012:	2002      	movs	r0, #2
 800b014:	f7fd fdee 	bl	8008bf4 <aci_gatt_add_service>
 800b018:	4603      	mov	r3, r0
 800b01a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 800b01c:	2319      	movs	r3, #25
 800b01e:	713b      	strb	r3, [r7, #4]
 800b020:	23ed      	movs	r3, #237	@ 0xed
 800b022:	717b      	strb	r3, [r7, #5]
 800b024:	2382      	movs	r3, #130	@ 0x82
 800b026:	71bb      	strb	r3, [r7, #6]
 800b028:	23ae      	movs	r3, #174	@ 0xae
 800b02a:	71fb      	strb	r3, [r7, #7]
 800b02c:	23ed      	movs	r3, #237	@ 0xed
 800b02e:	723b      	strb	r3, [r7, #8]
 800b030:	2321      	movs	r3, #33	@ 0x21
 800b032:	727b      	strb	r3, [r7, #9]
 800b034:	234c      	movs	r3, #76	@ 0x4c
 800b036:	72bb      	strb	r3, [r7, #10]
 800b038:	239d      	movs	r3, #157	@ 0x9d
 800b03a:	72fb      	strb	r3, [r7, #11]
 800b03c:	2341      	movs	r3, #65	@ 0x41
 800b03e:	733b      	strb	r3, [r7, #12]
 800b040:	2345      	movs	r3, #69	@ 0x45
 800b042:	737b      	strb	r3, [r7, #13]
 800b044:	2322      	movs	r3, #34	@ 0x22
 800b046:	73bb      	strb	r3, [r7, #14]
 800b048:	238e      	movs	r3, #142	@ 0x8e
 800b04a:	73fb      	strb	r3, [r7, #15]
 800b04c:	2300      	movs	r3, #0
 800b04e:	743b      	strb	r3, [r7, #16]
 800b050:	2300      	movs	r3, #0
 800b052:	747b      	strb	r3, [r7, #17]
 800b054:	2300      	movs	r3, #0
 800b056:	74bb      	strb	r3, [r7, #18]
 800b058:	2300      	movs	r3, #0
 800b05a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 800b05c:	4b28      	ldr	r3, [pc, #160]	@ (800b100 <SVCCTL_InitCustomSvc+0x14c>)
 800b05e:	8818      	ldrh	r0, [r3, #0]
 800b060:	4b28      	ldr	r3, [pc, #160]	@ (800b104 <SVCCTL_InitCustomSvc+0x150>)
 800b062:	881b      	ldrh	r3, [r3, #0]
 800b064:	1d3a      	adds	r2, r7, #4
 800b066:	4928      	ldr	r1, [pc, #160]	@ (800b108 <SVCCTL_InitCustomSvc+0x154>)
 800b068:	9105      	str	r1, [sp, #20]
 800b06a:	2100      	movs	r1, #0
 800b06c:	9104      	str	r1, [sp, #16]
 800b06e:	2110      	movs	r1, #16
 800b070:	9103      	str	r1, [sp, #12]
 800b072:	2101      	movs	r1, #1
 800b074:	9102      	str	r1, [sp, #8]
 800b076:	2100      	movs	r1, #0
 800b078:	9101      	str	r1, [sp, #4]
 800b07a:	2108      	movs	r1, #8
 800b07c:	9100      	str	r1, [sp, #0]
 800b07e:	2102      	movs	r1, #2
 800b080:	f7fd fe8e 	bl	8008da0 <aci_gatt_add_char>
 800b084:	4603      	mov	r3, r0
 800b086:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  myCharNotify
   */
  COPY_MYCHARNOTIFY_UUID(uuid.Char_UUID_128);
 800b088:	2319      	movs	r3, #25
 800b08a:	713b      	strb	r3, [r7, #4]
 800b08c:	23ed      	movs	r3, #237	@ 0xed
 800b08e:	717b      	strb	r3, [r7, #5]
 800b090:	2382      	movs	r3, #130	@ 0x82
 800b092:	71bb      	strb	r3, [r7, #6]
 800b094:	23ae      	movs	r3, #174	@ 0xae
 800b096:	71fb      	strb	r3, [r7, #7]
 800b098:	23ed      	movs	r3, #237	@ 0xed
 800b09a:	723b      	strb	r3, [r7, #8]
 800b09c:	2321      	movs	r3, #33	@ 0x21
 800b09e:	727b      	strb	r3, [r7, #9]
 800b0a0:	234c      	movs	r3, #76	@ 0x4c
 800b0a2:	72bb      	strb	r3, [r7, #10]
 800b0a4:	239d      	movs	r3, #157	@ 0x9d
 800b0a6:	72fb      	strb	r3, [r7, #11]
 800b0a8:	2341      	movs	r3, #65	@ 0x41
 800b0aa:	733b      	strb	r3, [r7, #12]
 800b0ac:	2345      	movs	r3, #69	@ 0x45
 800b0ae:	737b      	strb	r3, [r7, #13]
 800b0b0:	2322      	movs	r3, #34	@ 0x22
 800b0b2:	73bb      	strb	r3, [r7, #14]
 800b0b4:	238e      	movs	r3, #142	@ 0x8e
 800b0b6:	73fb      	strb	r3, [r7, #15]
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	743b      	strb	r3, [r7, #16]
 800b0bc:	2300      	movs	r3, #0
 800b0be:	747b      	strb	r3, [r7, #17]
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	74bb      	strb	r3, [r7, #18]
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 800b0c8:	4b0d      	ldr	r3, [pc, #52]	@ (800b100 <SVCCTL_InitCustomSvc+0x14c>)
 800b0ca:	8818      	ldrh	r0, [r3, #0]
 800b0cc:	4b0f      	ldr	r3, [pc, #60]	@ (800b10c <SVCCTL_InitCustomSvc+0x158>)
 800b0ce:	881b      	ldrh	r3, [r3, #0]
 800b0d0:	1d3a      	adds	r2, r7, #4
 800b0d2:	490f      	ldr	r1, [pc, #60]	@ (800b110 <SVCCTL_InitCustomSvc+0x15c>)
 800b0d4:	9105      	str	r1, [sp, #20]
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	9104      	str	r1, [sp, #16]
 800b0da:	2110      	movs	r1, #16
 800b0dc:	9103      	str	r1, [sp, #12]
 800b0de:	2101      	movs	r1, #1
 800b0e0:	9102      	str	r1, [sp, #8]
 800b0e2:	2100      	movs	r1, #0
 800b0e4:	9101      	str	r1, [sp, #4]
 800b0e6:	2114      	movs	r1, #20
 800b0e8:	9100      	str	r1, [sp, #0]
 800b0ea:	2102      	movs	r1, #2
 800b0ec:	f7fd fe58 	bl	8008da0 <aci_gatt_add_char>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800b0f4:	bf00      	nop
}
 800b0f6:	3718      	adds	r7, #24
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	0800ae45 	.word	0x0800ae45
 800b100:	200009c8 	.word	0x200009c8
 800b104:	20000020 	.word	0x20000020
 800b108:	200009ca 	.word	0x200009ca
 800b10c:	20000022 	.word	0x20000022
 800b110:	200009cc 	.word	0x200009cc

0800b114 <Custom_STM_App_Update_Char_Ext>:
 * @param  CharOpcode: Characteristic identifier
 * @param  pPayload: Characteristic value
 *
 */
tBleStatus Custom_STM_App_Update_Char_Ext(uint16_t Connection_Handle, Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800b114:	b590      	push	{r4, r7, lr}
 800b116:	b087      	sub	sp, #28
 800b118:	af02      	add	r7, sp, #8
 800b11a:	4603      	mov	r3, r0
 800b11c:	603a      	str	r2, [r7, #0]
 800b11e:	80fb      	strh	r3, [r7, #6]
 800b120:	460b      	mov	r3, r1
 800b122:	717b      	strb	r3, [r7, #5]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b124:	2392      	movs	r3, #146	@ 0x92
 800b126:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_Ext_1 */

  /* USER CODE END Custom_STM_App_Update_Char_Ext_1 */

  switch (CharOpcode)
 800b128:	797b      	ldrb	r3, [r7, #5]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d002      	beq.n	800b134 <Custom_STM_App_Update_Char_Ext+0x20>
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d00d      	beq.n	800b14e <Custom_STM_App_Update_Char_Ext+0x3a>
	  Generic_STM_App_Update_Char_Ext(Connection_Handle, CustomContext.CustomMysvcHdle, CustomContext.CustomMycharnotifyHdle, SizeMycharnotify, pPayload);

      break;

    default:
      break;
 800b132:	e019      	b.n	800b168 <Custom_STM_App_Update_Char_Ext+0x54>
	  Generic_STM_App_Update_Char_Ext(Connection_Handle, CustomContext.CustomMysvcHdle, CustomContext.CustomMycharwriteHdle, SizeMycharwrite, pPayload);
 800b134:	4b0f      	ldr	r3, [pc, #60]	@ (800b174 <Custom_STM_App_Update_Char_Ext+0x60>)
 800b136:	8819      	ldrh	r1, [r3, #0]
 800b138:	4b0e      	ldr	r3, [pc, #56]	@ (800b174 <Custom_STM_App_Update_Char_Ext+0x60>)
 800b13a:	885a      	ldrh	r2, [r3, #2]
 800b13c:	4b0e      	ldr	r3, [pc, #56]	@ (800b178 <Custom_STM_App_Update_Char_Ext+0x64>)
 800b13e:	881c      	ldrh	r4, [r3, #0]
 800b140:	88f8      	ldrh	r0, [r7, #6]
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	9300      	str	r3, [sp, #0]
 800b146:	4623      	mov	r3, r4
 800b148:	f000 f81a 	bl	800b180 <Generic_STM_App_Update_Char_Ext>
      break;
 800b14c:	e00c      	b.n	800b168 <Custom_STM_App_Update_Char_Ext+0x54>
	  Generic_STM_App_Update_Char_Ext(Connection_Handle, CustomContext.CustomMysvcHdle, CustomContext.CustomMycharnotifyHdle, SizeMycharnotify, pPayload);
 800b14e:	4b09      	ldr	r3, [pc, #36]	@ (800b174 <Custom_STM_App_Update_Char_Ext+0x60>)
 800b150:	8819      	ldrh	r1, [r3, #0]
 800b152:	4b08      	ldr	r3, [pc, #32]	@ (800b174 <Custom_STM_App_Update_Char_Ext+0x60>)
 800b154:	889a      	ldrh	r2, [r3, #4]
 800b156:	4b09      	ldr	r3, [pc, #36]	@ (800b17c <Custom_STM_App_Update_Char_Ext+0x68>)
 800b158:	881c      	ldrh	r4, [r3, #0]
 800b15a:	88f8      	ldrh	r0, [r7, #6]
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	9300      	str	r3, [sp, #0]
 800b160:	4623      	mov	r3, r4
 800b162:	f000 f80d 	bl	800b180 <Generic_STM_App_Update_Char_Ext>
      break;
 800b166:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_Ext_2 */

  /* USER CODE END Custom_STM_App_Update_Char_Ext_2 */

  return ret;
 800b168:	7bfb      	ldrb	r3, [r7, #15]
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3714      	adds	r7, #20
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd90      	pop	{r4, r7, pc}
 800b172:	bf00      	nop
 800b174:	200009c8 	.word	0x200009c8
 800b178:	20000020 	.word	0x20000020
 800b17c:	20000022 	.word	0x20000022

0800b180 <Generic_STM_App_Update_Char_Ext>:

static tBleStatus Generic_STM_App_Update_Char_Ext(uint16_t ConnectionHandle, uint16_t ServiceHandle, uint16_t CharHandle, uint16_t CharValueLen, uint8_t *pPayload)
{
 800b180:	b590      	push	{r4, r7, lr}
 800b182:	b089      	sub	sp, #36	@ 0x24
 800b184:	af04      	add	r7, sp, #16
 800b186:	4604      	mov	r4, r0
 800b188:	4608      	mov	r0, r1
 800b18a:	4611      	mov	r1, r2
 800b18c:	461a      	mov	r2, r3
 800b18e:	4623      	mov	r3, r4
 800b190:	80fb      	strh	r3, [r7, #6]
 800b192:	4603      	mov	r3, r0
 800b194:	80bb      	strh	r3, [r7, #4]
 800b196:	460b      	mov	r3, r1
 800b198:	807b      	strh	r3, [r7, #2]
 800b19a:	4613      	mov	r3, r2
 800b19c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b19e:	2392      	movs	r3, #146	@ 0x92
 800b1a0:	73fb      	strb	r3, [r7, #15]

  ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 800b1a2:	887a      	ldrh	r2, [r7, #2]
 800b1a4:	88b9      	ldrh	r1, [r7, #4]
 800b1a6:	88f8      	ldrh	r0, [r7, #6]
 800b1a8:	6a3b      	ldr	r3, [r7, #32]
 800b1aa:	9303      	str	r3, [sp, #12]
 800b1ac:	23f3      	movs	r3, #243	@ 0xf3
 800b1ae:	9302      	str	r3, [sp, #8]
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	9301      	str	r3, [sp, #4]
 800b1b4:	883b      	ldrh	r3, [r7, #0]
 800b1b6:	9300      	str	r3, [sp, #0]
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	f7fd fff7 	bl	80091ac <aci_gatt_update_char_value_ext>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("  Success: aci_gatt_update_char_value_ext command, part 1\n\r");
  }
  /* USER CODE BEGIN Custom_STM_App_Update_Char_Ext_Service_1_Char_1*/

  if (CharValueLen-243<=243)
 800b1c2:	883b      	ldrh	r3, [r7, #0]
 800b1c4:	f5b3 7ff3 	cmp.w	r3, #486	@ 0x1e6
 800b1c8:	d815      	bhi.n	800b1f6 <Generic_STM_App_Update_Char_Ext+0x76>
  {
    ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 800b1ca:	883b      	ldrh	r3, [r7, #0]
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	330d      	adds	r3, #13
 800b1d0:	b2db      	uxtb	r3, r3
                                         CharHandle,
                                         1, /* update type:0 do not notify, 1 notify, 2 indicate */
                                         CharValueLen, /* charValueLen */
                                         243, /* value offset */
                                         CharValueLen-243, /* value length */
                                         (uint8_t *)  ((pPayload)+243));
 800b1d2:	6a3a      	ldr	r2, [r7, #32]
 800b1d4:	32f3      	adds	r2, #243	@ 0xf3
    ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 800b1d6:	887c      	ldrh	r4, [r7, #2]
 800b1d8:	88b9      	ldrh	r1, [r7, #4]
 800b1da:	88f8      	ldrh	r0, [r7, #6]
 800b1dc:	9203      	str	r2, [sp, #12]
 800b1de:	9302      	str	r3, [sp, #8]
 800b1e0:	23f3      	movs	r3, #243	@ 0xf3
 800b1e2:	9301      	str	r3, [sp, #4]
 800b1e4:	883b      	ldrh	r3, [r7, #0]
 800b1e6:	9300      	str	r3, [sp, #0]
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	4622      	mov	r2, r4
 800b1ec:	f7fd ffde 	bl	80091ac <aci_gatt_update_char_value_ext>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	73fb      	strb	r3, [r7, #15]
 800b1f4:	e027      	b.n	800b246 <Generic_STM_App_Update_Char_Ext+0xc6>
                                         CharHandle,
                                         0, /* update type:0 do not notify, 1 notify, 2 indicate */
                                         CharValueLen, /* charValueLen */
                                         243, /* value offset */
                                         243, /* value length */
                                         (uint8_t *)  ((pPayload)+243));
 800b1f6:	6a3b      	ldr	r3, [r7, #32]
 800b1f8:	33f3      	adds	r3, #243	@ 0xf3
    ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 800b1fa:	887a      	ldrh	r2, [r7, #2]
 800b1fc:	88b9      	ldrh	r1, [r7, #4]
 800b1fe:	88f8      	ldrh	r0, [r7, #6]
 800b200:	9303      	str	r3, [sp, #12]
 800b202:	23f3      	movs	r3, #243	@ 0xf3
 800b204:	9302      	str	r3, [sp, #8]
 800b206:	23f3      	movs	r3, #243	@ 0xf3
 800b208:	9301      	str	r3, [sp, #4]
 800b20a:	883b      	ldrh	r3, [r7, #0]
 800b20c:	9300      	str	r3, [sp, #0]
 800b20e:	2300      	movs	r3, #0
 800b210:	f7fd ffcc 	bl	80091ac <aci_gatt_update_char_value_ext>
 800b214:	4603      	mov	r3, r0
 800b216:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gatt_update_char_value_ext command, part 3\n\r");
    }
    ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 800b218:	883b      	ldrh	r3, [r7, #0]
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	331a      	adds	r3, #26
 800b21e:	b2db      	uxtb	r3, r3
                                         CharHandle,
                                         1, /* update type:0 do not notify, 1 notify, 2 indicate */
                                         CharValueLen, /* charValueLen */
                                         243+243, /* value offset */
                                         CharValueLen-243-243, /* value length */
                                         (uint8_t *)  ((pPayload)+243+243));
 800b220:	6a3a      	ldr	r2, [r7, #32]
 800b222:	f502 72f3 	add.w	r2, r2, #486	@ 0x1e6
    ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 800b226:	887c      	ldrh	r4, [r7, #2]
 800b228:	88b9      	ldrh	r1, [r7, #4]
 800b22a:	88f8      	ldrh	r0, [r7, #6]
 800b22c:	9203      	str	r2, [sp, #12]
 800b22e:	9302      	str	r3, [sp, #8]
 800b230:	f44f 73f3 	mov.w	r3, #486	@ 0x1e6
 800b234:	9301      	str	r3, [sp, #4]
 800b236:	883b      	ldrh	r3, [r7, #0]
 800b238:	9300      	str	r3, [sp, #0]
 800b23a:	2301      	movs	r3, #1
 800b23c:	4622      	mov	r2, r4
 800b23e:	f7fd ffb5 	bl	80091ac <aci_gatt_update_char_value_ext>
 800b242:	4603      	mov	r3, r0
 800b244:	73fb      	strb	r3, [r7, #15]
    else
    {
      APP_DBG_MSG("  Success: aci_gatt_update_char_value_ext command, part 4\n\r");
    }
  }
  return ret;
 800b246:	7bfb      	ldrb	r3, [r7, #15]
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3714      	adds	r7, #20
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd90      	pop	{r4, r7, pc}

0800b250 <LL_PWR_EnableBootC2>:
{
 800b250:	b480      	push	{r7}
 800b252:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800b254:	4b05      	ldr	r3, [pc, #20]	@ (800b26c <LL_PWR_EnableBootC2+0x1c>)
 800b256:	68db      	ldr	r3, [r3, #12]
 800b258:	4a04      	ldr	r2, [pc, #16]	@ (800b26c <LL_PWR_EnableBootC2+0x1c>)
 800b25a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b25e:	60d3      	str	r3, [r2, #12]
}
 800b260:	bf00      	nop
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr
 800b26a:	bf00      	nop
 800b26c:	58000400 	.word	0x58000400

0800b270 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800b270:	b480      	push	{r7}
 800b272:	b083      	sub	sp, #12
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800b278:	4b06      	ldr	r3, [pc, #24]	@ (800b294 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b27a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800b27e:	4905      	ldr	r1, [pc, #20]	@ (800b294 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	4313      	orrs	r3, r2
 800b284:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800b288:	bf00      	nop
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr
 800b294:	58000800 	.word	0x58000800

0800b298 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800b2a0:	4b05      	ldr	r3, [pc, #20]	@ (800b2b8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b2a2:	6a1a      	ldr	r2, [r3, #32]
 800b2a4:	4904      	ldr	r1, [pc, #16]	@ (800b2b8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	620b      	str	r3, [r1, #32]
}
 800b2ac:	bf00      	nop
 800b2ae:	370c      	adds	r7, #12
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr
 800b2b8:	58000800 	.word	0x58000800

0800b2bc <LL_AHB3_GRP1_EnableClock>:
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b085      	sub	sp, #20
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800b2c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b2c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b2ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800b2d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b2d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4013      	ands	r3, r2
 800b2de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
}
 800b2e2:	bf00      	nop
 800b2e4:	3714      	adds	r7, #20
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ec:	4770      	bx	lr

0800b2ee <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800b2ee:	b480      	push	{r7}
 800b2f0:	b085      	sub	sp, #20
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800b2f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b2fa:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800b2fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	4313      	orrs	r3, r2
 800b306:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800b30a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b30e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4013      	ands	r3, r2
 800b316:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b318:	68fb      	ldr	r3, [r7, #12]
}
 800b31a:	bf00      	nop
 800b31c:	3714      	adds	r7, #20
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr

0800b326 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800b326:	b480      	push	{r7}
 800b328:	b083      	sub	sp, #12
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	601a      	str	r2, [r3, #0]
}
 800b33a:	bf00      	nop
 800b33c:	370c      	adds	r7, #12
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr

0800b346 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800b346:	b480      	push	{r7}
 800b348:	b083      	sub	sp, #12
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f043 0201 	orr.w	r2, r3, #1
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	601a      	str	r2, [r3, #0]
}
 800b35a:	bf00      	nop
 800b35c:	370c      	adds	r7, #12
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr

0800b366 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b366:	b480      	push	{r7}
 800b368:	b083      	sub	sp, #12
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
 800b36e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	685a      	ldr	r2, [r3, #4]
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	041b      	lsls	r3, r3, #16
 800b378:	43db      	mvns	r3, r3
 800b37a:	401a      	ands	r2, r3
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	605a      	str	r2, [r3, #4]
}
 800b380:	bf00      	nop
 800b382:	370c      	adds	r7, #12
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b083      	sub	sp, #12
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	685a      	ldr	r2, [r3, #4]
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	041b      	lsls	r3, r3, #16
 800b39e:	431a      	orrs	r2, r3
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	605a      	str	r2, [r3, #4]
}
 800b3a4:	bf00      	nop
 800b3a6:	370c      	adds	r7, #12
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr

0800b3b0 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	685a      	ldr	r2, [r3, #4]
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	43db      	mvns	r3, r3
 800b3c2:	401a      	ands	r2, r3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	605a      	str	r2, [r3, #4]
}
 800b3c8:	bf00      	nop
 800b3ca:	370c      	adds	r7, #12
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	683a      	ldr	r2, [r7, #0]
 800b3e2:	609a      	str	r2, [r3, #8]
}
 800b3e4:	bf00      	nop
 800b3e6:	370c      	adds	r7, #12
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr

0800b3f0 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b083      	sub	sp, #12
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	041a      	lsls	r2, r3, #16
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	609a      	str	r2, [r3, #8]
}
 800b402:	bf00      	nop
 800b404:	370c      	adds	r7, #12
 800b406:	46bd      	mov	sp, r7
 800b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40c:	4770      	bx	lr

0800b40e <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800b40e:	b480      	push	{r7}
 800b410:	b083      	sub	sp, #12
 800b412:	af00      	add	r7, sp, #0
 800b414:	6078      	str	r0, [r7, #4]
 800b416:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	68da      	ldr	r2, [r3, #12]
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	4013      	ands	r3, r2
 800b420:	683a      	ldr	r2, [r7, #0]
 800b422:	429a      	cmp	r2, r3
 800b424:	d101      	bne.n	800b42a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800b426:	2301      	movs	r3, #1
 800b428:	e000      	b.n	800b42c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800b42a:	2300      	movs	r3, #0
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	370c      	adds	r7, #12
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800b438:	b480      	push	{r7}
 800b43a:	b083      	sub	sp, #12
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	69da      	ldr	r2, [r3, #28]
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	4013      	ands	r3, r2
 800b44a:	683a      	ldr	r2, [r7, #0]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d101      	bne.n	800b454 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800b450:	2301      	movs	r3, #1
 800b452:	e000      	b.n	800b456 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800b454:	2300      	movs	r3, #0
}
 800b456:	4618      	mov	r0, r3
 800b458:	370c      	adds	r7, #12
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr
	...

0800b464 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800b464:	b580      	push	{r7, lr}
 800b466:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800b468:	2102      	movs	r1, #2
 800b46a:	4818      	ldr	r0, [pc, #96]	@ (800b4cc <HW_IPCC_Rx_Handler+0x68>)
 800b46c:	f7ff ffe4 	bl	800b438 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b470:	4603      	mov	r3, r0
 800b472:	2b00      	cmp	r3, #0
 800b474:	d008      	beq.n	800b488 <HW_IPCC_Rx_Handler+0x24>
 800b476:	4b15      	ldr	r3, [pc, #84]	@ (800b4cc <HW_IPCC_Rx_Handler+0x68>)
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	f003 0302 	and.w	r3, r3, #2
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d102      	bne.n	800b488 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800b482:	f000 f8d5 	bl	800b630 <HW_IPCC_SYS_EvtHandler>
 800b486:	e01e      	b.n	800b4c6 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800b488:	2101      	movs	r1, #1
 800b48a:	4810      	ldr	r0, [pc, #64]	@ (800b4cc <HW_IPCC_Rx_Handler+0x68>)
 800b48c:	f7ff ffd4 	bl	800b438 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b490:	4603      	mov	r3, r0
 800b492:	2b00      	cmp	r3, #0
 800b494:	d008      	beq.n	800b4a8 <HW_IPCC_Rx_Handler+0x44>
 800b496:	4b0d      	ldr	r3, [pc, #52]	@ (800b4cc <HW_IPCC_Rx_Handler+0x68>)
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	f003 0301 	and.w	r3, r3, #1
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d102      	bne.n	800b4a8 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800b4a2:	f000 f889 	bl	800b5b8 <HW_IPCC_BLE_EvtHandler>
 800b4a6:	e00e      	b.n	800b4c6 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800b4a8:	2108      	movs	r1, #8
 800b4aa:	4808      	ldr	r0, [pc, #32]	@ (800b4cc <HW_IPCC_Rx_Handler+0x68>)
 800b4ac:	f7ff ffc4 	bl	800b438 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d008      	beq.n	800b4c8 <HW_IPCC_Rx_Handler+0x64>
 800b4b6:	4b05      	ldr	r3, [pc, #20]	@ (800b4cc <HW_IPCC_Rx_Handler+0x68>)
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	f003 0308 	and.w	r3, r3, #8
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d102      	bne.n	800b4c8 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800b4c2:	f000 f901 	bl	800b6c8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800b4c6:	bf00      	nop
 800b4c8:	bf00      	nop
}
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	58000c00 	.word	0x58000c00

0800b4d0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800b4d4:	2102      	movs	r1, #2
 800b4d6:	4818      	ldr	r0, [pc, #96]	@ (800b538 <HW_IPCC_Tx_Handler+0x68>)
 800b4d8:	f7ff ff99 	bl	800b40e <LL_C1_IPCC_IsActiveFlag_CHx>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d108      	bne.n	800b4f4 <HW_IPCC_Tx_Handler+0x24>
 800b4e2:	4b15      	ldr	r3, [pc, #84]	@ (800b538 <HW_IPCC_Tx_Handler+0x68>)
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d102      	bne.n	800b4f4 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800b4ee:	f000 f893 	bl	800b618 <HW_IPCC_SYS_CmdEvtHandler>
 800b4f2:	e01e      	b.n	800b532 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800b4f4:	2108      	movs	r1, #8
 800b4f6:	4810      	ldr	r0, [pc, #64]	@ (800b538 <HW_IPCC_Tx_Handler+0x68>)
 800b4f8:	f7ff ff89 	bl	800b40e <LL_C1_IPCC_IsActiveFlag_CHx>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d108      	bne.n	800b514 <HW_IPCC_Tx_Handler+0x44>
 800b502:	4b0d      	ldr	r3, [pc, #52]	@ (800b538 <HW_IPCC_Tx_Handler+0x68>)
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d102      	bne.n	800b514 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800b50e:	f000 f8bd 	bl	800b68c <HW_IPCC_MM_FreeBufHandler>
 800b512:	e00e      	b.n	800b532 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800b514:	2120      	movs	r1, #32
 800b516:	4808      	ldr	r0, [pc, #32]	@ (800b538 <HW_IPCC_Tx_Handler+0x68>)
 800b518:	f7ff ff79 	bl	800b40e <LL_C1_IPCC_IsActiveFlag_CHx>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d108      	bne.n	800b534 <HW_IPCC_Tx_Handler+0x64>
 800b522:	4b05      	ldr	r3, [pc, #20]	@ (800b538 <HW_IPCC_Tx_Handler+0x68>)
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d102      	bne.n	800b534 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800b52e:	f000 f84f 	bl	800b5d0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800b532:	bf00      	nop
 800b534:	bf00      	nop
}
 800b536:	bd80      	pop	{r7, pc}
 800b538:	58000c00 	.word	0x58000c00

0800b53c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800b540:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800b544:	f7ff fed3 	bl	800b2ee <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800b548:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b54c:	f7ff fea4 	bl	800b298 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800b550:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b554:	f7ff fe8c 	bl	800b270 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800b558:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800b55a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800b55c:	f7ff fe78 	bl	800b250 <LL_PWR_EnableBootC2>

  return;
 800b560:	bf00      	nop
}
 800b562:	bd80      	pop	{r7, pc}

0800b564 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800b564:	b580      	push	{r7, lr}
 800b566:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800b568:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800b56c:	f7ff fea6 	bl	800b2bc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800b570:	4806      	ldr	r0, [pc, #24]	@ (800b58c <HW_IPCC_Init+0x28>)
 800b572:	f7ff fee8 	bl	800b346 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800b576:	4805      	ldr	r0, [pc, #20]	@ (800b58c <HW_IPCC_Init+0x28>)
 800b578:	f7ff fed5 	bl	800b326 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800b57c:	202c      	movs	r0, #44	@ 0x2c
 800b57e:	f7f8 ff02 	bl	8004386 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800b582:	202d      	movs	r0, #45	@ 0x2d
 800b584:	f7f8 feff 	bl	8004386 <HAL_NVIC_EnableIRQ>

  return;
 800b588:	bf00      	nop
}
 800b58a:	bd80      	pop	{r7, pc}
 800b58c:	58000c00 	.word	0x58000c00

0800b590 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800b590:	b580      	push	{r7, lr}
 800b592:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800b594:	2101      	movs	r1, #1
 800b596:	4802      	ldr	r0, [pc, #8]	@ (800b5a0 <HW_IPCC_BLE_Init+0x10>)
 800b598:	f7ff ff0a 	bl	800b3b0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b59c:	bf00      	nop
}
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	58000c00 	.word	0x58000c00

0800b5a4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800b5a8:	2101      	movs	r1, #1
 800b5aa:	4802      	ldr	r0, [pc, #8]	@ (800b5b4 <HW_IPCC_BLE_SendCmd+0x10>)
 800b5ac:	f7ff ff20 	bl	800b3f0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800b5b0:	bf00      	nop
}
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	58000c00 	.word	0x58000c00

0800b5b8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800b5bc:	f7fe fe2e 	bl	800a21c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800b5c0:	2101      	movs	r1, #1
 800b5c2:	4802      	ldr	r0, [pc, #8]	@ (800b5cc <HW_IPCC_BLE_EvtHandler+0x14>)
 800b5c4:	f7ff ff06 	bl	800b3d4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b5c8:	bf00      	nop
}
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	58000c00 	.word	0x58000c00

0800b5d0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800b5d4:	2120      	movs	r1, #32
 800b5d6:	4803      	ldr	r0, [pc, #12]	@ (800b5e4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800b5d8:	f7ff fed8 	bl	800b38c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800b5dc:	f7fe fe4e 	bl	800a27c <HW_IPCC_BLE_AclDataAckNot>

  return;
 800b5e0:	bf00      	nop
}
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	58000c00 	.word	0x58000c00

0800b5e8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800b5ec:	2102      	movs	r1, #2
 800b5ee:	4802      	ldr	r0, [pc, #8]	@ (800b5f8 <HW_IPCC_SYS_Init+0x10>)
 800b5f0:	f7ff fede 	bl	800b3b0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b5f4:	bf00      	nop
}
 800b5f6:	bd80      	pop	{r7, pc}
 800b5f8:	58000c00 	.word	0x58000c00

0800b5fc <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b600:	2102      	movs	r1, #2
 800b602:	4804      	ldr	r0, [pc, #16]	@ (800b614 <HW_IPCC_SYS_SendCmd+0x18>)
 800b604:	f7ff fef4 	bl	800b3f0 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b608:	2102      	movs	r1, #2
 800b60a:	4802      	ldr	r0, [pc, #8]	@ (800b614 <HW_IPCC_SYS_SendCmd+0x18>)
 800b60c:	f7ff feab 	bl	800b366 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800b610:	bf00      	nop
}
 800b612:	bd80      	pop	{r7, pc}
 800b614:	58000c00 	.word	0x58000c00

0800b618 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b61c:	2102      	movs	r1, #2
 800b61e:	4803      	ldr	r0, [pc, #12]	@ (800b62c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800b620:	f7ff feb4 	bl	800b38c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800b624:	f7fe fe7a 	bl	800a31c <HW_IPCC_SYS_CmdEvtNot>

  return;
 800b628:	bf00      	nop
}
 800b62a:	bd80      	pop	{r7, pc}
 800b62c:	58000c00 	.word	0x58000c00

0800b630 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800b630:	b580      	push	{r7, lr}
 800b632:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800b634:	f7fe fe88 	bl	800a348 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800b638:	2102      	movs	r1, #2
 800b63a:	4802      	ldr	r0, [pc, #8]	@ (800b644 <HW_IPCC_SYS_EvtHandler+0x14>)
 800b63c:	f7ff feca 	bl	800b3d4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b640:	bf00      	nop
}
 800b642:	bd80      	pop	{r7, pc}
 800b644:	58000c00 	.word	0x58000c00

0800b648 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800b650:	2108      	movs	r1, #8
 800b652:	480c      	ldr	r0, [pc, #48]	@ (800b684 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b654:	f7ff fedb 	bl	800b40e <LL_C1_IPCC_IsActiveFlag_CHx>
 800b658:	4603      	mov	r3, r0
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d007      	beq.n	800b66e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800b65e:	4a0a      	ldr	r2, [pc, #40]	@ (800b688 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b664:	2108      	movs	r1, #8
 800b666:	4807      	ldr	r0, [pc, #28]	@ (800b684 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b668:	f7ff fe7d 	bl	800b366 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800b66c:	e006      	b.n	800b67c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b672:	2108      	movs	r1, #8
 800b674:	4803      	ldr	r0, [pc, #12]	@ (800b684 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b676:	f7ff febb 	bl	800b3f0 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800b67a:	bf00      	nop
}
 800b67c:	3708      	adds	r7, #8
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	58000c00 	.word	0x58000c00
 800b688:	200009d0 	.word	0x200009d0

0800b68c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b690:	2108      	movs	r1, #8
 800b692:	4806      	ldr	r0, [pc, #24]	@ (800b6ac <HW_IPCC_MM_FreeBufHandler+0x20>)
 800b694:	f7ff fe7a 	bl	800b38c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800b698:	4b05      	ldr	r3, [pc, #20]	@ (800b6b0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b69e:	2108      	movs	r1, #8
 800b6a0:	4802      	ldr	r0, [pc, #8]	@ (800b6ac <HW_IPCC_MM_FreeBufHandler+0x20>)
 800b6a2:	f7ff fea5 	bl	800b3f0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800b6a6:	bf00      	nop
}
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	58000c00 	.word	0x58000c00
 800b6b0:	200009d0 	.word	0x200009d0

0800b6b4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800b6b8:	2108      	movs	r1, #8
 800b6ba:	4802      	ldr	r0, [pc, #8]	@ (800b6c4 <HW_IPCC_TRACES_Init+0x10>)
 800b6bc:	f7ff fe78 	bl	800b3b0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b6c0:	bf00      	nop
}
 800b6c2:	bd80      	pop	{r7, pc}
 800b6c4:	58000c00 	.word	0x58000c00

0800b6c8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800b6cc:	f7fe fee4 	bl	800a498 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800b6d0:	2108      	movs	r1, #8
 800b6d2:	4802      	ldr	r0, [pc, #8]	@ (800b6dc <HW_IPCC_TRACES_EvtHandler+0x14>)
 800b6d4:	f7ff fe7e 	bl	800b3d4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b6d8:	bf00      	nop
}
 800b6da:	bd80      	pop	{r7, pc}
 800b6dc:	58000c00 	.word	0x58000c00

0800b6e0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800b6e4:	4b05      	ldr	r3, [pc, #20]	@ (800b6fc <UTIL_LPM_Init+0x1c>)
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800b6ea:	4b05      	ldr	r3, [pc, #20]	@ (800b700 <UTIL_LPM_Init+0x20>)
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800b6f0:	bf00      	nop
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop
 800b6fc:	200009d4 	.word	0x200009d4
 800b700:	200009d8 	.word	0x200009d8

0800b704 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800b704:	b480      	push	{r7}
 800b706:	b087      	sub	sp, #28
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	460b      	mov	r3, r1
 800b70e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b710:	f3ef 8310 	mrs	r3, PRIMASK
 800b714:	613b      	str	r3, [r7, #16]
  return(result);
 800b716:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800b718:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b71a:	b672      	cpsid	i
}
 800b71c:	bf00      	nop
  
  switch(state)
 800b71e:	78fb      	ldrb	r3, [r7, #3]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d008      	beq.n	800b736 <UTIL_LPM_SetOffMode+0x32>
 800b724:	2b01      	cmp	r3, #1
 800b726:	d10e      	bne.n	800b746 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800b728:	4b0d      	ldr	r3, [pc, #52]	@ (800b760 <UTIL_LPM_SetOffMode+0x5c>)
 800b72a:	681a      	ldr	r2, [r3, #0]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	4313      	orrs	r3, r2
 800b730:	4a0b      	ldr	r2, [pc, #44]	@ (800b760 <UTIL_LPM_SetOffMode+0x5c>)
 800b732:	6013      	str	r3, [r2, #0]
      break;
 800b734:	e008      	b.n	800b748 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	43da      	mvns	r2, r3
 800b73a:	4b09      	ldr	r3, [pc, #36]	@ (800b760 <UTIL_LPM_SetOffMode+0x5c>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4013      	ands	r3, r2
 800b740:	4a07      	ldr	r2, [pc, #28]	@ (800b760 <UTIL_LPM_SetOffMode+0x5c>)
 800b742:	6013      	str	r3, [r2, #0]
      break;
 800b744:	e000      	b.n	800b748 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800b746:	bf00      	nop
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f383 8810 	msr	PRIMASK, r3
}
 800b752:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b754:	bf00      	nop
 800b756:	371c      	adds	r7, #28
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr
 800b760:	200009d8 	.word	0x200009d8

0800b764 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b090      	sub	sp, #64	@ 0x40
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800b76c:	4b73      	ldr	r3, [pc, #460]	@ (800b93c <UTIL_SEQ_Run+0x1d8>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800b772:	4b72      	ldr	r3, [pc, #456]	@ (800b93c <UTIL_SEQ_Run+0x1d8>)
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	4013      	ands	r3, r2
 800b77a:	4a70      	ldr	r2, [pc, #448]	@ (800b93c <UTIL_SEQ_Run+0x1d8>)
 800b77c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800b77e:	4b70      	ldr	r3, [pc, #448]	@ (800b940 <UTIL_SEQ_Run+0x1dc>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800b784:	4b6f      	ldr	r3, [pc, #444]	@ (800b944 <UTIL_SEQ_Run+0x1e0>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800b78a:	4b6f      	ldr	r3, [pc, #444]	@ (800b948 <UTIL_SEQ_Run+0x1e4>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800b790:	4b6e      	ldr	r3, [pc, #440]	@ (800b94c <UTIL_SEQ_Run+0x1e8>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b796:	e08d      	b.n	800b8b4 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800b798:	2300      	movs	r3, #0
 800b79a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b79c:	e002      	b.n	800b7a4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800b79e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b7a4:	4a6a      	ldr	r2, [pc, #424]	@ (800b950 <UTIL_SEQ_Run+0x1ec>)
 800b7a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7a8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b7ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ae:	401a      	ands	r2, r3
 800b7b0:	4b62      	ldr	r3, [pc, #392]	@ (800b93c <UTIL_SEQ_Run+0x1d8>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4013      	ands	r3, r2
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d0f1      	beq.n	800b79e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800b7ba:	4a65      	ldr	r2, [pc, #404]	@ (800b950 <UTIL_SEQ_Run+0x1ec>)
 800b7bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7be:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7c4:	401a      	ands	r2, r3
 800b7c6:	4b5d      	ldr	r3, [pc, #372]	@ (800b93c <UTIL_SEQ_Run+0x1d8>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4013      	ands	r3, r2
 800b7cc:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800b7ce:	4a60      	ldr	r2, [pc, #384]	@ (800b950 <UTIL_SEQ_Run+0x1ec>)
 800b7d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7d2:	00db      	lsls	r3, r3, #3
 800b7d4:	4413      	add	r3, r2
 800b7d6:	685a      	ldr	r2, [r3, #4]
 800b7d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7da:	4013      	ands	r3, r2
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d106      	bne.n	800b7ee <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800b7e0:	4a5b      	ldr	r2, [pc, #364]	@ (800b950 <UTIL_SEQ_Run+0x1ec>)
 800b7e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7e4:	00db      	lsls	r3, r3, #3
 800b7e6:	4413      	add	r3, r2
 800b7e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b7ec:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800b7ee:	4a58      	ldr	r2, [pc, #352]	@ (800b950 <UTIL_SEQ_Run+0x1ec>)
 800b7f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7f2:	00db      	lsls	r3, r3, #3
 800b7f4:	4413      	add	r3, r2
 800b7f6:	685a      	ldr	r2, [r3, #4]
 800b7f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7fa:	4013      	ands	r3, r2
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f000 f9b3 	bl	800bb68 <SEQ_BitPosition>
 800b802:	4603      	mov	r3, r0
 800b804:	461a      	mov	r2, r3
 800b806:	4b53      	ldr	r3, [pc, #332]	@ (800b954 <UTIL_SEQ_Run+0x1f0>)
 800b808:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800b80a:	4a51      	ldr	r2, [pc, #324]	@ (800b950 <UTIL_SEQ_Run+0x1ec>)
 800b80c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b80e:	00db      	lsls	r3, r3, #3
 800b810:	4413      	add	r3, r2
 800b812:	685a      	ldr	r2, [r3, #4]
 800b814:	4b4f      	ldr	r3, [pc, #316]	@ (800b954 <UTIL_SEQ_Run+0x1f0>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	2101      	movs	r1, #1
 800b81a:	fa01 f303 	lsl.w	r3, r1, r3
 800b81e:	43db      	mvns	r3, r3
 800b820:	401a      	ands	r2, r3
 800b822:	494b      	ldr	r1, [pc, #300]	@ (800b950 <UTIL_SEQ_Run+0x1ec>)
 800b824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b826:	00db      	lsls	r3, r3, #3
 800b828:	440b      	add	r3, r1
 800b82a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b82c:	f3ef 8310 	mrs	r3, PRIMASK
 800b830:	61bb      	str	r3, [r7, #24]
  return(result);
 800b832:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b834:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800b836:	b672      	cpsid	i
}
 800b838:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800b83a:	4b46      	ldr	r3, [pc, #280]	@ (800b954 <UTIL_SEQ_Run+0x1f0>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	2201      	movs	r2, #1
 800b840:	fa02 f303 	lsl.w	r3, r2, r3
 800b844:	43da      	mvns	r2, r3
 800b846:	4b3e      	ldr	r3, [pc, #248]	@ (800b940 <UTIL_SEQ_Run+0x1dc>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4013      	ands	r3, r2
 800b84c:	4a3c      	ldr	r2, [pc, #240]	@ (800b940 <UTIL_SEQ_Run+0x1dc>)
 800b84e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b850:	2302      	movs	r3, #2
 800b852:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b854:	e013      	b.n	800b87e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800b856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b858:	3b01      	subs	r3, #1
 800b85a:	4a3d      	ldr	r2, [pc, #244]	@ (800b950 <UTIL_SEQ_Run+0x1ec>)
 800b85c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800b860:	4b3c      	ldr	r3, [pc, #240]	@ (800b954 <UTIL_SEQ_Run+0x1f0>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	2201      	movs	r2, #1
 800b866:	fa02 f303 	lsl.w	r3, r2, r3
 800b86a:	43da      	mvns	r2, r3
 800b86c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b86e:	3b01      	subs	r3, #1
 800b870:	400a      	ands	r2, r1
 800b872:	4937      	ldr	r1, [pc, #220]	@ (800b950 <UTIL_SEQ_Run+0x1ec>)
 800b874:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b87a:	3b01      	subs	r3, #1
 800b87c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b87e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b880:	2b00      	cmp	r3, #0
 800b882:	d1e8      	bne.n	800b856 <UTIL_SEQ_Run+0xf2>
 800b884:	6a3b      	ldr	r3, [r7, #32]
 800b886:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	f383 8810 	msr	PRIMASK, r3
}
 800b88e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800b890:	4b30      	ldr	r3, [pc, #192]	@ (800b954 <UTIL_SEQ_Run+0x1f0>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4a30      	ldr	r2, [pc, #192]	@ (800b958 <UTIL_SEQ_Run+0x1f4>)
 800b896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b89a:	4798      	blx	r3

    local_taskset = TaskSet;
 800b89c:	4b28      	ldr	r3, [pc, #160]	@ (800b940 <UTIL_SEQ_Run+0x1dc>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800b8a2:	4b28      	ldr	r3, [pc, #160]	@ (800b944 <UTIL_SEQ_Run+0x1e0>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800b8a8:	4b27      	ldr	r3, [pc, #156]	@ (800b948 <UTIL_SEQ_Run+0x1e4>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800b8ae:	4b27      	ldr	r3, [pc, #156]	@ (800b94c <UTIL_SEQ_Run+0x1e8>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b8b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8b8:	401a      	ands	r2, r3
 800b8ba:	4b20      	ldr	r3, [pc, #128]	@ (800b93c <UTIL_SEQ_Run+0x1d8>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4013      	ands	r3, r2
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d005      	beq.n	800b8d0 <UTIL_SEQ_Run+0x16c>
 800b8c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8c8:	4013      	ands	r3, r2
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	f43f af64 	beq.w	800b798 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800b8d0:	4b20      	ldr	r3, [pc, #128]	@ (800b954 <UTIL_SEQ_Run+0x1f0>)
 800b8d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b8d6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800b8d8:	f000 f938 	bl	800bb4c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8dc:	f3ef 8310 	mrs	r3, PRIMASK
 800b8e0:	613b      	str	r3, [r7, #16]
  return(result);
 800b8e2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800b8e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b8e6:	b672      	cpsid	i
}
 800b8e8:	bf00      	nop
  local_taskset = TaskSet;
 800b8ea:	4b15      	ldr	r3, [pc, #84]	@ (800b940 <UTIL_SEQ_Run+0x1dc>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800b8f0:	4b14      	ldr	r3, [pc, #80]	@ (800b944 <UTIL_SEQ_Run+0x1e0>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800b8f6:	4b14      	ldr	r3, [pc, #80]	@ (800b948 <UTIL_SEQ_Run+0x1e4>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800b8fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b900:	401a      	ands	r2, r3
 800b902:	4b0e      	ldr	r3, [pc, #56]	@ (800b93c <UTIL_SEQ_Run+0x1d8>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	4013      	ands	r3, r2
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d107      	bne.n	800b91c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800b90c:	4b0f      	ldr	r3, [pc, #60]	@ (800b94c <UTIL_SEQ_Run+0x1e8>)
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b912:	4013      	ands	r3, r2
 800b914:	2b00      	cmp	r3, #0
 800b916:	d101      	bne.n	800b91c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800b918:	f7f5 ff2a 	bl	8001770 <UTIL_SEQ_Idle>
 800b91c:	69fb      	ldr	r3, [r7, #28]
 800b91e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f383 8810 	msr	PRIMASK, r3
}
 800b926:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800b928:	f000 f917 	bl	800bb5a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800b92c:	4a03      	ldr	r2, [pc, #12]	@ (800b93c <UTIL_SEQ_Run+0x1d8>)
 800b92e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b930:	6013      	str	r3, [r2, #0]

  return;
 800b932:	bf00      	nop
}
 800b934:	3740      	adds	r7, #64	@ 0x40
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop
 800b93c:	20000028 	.word	0x20000028
 800b940:	200009dc 	.word	0x200009dc
 800b944:	200009e0 	.word	0x200009e0
 800b948:	20000024 	.word	0x20000024
 800b94c:	200009e4 	.word	0x200009e4
 800b950:	20000a6c 	.word	0x20000a6c
 800b954:	200009e8 	.word	0x200009e8
 800b958:	200009ec 	.word	0x200009ec

0800b95c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b088      	sub	sp, #32
 800b960:	af00      	add	r7, sp, #0
 800b962:	60f8      	str	r0, [r7, #12]
 800b964:	60b9      	str	r1, [r7, #8]
 800b966:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b968:	f3ef 8310 	mrs	r3, PRIMASK
 800b96c:	617b      	str	r3, [r7, #20]
  return(result);
 800b96e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800b970:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b972:	b672      	cpsid	i
}
 800b974:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800b976:	68f8      	ldr	r0, [r7, #12]
 800b978:	f000 f8f6 	bl	800bb68 <SEQ_BitPosition>
 800b97c:	4603      	mov	r3, r0
 800b97e:	4619      	mov	r1, r3
 800b980:	4a06      	ldr	r2, [pc, #24]	@ (800b99c <UTIL_SEQ_RegTask+0x40>)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b98c:	69bb      	ldr	r3, [r7, #24]
 800b98e:	f383 8810 	msr	PRIMASK, r3
}
 800b992:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800b994:	bf00      	nop
}
 800b996:	3720      	adds	r7, #32
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	200009ec 	.word	0x200009ec

0800b9a0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b087      	sub	sp, #28
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9aa:	f3ef 8310 	mrs	r3, PRIMASK
 800b9ae:	60fb      	str	r3, [r7, #12]
  return(result);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b9b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b9b4:	b672      	cpsid	i
}
 800b9b6:	bf00      	nop

  TaskSet |= TaskId_bm;
 800b9b8:	4b0d      	ldr	r3, [pc, #52]	@ (800b9f0 <UTIL_SEQ_SetTask+0x50>)
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	4a0b      	ldr	r2, [pc, #44]	@ (800b9f0 <UTIL_SEQ_SetTask+0x50>)
 800b9c2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800b9c4:	4a0b      	ldr	r2, [pc, #44]	@ (800b9f4 <UTIL_SEQ_SetTask+0x54>)
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	431a      	orrs	r2, r3
 800b9d0:	4908      	ldr	r1, [pc, #32]	@ (800b9f4 <UTIL_SEQ_SetTask+0x54>)
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	f383 8810 	msr	PRIMASK, r3
}
 800b9e2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b9e4:	bf00      	nop
}
 800b9e6:	371c      	adds	r7, #28
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr
 800b9f0:	200009dc 	.word	0x200009dc
 800b9f4:	20000a6c 	.word	0x20000a6c

0800b9f8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b087      	sub	sp, #28
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba00:	f3ef 8310 	mrs	r3, PRIMASK
 800ba04:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba06:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ba08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba0a:	b672      	cpsid	i
}
 800ba0c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	43da      	mvns	r2, r3
 800ba12:	4b08      	ldr	r3, [pc, #32]	@ (800ba34 <UTIL_SEQ_PauseTask+0x3c>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4013      	ands	r3, r2
 800ba18:	4a06      	ldr	r2, [pc, #24]	@ (800ba34 <UTIL_SEQ_PauseTask+0x3c>)
 800ba1a:	6013      	str	r3, [r2, #0]
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	f383 8810 	msr	PRIMASK, r3
}
 800ba26:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ba28:	bf00      	nop
}
 800ba2a:	371c      	adds	r7, #28
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr
 800ba34:	20000024 	.word	0x20000024

0800ba38 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b087      	sub	sp, #28
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba40:	f3ef 8310 	mrs	r3, PRIMASK
 800ba44:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba46:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ba48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba4a:	b672      	cpsid	i
}
 800ba4c:	bf00      	nop

  TaskMask |= TaskId_bm;
 800ba4e:	4b09      	ldr	r3, [pc, #36]	@ (800ba74 <UTIL_SEQ_ResumeTask+0x3c>)
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	4313      	orrs	r3, r2
 800ba56:	4a07      	ldr	r2, [pc, #28]	@ (800ba74 <UTIL_SEQ_ResumeTask+0x3c>)
 800ba58:	6013      	str	r3, [r2, #0]
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	f383 8810 	msr	PRIMASK, r3
}
 800ba64:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ba66:	bf00      	nop
}
 800ba68:	371c      	adds	r7, #28
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr
 800ba72:	bf00      	nop
 800ba74:	20000024 	.word	0x20000024

0800ba78 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b087      	sub	sp, #28
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba80:	f3ef 8310 	mrs	r3, PRIMASK
 800ba84:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba86:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ba88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba8a:	b672      	cpsid	i
}
 800ba8c:	bf00      	nop

  EvtSet |= EvtId_bm;
 800ba8e:	4b09      	ldr	r3, [pc, #36]	@ (800bab4 <UTIL_SEQ_SetEvt+0x3c>)
 800ba90:	681a      	ldr	r2, [r3, #0]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	4313      	orrs	r3, r2
 800ba96:	4a07      	ldr	r2, [pc, #28]	@ (800bab4 <UTIL_SEQ_SetEvt+0x3c>)
 800ba98:	6013      	str	r3, [r2, #0]
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	f383 8810 	msr	PRIMASK, r3
}
 800baa4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800baa6:	bf00      	nop
}
 800baa8:	371c      	adds	r7, #28
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr
 800bab2:	bf00      	nop
 800bab4:	200009e0 	.word	0x200009e0

0800bab8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b088      	sub	sp, #32
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800bac0:	4b1f      	ldr	r3, [pc, #124]	@ (800bb40 <UTIL_SEQ_WaitEvt+0x88>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800bac6:	4b1e      	ldr	r3, [pc, #120]	@ (800bb40 <UTIL_SEQ_WaitEvt+0x88>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bace:	d102      	bne.n	800bad6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800bad0:	2300      	movs	r3, #0
 800bad2:	61fb      	str	r3, [r7, #28]
 800bad4:	e005      	b.n	800bae2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800bad6:	4b1a      	ldr	r3, [pc, #104]	@ (800bb40 <UTIL_SEQ_WaitEvt+0x88>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	2201      	movs	r2, #1
 800badc:	fa02 f303 	lsl.w	r3, r2, r3
 800bae0:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800bae2:	4b18      	ldr	r3, [pc, #96]	@ (800bb44 <UTIL_SEQ_WaitEvt+0x8c>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800bae8:	4a16      	ldr	r2, [pc, #88]	@ (800bb44 <UTIL_SEQ_WaitEvt+0x8c>)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800baee:	e003      	b.n	800baf8 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800baf0:	6879      	ldr	r1, [r7, #4]
 800baf2:	69f8      	ldr	r0, [r7, #28]
 800baf4:	f7f5 fe43 	bl	800177e <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800baf8:	4b13      	ldr	r3, [pc, #76]	@ (800bb48 <UTIL_SEQ_WaitEvt+0x90>)
 800bafa:	681a      	ldr	r2, [r3, #0]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	4013      	ands	r3, r2
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d0f5      	beq.n	800baf0 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800bb04:	4a0e      	ldr	r2, [pc, #56]	@ (800bb40 <UTIL_SEQ_WaitEvt+0x88>)
 800bb06:	69bb      	ldr	r3, [r7, #24]
 800bb08:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb0a:	f3ef 8310 	mrs	r3, PRIMASK
 800bb0e:	60bb      	str	r3, [r7, #8]
  return(result);
 800bb10:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bb12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800bb14:	b672      	cpsid	i
}
 800bb16:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	43da      	mvns	r2, r3
 800bb1c:	4b0a      	ldr	r3, [pc, #40]	@ (800bb48 <UTIL_SEQ_WaitEvt+0x90>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4013      	ands	r3, r2
 800bb22:	4a09      	ldr	r2, [pc, #36]	@ (800bb48 <UTIL_SEQ_WaitEvt+0x90>)
 800bb24:	6013      	str	r3, [r2, #0]
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f383 8810 	msr	PRIMASK, r3
}
 800bb30:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800bb32:	4a04      	ldr	r2, [pc, #16]	@ (800bb44 <UTIL_SEQ_WaitEvt+0x8c>)
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	6013      	str	r3, [r2, #0]
  return;
 800bb38:	bf00      	nop
}
 800bb3a:	3720      	adds	r7, #32
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	200009e8 	.word	0x200009e8
 800bb44:	200009e4 	.word	0x200009e4
 800bb48:	200009e0 	.word	0x200009e0

0800bb4c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800bb50:	bf00      	nop
}
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr

0800bb5a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800bb5a:	b480      	push	{r7}
 800bb5c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800bb5e:	bf00      	nop
}
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr

0800bb68 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b085      	sub	sp, #20
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800bb70:	2300      	movs	r3, #0
 800bb72:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb7e:	d204      	bcs.n	800bb8a <SEQ_BitPosition+0x22>
 800bb80:	2310      	movs	r3, #16
 800bb82:	73fb      	strb	r3, [r7, #15]
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	041b      	lsls	r3, r3, #16
 800bb88:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bb90:	d205      	bcs.n	800bb9e <SEQ_BitPosition+0x36>
 800bb92:	7bfb      	ldrb	r3, [r7, #15]
 800bb94:	3308      	adds	r3, #8
 800bb96:	73fb      	strb	r3, [r7, #15]
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	021b      	lsls	r3, r3, #8
 800bb9c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bba4:	d205      	bcs.n	800bbb2 <SEQ_BitPosition+0x4a>
 800bba6:	7bfb      	ldrb	r3, [r7, #15]
 800bba8:	3304      	adds	r3, #4
 800bbaa:	73fb      	strb	r3, [r7, #15]
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	011b      	lsls	r3, r3, #4
 800bbb0:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	0f1b      	lsrs	r3, r3, #28
 800bbb6:	4a07      	ldr	r2, [pc, #28]	@ (800bbd4 <SEQ_BitPosition+0x6c>)
 800bbb8:	5cd2      	ldrb	r2, [r2, r3]
 800bbba:	7bfb      	ldrb	r3, [r7, #15]
 800bbbc:	4413      	add	r3, r2
 800bbbe:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800bbc0:	7bfb      	ldrb	r3, [r7, #15]
 800bbc2:	f1c3 031f 	rsb	r3, r3, #31
 800bbc6:	b2db      	uxtb	r3, r3
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3714      	adds	r7, #20
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr
 800bbd4:	08015b60 	.word	0x08015b60

0800bbd8 <acc_rss_hal_register>:
 800bbd8:	b108      	cbz	r0, 800bbde <acc_rss_hal_register+0x6>
 800bbda:	f002 ba77 	b.w	800e0cc <acc_rss_integration_register_a121>
 800bbde:	4770      	bx	lr

0800bbe0 <acc_rss_get_buffer_size>:
 800bbe0:	b510      	push	{r4, lr}
 800bbe2:	460c      	mov	r4, r1
 800bbe4:	f000 fb4c 	bl	800c280 <acc_config_get_settings>
 800bbe8:	b158      	cbz	r0, 800bc02 <acc_rss_get_buffer_size+0x22>
 800bbea:	b124      	cbz	r4, 800bbf6 <acc_rss_get_buffer_size+0x16>
 800bbec:	4621      	mov	r1, r4
 800bbee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbf2:	f002 bb4d 	b.w	800e290 <acc_pipeline_get_buffer_size>
 800bbf6:	4b04      	ldr	r3, [pc, #16]	@ (800bc08 <acc_rss_get_buffer_size+0x28>)
 800bbf8:	4a04      	ldr	r2, [pc, #16]	@ (800bc0c <acc_rss_get_buffer_size+0x2c>)
 800bbfa:	691b      	ldr	r3, [r3, #16]
 800bbfc:	4904      	ldr	r1, [pc, #16]	@ (800bc10 <acc_rss_get_buffer_size+0x30>)
 800bbfe:	4620      	mov	r0, r4
 800bc00:	4798      	blx	r3
 800bc02:	2000      	movs	r0, #0
 800bc04:	bd10      	pop	{r4, pc}
 800bc06:	bf00      	nop
 800bc08:	20000bd8 	.word	0x20000bd8
 800bc0c:	08015b70 	.word	0x08015b70
 800bc10:	08015b8c 	.word	0x08015b8c

0800bc14 <acc_config_subsweep_validate.part.0>:
 800bc14:	b508      	push	{r3, lr}
 800bc16:	4b04      	ldr	r3, [pc, #16]	@ (800bc28 <acc_config_subsweep_validate.part.0+0x14>)
 800bc18:	4a04      	ldr	r2, [pc, #16]	@ (800bc2c <acc_config_subsweep_validate.part.0+0x18>)
 800bc1a:	691b      	ldr	r3, [r3, #16]
 800bc1c:	4904      	ldr	r1, [pc, #16]	@ (800bc30 <acc_config_subsweep_validate.part.0+0x1c>)
 800bc1e:	2000      	movs	r0, #0
 800bc20:	4798      	blx	r3
 800bc22:	2000      	movs	r0, #0
 800bc24:	bd08      	pop	{r3, pc}
 800bc26:	bf00      	nop
 800bc28:	20000bd8 	.word	0x20000bd8
 800bc2c:	08015b98 	.word	0x08015b98
 800bc30:	08015bb0 	.word	0x08015bb0

0800bc34 <acc_config_log>:
 800bc34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc38:	b082      	sub	sp, #8
 800bc3a:	b120      	cbz	r0, 800bc46 <acc_config_log+0x12>
 800bc3c:	4bbf      	ldr	r3, [pc, #764]	@ (800bf3c <acc_config_log+0x308>)
 800bc3e:	6802      	ldr	r2, [r0, #0]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	4604      	mov	r4, r0
 800bc44:	d008      	beq.n	800bc58 <acc_config_log+0x24>
 800bc46:	4bbe      	ldr	r3, [pc, #760]	@ (800bf40 <acc_config_log+0x30c>)
 800bc48:	4abe      	ldr	r2, [pc, #760]	@ (800bf44 <acc_config_log+0x310>)
 800bc4a:	691b      	ldr	r3, [r3, #16]
 800bc4c:	49be      	ldr	r1, [pc, #760]	@ (800bf48 <acc_config_log+0x314>)
 800bc4e:	2000      	movs	r0, #0
 800bc50:	b002      	add	sp, #8
 800bc52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc56:	4718      	bx	r3
 800bc58:	f002 faf4 	bl	800e244 <acc_rss_integration_log_level>
 800bc5c:	2801      	cmp	r0, #1
 800bc5e:	d935      	bls.n	800bccc <acc_config_log+0x98>
 800bc60:	edd4 7a11 	vldr	s15, [r4, #68]	@ 0x44
 800bc64:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 800bf4c <acc_config_log+0x318>
 800bc68:	4bb5      	ldr	r3, [pc, #724]	@ (800bf40 <acc_config_log+0x30c>)
 800bc6a:	ed9f 6ab8 	vldr	s12, [pc, #736]	@ 800bf4c <acc_config_log+0x318>
 800bc6e:	691d      	ldr	r5, [r3, #16]
 800bc70:	eddf 6ab7 	vldr	s13, [pc, #732]	@ 800bf50 <acc_config_log+0x31c>
 800bc74:	49b4      	ldr	r1, [pc, #720]	@ (800bf48 <acc_config_log+0x314>)
 800bc76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bc7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc7e:	bf48      	it	mi
 800bc80:	eef1 7a67 	vnegmi.f32	s15, s15
 800bc84:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc88:	bf4c      	ite	mi
 800bc8a:	4bb2      	ldrmi	r3, [pc, #712]	@ (800bf54 <acc_config_log+0x320>)
 800bc8c:	4bb2      	ldrpl	r3, [pc, #712]	@ (800bf58 <acc_config_log+0x324>)
 800bc8e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800bc92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bc96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc9a:	ee17 2a10 	vmov	r2, s14
 800bc9e:	bf4c      	ite	mi
 800bca0:	eeb1 7a67 	vnegmi.f32	s14, s15
 800bca4:	eeb0 7a67 	vmovpl.f32	s14, s15
 800bca8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bcac:	9200      	str	r2, [sp, #0]
 800bcae:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800bcb2:	4aaa      	ldr	r2, [pc, #680]	@ (800bf5c <acc_config_log+0x328>)
 800bcb4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800bcb8:	2002      	movs	r0, #2
 800bcba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bcbe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bcc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcc6:	edcd 7a01 	vstr	s15, [sp, #4]
 800bcca:	47a8      	blx	r5
 800bccc:	f002 faba 	bl	800e244 <acc_rss_integration_log_level>
 800bcd0:	2801      	cmp	r0, #1
 800bcd2:	d935      	bls.n	800bd40 <acc_config_log+0x10c>
 800bcd4:	edd4 7a12 	vldr	s15, [r4, #72]	@ 0x48
 800bcd8:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 800bf4c <acc_config_log+0x318>
 800bcdc:	4b98      	ldr	r3, [pc, #608]	@ (800bf40 <acc_config_log+0x30c>)
 800bcde:	ed9f 6a9b 	vldr	s12, [pc, #620]	@ 800bf4c <acc_config_log+0x318>
 800bce2:	691d      	ldr	r5, [r3, #16]
 800bce4:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 800bf50 <acc_config_log+0x31c>
 800bce8:	4997      	ldr	r1, [pc, #604]	@ (800bf48 <acc_config_log+0x314>)
 800bcea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bcee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcf2:	bf48      	it	mi
 800bcf4:	eef1 7a67 	vnegmi.f32	s15, s15
 800bcf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bcfc:	bf4c      	ite	mi
 800bcfe:	4b95      	ldrmi	r3, [pc, #596]	@ (800bf54 <acc_config_log+0x320>)
 800bd00:	4b95      	ldrpl	r3, [pc, #596]	@ (800bf58 <acc_config_log+0x324>)
 800bd02:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800bd06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bd0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd0e:	ee17 2a10 	vmov	r2, s14
 800bd12:	bf4c      	ite	mi
 800bd14:	eeb1 7a67 	vnegmi.f32	s14, s15
 800bd18:	eeb0 7a67 	vmovpl.f32	s14, s15
 800bd1c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bd20:	9200      	str	r2, [sp, #0]
 800bd22:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800bd26:	4a8e      	ldr	r2, [pc, #568]	@ (800bf60 <acc_config_log+0x32c>)
 800bd28:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800bd2c:	2002      	movs	r0, #2
 800bd2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd32:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bd36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd3a:	edcd 7a01 	vstr	s15, [sp, #4]
 800bd3e:	47a8      	blx	r5
 800bd40:	f002 fa80 	bl	800e244 <acc_rss_integration_log_level>
 800bd44:	2801      	cmp	r0, #1
 800bd46:	d907      	bls.n	800bd58 <acc_config_log+0x124>
 800bd48:	4a7d      	ldr	r2, [pc, #500]	@ (800bf40 <acc_config_log+0x30c>)
 800bd4a:	f8b4 304c 	ldrh.w	r3, [r4, #76]	@ 0x4c
 800bd4e:	6915      	ldr	r5, [r2, #16]
 800bd50:	497d      	ldr	r1, [pc, #500]	@ (800bf48 <acc_config_log+0x314>)
 800bd52:	4a84      	ldr	r2, [pc, #528]	@ (800bf64 <acc_config_log+0x330>)
 800bd54:	2002      	movs	r0, #2
 800bd56:	47a8      	blx	r5
 800bd58:	f002 fa74 	bl	800e244 <acc_rss_integration_log_level>
 800bd5c:	2801      	cmp	r0, #1
 800bd5e:	f200 80e0 	bhi.w	800bf22 <acc_config_log+0x2ee>
 800bd62:	f002 fa6f 	bl	800e244 <acc_rss_integration_log_level>
 800bd66:	2801      	cmp	r0, #1
 800bd68:	f200 80c3 	bhi.w	800bef2 <acc_config_log+0x2be>
 800bd6c:	f002 fa6a 	bl	800e244 <acc_rss_integration_log_level>
 800bd70:	2801      	cmp	r0, #1
 800bd72:	f200 80b2 	bhi.w	800beda <acc_config_log+0x2a6>
 800bd76:	f002 fa65 	bl	800e244 <acc_rss_integration_log_level>
 800bd7a:	2801      	cmp	r0, #1
 800bd7c:	f200 80c5 	bhi.w	800bf0a <acc_config_log+0x2d6>
 800bd80:	f002 fa60 	bl	800e244 <acc_rss_integration_log_level>
 800bd84:	2801      	cmp	r0, #1
 800bd86:	d907      	bls.n	800bd98 <acc_config_log+0x164>
 800bd88:	4a6d      	ldr	r2, [pc, #436]	@ (800bf40 <acc_config_log+0x30c>)
 800bd8a:	f894 3052 	ldrb.w	r3, [r4, #82]	@ 0x52
 800bd8e:	6915      	ldr	r5, [r2, #16]
 800bd90:	496d      	ldr	r1, [pc, #436]	@ (800bf48 <acc_config_log+0x314>)
 800bd92:	4a75      	ldr	r2, [pc, #468]	@ (800bf68 <acc_config_log+0x334>)
 800bd94:	2002      	movs	r0, #2
 800bd96:	47a8      	blx	r5
 800bd98:	f894 3052 	ldrb.w	r3, [r4, #82]	@ 0x52
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	f000 8099 	beq.w	800bed4 <acc_config_log+0x2a0>
 800bda2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bf40 <acc_config_log+0x30c>
 800bda6:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 800bfa4 <acc_config_log+0x370>
 800bdaa:	4e67      	ldr	r6, [pc, #412]	@ (800bf48 <acc_config_log+0x314>)
 800bdac:	4625      	mov	r5, r4
 800bdae:	f04f 0900 	mov.w	r9, #0
 800bdb2:	f002 fa47 	bl	800e244 <acc_rss_integration_log_level>
 800bdb6:	2801      	cmp	r0, #1
 800bdb8:	d906      	bls.n	800bdc8 <acc_config_log+0x194>
 800bdba:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bdbe:	464b      	mov	r3, r9
 800bdc0:	4652      	mov	r2, sl
 800bdc2:	4631      	mov	r1, r6
 800bdc4:	2002      	movs	r0, #2
 800bdc6:	47b8      	blx	r7
 800bdc8:	f002 fa3c 	bl	800e244 <acc_rss_integration_log_level>
 800bdcc:	2801      	cmp	r0, #1
 800bdce:	d906      	bls.n	800bdde <acc_config_log+0x1aa>
 800bdd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bdd4:	686b      	ldr	r3, [r5, #4]
 800bdd6:	4a65      	ldr	r2, [pc, #404]	@ (800bf6c <acc_config_log+0x338>)
 800bdd8:	4631      	mov	r1, r6
 800bdda:	2002      	movs	r0, #2
 800bddc:	47b8      	blx	r7
 800bdde:	f002 fa31 	bl	800e244 <acc_rss_integration_log_level>
 800bde2:	2801      	cmp	r0, #1
 800bde4:	d906      	bls.n	800bdf4 <acc_config_log+0x1c0>
 800bde6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bdea:	892b      	ldrh	r3, [r5, #8]
 800bdec:	4a60      	ldr	r2, [pc, #384]	@ (800bf70 <acc_config_log+0x33c>)
 800bdee:	4631      	mov	r1, r6
 800bdf0:	2002      	movs	r0, #2
 800bdf2:	47b8      	blx	r7
 800bdf4:	f002 fa26 	bl	800e244 <acc_rss_integration_log_level>
 800bdf8:	2801      	cmp	r0, #1
 800bdfa:	d906      	bls.n	800be0a <acc_config_log+0x1d6>
 800bdfc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800be00:	896b      	ldrh	r3, [r5, #10]
 800be02:	4a5c      	ldr	r2, [pc, #368]	@ (800bf74 <acc_config_log+0x340>)
 800be04:	4631      	mov	r1, r6
 800be06:	2002      	movs	r0, #2
 800be08:	47b8      	blx	r7
 800be0a:	f002 fa1b 	bl	800e244 <acc_rss_integration_log_level>
 800be0e:	2801      	cmp	r0, #1
 800be10:	d906      	bls.n	800be20 <acc_config_log+0x1ec>
 800be12:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800be16:	89ab      	ldrh	r3, [r5, #12]
 800be18:	4a57      	ldr	r2, [pc, #348]	@ (800bf78 <acc_config_log+0x344>)
 800be1a:	4631      	mov	r1, r6
 800be1c:	2002      	movs	r0, #2
 800be1e:	47b8      	blx	r7
 800be20:	f002 fa10 	bl	800e244 <acc_rss_integration_log_level>
 800be24:	2801      	cmp	r0, #1
 800be26:	d906      	bls.n	800be36 <acc_config_log+0x202>
 800be28:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800be2c:	7bab      	ldrb	r3, [r5, #14]
 800be2e:	4a53      	ldr	r2, [pc, #332]	@ (800bf7c <acc_config_log+0x348>)
 800be30:	4631      	mov	r1, r6
 800be32:	2002      	movs	r0, #2
 800be34:	47b8      	blx	r7
 800be36:	f002 fa05 	bl	800e244 <acc_rss_integration_log_level>
 800be3a:	2801      	cmp	r0, #1
 800be3c:	d909      	bls.n	800be52 <acc_config_log+0x21e>
 800be3e:	7be8      	ldrb	r0, [r5, #15]
 800be40:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800be44:	f004 fcca 	bl	80107dc <acc_utils_bool_to_str>
 800be48:	4a4d      	ldr	r2, [pc, #308]	@ (800bf80 <acc_config_log+0x34c>)
 800be4a:	4603      	mov	r3, r0
 800be4c:	4631      	mov	r1, r6
 800be4e:	2002      	movs	r0, #2
 800be50:	47b8      	blx	r7
 800be52:	f002 f9f7 	bl	800e244 <acc_rss_integration_log_level>
 800be56:	2801      	cmp	r0, #1
 800be58:	d909      	bls.n	800be6e <acc_config_log+0x23a>
 800be5a:	7c28      	ldrb	r0, [r5, #16]
 800be5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800be60:	f004 fcbc 	bl	80107dc <acc_utils_bool_to_str>
 800be64:	4a47      	ldr	r2, [pc, #284]	@ (800bf84 <acc_config_log+0x350>)
 800be66:	4603      	mov	r3, r0
 800be68:	4631      	mov	r1, r6
 800be6a:	2002      	movs	r0, #2
 800be6c:	47b8      	blx	r7
 800be6e:	f002 f9e9 	bl	800e244 <acc_rss_integration_log_level>
 800be72:	2801      	cmp	r0, #1
 800be74:	d909      	bls.n	800be8a <acc_config_log+0x256>
 800be76:	7c68      	ldrb	r0, [r5, #17]
 800be78:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800be7c:	f004 fcae 	bl	80107dc <acc_utils_bool_to_str>
 800be80:	4a41      	ldr	r2, [pc, #260]	@ (800bf88 <acc_config_log+0x354>)
 800be82:	4603      	mov	r3, r0
 800be84:	4631      	mov	r1, r6
 800be86:	2002      	movs	r0, #2
 800be88:	47b8      	blx	r7
 800be8a:	f002 f9db 	bl	800e244 <acc_rss_integration_log_level>
 800be8e:	2801      	cmp	r0, #1
 800be90:	d909      	bls.n	800bea6 <acc_config_log+0x272>
 800be92:	7ce8      	ldrb	r0, [r5, #19]
 800be94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800be98:	f004 fcb8 	bl	801080c <acc_utils_profile_to_str>
 800be9c:	4a3b      	ldr	r2, [pc, #236]	@ (800bf8c <acc_config_log+0x358>)
 800be9e:	4603      	mov	r3, r0
 800bea0:	4631      	mov	r1, r6
 800bea2:	2002      	movs	r0, #2
 800bea4:	47b8      	blx	r7
 800bea6:	f002 f9cd 	bl	800e244 <acc_rss_integration_log_level>
 800beaa:	2801      	cmp	r0, #1
 800beac:	d909      	bls.n	800bec2 <acc_config_log+0x28e>
 800beae:	7ca8      	ldrb	r0, [r5, #18]
 800beb0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800beb4:	f004 fcb8 	bl	8010828 <acc_utils_prf_to_str>
 800beb8:	4a35      	ldr	r2, [pc, #212]	@ (800bf90 <acc_config_log+0x35c>)
 800beba:	4603      	mov	r3, r0
 800bebc:	4631      	mov	r1, r6
 800bebe:	2002      	movs	r0, #2
 800bec0:	47b8      	blx	r7
 800bec2:	f894 3052 	ldrb.w	r3, [r4, #82]	@ 0x52
 800bec6:	f109 0901 	add.w	r9, r9, #1
 800beca:	454b      	cmp	r3, r9
 800becc:	f105 0510 	add.w	r5, r5, #16
 800bed0:	f63f af6f 	bhi.w	800bdb2 <acc_config_log+0x17e>
 800bed4:	b002      	add	sp, #8
 800bed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beda:	4b19      	ldr	r3, [pc, #100]	@ (800bf40 <acc_config_log+0x30c>)
 800bedc:	f894 0053 	ldrb.w	r0, [r4, #83]	@ 0x53
 800bee0:	691d      	ldr	r5, [r3, #16]
 800bee2:	f004 fc87 	bl	80107f4 <acc_utils_idle_state_to_str>
 800bee6:	4a2b      	ldr	r2, [pc, #172]	@ (800bf94 <acc_config_log+0x360>)
 800bee8:	4917      	ldr	r1, [pc, #92]	@ (800bf48 <acc_config_log+0x314>)
 800beea:	4603      	mov	r3, r0
 800beec:	2002      	movs	r0, #2
 800beee:	47a8      	blx	r5
 800bef0:	e741      	b.n	800bd76 <acc_config_log+0x142>
 800bef2:	4b13      	ldr	r3, [pc, #76]	@ (800bf40 <acc_config_log+0x30c>)
 800bef4:	f894 004f 	ldrb.w	r0, [r4, #79]	@ 0x4f
 800bef8:	691d      	ldr	r5, [r3, #16]
 800befa:	f004 fc6f 	bl	80107dc <acc_utils_bool_to_str>
 800befe:	4a26      	ldr	r2, [pc, #152]	@ (800bf98 <acc_config_log+0x364>)
 800bf00:	4911      	ldr	r1, [pc, #68]	@ (800bf48 <acc_config_log+0x314>)
 800bf02:	4603      	mov	r3, r0
 800bf04:	2002      	movs	r0, #2
 800bf06:	47a8      	blx	r5
 800bf08:	e730      	b.n	800bd6c <acc_config_log+0x138>
 800bf0a:	4b0d      	ldr	r3, [pc, #52]	@ (800bf40 <acc_config_log+0x30c>)
 800bf0c:	f894 0054 	ldrb.w	r0, [r4, #84]	@ 0x54
 800bf10:	691d      	ldr	r5, [r3, #16]
 800bf12:	f004 fc6f 	bl	80107f4 <acc_utils_idle_state_to_str>
 800bf16:	4a21      	ldr	r2, [pc, #132]	@ (800bf9c <acc_config_log+0x368>)
 800bf18:	490b      	ldr	r1, [pc, #44]	@ (800bf48 <acc_config_log+0x314>)
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2002      	movs	r0, #2
 800bf1e:	47a8      	blx	r5
 800bf20:	e72e      	b.n	800bd80 <acc_config_log+0x14c>
 800bf22:	4b07      	ldr	r3, [pc, #28]	@ (800bf40 <acc_config_log+0x30c>)
 800bf24:	f894 004e 	ldrb.w	r0, [r4, #78]	@ 0x4e
 800bf28:	691d      	ldr	r5, [r3, #16]
 800bf2a:	f004 fc57 	bl	80107dc <acc_utils_bool_to_str>
 800bf2e:	4a1c      	ldr	r2, [pc, #112]	@ (800bfa0 <acc_config_log+0x36c>)
 800bf30:	4905      	ldr	r1, [pc, #20]	@ (800bf48 <acc_config_log+0x314>)
 800bf32:	4603      	mov	r3, r0
 800bf34:	2002      	movs	r0, #2
 800bf36:	47a8      	blx	r5
 800bf38:	e713      	b.n	800bd62 <acc_config_log+0x12e>
 800bf3a:	bf00      	nop
 800bf3c:	1337b00f 	.word	0x1337b00f
 800bf40:	20000bd8 	.word	0x20000bd8
 800bf44:	08015bb8 	.word	0x08015bb8
 800bf48:	08015bb0 	.word	0x08015bb0
 800bf4c:	350637bd 	.word	0x350637bd
 800bf50:	49742400 	.word	0x49742400
 800bf54:	08016a3c 	.word	0x08016a3c
 800bf58:	08016634 	.word	0x08016634
 800bf5c:	08015bd0 	.word	0x08015bd0
 800bf60:	08015be8 	.word	0x08015be8
 800bf64:	08015c00 	.word	0x08015c00
 800bf68:	08015c84 	.word	0x08015c84
 800bf6c:	08015ca8 	.word	0x08015ca8
 800bf70:	08015cc4 	.word	0x08015cc4
 800bf74:	08015ce0 	.word	0x08015ce0
 800bf78:	08015cfc 	.word	0x08015cfc
 800bf7c:	08015d18 	.word	0x08015d18
 800bf80:	08015d34 	.word	0x08015d34
 800bf84:	08015d50 	.word	0x08015d50
 800bf88:	08015d6c 	.word	0x08015d6c
 800bf8c:	08015d88 	.word	0x08015d88
 800bf90:	08015da4 	.word	0x08015da4
 800bf94:	08015c4c 	.word	0x08015c4c
 800bf98:	08015c34 	.word	0x08015c34
 800bf9c:	08015c68 	.word	0x08015c68
 800bfa0:	08015c18 	.word	0x08015c18
 800bfa4:	08015c98 	.word	0x08015c98

0800bfa8 <acc_config_create>:
 800bfa8:	b510      	push	{r4, lr}
 800bfaa:	4a08      	ldr	r2, [pc, #32]	@ (800bfcc <acc_config_create+0x24>)
 800bfac:	2356      	movs	r3, #86	@ 0x56
 800bfae:	215c      	movs	r1, #92	@ 0x5c
 800bfb0:	2001      	movs	r0, #1
 800bfb2:	f002 f917 	bl	800e1e4 <acc_rss_integration_mem_calloc_debug>
 800bfb6:	4604      	mov	r4, r0
 800bfb8:	b130      	cbz	r0, 800bfc8 <acc_config_create+0x20>
 800bfba:	4b05      	ldr	r3, [pc, #20]	@ (800bfd0 <acc_config_create+0x28>)
 800bfbc:	f840 3b04 	str.w	r3, [r0], #4
 800bfc0:	4904      	ldr	r1, [pc, #16]	@ (800bfd4 <acc_config_create+0x2c>)
 800bfc2:	2258      	movs	r2, #88	@ 0x58
 800bfc4:	f006 fe75 	bl	8012cb2 <memcpy>
 800bfc8:	4620      	mov	r0, r4
 800bfca:	bd10      	pop	{r4, pc}
 800bfcc:	08015bb0 	.word	0x08015bb0
 800bfd0:	1337b00f 	.word	0x1337b00f
 800bfd4:	08015dc0 	.word	0x08015dc0

0800bfd8 <acc_config_destroy>:
 800bfd8:	b118      	cbz	r0, 800bfe2 <acc_config_destroy+0xa>
 800bfda:	4a07      	ldr	r2, [pc, #28]	@ (800bff8 <acc_config_destroy+0x20>)
 800bfdc:	6801      	ldr	r1, [r0, #0]
 800bfde:	4291      	cmp	r1, r2
 800bfe0:	d005      	beq.n	800bfee <acc_config_destroy+0x16>
 800bfe2:	4b06      	ldr	r3, [pc, #24]	@ (800bffc <acc_config_destroy+0x24>)
 800bfe4:	4a06      	ldr	r2, [pc, #24]	@ (800c000 <acc_config_destroy+0x28>)
 800bfe6:	691b      	ldr	r3, [r3, #16]
 800bfe8:	4906      	ldr	r1, [pc, #24]	@ (800c004 <acc_config_destroy+0x2c>)
 800bfea:	2000      	movs	r0, #0
 800bfec:	4718      	bx	r3
 800bfee:	2200      	movs	r2, #0
 800bff0:	6002      	str	r2, [r0, #0]
 800bff2:	f002 b913 	b.w	800e21c <acc_rss_integration_mem_free>
 800bff6:	bf00      	nop
 800bff8:	1337b00f 	.word	0x1337b00f
 800bffc:	20000bd8 	.word	0x20000bd8
 800c000:	08015bb8 	.word	0x08015bb8
 800c004:	08015bb0 	.word	0x08015bb0

0800c008 <acc_config_subsweep_start_point_set>:
 800c008:	b570      	push	{r4, r5, r6, lr}
 800c00a:	b120      	cbz	r0, 800c016 <acc_config_subsweep_start_point_set+0xe>
 800c00c:	4b0b      	ldr	r3, [pc, #44]	@ (800c03c <acc_config_subsweep_start_point_set+0x34>)
 800c00e:	4604      	mov	r4, r0
 800c010:	6800      	ldr	r0, [r0, #0]
 800c012:	4298      	cmp	r0, r3
 800c014:	d007      	beq.n	800c026 <acc_config_subsweep_start_point_set+0x1e>
 800c016:	4b0a      	ldr	r3, [pc, #40]	@ (800c040 <acc_config_subsweep_start_point_set+0x38>)
 800c018:	4a0a      	ldr	r2, [pc, #40]	@ (800c044 <acc_config_subsweep_start_point_set+0x3c>)
 800c01a:	691b      	ldr	r3, [r3, #16]
 800c01c:	490a      	ldr	r1, [pc, #40]	@ (800c048 <acc_config_subsweep_start_point_set+0x40>)
 800c01e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c022:	2000      	movs	r0, #0
 800c024:	4718      	bx	r3
 800c026:	2a03      	cmp	r2, #3
 800c028:	460d      	mov	r5, r1
 800c02a:	4616      	mov	r6, r2
 800c02c:	d902      	bls.n	800c034 <acc_config_subsweep_start_point_set+0x2c>
 800c02e:	f7ff fdf1 	bl	800bc14 <acc_config_subsweep_validate.part.0>
 800c032:	b110      	cbz	r0, 800c03a <acc_config_subsweep_start_point_set+0x32>
 800c034:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800c038:	6065      	str	r5, [r4, #4]
 800c03a:	bd70      	pop	{r4, r5, r6, pc}
 800c03c:	1337b00f 	.word	0x1337b00f
 800c040:	20000bd8 	.word	0x20000bd8
 800c044:	08015bb8 	.word	0x08015bb8
 800c048:	08015bb0 	.word	0x08015bb0

0800c04c <acc_config_subsweep_num_points_set>:
 800c04c:	b570      	push	{r4, r5, r6, lr}
 800c04e:	b120      	cbz	r0, 800c05a <acc_config_subsweep_num_points_set+0xe>
 800c050:	4b0b      	ldr	r3, [pc, #44]	@ (800c080 <acc_config_subsweep_num_points_set+0x34>)
 800c052:	4604      	mov	r4, r0
 800c054:	6800      	ldr	r0, [r0, #0]
 800c056:	4298      	cmp	r0, r3
 800c058:	d007      	beq.n	800c06a <acc_config_subsweep_num_points_set+0x1e>
 800c05a:	4b0a      	ldr	r3, [pc, #40]	@ (800c084 <acc_config_subsweep_num_points_set+0x38>)
 800c05c:	4a0a      	ldr	r2, [pc, #40]	@ (800c088 <acc_config_subsweep_num_points_set+0x3c>)
 800c05e:	691b      	ldr	r3, [r3, #16]
 800c060:	490a      	ldr	r1, [pc, #40]	@ (800c08c <acc_config_subsweep_num_points_set+0x40>)
 800c062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c066:	2000      	movs	r0, #0
 800c068:	4718      	bx	r3
 800c06a:	2a03      	cmp	r2, #3
 800c06c:	460d      	mov	r5, r1
 800c06e:	4616      	mov	r6, r2
 800c070:	d902      	bls.n	800c078 <acc_config_subsweep_num_points_set+0x2c>
 800c072:	f7ff fdcf 	bl	800bc14 <acc_config_subsweep_validate.part.0>
 800c076:	b110      	cbz	r0, 800c07e <acc_config_subsweep_num_points_set+0x32>
 800c078:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800c07c:	8125      	strh	r5, [r4, #8]
 800c07e:	bd70      	pop	{r4, r5, r6, pc}
 800c080:	1337b00f 	.word	0x1337b00f
 800c084:	20000bd8 	.word	0x20000bd8
 800c088:	08015bb8 	.word	0x08015bb8
 800c08c:	08015bb0 	.word	0x08015bb0

0800c090 <acc_config_subsweep_step_length_set>:
 800c090:	b570      	push	{r4, r5, r6, lr}
 800c092:	b120      	cbz	r0, 800c09e <acc_config_subsweep_step_length_set+0xe>
 800c094:	4b0b      	ldr	r3, [pc, #44]	@ (800c0c4 <acc_config_subsweep_step_length_set+0x34>)
 800c096:	4604      	mov	r4, r0
 800c098:	6800      	ldr	r0, [r0, #0]
 800c09a:	4298      	cmp	r0, r3
 800c09c:	d007      	beq.n	800c0ae <acc_config_subsweep_step_length_set+0x1e>
 800c09e:	4b0a      	ldr	r3, [pc, #40]	@ (800c0c8 <acc_config_subsweep_step_length_set+0x38>)
 800c0a0:	4a0a      	ldr	r2, [pc, #40]	@ (800c0cc <acc_config_subsweep_step_length_set+0x3c>)
 800c0a2:	691b      	ldr	r3, [r3, #16]
 800c0a4:	490a      	ldr	r1, [pc, #40]	@ (800c0d0 <acc_config_subsweep_step_length_set+0x40>)
 800c0a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c0aa:	2000      	movs	r0, #0
 800c0ac:	4718      	bx	r3
 800c0ae:	2a03      	cmp	r2, #3
 800c0b0:	460d      	mov	r5, r1
 800c0b2:	4616      	mov	r6, r2
 800c0b4:	d902      	bls.n	800c0bc <acc_config_subsweep_step_length_set+0x2c>
 800c0b6:	f7ff fdad 	bl	800bc14 <acc_config_subsweep_validate.part.0>
 800c0ba:	b110      	cbz	r0, 800c0c2 <acc_config_subsweep_step_length_set+0x32>
 800c0bc:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800c0c0:	8165      	strh	r5, [r4, #10]
 800c0c2:	bd70      	pop	{r4, r5, r6, pc}
 800c0c4:	1337b00f 	.word	0x1337b00f
 800c0c8:	20000bd8 	.word	0x20000bd8
 800c0cc:	08015bb8 	.word	0x08015bb8
 800c0d0:	08015bb0 	.word	0x08015bb0

0800c0d4 <acc_config_subsweep_profile_set>:
 800c0d4:	b570      	push	{r4, r5, r6, lr}
 800c0d6:	b120      	cbz	r0, 800c0e2 <acc_config_subsweep_profile_set+0xe>
 800c0d8:	4b0b      	ldr	r3, [pc, #44]	@ (800c108 <acc_config_subsweep_profile_set+0x34>)
 800c0da:	4604      	mov	r4, r0
 800c0dc:	6800      	ldr	r0, [r0, #0]
 800c0de:	4298      	cmp	r0, r3
 800c0e0:	d007      	beq.n	800c0f2 <acc_config_subsweep_profile_set+0x1e>
 800c0e2:	4b0a      	ldr	r3, [pc, #40]	@ (800c10c <acc_config_subsweep_profile_set+0x38>)
 800c0e4:	4a0a      	ldr	r2, [pc, #40]	@ (800c110 <acc_config_subsweep_profile_set+0x3c>)
 800c0e6:	691b      	ldr	r3, [r3, #16]
 800c0e8:	490a      	ldr	r1, [pc, #40]	@ (800c114 <acc_config_subsweep_profile_set+0x40>)
 800c0ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c0ee:	2000      	movs	r0, #0
 800c0f0:	4718      	bx	r3
 800c0f2:	2a03      	cmp	r2, #3
 800c0f4:	460d      	mov	r5, r1
 800c0f6:	4616      	mov	r6, r2
 800c0f8:	d902      	bls.n	800c100 <acc_config_subsweep_profile_set+0x2c>
 800c0fa:	f7ff fd8b 	bl	800bc14 <acc_config_subsweep_validate.part.0>
 800c0fe:	b110      	cbz	r0, 800c106 <acc_config_subsweep_profile_set+0x32>
 800c100:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800c104:	74e5      	strb	r5, [r4, #19]
 800c106:	bd70      	pop	{r4, r5, r6, pc}
 800c108:	1337b00f 	.word	0x1337b00f
 800c10c:	20000bd8 	.word	0x20000bd8
 800c110:	08015bb8 	.word	0x08015bb8
 800c114:	08015bb0 	.word	0x08015bb0

0800c118 <acc_config_subsweep_hwaas_set>:
 800c118:	b570      	push	{r4, r5, r6, lr}
 800c11a:	b120      	cbz	r0, 800c126 <acc_config_subsweep_hwaas_set+0xe>
 800c11c:	4b0b      	ldr	r3, [pc, #44]	@ (800c14c <acc_config_subsweep_hwaas_set+0x34>)
 800c11e:	4604      	mov	r4, r0
 800c120:	6800      	ldr	r0, [r0, #0]
 800c122:	4298      	cmp	r0, r3
 800c124:	d007      	beq.n	800c136 <acc_config_subsweep_hwaas_set+0x1e>
 800c126:	4b0a      	ldr	r3, [pc, #40]	@ (800c150 <acc_config_subsweep_hwaas_set+0x38>)
 800c128:	4a0a      	ldr	r2, [pc, #40]	@ (800c154 <acc_config_subsweep_hwaas_set+0x3c>)
 800c12a:	691b      	ldr	r3, [r3, #16]
 800c12c:	490a      	ldr	r1, [pc, #40]	@ (800c158 <acc_config_subsweep_hwaas_set+0x40>)
 800c12e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c132:	2000      	movs	r0, #0
 800c134:	4718      	bx	r3
 800c136:	2a03      	cmp	r2, #3
 800c138:	460d      	mov	r5, r1
 800c13a:	4616      	mov	r6, r2
 800c13c:	d902      	bls.n	800c144 <acc_config_subsweep_hwaas_set+0x2c>
 800c13e:	f7ff fd69 	bl	800bc14 <acc_config_subsweep_validate.part.0>
 800c142:	b110      	cbz	r0, 800c14a <acc_config_subsweep_hwaas_set+0x32>
 800c144:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800c148:	81a5      	strh	r5, [r4, #12]
 800c14a:	bd70      	pop	{r4, r5, r6, pc}
 800c14c:	1337b00f 	.word	0x1337b00f
 800c150:	20000bd8 	.word	0x20000bd8
 800c154:	08015bb8 	.word	0x08015bb8
 800c158:	08015bb0 	.word	0x08015bb0

0800c15c <acc_config_subsweep_receiver_gain_set>:
 800c15c:	b570      	push	{r4, r5, r6, lr}
 800c15e:	b120      	cbz	r0, 800c16a <acc_config_subsweep_receiver_gain_set+0xe>
 800c160:	4b0b      	ldr	r3, [pc, #44]	@ (800c190 <acc_config_subsweep_receiver_gain_set+0x34>)
 800c162:	4604      	mov	r4, r0
 800c164:	6800      	ldr	r0, [r0, #0]
 800c166:	4298      	cmp	r0, r3
 800c168:	d007      	beq.n	800c17a <acc_config_subsweep_receiver_gain_set+0x1e>
 800c16a:	4b0a      	ldr	r3, [pc, #40]	@ (800c194 <acc_config_subsweep_receiver_gain_set+0x38>)
 800c16c:	4a0a      	ldr	r2, [pc, #40]	@ (800c198 <acc_config_subsweep_receiver_gain_set+0x3c>)
 800c16e:	691b      	ldr	r3, [r3, #16]
 800c170:	490a      	ldr	r1, [pc, #40]	@ (800c19c <acc_config_subsweep_receiver_gain_set+0x40>)
 800c172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c176:	2000      	movs	r0, #0
 800c178:	4718      	bx	r3
 800c17a:	2a03      	cmp	r2, #3
 800c17c:	460d      	mov	r5, r1
 800c17e:	4616      	mov	r6, r2
 800c180:	d902      	bls.n	800c188 <acc_config_subsweep_receiver_gain_set+0x2c>
 800c182:	f7ff fd47 	bl	800bc14 <acc_config_subsweep_validate.part.0>
 800c186:	b110      	cbz	r0, 800c18e <acc_config_subsweep_receiver_gain_set+0x32>
 800c188:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800c18c:	73a5      	strb	r5, [r4, #14]
 800c18e:	bd70      	pop	{r4, r5, r6, pc}
 800c190:	1337b00f 	.word	0x1337b00f
 800c194:	20000bd8 	.word	0x20000bd8
 800c198:	08015bb8 	.word	0x08015bb8
 800c19c:	08015bb0 	.word	0x08015bb0

0800c1a0 <acc_config_start_point_set>:
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	f7ff bf31 	b.w	800c008 <acc_config_subsweep_start_point_set>
 800c1a6:	bf00      	nop

0800c1a8 <acc_config_num_points_set>:
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	f7ff bf4f 	b.w	800c04c <acc_config_subsweep_num_points_set>
 800c1ae:	bf00      	nop

0800c1b0 <acc_config_step_length_set>:
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f7ff bf6d 	b.w	800c090 <acc_config_subsweep_step_length_set>
 800c1b6:	bf00      	nop

0800c1b8 <acc_config_profile_set>:
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f7ff bf8b 	b.w	800c0d4 <acc_config_subsweep_profile_set>
 800c1be:	bf00      	nop

0800c1c0 <acc_config_hwaas_set>:
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	f7ff bfa9 	b.w	800c118 <acc_config_subsweep_hwaas_set>
 800c1c6:	bf00      	nop

0800c1c8 <acc_config_receiver_gain_set>:
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	f7ff bfc7 	b.w	800c15c <acc_config_subsweep_receiver_gain_set>
 800c1ce:	bf00      	nop

0800c1d0 <acc_config_sweep_rate_set>:
 800c1d0:	b118      	cbz	r0, 800c1da <acc_config_sweep_rate_set+0xa>
 800c1d2:	4b06      	ldr	r3, [pc, #24]	@ (800c1ec <acc_config_sweep_rate_set+0x1c>)
 800c1d4:	6802      	ldr	r2, [r0, #0]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d005      	beq.n	800c1e6 <acc_config_sweep_rate_set+0x16>
 800c1da:	4b05      	ldr	r3, [pc, #20]	@ (800c1f0 <acc_config_sweep_rate_set+0x20>)
 800c1dc:	4a05      	ldr	r2, [pc, #20]	@ (800c1f4 <acc_config_sweep_rate_set+0x24>)
 800c1de:	691b      	ldr	r3, [r3, #16]
 800c1e0:	4905      	ldr	r1, [pc, #20]	@ (800c1f8 <acc_config_sweep_rate_set+0x28>)
 800c1e2:	2000      	movs	r0, #0
 800c1e4:	4718      	bx	r3
 800c1e6:	ed80 0a11 	vstr	s0, [r0, #68]	@ 0x44
 800c1ea:	4770      	bx	lr
 800c1ec:	1337b00f 	.word	0x1337b00f
 800c1f0:	20000bd8 	.word	0x20000bd8
 800c1f4:	08015bb8 	.word	0x08015bb8
 800c1f8:	08015bb0 	.word	0x08015bb0

0800c1fc <acc_config_continuous_sweep_mode_set>:
 800c1fc:	b118      	cbz	r0, 800c206 <acc_config_continuous_sweep_mode_set+0xa>
 800c1fe:	4b06      	ldr	r3, [pc, #24]	@ (800c218 <acc_config_continuous_sweep_mode_set+0x1c>)
 800c200:	6802      	ldr	r2, [r0, #0]
 800c202:	429a      	cmp	r2, r3
 800c204:	d005      	beq.n	800c212 <acc_config_continuous_sweep_mode_set+0x16>
 800c206:	4b05      	ldr	r3, [pc, #20]	@ (800c21c <acc_config_continuous_sweep_mode_set+0x20>)
 800c208:	4a05      	ldr	r2, [pc, #20]	@ (800c220 <acc_config_continuous_sweep_mode_set+0x24>)
 800c20a:	691b      	ldr	r3, [r3, #16]
 800c20c:	4905      	ldr	r1, [pc, #20]	@ (800c224 <acc_config_continuous_sweep_mode_set+0x28>)
 800c20e:	2000      	movs	r0, #0
 800c210:	4718      	bx	r3
 800c212:	f880 104e 	strb.w	r1, [r0, #78]	@ 0x4e
 800c216:	4770      	bx	lr
 800c218:	1337b00f 	.word	0x1337b00f
 800c21c:	20000bd8 	.word	0x20000bd8
 800c220:	08015bb8 	.word	0x08015bb8
 800c224:	08015bb0 	.word	0x08015bb0

0800c228 <acc_config_inter_frame_idle_state_set>:
 800c228:	b118      	cbz	r0, 800c232 <acc_config_inter_frame_idle_state_set+0xa>
 800c22a:	4b06      	ldr	r3, [pc, #24]	@ (800c244 <acc_config_inter_frame_idle_state_set+0x1c>)
 800c22c:	6802      	ldr	r2, [r0, #0]
 800c22e:	429a      	cmp	r2, r3
 800c230:	d005      	beq.n	800c23e <acc_config_inter_frame_idle_state_set+0x16>
 800c232:	4b05      	ldr	r3, [pc, #20]	@ (800c248 <acc_config_inter_frame_idle_state_set+0x20>)
 800c234:	4a05      	ldr	r2, [pc, #20]	@ (800c24c <acc_config_inter_frame_idle_state_set+0x24>)
 800c236:	691b      	ldr	r3, [r3, #16]
 800c238:	4905      	ldr	r1, [pc, #20]	@ (800c250 <acc_config_inter_frame_idle_state_set+0x28>)
 800c23a:	2000      	movs	r0, #0
 800c23c:	4718      	bx	r3
 800c23e:	f880 1053 	strb.w	r1, [r0, #83]	@ 0x53
 800c242:	4770      	bx	lr
 800c244:	1337b00f 	.word	0x1337b00f
 800c248:	20000bd8 	.word	0x20000bd8
 800c24c:	08015bb8 	.word	0x08015bb8
 800c250:	08015bb0 	.word	0x08015bb0

0800c254 <acc_config_inter_sweep_idle_state_set>:
 800c254:	b118      	cbz	r0, 800c25e <acc_config_inter_sweep_idle_state_set+0xa>
 800c256:	4b06      	ldr	r3, [pc, #24]	@ (800c270 <acc_config_inter_sweep_idle_state_set+0x1c>)
 800c258:	6802      	ldr	r2, [r0, #0]
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d005      	beq.n	800c26a <acc_config_inter_sweep_idle_state_set+0x16>
 800c25e:	4b05      	ldr	r3, [pc, #20]	@ (800c274 <acc_config_inter_sweep_idle_state_set+0x20>)
 800c260:	4a05      	ldr	r2, [pc, #20]	@ (800c278 <acc_config_inter_sweep_idle_state_set+0x24>)
 800c262:	691b      	ldr	r3, [r3, #16]
 800c264:	4905      	ldr	r1, [pc, #20]	@ (800c27c <acc_config_inter_sweep_idle_state_set+0x28>)
 800c266:	2000      	movs	r0, #0
 800c268:	4718      	bx	r3
 800c26a:	f880 1054 	strb.w	r1, [r0, #84]	@ 0x54
 800c26e:	4770      	bx	lr
 800c270:	1337b00f 	.word	0x1337b00f
 800c274:	20000bd8 	.word	0x20000bd8
 800c278:	08015bb8 	.word	0x08015bb8
 800c27c:	08015bb0 	.word	0x08015bb0

0800c280 <acc_config_get_settings>:
 800c280:	b508      	push	{r3, lr}
 800c282:	b118      	cbz	r0, 800c28c <acc_config_get_settings+0xc>
 800c284:	4b06      	ldr	r3, [pc, #24]	@ (800c2a0 <acc_config_get_settings+0x20>)
 800c286:	6802      	ldr	r2, [r0, #0]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d007      	beq.n	800c29c <acc_config_get_settings+0x1c>
 800c28c:	4b05      	ldr	r3, [pc, #20]	@ (800c2a4 <acc_config_get_settings+0x24>)
 800c28e:	4a06      	ldr	r2, [pc, #24]	@ (800c2a8 <acc_config_get_settings+0x28>)
 800c290:	691b      	ldr	r3, [r3, #16]
 800c292:	4906      	ldr	r1, [pc, #24]	@ (800c2ac <acc_config_get_settings+0x2c>)
 800c294:	2000      	movs	r0, #0
 800c296:	4798      	blx	r3
 800c298:	2000      	movs	r0, #0
 800c29a:	bd08      	pop	{r3, pc}
 800c29c:	3004      	adds	r0, #4
 800c29e:	bd08      	pop	{r3, pc}
 800c2a0:	1337b00f 	.word	0x1337b00f
 800c2a4:	20000bd8 	.word	0x20000bd8
 800c2a8:	08015bb8 	.word	0x08015bb8
 800c2ac:	08015bb0 	.word	0x08015bb0

0800c2b0 <acc_config_subsweep_prf_set>:
 800c2b0:	b570      	push	{r4, r5, r6, lr}
 800c2b2:	b120      	cbz	r0, 800c2be <acc_config_subsweep_prf_set+0xe>
 800c2b4:	4b0b      	ldr	r3, [pc, #44]	@ (800c2e4 <acc_config_subsweep_prf_set+0x34>)
 800c2b6:	4604      	mov	r4, r0
 800c2b8:	6800      	ldr	r0, [r0, #0]
 800c2ba:	4298      	cmp	r0, r3
 800c2bc:	d007      	beq.n	800c2ce <acc_config_subsweep_prf_set+0x1e>
 800c2be:	4b0a      	ldr	r3, [pc, #40]	@ (800c2e8 <acc_config_subsweep_prf_set+0x38>)
 800c2c0:	4a0a      	ldr	r2, [pc, #40]	@ (800c2ec <acc_config_subsweep_prf_set+0x3c>)
 800c2c2:	691b      	ldr	r3, [r3, #16]
 800c2c4:	490a      	ldr	r1, [pc, #40]	@ (800c2f0 <acc_config_subsweep_prf_set+0x40>)
 800c2c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c2ca:	2000      	movs	r0, #0
 800c2cc:	4718      	bx	r3
 800c2ce:	2a03      	cmp	r2, #3
 800c2d0:	460d      	mov	r5, r1
 800c2d2:	4616      	mov	r6, r2
 800c2d4:	d902      	bls.n	800c2dc <acc_config_subsweep_prf_set+0x2c>
 800c2d6:	f7ff fc9d 	bl	800bc14 <acc_config_subsweep_validate.part.0>
 800c2da:	b110      	cbz	r0, 800c2e2 <acc_config_subsweep_prf_set+0x32>
 800c2dc:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800c2e0:	74a5      	strb	r5, [r4, #18]
 800c2e2:	bd70      	pop	{r4, r5, r6, pc}
 800c2e4:	1337b00f 	.word	0x1337b00f
 800c2e8:	20000bd8 	.word	0x20000bd8
 800c2ec:	08015bb8 	.word	0x08015bb8
 800c2f0:	08015bb0 	.word	0x08015bb0

0800c2f4 <acc_config_prf_set>:
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	f7ff bfdb 	b.w	800c2b0 <acc_config_subsweep_prf_set>
 800c2fa:	bf00      	nop

0800c2fc <data_callback>:
 800c2fc:	b470      	push	{r4, r5, r6}
 800c2fe:	888c      	ldrh	r4, [r1, #4]
 800c300:	6893      	ldr	r3, [r2, #8]
 800c302:	890e      	ldrh	r6, [r1, #8]
 800c304:	798d      	ldrb	r5, [r1, #6]
 800c306:	79ca      	ldrb	r2, [r1, #7]
 800c308:	709a      	strb	r2, [r3, #2]
 800c30a:	3c00      	subs	r4, #0
 800c30c:	bf18      	it	ne
 800c30e:	2401      	movne	r4, #1
 800c310:	809e      	strh	r6, [r3, #4]
 800c312:	701c      	strb	r4, [r3, #0]
 800c314:	705d      	strb	r5, [r3, #1]
 800c316:	6098      	str	r0, [r3, #8]
 800c318:	bc70      	pop	{r4, r5, r6}
 800c31a:	4770      	bx	lr

0800c31c <acc_processing_execute>:
 800c31c:	b570      	push	{r4, r5, r6, lr}
 800c31e:	4615      	mov	r5, r2
 800c320:	460e      	mov	r6, r1
 800c322:	b120      	cbz	r0, 800c32e <acc_processing_execute+0x12>
 800c324:	4b15      	ldr	r3, [pc, #84]	@ (800c37c <acc_processing_execute+0x60>)
 800c326:	6802      	ldr	r2, [r0, #0]
 800c328:	429a      	cmp	r2, r3
 800c32a:	4604      	mov	r4, r0
 800c32c:	d008      	beq.n	800c340 <acc_processing_execute+0x24>
 800c32e:	4c14      	ldr	r4, [pc, #80]	@ (800c380 <acc_processing_execute+0x64>)
 800c330:	4a14      	ldr	r2, [pc, #80]	@ (800c384 <acc_processing_execute+0x68>)
 800c332:	6923      	ldr	r3, [r4, #16]
 800c334:	4914      	ldr	r1, [pc, #80]	@ (800c388 <acc_processing_execute+0x6c>)
 800c336:	2000      	movs	r0, #0
 800c338:	4798      	blx	r3
 800c33a:	b176      	cbz	r6, 800c35a <acc_processing_execute+0x3e>
 800c33c:	b1a5      	cbz	r5, 800c368 <acc_processing_execute+0x4c>
 800c33e:	bd70      	pop	{r4, r5, r6, pc}
 800c340:	b151      	cbz	r1, 800c358 <acc_processing_execute+0x3c>
 800c342:	b1c5      	cbz	r5, 800c376 <acc_processing_execute+0x5a>
 800c344:	6085      	str	r5, [r0, #8]
 800c346:	6840      	ldr	r0, [r0, #4]
 800c348:	f002 f914 	bl	800e574 <acc_pipeline_a121_prepare_memory>
 800c34c:	6863      	ldr	r3, [r4, #4]
 800c34e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c352:	e9d3 0200 	ldrd	r0, r2, [r3]
 800c356:	4710      	bx	r2
 800c358:	4c09      	ldr	r4, [pc, #36]	@ (800c380 <acc_processing_execute+0x64>)
 800c35a:	6923      	ldr	r3, [r4, #16]
 800c35c:	4a0b      	ldr	r2, [pc, #44]	@ (800c38c <acc_processing_execute+0x70>)
 800c35e:	490a      	ldr	r1, [pc, #40]	@ (800c388 <acc_processing_execute+0x6c>)
 800c360:	2000      	movs	r0, #0
 800c362:	4798      	blx	r3
 800c364:	2d00      	cmp	r5, #0
 800c366:	d1ea      	bne.n	800c33e <acc_processing_execute+0x22>
 800c368:	6923      	ldr	r3, [r4, #16]
 800c36a:	4a09      	ldr	r2, [pc, #36]	@ (800c390 <acc_processing_execute+0x74>)
 800c36c:	4906      	ldr	r1, [pc, #24]	@ (800c388 <acc_processing_execute+0x6c>)
 800c36e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c372:	2000      	movs	r0, #0
 800c374:	4718      	bx	r3
 800c376:	4c02      	ldr	r4, [pc, #8]	@ (800c380 <acc_processing_execute+0x64>)
 800c378:	e7f6      	b.n	800c368 <acc_processing_execute+0x4c>
 800c37a:	bf00      	nop
 800c37c:	1337b00d 	.word	0x1337b00d
 800c380:	20000bd8 	.word	0x20000bd8
 800c384:	08015e3c 	.word	0x08015e3c
 800c388:	08015e30 	.word	0x08015e30
 800c38c:	08015e58 	.word	0x08015e58
 800c390:	08015e18 	.word	0x08015e18

0800c394 <acc_processing_destroy>:
 800c394:	b510      	push	{r4, lr}
 800c396:	b120      	cbz	r0, 800c3a2 <acc_processing_destroy+0xe>
 800c398:	4b0c      	ldr	r3, [pc, #48]	@ (800c3cc <acc_processing_destroy+0x38>)
 800c39a:	6802      	ldr	r2, [r0, #0]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	4604      	mov	r4, r0
 800c3a0:	d007      	beq.n	800c3b2 <acc_processing_destroy+0x1e>
 800c3a2:	4b0b      	ldr	r3, [pc, #44]	@ (800c3d0 <acc_processing_destroy+0x3c>)
 800c3a4:	4a0b      	ldr	r2, [pc, #44]	@ (800c3d4 <acc_processing_destroy+0x40>)
 800c3a6:	691b      	ldr	r3, [r3, #16]
 800c3a8:	490b      	ldr	r1, [pc, #44]	@ (800c3d8 <acc_processing_destroy+0x44>)
 800c3aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3ae:	2000      	movs	r0, #0
 800c3b0:	4718      	bx	r3
 800c3b2:	6840      	ldr	r0, [r0, #4]
 800c3b4:	b118      	cbz	r0, 800c3be <acc_processing_destroy+0x2a>
 800c3b6:	68c3      	ldr	r3, [r0, #12]
 800c3b8:	4798      	blx	r3
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	6063      	str	r3, [r4, #4]
 800c3be:	2300      	movs	r3, #0
 800c3c0:	6023      	str	r3, [r4, #0]
 800c3c2:	4620      	mov	r0, r4
 800c3c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3c8:	f001 bf28 	b.w	800e21c <acc_rss_integration_mem_free>
 800c3cc:	1337b00d 	.word	0x1337b00d
 800c3d0:	20000bd8 	.word	0x20000bd8
 800c3d4:	08015e3c 	.word	0x08015e3c
 800c3d8:	08015e30 	.word	0x08015e30

0800c3dc <acc_processing_create>:
 800c3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3e0:	b088      	sub	sp, #32
 800c3e2:	460c      	mov	r4, r1
 800c3e4:	f7ff ff4c 	bl	800c280 <acc_config_get_settings>
 800c3e8:	2800      	cmp	r0, #0
 800c3ea:	d050      	beq.n	800c48e <acc_processing_create+0xb2>
 800c3ec:	2c00      	cmp	r4, #0
 800c3ee:	d043      	beq.n	800c478 <acc_processing_create+0x9c>
 800c3f0:	4a2e      	ldr	r2, [pc, #184]	@ (800c4ac <acc_processing_create+0xd0>)
 800c3f2:	4606      	mov	r6, r0
 800c3f4:	2367      	movs	r3, #103	@ 0x67
 800c3f6:	2110      	movs	r1, #16
 800c3f8:	2001      	movs	r0, #1
 800c3fa:	f001 fef3 	bl	800e1e4 <acc_rss_integration_mem_calloc_debug>
 800c3fe:	4605      	mov	r5, r0
 800c400:	2800      	cmp	r0, #0
 800c402:	d044      	beq.n	800c48e <acc_processing_create+0xb2>
 800c404:	4b2a      	ldr	r3, [pc, #168]	@ (800c4b0 <acc_processing_create+0xd4>)
 800c406:	6003      	str	r3, [r0, #0]
 800c408:	f10d 080c 	add.w	r8, sp, #12
 800c40c:	4b29      	ldr	r3, [pc, #164]	@ (800c4b4 <acc_processing_create+0xd8>)
 800c40e:	9600      	str	r6, [sp, #0]
 800c410:	4641      	mov	r1, r8
 800c412:	4668      	mov	r0, sp
 800c414:	e9cd 3501 	strd	r3, r5, [sp, #4]
 800c418:	f001 ff46 	bl	800e2a8 <acc_pipeline_a121_assemble>
 800c41c:	4607      	mov	r7, r0
 800c41e:	6068      	str	r0, [r5, #4]
 800c420:	2800      	cmp	r0, #0
 800c422:	d03e      	beq.n	800c4a2 <acc_processing_create+0xc6>
 800c424:	2300      	movs	r3, #0
 800c426:	8063      	strh	r3, [r4, #2]
 800c428:	f896 104e 	ldrb.w	r1, [r6, #78]	@ 0x4e
 800c42c:	461a      	mov	r2, r3
 800c42e:	469c      	mov	ip, r3
 800c430:	1d20      	adds	r0, r4, #4
 800c432:	b2df      	uxtb	r7, r3
 800c434:	42b9      	cmp	r1, r7
 800c436:	d92f      	bls.n	800c498 <acc_processing_create+0xbc>
 800c438:	f838 7013 	ldrh.w	r7, [r8, r3, lsl #1]
 800c43c:	8002      	strh	r2, [r0, #0]
 800c43e:	443a      	add	r2, r7
 800c440:	b292      	uxth	r2, r2
 800c442:	8062      	strh	r2, [r4, #2]
 800c444:	8107      	strh	r7, [r0, #8]
 800c446:	3301      	adds	r3, #1
 800c448:	2b04      	cmp	r3, #4
 800c44a:	f100 0002 	add.w	r0, r0, #2
 800c44e:	d1f0      	bne.n	800c432 <acc_processing_create+0x56>
 800c450:	f8b6 3048 	ldrh.w	r3, [r6, #72]	@ 0x48
 800c454:	9905      	ldr	r1, [sp, #20]
 800c456:	6161      	str	r1, [r4, #20]
 800c458:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800c45c:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 800c460:	7620      	strb	r0, [r4, #24]
 800c462:	fb13 f202 	smulbb	r2, r3, r2
 800c466:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800c46a:	8022      	strh	r2, [r4, #0]
 800c46c:	81a9      	strh	r1, [r5, #12]
 800c46e:	81eb      	strh	r3, [r5, #14]
 800c470:	4628      	mov	r0, r5
 800c472:	b008      	add	sp, #32
 800c474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c478:	4b0f      	ldr	r3, [pc, #60]	@ (800c4b8 <acc_processing_create+0xdc>)
 800c47a:	4a10      	ldr	r2, [pc, #64]	@ (800c4bc <acc_processing_create+0xe0>)
 800c47c:	691b      	ldr	r3, [r3, #16]
 800c47e:	490b      	ldr	r1, [pc, #44]	@ (800c4ac <acc_processing_create+0xd0>)
 800c480:	4620      	mov	r0, r4
 800c482:	4798      	blx	r3
 800c484:	4625      	mov	r5, r4
 800c486:	4628      	mov	r0, r5
 800c488:	b008      	add	sp, #32
 800c48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c48e:	2500      	movs	r5, #0
 800c490:	4628      	mov	r0, r5
 800c492:	b008      	add	sp, #32
 800c494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c498:	f8a0 c000 	strh.w	ip, [r0]
 800c49c:	f8a0 c008 	strh.w	ip, [r0, #8]
 800c4a0:	e7d1      	b.n	800c446 <acc_processing_create+0x6a>
 800c4a2:	4628      	mov	r0, r5
 800c4a4:	f7ff ff76 	bl	800c394 <acc_processing_destroy>
 800c4a8:	463d      	mov	r5, r7
 800c4aa:	e7e1      	b.n	800c470 <acc_processing_create+0x94>
 800c4ac:	08015e30 	.word	0x08015e30
 800c4b0:	1337b00d 	.word	0x1337b00d
 800c4b4:	0800c2fd 	.word	0x0800c2fd
 800c4b8:	20000bd8 	.word	0x20000bd8
 800c4bc:	08015e70 	.word	0x08015e70

0800c4c0 <acc_sensor_destroy>:
 800c4c0:	b510      	push	{r4, lr}
 800c4c2:	b120      	cbz	r0, 800c4ce <acc_sensor_destroy+0xe>
 800c4c4:	4b0b      	ldr	r3, [pc, #44]	@ (800c4f4 <acc_sensor_destroy+0x34>)
 800c4c6:	6802      	ldr	r2, [r0, #0]
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	d007      	beq.n	800c4de <acc_sensor_destroy+0x1e>
 800c4ce:	4b0a      	ldr	r3, [pc, #40]	@ (800c4f8 <acc_sensor_destroy+0x38>)
 800c4d0:	4a0a      	ldr	r2, [pc, #40]	@ (800c4fc <acc_sensor_destroy+0x3c>)
 800c4d2:	691b      	ldr	r3, [r3, #16]
 800c4d4:	490a      	ldr	r1, [pc, #40]	@ (800c500 <acc_sensor_destroy+0x40>)
 800c4d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4da:	2000      	movs	r0, #0
 800c4dc:	4718      	bx	r3
 800c4de:	2300      	movs	r3, #0
 800c4e0:	6003      	str	r3, [r0, #0]
 800c4e2:	6900      	ldr	r0, [r0, #16]
 800c4e4:	f002 f87e 	bl	800e5e4 <acc_radar_engine_a121_context_destroy>
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4ee:	f001 be95 	b.w	800e21c <acc_rss_integration_mem_free>
 800c4f2:	bf00      	nop
 800c4f4:	1337b00e 	.word	0x1337b00e
 800c4f8:	20000bd8 	.word	0x20000bd8
 800c4fc:	08015e88 	.word	0x08015e88
 800c500:	08015ea0 	.word	0x08015ea0

0800c504 <acc_sensor_create>:
 800c504:	b570      	push	{r4, r5, r6, lr}
 800c506:	4a20      	ldr	r2, [pc, #128]	@ (800c588 <acc_sensor_create+0x84>)
 800c508:	4606      	mov	r6, r0
 800c50a:	233b      	movs	r3, #59	@ 0x3b
 800c50c:	2114      	movs	r1, #20
 800c50e:	2001      	movs	r0, #1
 800c510:	f001 fe68 	bl	800e1e4 <acc_rss_integration_mem_calloc_debug>
 800c514:	b378      	cbz	r0, 800c576 <acc_sensor_create+0x72>
 800c516:	4604      	mov	r4, r0
 800c518:	f002 f852 	bl	800e5c0 <acc_radar_engine_a121_context_create>
 800c51c:	4605      	mov	r5, r0
 800c51e:	6120      	str	r0, [r4, #16]
 800c520:	b360      	cbz	r0, 800c57c <acc_sensor_create+0x78>
 800c522:	4b1a      	ldr	r3, [pc, #104]	@ (800c58c <acc_sensor_create+0x88>)
 800c524:	60a6      	str	r6, [r4, #8]
 800c526:	2100      	movs	r1, #0
 800c528:	e9c4 3100 	strd	r3, r1, [r4]
 800c52c:	7361      	strb	r1, [r4, #13]
 800c52e:	4630      	mov	r0, r6
 800c530:	f002 f902 	bl	800e738 <acc_radar_engine_a121_check_asic_id>
 800c534:	4605      	mov	r5, r0
 800c536:	b168      	cbz	r0, 800c554 <acc_sensor_create+0x50>
 800c538:	4630      	mov	r0, r6
 800c53a:	f002 f8ff 	bl	800e73c <acc_radar_engine_a121_is_sensor_running>
 800c53e:	4605      	mov	r5, r0
 800c540:	b980      	cbnz	r0, 800c564 <acc_sensor_create+0x60>
 800c542:	68a0      	ldr	r0, [r4, #8]
 800c544:	f002 faa2 	bl	800ea8c <acc_radar_engine_a121_init_interrupts>
 800c548:	68a0      	ldr	r0, [r4, #8]
 800c54a:	4629      	mov	r1, r5
 800c54c:	f002 faa0 	bl	800ea90 <acc_radar_engine_a121_hibernate_off>
 800c550:	4620      	mov	r0, r4
 800c552:	bd70      	pop	{r4, r5, r6, pc}
 800c554:	4620      	mov	r0, r4
 800c556:	f7ff ffb3 	bl	800c4c0 <acc_sensor_destroy>
 800c55a:	4630      	mov	r0, r6
 800c55c:	f002 f8ee 	bl	800e73c <acc_radar_engine_a121_is_sensor_running>
 800c560:	b148      	cbz	r0, 800c576 <acc_sensor_create+0x72>
 800c562:	462c      	mov	r4, r5
 800c564:	4b0a      	ldr	r3, [pc, #40]	@ (800c590 <acc_sensor_create+0x8c>)
 800c566:	4a0b      	ldr	r2, [pc, #44]	@ (800c594 <acc_sensor_create+0x90>)
 800c568:	691b      	ldr	r3, [r3, #16]
 800c56a:	4907      	ldr	r1, [pc, #28]	@ (800c588 <acc_sensor_create+0x84>)
 800c56c:	2000      	movs	r0, #0
 800c56e:	4798      	blx	r3
 800c570:	4620      	mov	r0, r4
 800c572:	f7ff ffa5 	bl	800c4c0 <acc_sensor_destroy>
 800c576:	2400      	movs	r4, #0
 800c578:	4620      	mov	r0, r4
 800c57a:	bd70      	pop	{r4, r5, r6, pc}
 800c57c:	4620      	mov	r0, r4
 800c57e:	f001 fe4d 	bl	800e21c <acc_rss_integration_mem_free>
 800c582:	462c      	mov	r4, r5
 800c584:	e7f8      	b.n	800c578 <acc_sensor_create+0x74>
 800c586:	bf00      	nop
 800c588:	08015ea0 	.word	0x08015ea0
 800c58c:	1337b00e 	.word	0x1337b00e
 800c590:	20000bd8 	.word	0x20000bd8
 800c594:	08015ea8 	.word	0x08015ea8

0800c598 <acc_sensor_calibrate>:
 800c598:	b530      	push	{r4, r5, lr}
 800c59a:	b083      	sub	sp, #12
 800c59c:	b128      	cbz	r0, 800c5aa <acc_sensor_calibrate+0x12>
 800c59e:	460d      	mov	r5, r1
 800c5a0:	4604      	mov	r4, r0
 800c5a2:	4912      	ldr	r1, [pc, #72]	@ (800c5ec <acc_sensor_calibrate+0x54>)
 800c5a4:	6800      	ldr	r0, [r0, #0]
 800c5a6:	4288      	cmp	r0, r1
 800c5a8:	d008      	beq.n	800c5bc <acc_sensor_calibrate+0x24>
 800c5aa:	4b11      	ldr	r3, [pc, #68]	@ (800c5f0 <acc_sensor_calibrate+0x58>)
 800c5ac:	4a11      	ldr	r2, [pc, #68]	@ (800c5f4 <acc_sensor_calibrate+0x5c>)
 800c5ae:	691b      	ldr	r3, [r3, #16]
 800c5b0:	4911      	ldr	r1, [pc, #68]	@ (800c5f8 <acc_sensor_calibrate+0x60>)
 800c5b2:	2000      	movs	r0, #0
 800c5b4:	4798      	blx	r3
 800c5b6:	2000      	movs	r0, #0
 800c5b8:	b003      	add	sp, #12
 800c5ba:	bd30      	pop	{r4, r5, pc}
 800c5bc:	2d00      	cmp	r5, #0
 800c5be:	d0fa      	beq.n	800c5b6 <acc_sensor_calibrate+0x1e>
 800c5c0:	2a00      	cmp	r2, #0
 800c5c2:	d0f8      	beq.n	800c5b6 <acc_sensor_calibrate+0x1e>
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d0f6      	beq.n	800c5b6 <acc_sensor_calibrate+0x1e>
 800c5c8:	9200      	str	r2, [sp, #0]
 800c5ca:	4619      	mov	r1, r3
 800c5cc:	9a06      	ldr	r2, [sp, #24]
 800c5ce:	68a0      	ldr	r0, [r4, #8]
 800c5d0:	f104 030d 	add.w	r3, r4, #13
 800c5d4:	f000 f8d4 	bl	800c780 <acc_calibration_a121_calibrate>
 800c5d8:	2800      	cmp	r0, #0
 800c5da:	d0ec      	beq.n	800c5b6 <acc_sensor_calibrate+0x1e>
 800c5dc:	7b63      	ldrb	r3, [r4, #13]
 800c5de:	2b0a      	cmp	r3, #10
 800c5e0:	bf0c      	ite	eq
 800c5e2:	2301      	moveq	r3, #1
 800c5e4:	2300      	movne	r3, #0
 800c5e6:	702b      	strb	r3, [r5, #0]
 800c5e8:	e7e6      	b.n	800c5b8 <acc_sensor_calibrate+0x20>
 800c5ea:	bf00      	nop
 800c5ec:	1337b00e 	.word	0x1337b00e
 800c5f0:	20000bd8 	.word	0x20000bd8
 800c5f4:	08015e88 	.word	0x08015e88
 800c5f8:	08015ea0 	.word	0x08015ea0

0800c5fc <acc_sensor_prepare>:
 800c5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5fe:	b085      	sub	sp, #20
 800c600:	b130      	cbz	r0, 800c610 <acc_sensor_prepare+0x14>
 800c602:	4616      	mov	r6, r2
 800c604:	461f      	mov	r7, r3
 800c606:	6802      	ldr	r2, [r0, #0]
 800c608:	4b22      	ldr	r3, [pc, #136]	@ (800c694 <acc_sensor_prepare+0x98>)
 800c60a:	429a      	cmp	r2, r3
 800c60c:	4604      	mov	r4, r0
 800c60e:	d008      	beq.n	800c622 <acc_sensor_prepare+0x26>
 800c610:	4b21      	ldr	r3, [pc, #132]	@ (800c698 <acc_sensor_prepare+0x9c>)
 800c612:	4a22      	ldr	r2, [pc, #136]	@ (800c69c <acc_sensor_prepare+0xa0>)
 800c614:	691b      	ldr	r3, [r3, #16]
 800c616:	4922      	ldr	r1, [pc, #136]	@ (800c6a0 <acc_sensor_prepare+0xa4>)
 800c618:	2000      	movs	r0, #0
 800c61a:	4798      	blx	r3
 800c61c:	2000      	movs	r0, #0
 800c61e:	b005      	add	sp, #20
 800c620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c622:	b1f6      	cbz	r6, 800c662 <acc_sensor_prepare+0x66>
 800c624:	4630      	mov	r0, r6
 800c626:	460d      	mov	r5, r1
 800c628:	f000 fc46 	bl	800ceb8 <acc_calibration_a121_validate_calibration>
 800c62c:	b1c8      	cbz	r0, 800c662 <acc_sensor_prepare+0x66>
 800c62e:	4628      	mov	r0, r5
 800c630:	f7ff fe26 	bl	800c280 <acc_config_get_settings>
 800c634:	4605      	mov	r5, r0
 800c636:	2800      	cmp	r0, #0
 800c638:	d0f1      	beq.n	800c61e <acc_sensor_prepare+0x22>
 800c63a:	68a0      	ldr	r0, [r4, #8]
 800c63c:	f002 f87e 	bl	800e73c <acc_radar_engine_a121_is_sensor_running>
 800c640:	7320      	strb	r0, [r4, #12]
 800c642:	b188      	cbz	r0, 800c668 <acc_sensor_prepare+0x6c>
 800c644:	9700      	str	r7, [sp, #0]
 800c646:	6923      	ldr	r3, [r4, #16]
 800c648:	1d20      	adds	r0, r4, #4
 800c64a:	e9cd 3001 	strd	r3, r0, [sp, #4]
 800c64e:	1da2      	adds	r2, r4, #6
 800c650:	9203      	str	r2, [sp, #12]
 800c652:	68a0      	ldr	r0, [r4, #8]
 800c654:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c656:	4632      	mov	r2, r6
 800c658:	4629      	mov	r1, r5
 800c65a:	f002 f95d 	bl	800e918 <acc_radar_engine_a121_reconfigure>
 800c65e:	b005      	add	sp, #20
 800c660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c662:	4b0d      	ldr	r3, [pc, #52]	@ (800c698 <acc_sensor_prepare+0x9c>)
 800c664:	4a0f      	ldr	r2, [pc, #60]	@ (800c6a4 <acc_sensor_prepare+0xa8>)
 800c666:	e7d5      	b.n	800c614 <acc_sensor_prepare+0x18>
 800c668:	68a0      	ldr	r0, [r4, #8]
 800c66a:	f002 fa13 	bl	800ea94 <acc_radar_engine_a121_is_hibernate>
 800c66e:	7b23      	ldrb	r3, [r4, #12]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d1e7      	bne.n	800c644 <acc_sensor_prepare+0x48>
 800c674:	2800      	cmp	r0, #0
 800c676:	d1e5      	bne.n	800c644 <acc_sensor_prepare+0x48>
 800c678:	9700      	str	r7, [sp, #0]
 800c67a:	6923      	ldr	r3, [r4, #16]
 800c67c:	1d20      	adds	r0, r4, #4
 800c67e:	e9cd 3001 	strd	r3, r0, [sp, #4]
 800c682:	1da2      	adds	r2, r4, #6
 800c684:	9203      	str	r2, [sp, #12]
 800c686:	68a0      	ldr	r0, [r4, #8]
 800c688:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c68a:	4632      	mov	r2, r6
 800c68c:	4629      	mov	r1, r5
 800c68e:	f002 f8a3 	bl	800e7d8 <acc_radar_engine_a121_prepare>
 800c692:	e7c4      	b.n	800c61e <acc_sensor_prepare+0x22>
 800c694:	1337b00e 	.word	0x1337b00e
 800c698:	20000bd8 	.word	0x20000bd8
 800c69c:	08015e88 	.word	0x08015e88
 800c6a0:	08015ea0 	.word	0x08015ea0
 800c6a4:	08015ec4 	.word	0x08015ec4

0800c6a8 <acc_sensor_measure>:
 800c6a8:	b510      	push	{r4, lr}
 800c6aa:	b120      	cbz	r0, 800c6b6 <acc_sensor_measure+0xe>
 800c6ac:	4b0e      	ldr	r3, [pc, #56]	@ (800c6e8 <acc_sensor_measure+0x40>)
 800c6ae:	6802      	ldr	r2, [r0, #0]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	4604      	mov	r4, r0
 800c6b4:	d007      	beq.n	800c6c6 <acc_sensor_measure+0x1e>
 800c6b6:	4b0d      	ldr	r3, [pc, #52]	@ (800c6ec <acc_sensor_measure+0x44>)
 800c6b8:	4a0d      	ldr	r2, [pc, #52]	@ (800c6f0 <acc_sensor_measure+0x48>)
 800c6ba:	691b      	ldr	r3, [r3, #16]
 800c6bc:	490d      	ldr	r1, [pc, #52]	@ (800c6f4 <acc_sensor_measure+0x4c>)
 800c6be:	2000      	movs	r0, #0
 800c6c0:	4798      	blx	r3
 800c6c2:	2000      	movs	r0, #0
 800c6c4:	bd10      	pop	{r4, pc}
 800c6c6:	7b03      	ldrb	r3, [r0, #12]
 800c6c8:	b93b      	cbnz	r3, 800c6da <acc_sensor_measure+0x32>
 800c6ca:	6880      	ldr	r0, [r0, #8]
 800c6cc:	f001 ff8e 	bl	800e5ec <acc_radar_engine_a121_run_program>
 800c6d0:	2800      	cmp	r0, #0
 800c6d2:	d0f7      	beq.n	800c6c4 <acc_sensor_measure+0x1c>
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	7323      	strb	r3, [r4, #12]
 800c6d8:	bd10      	pop	{r4, pc}
 800c6da:	6901      	ldr	r1, [r0, #16]
 800c6dc:	6880      	ldr	r0, [r0, #8]
 800c6de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6e2:	f001 bf85 	b.w	800e5f0 <acc_radar_engine_a121_measure>
 800c6e6:	bf00      	nop
 800c6e8:	1337b00e 	.word	0x1337b00e
 800c6ec:	20000bd8 	.word	0x20000bd8
 800c6f0:	08015e88 	.word	0x08015e88
 800c6f4:	08015ea0 	.word	0x08015ea0

0800c6f8 <acc_sensor_read>:
 800c6f8:	b530      	push	{r4, r5, lr}
 800c6fa:	b085      	sub	sp, #20
 800c6fc:	b128      	cbz	r0, 800c70a <acc_sensor_read+0x12>
 800c6fe:	4b19      	ldr	r3, [pc, #100]	@ (800c764 <acc_sensor_read+0x6c>)
 800c700:	460d      	mov	r5, r1
 800c702:	6801      	ldr	r1, [r0, #0]
 800c704:	4299      	cmp	r1, r3
 800c706:	4604      	mov	r4, r0
 800c708:	d008      	beq.n	800c71c <acc_sensor_read+0x24>
 800c70a:	4b17      	ldr	r3, [pc, #92]	@ (800c768 <acc_sensor_read+0x70>)
 800c70c:	4a17      	ldr	r2, [pc, #92]	@ (800c76c <acc_sensor_read+0x74>)
 800c70e:	691b      	ldr	r3, [r3, #16]
 800c710:	4917      	ldr	r1, [pc, #92]	@ (800c770 <acc_sensor_read+0x78>)
 800c712:	2000      	movs	r0, #0
 800c714:	4798      	blx	r3
 800c716:	2000      	movs	r0, #0
 800c718:	b005      	add	sp, #20
 800c71a:	bd30      	pop	{r4, r5, pc}
 800c71c:	8883      	ldrh	r3, [r0, #4]
 800c71e:	88c1      	ldrh	r1, [r0, #6]
 800c720:	440b      	add	r3, r1
 800c722:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800c726:	d319      	bcc.n	800c75c <acc_sensor_read+0x64>
 800c728:	6901      	ldr	r1, [r0, #16]
 800c72a:	6880      	ldr	r0, [r0, #8]
 800c72c:	2300      	movs	r3, #0
 800c72e:	f10d 020f 	add.w	r2, sp, #15
 800c732:	f88d 300f 	strb.w	r3, [sp, #15]
 800c736:	f001 ff95 	bl	800e664 <acc_radar_engine_a121_verify_radar_data_ready>
 800c73a:	2800      	cmp	r0, #0
 800c73c:	d0ec      	beq.n	800c718 <acc_sensor_read+0x20>
 800c73e:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800c742:	6920      	ldr	r0, [r4, #16]
 800c744:	462a      	mov	r2, r5
 800c746:	f001 ffcd 	bl	800e6e4 <acc_radar_engine_a121_update_buffer_header>
 800c74a:	9500      	str	r5, [sp, #0]
 800c74c:	88e3      	ldrh	r3, [r4, #6]
 800c74e:	88a2      	ldrh	r2, [r4, #4]
 800c750:	6921      	ldr	r1, [r4, #16]
 800c752:	68a0      	ldr	r0, [r4, #8]
 800c754:	f001 ff64 	bl	800e620 <acc_radar_engine_a121_transfer_data>
 800c758:	b005      	add	sp, #20
 800c75a:	bd30      	pop	{r4, r5, pc}
 800c75c:	4b02      	ldr	r3, [pc, #8]	@ (800c768 <acc_sensor_read+0x70>)
 800c75e:	4a05      	ldr	r2, [pc, #20]	@ (800c774 <acc_sensor_read+0x7c>)
 800c760:	e7d5      	b.n	800c70e <acc_sensor_read+0x16>
 800c762:	bf00      	nop
 800c764:	1337b00e 	.word	0x1337b00e
 800c768:	20000bd8 	.word	0x20000bd8
 800c76c:	08015e88 	.word	0x08015e88
 800c770:	08015ea0 	.word	0x08015ea0
 800c774:	08015ed8 	.word	0x08015ed8

0800c778 <acc_sensor_status>:
 800c778:	6880      	ldr	r0, [r0, #8]
 800c77a:	f002 bded 	b.w	800f358 <acc_sensor_status_a121>
 800c77e:	bf00      	nop

0800c780 <acc_calibration_a121_calibrate>:
 800c780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c784:	461c      	mov	r4, r3
 800c786:	b091      	sub	sp, #68	@ 0x44
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800c78c:	4605      	mov	r5, r0
 800c78e:	4688      	mov	r8, r1
 800c790:	4616      	mov	r6, r2
 800c792:	2b0a      	cmp	r3, #10
 800c794:	d859      	bhi.n	800c84a <acc_calibration_a121_calibrate+0xca>
 800c796:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c79a:	0065      	.short	0x0065
 800c79c:	00f2009d 	.word	0x00f2009d
 800c7a0:	000b015d 	.word	0x000b015d
 800c7a4:	020701d3 	.word	0x020701d3
 800c7a8:	029b0266 	.word	0x029b0266
 800c7ac:	006502d1 	.word	0x006502d1
 800c7b0:	f001 fc08 	bl	800dfc4 <acc_a121_cal_session_ack_program>
 800c7b4:	2800      	cmp	r0, #0
 800c7b6:	f000 808b 	beq.w	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800c7ba:	aa08      	add	r2, sp, #32
 800c7bc:	4641      	mov	r1, r8
 800c7be:	4628      	mov	r0, r5
 800c7c0:	f001 fc52 	bl	800e068 <acc_a121_cal_session_get_4_bba_vga_program_data>
 800c7c4:	48bd      	ldr	r0, [pc, #756]	@ (800cabc <acc_calibration_a121_calibrate+0x33c>)
 800c7c6:	f8df b300 	ldr.w	fp, [pc, #768]	@ 800cac8 <acc_calibration_a121_calibrate+0x348>
 800c7ca:	4629      	mov	r1, r5
 800c7cc:	f004 fd06 	bl	80111dc <acc_diagnostic_log_scalar>
 800c7d0:	49bb      	ldr	r1, [pc, #748]	@ (800cac0 <acc_calibration_a121_calibrate+0x340>)
 800c7d2:	48bc      	ldr	r0, [pc, #752]	@ (800cac4 <acc_calibration_a121_calibrate+0x344>)
 800c7d4:	f004 fcfa 	bl	80111cc <acc_diagnostic_log_array>
 800c7d8:	9808      	ldr	r0, [sp, #32]
 800c7da:	2150      	movs	r1, #80	@ 0x50
 800c7dc:	f004 fd0e 	bl	80111fc <acc_diagnostic_log_data_i16>
 800c7e0:	f107 0a0a 	add.w	sl, r7, #10
 800c7e4:	f04f 0900 	mov.w	r9, #0
 800c7e8:	9808      	ldr	r0, [sp, #32]
 800c7ea:	a905      	add	r1, sp, #20
 800c7ec:	eb00 1009 	add.w	r0, r0, r9, lsl #4
 800c7f0:	f000 fcc8 	bl	800d184 <acc_cal_algorithms_bba_cal_ctrl>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	f109 0230 	add.w	r2, r9, #48	@ 0x30
 800c7fa:	48b3      	ldr	r0, [pc, #716]	@ (800cac8 <acc_calibration_a121_calibrate+0x348>)
 800c7fc:	f109 0901 	add.w	r9, r9, #1
 800c800:	2b00      	cmp	r3, #0
 800c802:	d065      	beq.n	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800c804:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800c808:	f88b 200d 	strb.w	r2, [fp, #13]
 800c80c:	f004 fce6 	bl	80111dc <acc_diagnostic_log_scalar>
 800c810:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800c814:	f82a 3f02 	strh.w	r3, [sl, #2]!
 800c818:	f1b9 0f0a 	cmp.w	r9, #10
 800c81c:	d1e4      	bne.n	800c7e8 <acc_calibration_a121_calibrate+0x68>
 800c81e:	48ab      	ldr	r0, [pc, #684]	@ (800cacc <acc_calibration_a121_calibrate+0x34c>)
 800c820:	f004 fccc 	bl	80111bc <acc_diagnostic_log_set_scope>
 800c824:	4baa      	ldr	r3, [pc, #680]	@ (800cad0 <acc_calibration_a121_calibrate+0x350>)
 800c826:	9300      	str	r3, [sp, #0]
 800c828:	2260      	movs	r2, #96	@ 0x60
 800c82a:	9201      	str	r2, [sp, #4]
 800c82c:	4641      	mov	r1, r8
 800c82e:	4632      	mov	r2, r6
 800c830:	2300      	movs	r3, #0
 800c832:	4628      	mov	r0, r5
 800c834:	f002 fae0 	bl	800edf8 <acc_sensor_protocol_a121_load_lut>
 800c838:	2800      	cmp	r0, #0
 800c83a:	f040 82f7 	bne.w	800ce2c <acc_calibration_a121_calibrate+0x6ac>
 800c83e:	4ba5      	ldr	r3, [pc, #660]	@ (800cad4 <acc_calibration_a121_calibrate+0x354>)
 800c840:	4aa5      	ldr	r2, [pc, #660]	@ (800cad8 <acc_calibration_a121_calibrate+0x358>)
 800c842:	691b      	ldr	r3, [r3, #16]
 800c844:	49a5      	ldr	r1, [pc, #660]	@ (800cadc <acc_calibration_a121_calibrate+0x35c>)
 800c846:	4798      	blx	r3
 800c848:	7823      	ldrb	r3, [r4, #0]
 800c84a:	49a2      	ldr	r1, [pc, #648]	@ (800cad4 <acc_calibration_a121_calibrate+0x354>)
 800c84c:	4aa4      	ldr	r2, [pc, #656]	@ (800cae0 <acc_calibration_a121_calibrate+0x360>)
 800c84e:	690e      	ldr	r6, [r1, #16]
 800c850:	49a2      	ldr	r1, [pc, #648]	@ (800cadc <acc_calibration_a121_calibrate+0x35c>)
 800c852:	2000      	movs	r0, #0
 800c854:	4605      	mov	r5, r0
 800c856:	47b0      	blx	r6
 800c858:	462b      	mov	r3, r5
 800c85a:	4628      	mov	r0, r5
 800c85c:	7023      	strb	r3, [r4, #0]
 800c85e:	b011      	add	sp, #68	@ 0x44
 800c860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c864:	228c      	movs	r2, #140	@ 0x8c
 800c866:	2100      	movs	r1, #0
 800c868:	4638      	mov	r0, r7
 800c86a:	f006 f993 	bl	8012b94 <memset>
 800c86e:	f001 fc63 	bl	800e138 <acc_rss_integration_get_sensor_reference_frequency>
 800c872:	ee07 0a90 	vmov	s15, r0
 800c876:	f107 0a80 	add.w	sl, r7, #128	@ 0x80
 800c87a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c87e:	4651      	mov	r1, sl
 800c880:	a808      	add	r0, sp, #32
 800c882:	edcd 7a08 	vstr	s15, [sp, #32]
 800c886:	f004 fb53 	bl	8010f30 <acc_cpd_pll_divisors_calculate>
 800c88a:	4681      	mov	r9, r0
 800c88c:	4895      	ldr	r0, [pc, #596]	@ (800cae4 <acc_calibration_a121_calibrate+0x364>)
 800c88e:	f004 fc95 	bl	80111bc <acc_diagnostic_log_set_scope>
 800c892:	488a      	ldr	r0, [pc, #552]	@ (800cabc <acc_calibration_a121_calibrate+0x33c>)
 800c894:	4629      	mov	r1, r5
 800c896:	f004 fca1 	bl	80111dc <acc_diagnostic_log_scalar>
 800c89a:	f8b7 1082 	ldrh.w	r1, [r7, #130]	@ 0x82
 800c89e:	4892      	ldr	r0, [pc, #584]	@ (800cae8 <acc_calibration_a121_calibrate+0x368>)
 800c8a0:	f004 fc9c 	bl	80111dc <acc_diagnostic_log_scalar>
 800c8a4:	f8b7 1084 	ldrh.w	r1, [r7, #132]	@ 0x84
 800c8a8:	4890      	ldr	r0, [pc, #576]	@ (800caec <acc_calibration_a121_calibrate+0x36c>)
 800c8aa:	f004 fc97 	bl	80111dc <acc_diagnostic_log_scalar>
 800c8ae:	f8b7 1086 	ldrh.w	r1, [r7, #134]	@ 0x86
 800c8b2:	488f      	ldr	r0, [pc, #572]	@ (800caf0 <acc_calibration_a121_calibrate+0x370>)
 800c8b4:	f004 fc92 	bl	80111dc <acc_diagnostic_log_scalar>
 800c8b8:	488e      	ldr	r0, [pc, #568]	@ (800caf4 <acc_calibration_a121_calibrate+0x374>)
 800c8ba:	f8b7 1080 	ldrh.w	r1, [r7, #128]	@ 0x80
 800c8be:	f004 fc8d 	bl	80111dc <acc_diagnostic_log_scalar>
 800c8c2:	488d      	ldr	r0, [pc, #564]	@ (800caf8 <acc_calibration_a121_calibrate+0x378>)
 800c8c4:	f004 fc7a 	bl	80111bc <acc_diagnostic_log_set_scope>
 800c8c8:	f1b9 0f00 	cmp.w	r9, #0
 800c8cc:	f040 82a2 	bne.w	800ce14 <acc_calibration_a121_calibrate+0x694>
 800c8d0:	7823      	ldrb	r3, [r4, #0]
 800c8d2:	e7ba      	b.n	800c84a <acc_calibration_a121_calibrate+0xca>
 800c8d4:	f001 fb76 	bl	800dfc4 <acc_a121_cal_session_ack_program>
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	d0f9      	beq.n	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800c8dc:	aa08      	add	r2, sp, #32
 800c8de:	ab05      	add	r3, sp, #20
 800c8e0:	e9cd 3200 	strd	r3, r2, [sp]
 800c8e4:	4641      	mov	r1, r8
 800c8e6:	ab03      	add	r3, sp, #12
 800c8e8:	f10d 020e 	add.w	r2, sp, #14
 800c8ec:	4628      	mov	r0, r5
 800c8ee:	f001 fb8b 	bl	800e008 <acc_a121_cal_session_get_1_pll_cbank_temp_program_data>
 800c8f2:	4872      	ldr	r0, [pc, #456]	@ (800cabc <acc_calibration_a121_calibrate+0x33c>)
 800c8f4:	4629      	mov	r1, r5
 800c8f6:	f004 fc71 	bl	80111dc <acc_diagnostic_log_scalar>
 800c8fa:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800c8fe:	487f      	ldr	r0, [pc, #508]	@ (800cafc <acc_calibration_a121_calibrate+0x37c>)
 800c900:	f004 fc6c 	bl	80111dc <acc_diagnostic_log_scalar>
 800c904:	496e      	ldr	r1, [pc, #440]	@ (800cac0 <acc_calibration_a121_calibrate+0x340>)
 800c906:	487e      	ldr	r0, [pc, #504]	@ (800cb00 <acc_calibration_a121_calibrate+0x380>)
 800c908:	f004 fc60 	bl	80111cc <acc_diagnostic_log_array>
 800c90c:	9808      	ldr	r0, [sp, #32]
 800c90e:	2110      	movs	r1, #16
 800c910:	f004 fc6c 	bl	80111ec <acc_diagnostic_log_data_u16>
 800c914:	9a08      	ldr	r2, [sp, #32]
 800c916:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800c91a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800c91e:	ab04      	add	r3, sp, #16
 800c920:	f000 fad6 	bl	800ced0 <acc_cal_algorithms_pll_cbank>
 800c924:	2800      	cmp	r0, #0
 800c926:	d0d3      	beq.n	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800c928:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800c92c:	f000 fe4e 	bl	800d5cc <acc_cal_algorithms_wavelet_duration_p1>
 800c930:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c934:	4606      	mov	r6, r0
 800c936:	4873      	ldr	r0, [pc, #460]	@ (800cb04 <acc_calibration_a121_calibrate+0x384>)
 800c938:	f004 fc50 	bl	80111dc <acc_diagnostic_log_scalar>
 800c93c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800c940:	4871      	ldr	r0, [pc, #452]	@ (800cb08 <acc_calibration_a121_calibrate+0x388>)
 800c942:	f004 fc4b 	bl	80111dc <acc_diagnostic_log_scalar>
 800c946:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800c94a:	4870      	ldr	r0, [pc, #448]	@ (800cb0c <acc_calibration_a121_calibrate+0x38c>)
 800c94c:	f004 fc46 	bl	80111dc <acc_diagnostic_log_scalar>
 800c950:	486f      	ldr	r0, [pc, #444]	@ (800cb10 <acc_calibration_a121_calibrate+0x390>)
 800c952:	4631      	mov	r1, r6
 800c954:	f004 fc42 	bl	80111dc <acc_diagnostic_log_scalar>
 800c958:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800c95c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800c960:	803b      	strh	r3, [r7, #0]
 800c962:	4628      	mov	r0, r5
 800c964:	84be      	strh	r6, [r7, #36]	@ 0x24
 800c966:	8079      	strh	r1, [r7, #2]
 800c968:	f001 f99c 	bl	800dca4 <acc_a121_cal_session_start_2_pll_ibias_vfast2_ldo_program>
 800c96c:	4605      	mov	r5, r0
 800c96e:	2302      	movs	r3, #2
 800c970:	2d00      	cmp	r5, #0
 800c972:	d0ad      	beq.n	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800c974:	4628      	mov	r0, r5
 800c976:	7023      	strb	r3, [r4, #0]
 800c978:	b011      	add	sp, #68	@ 0x44
 800c97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c97e:	f001 fb21 	bl	800dfc4 <acc_a121_cal_session_ack_program>
 800c982:	2800      	cmp	r0, #0
 800c984:	d0a4      	beq.n	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800c986:	ab08      	add	r3, sp, #32
 800c988:	aa05      	add	r2, sp, #20
 800c98a:	9300      	str	r3, [sp, #0]
 800c98c:	4641      	mov	r1, r8
 800c98e:	ab04      	add	r3, sp, #16
 800c990:	4628      	mov	r0, r5
 800c992:	f001 fb51 	bl	800e038 <acc_a121_cal_session_get_2_pll_ibias_vfast2_ldo_program_data>
 800c996:	494a      	ldr	r1, [pc, #296]	@ (800cac0 <acc_calibration_a121_calibrate+0x340>)
 800c998:	485e      	ldr	r0, [pc, #376]	@ (800cb14 <acc_calibration_a121_calibrate+0x394>)
 800c99a:	f004 fc17 	bl	80111cc <acc_diagnostic_log_array>
 800c99e:	9805      	ldr	r0, [sp, #20]
 800c9a0:	2110      	movs	r1, #16
 800c9a2:	f004 fc2b 	bl	80111fc <acc_diagnostic_log_data_i16>
 800c9a6:	9805      	ldr	r0, [sp, #20]
 800c9a8:	a903      	add	r1, sp, #12
 800c9aa:	f000 facb 	bl	800cf44 <acc_cal_algorithms_pll_ibias>
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	d08e      	beq.n	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800c9b2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c9b6:	4858      	ldr	r0, [pc, #352]	@ (800cb18 <acc_calibration_a121_calibrate+0x398>)
 800c9b8:	f004 fc10 	bl	80111dc <acc_diagnostic_log_scalar>
 800c9bc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800c9c0:	80bb      	strh	r3, [r7, #4]
 800c9c2:	4856      	ldr	r0, [pc, #344]	@ (800cb1c <acc_calibration_a121_calibrate+0x39c>)
 800c9c4:	f004 fbfa 	bl	80111bc <acc_diagnostic_log_set_scope>
 800c9c8:	483c      	ldr	r0, [pc, #240]	@ (800cabc <acc_calibration_a121_calibrate+0x33c>)
 800c9ca:	4629      	mov	r1, r5
 800c9cc:	f004 fc06 	bl	80111dc <acc_diagnostic_log_scalar>
 800c9d0:	493b      	ldr	r1, [pc, #236]	@ (800cac0 <acc_calibration_a121_calibrate+0x340>)
 800c9d2:	4853      	ldr	r0, [pc, #332]	@ (800cb20 <acc_calibration_a121_calibrate+0x3a0>)
 800c9d4:	f004 fbfa 	bl	80111cc <acc_diagnostic_log_array>
 800c9d8:	9808      	ldr	r0, [sp, #32]
 800c9da:	2130      	movs	r1, #48	@ 0x30
 800c9dc:	f004 fc06 	bl	80111ec <acc_diagnostic_log_data_u16>
 800c9e0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800c9e4:	484f      	ldr	r0, [pc, #316]	@ (800cb24 <acc_calibration_a121_calibrate+0x3a4>)
 800c9e6:	f004 fbf9 	bl	80111dc <acc_diagnostic_log_scalar>
 800c9ea:	9908      	ldr	r1, [sp, #32]
 800c9ec:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 800c9f0:	f10d 020e 	add.w	r2, sp, #14
 800c9f4:	f000 faf0 	bl	800cfd8 <acc_cal_algorithms_vfast2_ldo>
 800c9f8:	2800      	cmp	r0, #0
 800c9fa:	f43f af69 	beq.w	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800c9fe:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800ca02:	4849      	ldr	r0, [pc, #292]	@ (800cb28 <acc_calibration_a121_calibrate+0x3a8>)
 800ca04:	f004 fbea 	bl	80111dc <acc_diagnostic_log_scalar>
 800ca08:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800ca0c:	4847      	ldr	r0, [pc, #284]	@ (800cb2c <acc_calibration_a121_calibrate+0x3ac>)
 800ca0e:	817b      	strh	r3, [r7, #10]
 800ca10:	f004 fbd4 	bl	80111bc <acc_diagnostic_log_set_scope>
 800ca14:	2001      	movs	r0, #1
 800ca16:	ab02      	add	r3, sp, #8
 800ca18:	e9cd 3000 	strd	r3, r0, [sp]
 800ca1c:	4632      	mov	r2, r6
 800ca1e:	4641      	mov	r1, r8
 800ca20:	f44f 567e 	mov.w	r6, #16256	@ 0x3f80
 800ca24:	2300      	movs	r3, #0
 800ca26:	4628      	mov	r0, r5
 800ca28:	f8ad 6008 	strh.w	r6, [sp, #8]
 800ca2c:	f002 f9e4 	bl	800edf8 <acc_sensor_protocol_a121_load_lut>
 800ca30:	b920      	cbnz	r0, 800ca3c <acc_calibration_a121_calibrate+0x2bc>
 800ca32:	4b28      	ldr	r3, [pc, #160]	@ (800cad4 <acc_calibration_a121_calibrate+0x354>)
 800ca34:	4a3e      	ldr	r2, [pc, #248]	@ (800cb30 <acc_calibration_a121_calibrate+0x3b0>)
 800ca36:	691b      	ldr	r3, [r3, #16]
 800ca38:	4928      	ldr	r1, [pc, #160]	@ (800cadc <acc_calibration_a121_calibrate+0x35c>)
 800ca3a:	4798      	blx	r3
 800ca3c:	4628      	mov	r0, r5
 800ca3e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800ca42:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800ca46:	f001 f94b 	bl	800dce0 <acc_a121_cal_session_start_3_delay_cbank_program>
 800ca4a:	4605      	mov	r5, r0
 800ca4c:	2303      	movs	r3, #3
 800ca4e:	2d00      	cmp	r5, #0
 800ca50:	d190      	bne.n	800c974 <acc_calibration_a121_calibrate+0x1f4>
 800ca52:	e73d      	b.n	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800ca54:	2300      	movs	r3, #0
 800ca56:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ca5a:	f001 fab3 	bl	800dfc4 <acc_a121_cal_session_ack_program>
 800ca5e:	2800      	cmp	r0, #0
 800ca60:	f43f af36 	beq.w	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800ca64:	aa08      	add	r2, sp, #32
 800ca66:	4641      	mov	r1, r8
 800ca68:	4628      	mov	r0, r5
 800ca6a:	f001 faf5 	bl	800e058 <acc_a121_cal_session_get_3_delay_cbank_program_data>
 800ca6e:	4813      	ldr	r0, [pc, #76]	@ (800cabc <acc_calibration_a121_calibrate+0x33c>)
 800ca70:	4629      	mov	r1, r5
 800ca72:	f004 fbb3 	bl	80111dc <acc_diagnostic_log_scalar>
 800ca76:	4912      	ldr	r1, [pc, #72]	@ (800cac0 <acc_calibration_a121_calibrate+0x340>)
 800ca78:	482e      	ldr	r0, [pc, #184]	@ (800cb34 <acc_calibration_a121_calibrate+0x3b4>)
 800ca7a:	f004 fba7 	bl	80111cc <acc_diagnostic_log_array>
 800ca7e:	9808      	ldr	r0, [sp, #32]
 800ca80:	2120      	movs	r1, #32
 800ca82:	f004 fbbb 	bl	80111fc <acc_diagnostic_log_data_i16>
 800ca86:	9808      	ldr	r0, [sp, #32]
 800ca88:	a905      	add	r1, sp, #20
 800ca8a:	f000 faf1 	bl	800d070 <acc_cal_algorithms_delay_cbank>
 800ca8e:	2800      	cmp	r0, #0
 800ca90:	f43f af1e 	beq.w	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800ca94:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800ca98:	4827      	ldr	r0, [pc, #156]	@ (800cb38 <acc_calibration_a121_calibrate+0x3b8>)
 800ca9a:	f004 fb9f 	bl	80111dc <acc_diagnostic_log_scalar>
 800ca9e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800caa2:	80fb      	strh	r3, [r7, #6]
 800caa4:	4825      	ldr	r0, [pc, #148]	@ (800cb3c <acc_calibration_a121_calibrate+0x3bc>)
 800caa6:	f004 fb89 	bl	80111bc <acc_diagnostic_log_set_scope>
 800caaa:	4628      	mov	r0, r5
 800caac:	f001 f946 	bl	800dd3c <acc_a121_cal_session_start_4_bba_vga_program>
 800cab0:	4605      	mov	r5, r0
 800cab2:	2304      	movs	r3, #4
 800cab4:	2d00      	cmp	r5, #0
 800cab6:	f47f af5d 	bne.w	800c974 <acc_calibration_a121_calibrate+0x1f4>
 800caba:	e709      	b.n	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800cabc:	08015ef0 	.word	0x08015ef0
 800cac0:	08016634 	.word	0x08016634
 800cac4:	0801609c 	.word	0x0801609c
 800cac8:	2000002c 	.word	0x2000002c
 800cacc:	080160b4 	.word	0x080160b4
 800cad0:	080188f8 	.word	0x080188f8
 800cad4:	20000bd8 	.word	0x20000bd8
 800cad8:	080160cc 	.word	0x080160cc
 800cadc:	08016044 	.word	0x08016044
 800cae0:	0801636c 	.word	0x0801636c
 800cae4:	08017030 	.word	0x08017030
 800cae8:	08015efc 	.word	0x08015efc
 800caec:	08015f0c 	.word	0x08015f0c
 800caf0:	08015f18 	.word	0x08015f18
 800caf4:	08015f24 	.word	0x08015f24
 800caf8:	08015f34 	.word	0x08015f34
 800cafc:	08015f44 	.word	0x08015f44
 800cb00:	08015f50 	.word	0x08015f50
 800cb04:	08015f6c 	.word	0x08015f6c
 800cb08:	08015f78 	.word	0x08015f78
 800cb0c:	08015f80 	.word	0x08015f80
 800cb10:	08015f8c 	.word	0x08015f8c
 800cb14:	08015f98 	.word	0x08015f98
 800cb18:	08015fb8 	.word	0x08015fb8
 800cb1c:	08015fc4 	.word	0x08015fc4
 800cb20:	08015fdc 	.word	0x08015fdc
 800cb24:	08015ff0 	.word	0x08015ff0
 800cb28:	08015ffc 	.word	0x08015ffc
 800cb2c:	08016008 	.word	0x08016008
 800cb30:	08016020 	.word	0x08016020
 800cb34:	08016058 	.word	0x08016058
 800cb38:	0801607c 	.word	0x0801607c
 800cb3c:	08016088 	.word	0x08016088
 800cb40:	f001 fa40 	bl	800dfc4 <acc_a121_cal_session_ack_program>
 800cb44:	2800      	cmp	r0, #0
 800cb46:	f43f aec3 	beq.w	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800cb4a:	aa08      	add	r2, sp, #32
 800cb4c:	4641      	mov	r1, r8
 800cb4e:	4628      	mov	r0, r5
 800cb50:	f001 fa92 	bl	800e078 <acc_a121_cal_session_get_5_area_index_program_data>
 800cb54:	49bb      	ldr	r1, [pc, #748]	@ (800ce44 <acc_calibration_a121_calibrate+0x6c4>)
 800cb56:	48bc      	ldr	r0, [pc, #752]	@ (800ce48 <acc_calibration_a121_calibrate+0x6c8>)
 800cb58:	f004 fb38 	bl	80111cc <acc_diagnostic_log_array>
 800cb5c:	9808      	ldr	r0, [sp, #32]
 800cb5e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800cb62:	f004 fb4b 	bl	80111fc <acc_diagnostic_log_data_i16>
 800cb66:	9808      	ldr	r0, [sp, #32]
 800cb68:	a905      	add	r1, sp, #20
 800cb6a:	f000 fb7b 	bl	800d264 <acc_cal_algorithms_area_index>
 800cb6e:	2800      	cmp	r0, #0
 800cb70:	f43f aeae 	beq.w	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800cb74:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800cb78:	48b4      	ldr	r0, [pc, #720]	@ (800ce4c <acc_calibration_a121_calibrate+0x6cc>)
 800cb7a:	f004 fb2f 	bl	80111dc <acc_diagnostic_log_scalar>
 800cb7e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800cb82:	813b      	strh	r3, [r7, #8]
 800cb84:	48b2      	ldr	r0, [pc, #712]	@ (800ce50 <acc_calibration_a121_calibrate+0x6d0>)
 800cb86:	f004 fb19 	bl	80111bc <acc_diagnostic_log_set_scope>
 800cb8a:	8938      	ldrh	r0, [r7, #8]
 800cb8c:	aa08      	add	r2, sp, #32
 800cb8e:	2160      	movs	r1, #96	@ 0x60
 800cb90:	f004 fab4 	bl	80110fc <acc_dll_calculate_area_settings>
 800cb94:	4628      	mov	r0, r5
 800cb96:	a908      	add	r1, sp, #32
 800cb98:	f001 f924 	bl	800dde4 <acc_a121_cal_session_start_6_tx_freq_program>
 800cb9c:	4605      	mov	r5, r0
 800cb9e:	2306      	movs	r3, #6
 800cba0:	2d00      	cmp	r5, #0
 800cba2:	f47f aee7 	bne.w	800c974 <acc_calibration_a121_calibrate+0x1f4>
 800cba6:	e693      	b.n	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800cba8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cbac:	f8ad 3010 	strh.w	r3, [sp, #16]
 800cbb0:	f001 fa08 	bl	800dfc4 <acc_a121_cal_session_ack_program>
 800cbb4:	2800      	cmp	r0, #0
 800cbb6:	f43f ae8b 	beq.w	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800cbba:	f001 fabd 	bl	800e138 <acc_rss_integration_get_sensor_reference_frequency>
 800cbbe:	4ea5      	ldr	r6, [pc, #660]	@ (800ce54 <acc_calibration_a121_calibrate+0x6d4>)
 800cbc0:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800cbc4:	f8df 92ec 	ldr.w	r9, [pc, #748]	@ 800ceb4 <acc_calibration_a121_calibrate+0x734>
 800cbc8:	fba6 2600 	umull	r2, r6, r6, r0
 800cbcc:	4641      	mov	r1, r8
 800cbce:	aa05      	add	r2, sp, #20
 800cbd0:	4628      	mov	r0, r5
 800cbd2:	09b6      	lsrs	r6, r6, #6
 800cbd4:	fb06 f603 	mul.w	r6, r6, r3
 800cbd8:	f001 fa58 	bl	800e08c <acc_a121_cal_session_get_6_tx_freq_program_data>
 800cbdc:	4999      	ldr	r1, [pc, #612]	@ (800ce44 <acc_calibration_a121_calibrate+0x6c4>)
 800cbde:	489e      	ldr	r0, [pc, #632]	@ (800ce58 <acc_calibration_a121_calibrate+0x6d8>)
 800cbe0:	f004 faf4 	bl	80111cc <acc_diagnostic_log_array>
 800cbe4:	9805      	ldr	r0, [sp, #20]
 800cbe6:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800cbea:	f004 fb07 	bl	80111fc <acc_diagnostic_log_data_i16>
 800cbee:	ab04      	add	r3, sp, #16
 800cbf0:	4630      	mov	r0, r6
 800cbf2:	9300      	str	r3, [sp, #0]
 800cbf4:	4a99      	ldr	r2, [pc, #612]	@ (800ce5c <acc_calibration_a121_calibrate+0x6dc>)
 800cbf6:	9905      	ldr	r1, [sp, #20]
 800cbf8:	ab08      	add	r3, sp, #32
 800cbfa:	f000 fd27 	bl	800d64c <acc_cal_algorithms_tx_freq_ctrl>
 800cbfe:	46cb      	mov	fp, r9
 800cc00:	4682      	mov	sl, r0
 800cc02:	f10d 081c 	add.w	r8, sp, #28
 800cc06:	2630      	movs	r6, #48	@ 0x30
 800cc08:	f889 600c 	strb.w	r6, [r9, #12]
 800cc0c:	3601      	adds	r6, #1
 800cc0e:	f858 1f04 	ldr.w	r1, [r8, #4]!
 800cc12:	4658      	mov	r0, fp
 800cc14:	b2f6      	uxtb	r6, r6
 800cc16:	f004 fae1 	bl	80111dc <acc_diagnostic_log_scalar>
 800cc1a:	2e38      	cmp	r6, #56	@ 0x38
 800cc1c:	d1f4      	bne.n	800cc08 <acc_calibration_a121_calibrate+0x488>
 800cc1e:	f1ba 0f00 	cmp.w	sl, #0
 800cc22:	f43f ae55 	beq.w	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800cc26:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800cc2a:	488d      	ldr	r0, [pc, #564]	@ (800ce60 <acc_calibration_a121_calibrate+0x6e0>)
 800cc2c:	f004 fad6 	bl	80111dc <acc_diagnostic_log_scalar>
 800cc30:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800cc34:	488b      	ldr	r0, [pc, #556]	@ (800ce64 <acc_calibration_a121_calibrate+0x6e4>)
 800cc36:	847b      	strh	r3, [r7, #34]	@ 0x22
 800cc38:	f004 fac0 	bl	80111bc <acc_diagnostic_log_set_scope>
 800cc3c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800cc40:	4628      	mov	r0, r5
 800cc42:	f001 f95f 	bl	800df04 <acc_a121_cal_session_start_7_rx_freq_program>
 800cc46:	2800      	cmp	r0, #0
 800cc48:	f43f ae42 	beq.w	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800cc4c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800cc50:	9805      	ldr	r0, [sp, #20]
 800cc52:	2201      	movs	r2, #1
 800cc54:	2100      	movs	r1, #0
 800cc56:	f000 fbcd 	bl	800d3f4 <acc_cal_algorithms_iq_imbalance>
 800cc5a:	4605      	mov	r5, r0
 800cc5c:	2307      	movs	r3, #7
 800cc5e:	2d00      	cmp	r5, #0
 800cc60:	f47f ae88 	bne.w	800c974 <acc_calibration_a121_calibrate+0x1f4>
 800cc64:	e634      	b.n	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800cc66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cc6a:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cc6e:	f001 f9a9 	bl	800dfc4 <acc_a121_cal_session_ack_program>
 800cc72:	2800      	cmp	r0, #0
 800cc74:	f43f ae2c 	beq.w	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800cc78:	aa08      	add	r2, sp, #32
 800cc7a:	4641      	mov	r1, r8
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	f001 fa07 	bl	800e090 <acc_a121_cal_session_get_7_rx_freq_program_data>
 800cc82:	4970      	ldr	r1, [pc, #448]	@ (800ce44 <acc_calibration_a121_calibrate+0x6c4>)
 800cc84:	4878      	ldr	r0, [pc, #480]	@ (800ce68 <acc_calibration_a121_calibrate+0x6e8>)
 800cc86:	f004 faa1 	bl	80111cc <acc_diagnostic_log_array>
 800cc8a:	9808      	ldr	r0, [sp, #32]
 800cc8c:	2110      	movs	r1, #16
 800cc8e:	f004 fab5 	bl	80111fc <acc_diagnostic_log_data_i16>
 800cc92:	9808      	ldr	r0, [sp, #32]
 800cc94:	aa05      	add	r2, sp, #20
 800cc96:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800cc9a:	f000 fc55 	bl	800d548 <acc_cal_algorithms_rx_freq_ctrl>
 800cc9e:	2800      	cmp	r0, #0
 800cca0:	f43f ae16 	beq.w	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800cca4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800cca8:	4870      	ldr	r0, [pc, #448]	@ (800ce6c <acc_calibration_a121_calibrate+0x6ec>)
 800ccaa:	f004 fa97 	bl	80111dc <acc_diagnostic_log_scalar>
 800ccae:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800ccb2:	843b      	strh	r3, [r7, #32]
 800ccb4:	486e      	ldr	r0, [pc, #440]	@ (800ce70 <acc_calibration_a121_calibrate+0x6f0>)
 800ccb6:	f004 fa81 	bl	80111bc <acc_diagnostic_log_set_scope>
 800ccba:	4628      	mov	r0, r5
 800ccbc:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800ccc0:	f001 f93e 	bl	800df40 <acc_a121_cal_session_start_8_phase_enhancement_program>
 800ccc4:	4605      	mov	r5, r0
 800ccc6:	2308      	movs	r3, #8
 800ccc8:	2d00      	cmp	r5, #0
 800ccca:	f47f ae53 	bne.w	800c974 <acc_calibration_a121_calibrate+0x1f4>
 800ccce:	e5ff      	b.n	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800ccd0:	f001 f978 	bl	800dfc4 <acc_a121_cal_session_ack_program>
 800ccd4:	2800      	cmp	r0, #0
 800ccd6:	f43f adfb 	beq.w	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800ccda:	aa08      	add	r2, sp, #32
 800ccdc:	4641      	mov	r1, r8
 800ccde:	4628      	mov	r0, r5
 800cce0:	f001 f9de 	bl	800e0a0 <acc_a121_cal_session_get_8_phase_enhancement_program_data>
 800cce4:	4957      	ldr	r1, [pc, #348]	@ (800ce44 <acc_calibration_a121_calibrate+0x6c4>)
 800cce6:	4863      	ldr	r0, [pc, #396]	@ (800ce74 <acc_calibration_a121_calibrate+0x6f4>)
 800cce8:	f004 fa70 	bl	80111cc <acc_diagnostic_log_array>
 800ccec:	f107 0626 	add.w	r6, r7, #38	@ 0x26
 800ccf0:	9808      	ldr	r0, [sp, #32]
 800ccf2:	2160      	movs	r1, #96	@ 0x60
 800ccf4:	f004 fa82 	bl	80111fc <acc_diagnostic_log_data_i16>
 800ccf8:	9808      	ldr	r0, [sp, #32]
 800ccfa:	4631      	mov	r1, r6
 800ccfc:	f107 0256 	add.w	r2, r7, #86	@ 0x56
 800cd00:	f000 fd34 	bl	800d76c <acc_cal_algorithms_phase_enhancement>
 800cd04:	2800      	cmp	r0, #0
 800cd06:	f43f ade3 	beq.w	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800cd0a:	494e      	ldr	r1, [pc, #312]	@ (800ce44 <acc_calibration_a121_calibrate+0x6c4>)
 800cd0c:	485a      	ldr	r0, [pc, #360]	@ (800ce78 <acc_calibration_a121_calibrate+0x6f8>)
 800cd0e:	f004 fa5d 	bl	80111cc <acc_diagnostic_log_array>
 800cd12:	4630      	mov	r0, r6
 800cd14:	2118      	movs	r1, #24
 800cd16:	f004 fa71 	bl	80111fc <acc_diagnostic_log_data_i16>
 800cd1a:	f9b7 1056 	ldrsh.w	r1, [r7, #86]	@ 0x56
 800cd1e:	4857      	ldr	r0, [pc, #348]	@ (800ce7c <acc_calibration_a121_calibrate+0x6fc>)
 800cd20:	f004 fa5c 	bl	80111dc <acc_diagnostic_log_scalar>
 800cd24:	4856      	ldr	r0, [pc, #344]	@ (800ce80 <acc_calibration_a121_calibrate+0x700>)
 800cd26:	f004 fa49 	bl	80111bc <acc_diagnostic_log_set_scope>
 800cd2a:	4628      	mov	r0, r5
 800cd2c:	f001 f946 	bl	800dfbc <acc_a121_cal_session_start_9_pulseshaper_program>
 800cd30:	4605      	mov	r5, r0
 800cd32:	2309      	movs	r3, #9
 800cd34:	2d00      	cmp	r5, #0
 800cd36:	f47f ae1d 	bne.w	800c974 <acc_calibration_a121_calibrate+0x1f4>
 800cd3a:	e5c9      	b.n	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800cd3c:	f001 f942 	bl	800dfc4 <acc_a121_cal_session_ack_program>
 800cd40:	2800      	cmp	r0, #0
 800cd42:	f43f adc5 	beq.w	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800cd46:	aa08      	add	r2, sp, #32
 800cd48:	ab04      	add	r3, sp, #16
 800cd4a:	4641      	mov	r1, r8
 800cd4c:	4628      	mov	r0, r5
 800cd4e:	f001 f9af 	bl	800e0b0 <acc_a121_cal_session_get_9_pulseshaper_program_data>
 800cd52:	493c      	ldr	r1, [pc, #240]	@ (800ce44 <acc_calibration_a121_calibrate+0x6c4>)
 800cd54:	484b      	ldr	r0, [pc, #300]	@ (800ce84 <acc_calibration_a121_calibrate+0x704>)
 800cd56:	f004 fa39 	bl	80111cc <acc_diagnostic_log_array>
 800cd5a:	9808      	ldr	r0, [sp, #32]
 800cd5c:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800cd60:	f004 fa44 	bl	80111ec <acc_diagnostic_log_data_u16>
 800cd64:	9808      	ldr	r0, [sp, #32]
 800cd66:	a905      	add	r1, sp, #20
 800cd68:	f000 fe58 	bl	800da1c <acc_cal_algorithms_pulseshaper_wavelet>
 800cd6c:	2800      	cmp	r0, #0
 800cd6e:	f43f adaf 	beq.w	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800cd72:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 800cd76:	9b07      	ldr	r3, [sp, #28]
 800cd78:	667b      	str	r3, [r7, #100]	@ 0x64
 800cd7a:	e9c7 2117 	strd	r2, r1, [r7, #92]	@ 0x5c
 800cd7e:	4842      	ldr	r0, [pc, #264]	@ (800ce88 <acc_calibration_a121_calibrate+0x708>)
 800cd80:	f004 fa2c 	bl	80111dc <acc_diagnostic_log_scalar>
 800cd84:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800cd86:	4841      	ldr	r0, [pc, #260]	@ (800ce8c <acc_calibration_a121_calibrate+0x70c>)
 800cd88:	f004 fa28 	bl	80111dc <acc_diagnostic_log_scalar>
 800cd8c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800cd8e:	4840      	ldr	r0, [pc, #256]	@ (800ce90 <acc_calibration_a121_calibrate+0x710>)
 800cd90:	f004 fa24 	bl	80111dc <acc_diagnostic_log_scalar>
 800cd94:	483f      	ldr	r0, [pc, #252]	@ (800ce94 <acc_calibration_a121_calibrate+0x714>)
 800cd96:	f004 fa11 	bl	80111bc <acc_diagnostic_log_set_scope>
 800cd9a:	492a      	ldr	r1, [pc, #168]	@ (800ce44 <acc_calibration_a121_calibrate+0x6c4>)
 800cd9c:	483e      	ldr	r0, [pc, #248]	@ (800ce98 <acc_calibration_a121_calibrate+0x718>)
 800cd9e:	f004 fa15 	bl	80111cc <acc_diagnostic_log_array>
 800cda2:	9804      	ldr	r0, [sp, #16]
 800cda4:	f44f 7158 	mov.w	r1, #864	@ 0x360
 800cda8:	f004 fa20 	bl	80111ec <acc_diagnostic_log_data_u16>
 800cdac:	9804      	ldr	r0, [sp, #16]
 800cdae:	a908      	add	r1, sp, #32
 800cdb0:	f000 fe7c 	bl	800daac <acc_cal_algorithms_pulseshaper_supply>
 800cdb4:	4605      	mov	r5, r0
 800cdb6:	2800      	cmp	r0, #0
 800cdb8:	f43f ad8a 	beq.w	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800cdbc:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800cdc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdc2:	66b9      	str	r1, [r7, #104]	@ 0x68
 800cdc4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cdc6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cdc8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cdca:	673b      	str	r3, [r7, #112]	@ 0x70
 800cdcc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cdce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cdd0:	e9c7 121d 	strd	r1, r2, [r7, #116]	@ 0x74
 800cdd4:	4638      	mov	r0, r7
 800cdd6:	218c      	movs	r1, #140	@ 0x8c
 800cdd8:	f003 fda2 	bl	8010920 <acc_alg_basic_util_crc32>
 800cddc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cdde:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 800cde2:	482e      	ldr	r0, [pc, #184]	@ (800ce9c <acc_calibration_a121_calibrate+0x71c>)
 800cde4:	f004 f9fa 	bl	80111dc <acc_diagnostic_log_scalar>
 800cde8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800cdea:	482d      	ldr	r0, [pc, #180]	@ (800cea0 <acc_calibration_a121_calibrate+0x720>)
 800cdec:	f004 f9f6 	bl	80111dc <acc_diagnostic_log_scalar>
 800cdf0:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800cdf2:	482c      	ldr	r0, [pc, #176]	@ (800cea4 <acc_calibration_a121_calibrate+0x724>)
 800cdf4:	f004 f9f2 	bl	80111dc <acc_diagnostic_log_scalar>
 800cdf8:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800cdfa:	482b      	ldr	r0, [pc, #172]	@ (800cea8 <acc_calibration_a121_calibrate+0x728>)
 800cdfc:	f004 f9ee 	bl	80111dc <acc_diagnostic_log_scalar>
 800ce00:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ce02:	482a      	ldr	r0, [pc, #168]	@ (800ceac <acc_calibration_a121_calibrate+0x72c>)
 800ce04:	f004 f9ea 	bl	80111dc <acc_diagnostic_log_scalar>
 800ce08:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ce0a:	4829      	ldr	r0, [pc, #164]	@ (800ceb0 <acc_calibration_a121_calibrate+0x730>)
 800ce0c:	f004 f9e6 	bl	80111dc <acc_diagnostic_log_scalar>
 800ce10:	230a      	movs	r3, #10
 800ce12:	e522      	b.n	800c85a <acc_calibration_a121_calibrate+0xda>
 800ce14:	4653      	mov	r3, sl
 800ce16:	4628      	mov	r0, r5
 800ce18:	4632      	mov	r2, r6
 800ce1a:	4641      	mov	r1, r8
 800ce1c:	f000 feca 	bl	800dbb4 <acc_a121_cal_session_start_1_pll_cbank_temp_program>
 800ce20:	4605      	mov	r5, r0
 800ce22:	2301      	movs	r3, #1
 800ce24:	2d00      	cmp	r5, #0
 800ce26:	f47f ada5 	bne.w	800c974 <acc_calibration_a121_calibrate+0x1f4>
 800ce2a:	e551      	b.n	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800ce2c:	4628      	mov	r0, r5
 800ce2e:	88fa      	ldrh	r2, [r7, #6]
 800ce30:	f107 010c 	add.w	r1, r7, #12
 800ce34:	f000 ff86 	bl	800dd44 <acc_a121_cal_session_start_5_area_index_program>
 800ce38:	4605      	mov	r5, r0
 800ce3a:	2305      	movs	r3, #5
 800ce3c:	2d00      	cmp	r5, #0
 800ce3e:	f47f ad99 	bne.w	800c974 <acc_calibration_a121_calibrate+0x1f4>
 800ce42:	e545      	b.n	800c8d0 <acc_calibration_a121_calibrate+0x150>
 800ce44:	08016634 	.word	0x08016634
 800ce48:	080160f8 	.word	0x080160f8
 800ce4c:	0801611c 	.word	0x0801611c
 800ce50:	08016128 	.word	0x08016128
 800ce54:	10624dd3 	.word	0x10624dd3
 800ce58:	08016144 	.word	0x08016144
 800ce5c:	039b2820 	.word	0x039b2820
 800ce60:	08016168 	.word	0x08016168
 800ce64:	08016178 	.word	0x08016178
 800ce68:	08016194 	.word	0x08016194
 800ce6c:	080161b8 	.word	0x080161b8
 800ce70:	080161c8 	.word	0x080161c8
 800ce74:	080161e8 	.word	0x080161e8
 800ce78:	08016214 	.word	0x08016214
 800ce7c:	08016240 	.word	0x08016240
 800ce80:	0801625c 	.word	0x0801625c
 800ce84:	08016274 	.word	0x08016274
 800ce88:	08016288 	.word	0x08016288
 800ce8c:	0801629c 	.word	0x0801629c
 800ce90:	080162b0 	.word	0x080162b0
 800ce94:	080162c0 	.word	0x080162c0
 800ce98:	080162d8 	.word	0x080162d8
 800ce9c:	080162ec 	.word	0x080162ec
 800cea0:	08016300 	.word	0x08016300
 800cea4:	08016314 	.word	0x08016314
 800cea8:	08016328 	.word	0x08016328
 800ceac:	0801633c 	.word	0x0801633c
 800ceb0:	08016354 	.word	0x08016354
 800ceb4:	2000003c 	.word	0x2000003c

0800ceb8 <acc_calibration_a121_validate_calibration>:
 800ceb8:	b510      	push	{r4, lr}
 800ceba:	218c      	movs	r1, #140	@ 0x8c
 800cebc:	4604      	mov	r4, r0
 800cebe:	f003 fd2f 	bl	8010920 <acc_alg_basic_util_crc32>
 800cec2:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800cec6:	1a18      	subs	r0, r3, r0
 800cec8:	fab0 f080 	clz	r0, r0
 800cecc:	0940      	lsrs	r0, r0, #5
 800cece:	bd10      	pop	{r4, pc}

0800ced0 <acc_cal_algorithms_pll_cbank>:
 800ced0:	b4f0      	push	{r4, r5, r6, r7}
 800ced2:	2400      	movs	r4, #0
 800ced4:	46a4      	mov	ip, r4
 800ced6:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800ceda:	fa40 f504 	asr.w	r5, r0, r4
 800cede:	07ed      	lsls	r5, r5, #31
 800cee0:	b2a6      	uxth	r6, r4
 800cee2:	d50a      	bpl.n	800cefa <acc_cal_algorithms_pll_cbank+0x2a>
 800cee4:	f832 5014 	ldrh.w	r5, [r2, r4, lsl #1]
 800cee8:	1a6d      	subs	r5, r5, r1
 800ceea:	2d00      	cmp	r5, #0
 800ceec:	bfb8      	it	lt
 800ceee:	426d      	neglt	r5, r5
 800cef0:	b2ad      	uxth	r5, r5
 800cef2:	42bd      	cmp	r5, r7
 800cef4:	bf3c      	itt	cc
 800cef6:	462f      	movcc	r7, r5
 800cef8:	46b4      	movcc	ip, r6
 800cefa:	3401      	adds	r4, #1
 800cefc:	2c10      	cmp	r4, #16
 800cefe:	d1ec      	bne.n	800ceda <acc_cal_algorithms_pll_cbank+0xa>
 800cf00:	f10c 31ff 	add.w	r1, ip, #4294967295
 800cf04:	290d      	cmp	r1, #13
 800cf06:	d80c      	bhi.n	800cf22 <acc_cal_algorithms_pll_cbank+0x52>
 800cf08:	f10c 4100 	add.w	r1, ip, #2147483648	@ 0x80000000
 800cf0c:	3901      	subs	r1, #1
 800cf0e:	eb02 0541 	add.w	r5, r2, r1, lsl #1
 800cf12:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800cf16:	8869      	ldrh	r1, [r5, #2]
 800cf18:	f241 3487 	movw	r4, #4999	@ 0x1387
 800cf1c:	1a52      	subs	r2, r2, r1
 800cf1e:	42a2      	cmp	r2, r4
 800cf20:	dc02      	bgt.n	800cf28 <acc_cal_algorithms_pll_cbank+0x58>
 800cf22:	2000      	movs	r0, #0
 800cf24:	bcf0      	pop	{r4, r5, r6, r7}
 800cf26:	4770      	bx	lr
 800cf28:	88aa      	ldrh	r2, [r5, #4]
 800cf2a:	1a89      	subs	r1, r1, r2
 800cf2c:	42a1      	cmp	r1, r4
 800cf2e:	ddf8      	ble.n	800cf22 <acc_cal_algorithms_pll_cbank+0x52>
 800cf30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cf34:	4290      	cmp	r0, r2
 800cf36:	d0f4      	beq.n	800cf22 <acc_cal_algorithms_pll_cbank+0x52>
 800cf38:	2001      	movs	r0, #1
 800cf3a:	bcf0      	pop	{r4, r5, r6, r7}
 800cf3c:	f8a3 c000 	strh.w	ip, [r3]
 800cf40:	4770      	bx	lr
 800cf42:	bf00      	nop

0800cf44 <acc_cal_algorithms_pll_ibias>:
 800cf44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf48:	2400      	movs	r4, #0
 800cf4a:	f1a0 0c02 	sub.w	ip, r0, #2
 800cf4e:	4625      	mov	r5, r4
 800cf50:	4627      	mov	r7, r4
 800cf52:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 800cf56:	e01b      	b.n	800cf90 <acc_cal_algorithms_pll_ibias+0x4c>
 800cf58:	f930 8014 	ldrsh.w	r8, [r0, r4, lsl #1]
 800cf5c:	f93c a014 	ldrsh.w	sl, [ip, r4, lsl #1]
 800cf60:	f508 727a 	add.w	r2, r8, #1000	@ 0x3e8
 800cf64:	eba8 080a 	sub.w	r8, r8, sl
 800cf68:	4598      	cmp	r8, r3
 800cf6a:	db30      	blt.n	800cfce <acc_cal_algorithms_pll_ibias+0x8a>
 800cf6c:	45c8      	cmp	r8, r9
 800cf6e:	dc2e      	bgt.n	800cfce <acc_cal_algorithms_pll_ibias+0x8a>
 800cf70:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800cf74:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 800cf78:	b29b      	uxth	r3, r3
 800cf7a:	42b3      	cmp	r3, r6
 800cf7c:	d204      	bcs.n	800cf88 <acc_cal_algorithms_pll_ibias+0x44>
 800cf7e:	ea4f 058e 	mov.w	r5, lr, lsl #2
 800cf82:	461e      	mov	r6, r3
 800cf84:	b2ad      	uxth	r5, r5
 800cf86:	2701      	movs	r7, #1
 800cf88:	f1be 0f0f 	cmp.w	lr, #15
 800cf8c:	d018      	beq.n	800cfc0 <acc_cal_algorithms_pll_ibias+0x7c>
 800cf8e:	3401      	adds	r4, #1
 800cf90:	1e63      	subs	r3, r4, #1
 800cf92:	fb03 f303 	mul.w	r3, r3, r3
 800cf96:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800cf9a:	005a      	lsls	r2, r3, #1
 800cf9c:	f502 7916 	add.w	r9, r2, #600	@ 0x258
 800cfa0:	3bc8      	subs	r3, #200	@ 0xc8
 800cfa2:	fa1f fe84 	uxth.w	lr, r4
 800cfa6:	2c00      	cmp	r4, #0
 800cfa8:	d1d6      	bne.n	800cf58 <acc_cal_algorithms_pll_ibias+0x14>
 800cfaa:	f9b0 3000 	ldrsh.w	r3, [r0]
 800cfae:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	bfb8      	it	lt
 800cfb6:	425b      	neglt	r3, r3
 800cfb8:	b29b      	uxth	r3, r3
 800cfba:	42b3      	cmp	r3, r6
 800cfbc:	d3df      	bcc.n	800cf7e <acc_cal_algorithms_pll_ibias+0x3a>
 800cfbe:	e7e6      	b.n	800cf8e <acc_cal_algorithms_pll_ibias+0x4a>
 800cfc0:	b117      	cbz	r7, 800cfc8 <acc_cal_algorithms_pll_ibias+0x84>
 800cfc2:	f085 0530 	eor.w	r5, r5, #48	@ 0x30
 800cfc6:	800d      	strh	r5, [r1, #0]
 800cfc8:	4638      	mov	r0, r7
 800cfca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfce:	2700      	movs	r7, #0
 800cfd0:	4638      	mov	r0, r7
 800cfd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfd6:	bf00      	nop

0800cfd8 <acc_cal_algorithms_vfast2_ldo>:
 800cfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfdc:	f8b1 305e 	ldrh.w	r3, [r1, #94]	@ 0x5e
 800cfe0:	880c      	ldrh	r4, [r1, #0]
 800cfe2:	b083      	sub	sp, #12
 800cfe4:	1b1b      	subs	r3, r3, r4
 800cfe6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800cfea:	9201      	str	r2, [sp, #4]
 800cfec:	db3a      	blt.n	800d064 <acc_cal_algorithms_vfast2_ldo+0x8c>
 800cfee:	4a1f      	ldr	r2, [pc, #124]	@ (800d06c <acc_cal_algorithms_vfast2_ldo+0x94>)
 800cff0:	ea4f 4803 	mov.w	r8, r3, lsl #16
 800cff4:	fba2 3808 	umull	r3, r8, r2, r8
 800cff8:	2500      	movs	r5, #0
 800cffa:	4681      	mov	r9, r0
 800cffc:	460e      	mov	r6, r1
 800cffe:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800d002:	46ab      	mov	fp, r5
 800d004:	46a2      	mov	sl, r4
 800d006:	2210      	movs	r2, #16
 800d008:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 800d00c:	2001      	movs	r0, #1
 800d00e:	e009      	b.n	800d024 <acc_cal_algorithms_vfast2_ldo+0x4c>
 800d010:	3201      	adds	r2, #1
 800d012:	b292      	uxth	r2, r2
 800d014:	458e      	cmp	lr, r1
 800d016:	bf38      	it	cc
 800d018:	2000      	movcc	r0, #0
 800d01a:	2a40      	cmp	r2, #64	@ 0x40
 800d01c:	4445      	add	r5, r8
 800d01e:	d01a      	beq.n	800d056 <acc_cal_algorithms_vfast2_ldo+0x7e>
 800d020:	f836 4f02 	ldrh.w	r4, [r6, #2]!
 800d024:	eba4 0309 	sub.w	r3, r4, r9
 800d028:	2b00      	cmp	r3, #0
 800d02a:	bfb8      	it	lt
 800d02c:	425b      	neglt	r3, r3
 800d02e:	b29b      	uxth	r3, r3
 800d030:	eb0a 4115 	add.w	r1, sl, r5, lsr #16
 800d034:	4563      	cmp	r3, ip
 800d036:	f501 7748 	add.w	r7, r1, #800	@ 0x320
 800d03a:	bf3c      	itt	cc
 800d03c:	469c      	movcc	ip, r3
 800d03e:	4693      	movcc	fp, r2
 800d040:	42bc      	cmp	r4, r7
 800d042:	f504 7e48 	add.w	lr, r4, #800	@ 0x320
 800d046:	d9e3      	bls.n	800d010 <acc_cal_algorithms_vfast2_ldo+0x38>
 800d048:	3201      	adds	r2, #1
 800d04a:	b292      	uxth	r2, r2
 800d04c:	2a40      	cmp	r2, #64	@ 0x40
 800d04e:	f04f 0000 	mov.w	r0, #0
 800d052:	4445      	add	r5, r8
 800d054:	d1e4      	bne.n	800d020 <acc_cal_algorithms_vfast2_ldo+0x48>
 800d056:	b130      	cbz	r0, 800d066 <acc_cal_algorithms_vfast2_ldo+0x8e>
 800d058:	9b01      	ldr	r3, [sp, #4]
 800d05a:	f8a3 b000 	strh.w	fp, [r3]
 800d05e:	b003      	add	sp, #12
 800d060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d064:	2000      	movs	r0, #0
 800d066:	b003      	add	sp, #12
 800d068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d06c:	aaaaaaab 	.word	0xaaaaaaab

0800d070 <acc_cal_algorithms_delay_cbank>:
 800d070:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d072:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d076:	460e      	mov	r6, r1
 800d078:	b0b1      	sub	sp, #196	@ 0xc4
 800d07a:	4611      	mov	r1, r2
 800d07c:	4605      	mov	r5, r0
 800d07e:	2401      	movs	r4, #1
 800d080:	2700      	movs	r7, #0
 800d082:	e008      	b.n	800d096 <acc_cal_algorithms_delay_cbank+0x26>
 800d084:	428a      	cmp	r2, r1
 800d086:	bfa8      	it	ge
 800d088:	4627      	movge	r7, r4
 800d08a:	f104 0401 	add.w	r4, r4, #1
 800d08e:	bfa8      	it	ge
 800d090:	4611      	movge	r1, r2
 800d092:	2c20      	cmp	r4, #32
 800d094:	d00c      	beq.n	800d0b0 <acc_cal_algorithms_delay_cbank+0x40>
 800d096:	4613      	mov	r3, r2
 800d098:	f935 2f02 	ldrsh.w	r2, [r5, #2]!
 800d09c:	f5c3 7348 	rsb	r3, r3, #800	@ 0x320
 800d0a0:	4413      	add	r3, r2
 800d0a2:	b29b      	uxth	r3, r3
 800d0a4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d0a8:	d9ec      	bls.n	800d084 <acc_cal_algorithms_delay_cbank+0x14>
 800d0aa:	2000      	movs	r0, #0
 800d0ac:	b031      	add	sp, #196	@ 0xc4
 800d0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0b0:	2f07      	cmp	r7, #7
 800d0b2:	d85f      	bhi.n	800d174 <acc_cal_algorithms_delay_cbank+0x104>
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	f107 0208 	add.w	r2, r7, #8
 800d0ba:	1ad2      	subs	r2, r2, r3
 800d0bc:	af03      	add	r7, sp, #12
 800d0be:	b30a      	cbz	r2, 800d104 <acc_cal_algorithms_delay_cbank+0x94>
 800d0c0:	18d5      	adds	r5, r2, r3
 800d0c2:	4639      	mov	r1, r7
 800d0c4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800d0c8:	eb00 0443 	add.w	r4, r0, r3, lsl #1
 800d0cc:	f934 0b02 	ldrsh.w	r0, [r4], #2
 800d0d0:	ee07 0a10 	vmov	s14, r0
 800d0d4:	fb03 f003 	mul.w	r0, r3, r3
 800d0d8:	ee06 3a90 	vmov	s13, r3
 800d0dc:	ee07 0a90 	vmov	s15, r0
 800d0e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d0e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0e8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800d0ec:	42a5      	cmp	r5, r4
 800d0ee:	ed81 7a00 	vstr	s14, [r1]
 800d0f2:	edc1 7a01 	vstr	s15, [r1, #4]
 800d0f6:	edc1 6a02 	vstr	s13, [r1, #8]
 800d0fa:	f103 0301 	add.w	r3, r3, #1
 800d0fe:	f101 010c 	add.w	r1, r1, #12
 800d102:	d1e3      	bne.n	800d0cc <acc_cal_algorithms_delay_cbank+0x5c>
 800d104:	4638      	mov	r0, r7
 800d106:	4669      	mov	r1, sp
 800d108:	f003 fc26 	bl	8010958 <acc_alg_least_square_fit>
 800d10c:	2800      	cmp	r0, #0
 800d10e:	d0cc      	beq.n	800d0aa <acc_cal_algorithms_delay_cbank+0x3a>
 800d110:	ed9d 6a00 	vldr	s12, [sp]
 800d114:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800d118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d11c:	d0c5      	beq.n	800d0aa <acc_cal_algorithms_delay_cbank+0x3a>
 800d11e:	eddd 6a01 	vldr	s13, [sp, #4]
 800d122:	eef5 6a40 	vcmp.f32	s13, #0.0
 800d126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d12a:	d0be      	beq.n	800d0aa <acc_cal_algorithms_delay_cbank+0x3a>
 800d12c:	eddd 7a02 	vldr	s15, [sp, #8]
 800d130:	eef1 7a67 	vneg.f32	s15, s15
 800d134:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d138:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800d13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d140:	dbb3      	blt.n	800d0aa <acc_cal_algorithms_delay_cbank+0x3a>
 800d142:	eef1 6a66 	vneg.f32	s13, s13
 800d146:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800d14a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d14e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d152:	d5aa      	bpl.n	800d0aa <acc_cal_algorithms_delay_cbank+0x3a>
 800d154:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d15c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d160:	ee17 3a90 	vmov	r3, s15
 800d164:	b29b      	uxth	r3, r3
 800d166:	2b3f      	cmp	r3, #63	@ 0x3f
 800d168:	d89f      	bhi.n	800d0aa <acc_cal_algorithms_delay_cbank+0x3a>
 800d16a:	085b      	lsrs	r3, r3, #1
 800d16c:	f083 0310 	eor.w	r3, r3, #16
 800d170:	8033      	strh	r3, [r6, #0]
 800d172:	e79b      	b.n	800d0ac <acc_cal_algorithms_delay_cbank+0x3c>
 800d174:	1ffb      	subs	r3, r7, #7
 800d176:	2f17      	cmp	r7, #23
 800d178:	bf88      	it	hi
 800d17a:	f1c3 0220 	rsbhi	r2, r3, #32
 800d17e:	d89d      	bhi.n	800d0bc <acc_cal_algorithms_delay_cbank+0x4c>
 800d180:	e799      	b.n	800d0b6 <acc_cal_algorithms_delay_cbank+0x46>
 800d182:	bf00      	nop

0800d184 <acc_cal_algorithms_bba_cal_ctrl>:
 800d184:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 800d260 <acc_cal_algorithms_bba_cal_ctrl+0xdc>
 800d188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d18c:	f04f 0e00 	mov.w	lr, #0
 800d190:	f647 77ff 	movw	r7, #32767	@ 0x7fff
 800d194:	f9b0 4000 	ldrsh.w	r4, [r0]
 800d198:	4665      	mov	r5, ip
 800d19a:	46f0      	mov	r8, lr
 800d19c:	463e      	mov	r6, r7
 800d19e:	f06f 021b 	mvn.w	r2, #27
 800d1a2:	e014      	b.n	800d1ce <acc_cal_algorithms_bba_cal_ctrl+0x4a>
 800d1a4:	42a7      	cmp	r7, r4
 800d1a6:	bfc4      	itt	gt
 800d1a8:	4627      	movgt	r7, r4
 800d1aa:	4696      	movgt	lr, r2
 800d1ac:	2a1c      	cmp	r2, #28
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	d016      	beq.n	800d1e0 <acc_cal_algorithms_bba_cal_ctrl+0x5c>
 800d1b2:	881b      	ldrh	r3, [r3, #0]
 800d1b4:	f930 4f02 	ldrsh.w	r4, [r0, #2]!
 800d1b8:	1ae3      	subs	r3, r4, r3
 800d1ba:	b21b      	sxth	r3, r3
 800d1bc:	429e      	cmp	r6, r3
 800d1be:	f102 0208 	add.w	r2, r2, #8
 800d1c2:	bfa8      	it	ge
 800d1c4:	461e      	movge	r6, r3
 800d1c6:	429d      	cmp	r5, r3
 800d1c8:	b212      	sxth	r2, r2
 800d1ca:	bfb8      	it	lt
 800d1cc:	461d      	movlt	r5, r3
 800d1ce:	2c00      	cmp	r4, #0
 800d1d0:	dae8      	bge.n	800d1a4 <acc_cal_algorithms_bba_cal_ctrl+0x20>
 800d1d2:	45a4      	cmp	ip, r4
 800d1d4:	daea      	bge.n	800d1ac <acc_cal_algorithms_bba_cal_ctrl+0x28>
 800d1d6:	2a1c      	cmp	r2, #28
 800d1d8:	46a4      	mov	ip, r4
 800d1da:	4690      	mov	r8, r2
 800d1dc:	4603      	mov	r3, r0
 800d1de:	d1e8      	bne.n	800d1b2 <acc_cal_algorithms_bba_cal_ctrl+0x2e>
 800d1e0:	f5a5 551c 	sub.w	r5, r5, #9984	@ 0x2700
 800d1e4:	3d10      	subs	r5, #16
 800d1e6:	b2ad      	uxth	r5, r5
 800d1e8:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800d1ec:	429d      	cmp	r5, r3
 800d1ee:	d800      	bhi.n	800d1f2 <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 800d1f0:	b116      	cbz	r6, 800d1f8 <acc_cal_algorithms_bba_cal_ctrl+0x74>
 800d1f2:	2000      	movs	r0, #0
 800d1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1f8:	f51c 4f00 	cmn.w	ip, #32768	@ 0x8000
 800d1fc:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800d200:	d011      	beq.n	800d226 <acc_cal_algorithms_bba_cal_ctrl+0xa2>
 800d202:	429f      	cmp	r7, r3
 800d204:	d029      	beq.n	800d25a <acc_cal_algorithms_bba_cal_ctrl+0xd6>
 800d206:	ebae 0e08 	sub.w	lr, lr, r8
 800d20a:	f1be 0f08 	cmp.w	lr, #8
 800d20e:	d1f0      	bne.n	800d1f2 <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 800d210:	eba7 070c 	sub.w	r7, r7, ip
 800d214:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800d218:	fb9c f7f7 	sdiv	r7, ip, r7
 800d21c:	eba8 0e07 	sub.w	lr, r8, r7
 800d220:	fa0f fe8e 	sxth.w	lr, lr
 800d224:	e001      	b.n	800d22a <acc_cal_algorithms_bba_cal_ctrl+0xa6>
 800d226:	429f      	cmp	r7, r3
 800d228:	d0e3      	beq.n	800d1f2 <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 800d22a:	f1be 0f00 	cmp.w	lr, #0
 800d22e:	db07      	blt.n	800d240 <acc_cal_algorithms_bba_cal_ctrl+0xbc>
 800d230:	f1be 0f1f 	cmp.w	lr, #31
 800d234:	dcdd      	bgt.n	800d1f2 <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 800d236:	f8a1 e000 	strh.w	lr, [r1]
 800d23a:	2001      	movs	r0, #1
 800d23c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d240:	f1ce 0e00 	rsb	lr, lr, #0
 800d244:	fa1f fe8e 	uxth.w	lr, lr
 800d248:	f1be 0f1f 	cmp.w	lr, #31
 800d24c:	d8d1      	bhi.n	800d1f2 <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 800d24e:	f04e 0e20 	orr.w	lr, lr, #32
 800d252:	f8a1 e000 	strh.w	lr, [r1]
 800d256:	2001      	movs	r0, #1
 800d258:	e7cc      	b.n	800d1f4 <acc_cal_algorithms_bba_cal_ctrl+0x70>
 800d25a:	46c6      	mov	lr, r8
 800d25c:	e7e5      	b.n	800d22a <acc_cal_algorithms_bba_cal_ctrl+0xa6>
 800d25e:	bf00      	nop
 800d260:	ffff8000 	.word	0xffff8000

0800d264 <acc_cal_algorithms_area_index>:
 800d264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d268:	f5ad 7d7f 	sub.w	sp, sp, #1020	@ 0x3fc
 800d26c:	ab05      	add	r3, sp, #20
 800d26e:	f500 62c0 	add.w	r2, r0, #1536	@ 0x600
 800d272:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800d276:	9304      	str	r3, [sp, #16]
 800d278:	4c5c      	ldr	r4, [pc, #368]	@ (800d3ec <acc_cal_algorithms_area_index+0x188>)
 800d27a:	4d5d      	ldr	r5, [pc, #372]	@ (800d3f0 <acc_cal_algorithms_area_index+0x18c>)
 800d27c:	9105      	str	r1, [sp, #20]
 800d27e:	2300      	movs	r3, #0
 800d280:	4681      	mov	r9, r0
 800d282:	9301      	str	r3, [sp, #4]
 800d284:	f10d 0898 	add.w	r8, sp, #152	@ 0x98
 800d288:	af3d      	add	r7, sp, #244	@ 0xf4
 800d28a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800d28e:	464e      	mov	r6, r9
 800d290:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 800d294:	f936 0b04 	ldrsh.w	r0, [r6], #4
 800d298:	f003 fad2 	bl	8010840 <acc_alg_atan2_q16>
 800d29c:	f84a 0b04 	str.w	r0, [sl], #4
 800d2a0:	45c2      	cmp	sl, r8
 800d2a2:	d1f5      	bne.n	800d290 <acc_cal_algorithms_area_index+0x2c>
 800d2a4:	f10d 0b94 	add.w	fp, sp, #148	@ 0x94
 800d2a8:	46da      	mov	sl, fp
 800d2aa:	464e      	mov	r6, r9
 800d2ac:	f9b6 1062 	ldrsh.w	r1, [r6, #98]	@ 0x62
 800d2b0:	f9b6 0060 	ldrsh.w	r0, [r6, #96]	@ 0x60
 800d2b4:	f003 fac4 	bl	8010840 <acc_alg_atan2_q16>
 800d2b8:	f84a 0f04 	str.w	r0, [sl, #4]!
 800d2bc:	4557      	cmp	r7, sl
 800d2be:	f106 0604 	add.w	r6, r6, #4
 800d2c2:	d1f3      	bne.n	800d2ac <acc_cal_algorithms_area_index+0x48>
 800d2c4:	9a01      	ldr	r2, [sp, #4]
 800d2c6:	ab3e      	add	r3, sp, #248	@ 0xf8
 800d2c8:	ae0d      	add	r6, sp, #52	@ 0x34
 800d2ca:	1898      	adds	r0, r3, r2
 800d2cc:	2100      	movs	r1, #0
 800d2ce:	f85b 3f04 	ldr.w	r3, [fp, #4]!
 800d2d2:	f856 2f04 	ldr.w	r2, [r6, #4]!
 800d2d6:	1a9b      	subs	r3, r3, r2
 800d2d8:	42a3      	cmp	r3, r4
 800d2da:	dd61      	ble.n	800d3a0 <acc_cal_algorithms_area_index+0x13c>
 800d2dc:	f5a3 23c9 	sub.w	r3, r3, #411648	@ 0x64800
 800d2e0:	3b7e      	subs	r3, #126	@ 0x7e
 800d2e2:	42a3      	cmp	r3, r4
 800d2e4:	dcfa      	bgt.n	800d2dc <acc_cal_algorithms_area_index+0x78>
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	bfb8      	it	lt
 800d2ea:	425b      	neglt	r3, r3
 800d2ec:	4299      	cmp	r1, r3
 800d2ee:	bfb8      	it	lt
 800d2f0:	4619      	movlt	r1, r3
 800d2f2:	45bb      	cmp	fp, r7
 800d2f4:	f840 3b04 	str.w	r3, [r0], #4
 800d2f8:	d1e9      	bne.n	800d2ce <acc_cal_algorithms_area_index+0x6a>
 800d2fa:	9b02      	ldr	r3, [sp, #8]
 800d2fc:	1049      	asrs	r1, r1, #1
 800d2fe:	f843 1f04 	str.w	r1, [r3, #4]!
 800d302:	9302      	str	r3, [sp, #8]
 800d304:	9b01      	ldr	r3, [sp, #4]
 800d306:	3360      	adds	r3, #96	@ 0x60
 800d308:	9301      	str	r3, [sp, #4]
 800d30a:	9b03      	ldr	r3, [sp, #12]
 800d30c:	f109 09c0 	add.w	r9, r9, #192	@ 0xc0
 800d310:	4599      	cmp	r9, r3
 800d312:	d1ba      	bne.n	800d28a <acc_cal_algorithms_area_index+0x26>
 800d314:	2300      	movs	r3, #0
 800d316:	9c04      	ldr	r4, [sp, #16]
 800d318:	4618      	mov	r0, r3
 800d31a:	4619      	mov	r1, r3
 800d31c:	f854 2f04 	ldr.w	r2, [r4, #4]!
 800d320:	428a      	cmp	r2, r1
 800d322:	bfc8      	it	gt
 800d324:	4618      	movgt	r0, r3
 800d326:	f103 0301 	add.w	r3, r3, #1
 800d32a:	bfc8      	it	gt
 800d32c:	4611      	movgt	r1, r2
 800d32e:	2b08      	cmp	r3, #8
 800d330:	d1f4      	bne.n	800d31c <acc_cal_algorithms_area_index+0xb8>
 800d332:	ab06      	add	r3, sp, #24
 800d334:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800d338:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800d33c:	ab3e      	add	r3, sp, #248	@ 0xf8
 800d33e:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 800d342:	f10d 0297 	add.w	r2, sp, #151	@ 0x97
 800d346:	f10d 00af 	add.w	r0, sp, #175	@ 0xaf
 800d34a:	f851 3b04 	ldr.w	r3, [r1], #4
 800d34e:	42a3      	cmp	r3, r4
 800d350:	bfac      	ite	ge
 800d352:	2300      	movge	r3, #0
 800d354:	2301      	movlt	r3, #1
 800d356:	f802 3f01 	strb.w	r3, [r2, #1]!
 800d35a:	4290      	cmp	r0, r2
 800d35c:	7613      	strb	r3, [r2, #24]
 800d35e:	d1f4      	bne.n	800d34a <acc_cal_algorithms_area_index+0xe6>
 800d360:	2200      	movs	r2, #0
 800d362:	4611      	mov	r1, r2
 800d364:	2301      	movs	r3, #1
 800d366:	b321      	cbz	r1, 800d3b2 <acc_cal_algorithms_area_index+0x14e>
 800d368:	f818 0003 	ldrb.w	r0, [r8, r3]
 800d36c:	b1d8      	cbz	r0, 800d3a6 <acc_cal_algorithms_area_index+0x142>
 800d36e:	3201      	adds	r2, #1
 800d370:	3301      	adds	r3, #1
 800d372:	2b30      	cmp	r3, #48	@ 0x30
 800d374:	d1f7      	bne.n	800d366 <acc_cal_algorithms_area_index+0x102>
 800d376:	f1a2 030c 	sub.w	r3, r2, #12
 800d37a:	2b08      	cmp	r3, #8
 800d37c:	d82e      	bhi.n	800d3dc <acc_cal_algorithms_area_index+0x178>
 800d37e:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 800d382:	2a17      	cmp	r2, #23
 800d384:	d902      	bls.n	800d38c <acc_cal_algorithms_area_index+0x128>
 800d386:	3a18      	subs	r2, #24
 800d388:	2a17      	cmp	r2, #23
 800d38a:	d8fc      	bhi.n	800d386 <acc_cal_algorithms_area_index+0x122>
 800d38c:	9b05      	ldr	r3, [sp, #20]
 800d38e:	2001      	movs	r0, #1
 800d390:	801a      	strh	r2, [r3, #0]
 800d392:	f50d 7d7f 	add.w	sp, sp, #1020	@ 0x3fc
 800d396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d39a:	f503 23c9 	add.w	r3, r3, #411648	@ 0x64800
 800d39e:	337e      	adds	r3, #126	@ 0x7e
 800d3a0:	42ab      	cmp	r3, r5
 800d3a2:	dbfa      	blt.n	800d39a <acc_cal_algorithms_area_index+0x136>
 800d3a4:	e79f      	b.n	800d2e6 <acc_cal_algorithms_area_index+0x82>
 800d3a6:	2a0b      	cmp	r2, #11
 800d3a8:	d8e5      	bhi.n	800d376 <acc_cal_algorithms_area_index+0x112>
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	2b30      	cmp	r3, #48	@ 0x30
 800d3ae:	d0f0      	beq.n	800d392 <acc_cal_algorithms_area_index+0x12e>
 800d3b0:	4602      	mov	r2, r0
 800d3b2:	1e58      	subs	r0, r3, #1
 800d3b4:	4440      	add	r0, r8
 800d3b6:	1c59      	adds	r1, r3, #1
 800d3b8:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800d3bc:	1e4b      	subs	r3, r1, #1
 800d3be:	b12c      	cbz	r4, 800d3cc <acc_cal_algorithms_area_index+0x168>
 800d3c0:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 800d3c4:	b914      	cbnz	r4, 800d3cc <acc_cal_algorithms_area_index+0x168>
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	e7d1      	b.n	800d370 <acc_cal_algorithms_area_index+0x10c>
 800d3cc:	2930      	cmp	r1, #48	@ 0x30
 800d3ce:	d001      	beq.n	800d3d4 <acc_cal_algorithms_area_index+0x170>
 800d3d0:	3101      	adds	r1, #1
 800d3d2:	e7f1      	b.n	800d3b8 <acc_cal_algorithms_area_index+0x154>
 800d3d4:	f1a2 030c 	sub.w	r3, r2, #12
 800d3d8:	2b08      	cmp	r3, #8
 800d3da:	d904      	bls.n	800d3e6 <acc_cal_algorithms_area_index+0x182>
 800d3dc:	2000      	movs	r0, #0
 800d3de:	f50d 7d7f 	add.w	sp, sp, #1020	@ 0x3fc
 800d3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3e6:	0852      	lsrs	r2, r2, #1
 800d3e8:	e7d0      	b.n	800d38c <acc_cal_algorithms_area_index+0x128>
 800d3ea:	bf00      	nop
 800d3ec:	0003243f 	.word	0x0003243f
 800d3f0:	fffcdbc1 	.word	0xfffcdbc1

0800d3f4 <acc_cal_algorithms_iq_imbalance>:
 800d3f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d3f8:	ed2d 8b02 	vpush	{d8}
 800d3fc:	eddf 5a51 	vldr	s11, [pc, #324]	@ 800d544 <acc_cal_algorithms_iq_imbalance+0x150>
 800d400:	b0bd      	sub	sp, #244	@ 0xf4
 800d402:	4680      	mov	r8, r0
 800d404:	4689      	mov	r9, r1
 800d406:	f500 6cd8 	add.w	ip, r0, #1728	@ 0x6c0
 800d40a:	f100 01c0 	add.w	r1, r0, #192	@ 0xc0
 800d40e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800d412:	a804      	add	r0, sp, #16
 800d414:	f1a1 04c0 	sub.w	r4, r1, #192	@ 0xc0
 800d418:	2700      	movs	r7, #0
 800d41a:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 800d41e:	f9b4 5000 	ldrsh.w	r5, [r4]
 800d422:	fb06 f606 	mul.w	r6, r6, r6
 800d426:	3404      	adds	r4, #4
 800d428:	fb05 6505 	mla	r5, r5, r5, r6
 800d42c:	42a1      	cmp	r1, r4
 800d42e:	442f      	add	r7, r5
 800d430:	d1f3      	bne.n	800d41a <acc_cal_algorithms_iq_imbalance+0x26>
 800d432:	ee07 7a90 	vmov	s15, r7
 800d436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d43a:	31c0      	adds	r1, #192	@ 0xc0
 800d43c:	eec7 6aa5 	vdiv.f32	s13, s15, s11
 800d440:	458c      	cmp	ip, r1
 800d442:	eeb1 7ae6 	vsqrt.f32	s14, s13
 800d446:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800d44a:	ece0 7a01 	vstmia	r0!, {s15}
 800d44e:	d1e1      	bne.n	800d414 <acc_cal_algorithms_iq_imbalance+0x20>
 800d450:	2a00      	cmp	r2, #0
 800d452:	d070      	beq.n	800d536 <acc_cal_algorithms_iq_imbalance+0x142>
 800d454:	461c      	mov	r4, r3
 800d456:	eb02 0509 	add.w	r5, r2, r9
 800d45a:	ae24      	add	r6, sp, #144	@ 0x90
 800d45c:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 800d460:	eeb1 8a00 	vmov.f32	s16, #16	@ 0x40800000  4.0
 800d464:	eb08 0289 	add.w	r2, r8, r9, lsl #2
 800d468:	ab0c      	add	r3, sp, #48	@ 0x30
 800d46a:	a904      	add	r1, sp, #16
 800d46c:	f9b2 0000 	ldrsh.w	r0, [r2]
 800d470:	ecf1 5a01 	vldmia	r1!, {s11}
 800d474:	ee06 0a10 	vmov	s12, r0
 800d478:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 800d47c:	ee06 0a90 	vmov	s13, r0
 800d480:	f9b2 0060 	ldrsh.w	r0, [r2, #96]	@ 0x60
 800d484:	ee07 0a10 	vmov	s14, r0
 800d488:	f9b2 0062 	ldrsh.w	r0, [r2, #98]	@ 0x62
 800d48c:	ee07 0a90 	vmov	s15, r0
 800d490:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800d494:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d498:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d49c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d4a0:	ee26 6a25 	vmul.f32	s12, s12, s11
 800d4a4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800d4a8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800d4ac:	ee27 7a25 	vmul.f32	s14, s14, s11
 800d4b0:	ee26 5a06 	vmul.f32	s10, s12, s12
 800d4b4:	ee67 5a07 	vmul.f32	s11, s14, s14
 800d4b8:	ee26 6a26 	vmul.f32	s12, s12, s13
 800d4bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d4c0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800d4c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d4c8:	ed83 5a00 	vstr	s10, [r3]
 800d4cc:	ed83 6a01 	vstr	s12, [r3, #4]
 800d4d0:	edc3 6a02 	vstr	s13, [r3, #8]
 800d4d4:	edc3 5a18 	vstr	s11, [r3, #96]	@ 0x60
 800d4d8:	ed83 7a19 	vstr	s14, [r3, #100]	@ 0x64
 800d4dc:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
 800d4e0:	330c      	adds	r3, #12
 800d4e2:	429e      	cmp	r6, r3
 800d4e4:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 800d4e8:	d1c0      	bne.n	800d46c <acc_cal_algorithms_iq_imbalance+0x78>
 800d4ea:	2210      	movs	r2, #16
 800d4ec:	a901      	add	r1, sp, #4
 800d4ee:	a80c      	add	r0, sp, #48	@ 0x30
 800d4f0:	f003 fa32 	bl	8010958 <acc_alg_least_square_fit>
 800d4f4:	b300      	cbz	r0, 800d538 <acc_cal_algorithms_iq_imbalance+0x144>
 800d4f6:	eddd 7a01 	vldr	s15, [sp, #4]
 800d4fa:	ed9d 7a03 	vldr	s14, [sp, #12]
 800d4fe:	eddd 0a02 	vldr	s1, [sp, #8]
 800d502:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800d506:	4620      	mov	r0, r4
 800d508:	f109 0901 	add.w	r9, r9, #1
 800d50c:	3402      	adds	r4, #2
 800d50e:	ee67 7a88 	vmul.f32	s15, s15, s16
 800d512:	ee60 6aa0 	vmul.f32	s13, s1, s1
 800d516:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d51a:	ee88 7a80 	vdiv.f32	s14, s17, s0
 800d51e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d522:	ee67 0a20 	vmul.f32	s1, s14, s1
 800d526:	eeb1 1ae7 	vsqrt.f32	s2, s15
 800d52a:	ee27 1a01 	vmul.f32	s2, s14, s2
 800d52e:	f003 fe99 	bl	8011264 <acc_alg_iq_imb_comp_to_fix_point>
 800d532:	454d      	cmp	r5, r9
 800d534:	d196      	bne.n	800d464 <acc_cal_algorithms_iq_imbalance+0x70>
 800d536:	2001      	movs	r0, #1
 800d538:	b03d      	add	sp, #244	@ 0xf4
 800d53a:	ecbd 8b02 	vpop	{d8}
 800d53e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d542:	bf00      	nop
 800d544:	42400000 	.word	0x42400000

0800d548 <acc_cal_algorithms_rx_freq_ctrl>:
 800d548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d54c:	b087      	sub	sp, #28
 800d54e:	2400      	movs	r4, #0
 800d550:	4606      	mov	r6, r0
 800d552:	468b      	mov	fp, r1
 800d554:	9203      	str	r2, [sp, #12]
 800d556:	f100 0902 	add.w	r9, r0, #2
 800d55a:	9402      	str	r4, [sp, #8]
 800d55c:	4625      	mov	r5, r4
 800d55e:	46a0      	mov	r8, r4
 800d560:	46a2      	mov	sl, r4
 800d562:	f10d 0716 	add.w	r7, sp, #22
 800d566:	e006      	b.n	800d576 <acc_cal_algorithms_rx_freq_ctrl+0x2e>
 800d568:	4553      	cmp	r3, sl
 800d56a:	d82a      	bhi.n	800d5c2 <acc_cal_algorithms_rx_freq_ctrl+0x7a>
 800d56c:	4645      	mov	r5, r8
 800d56e:	4698      	mov	r8, r3
 800d570:	3401      	adds	r4, #1
 800d572:	2c08      	cmp	r4, #8
 800d574:	d019      	beq.n	800d5aa <acc_cal_algorithms_rx_freq_ctrl+0x62>
 800d576:	9700      	str	r7, [sp, #0]
 800d578:	ab05      	add	r3, sp, #20
 800d57a:	465a      	mov	r2, fp
 800d57c:	f939 1024 	ldrsh.w	r1, [r9, r4, lsl #2]
 800d580:	f936 0024 	ldrsh.w	r0, [r6, r4, lsl #2]
 800d584:	f003 fe4a 	bl	801121c <acc_alg_comp_iq_imb>
 800d588:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 800d58c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800d590:	fb02 f202 	mul.w	r2, r2, r2
 800d594:	fb03 2303 	mla	r3, r3, r3, r2
 800d598:	42ab      	cmp	r3, r5
 800d59a:	b2a2      	uxth	r2, r4
 800d59c:	d9e8      	bls.n	800d570 <acc_cal_algorithms_rx_freq_ctrl+0x28>
 800d59e:	4543      	cmp	r3, r8
 800d5a0:	d8e2      	bhi.n	800d568 <acc_cal_algorithms_rx_freq_ctrl+0x20>
 800d5a2:	3401      	adds	r4, #1
 800d5a4:	2c08      	cmp	r4, #8
 800d5a6:	461d      	mov	r5, r3
 800d5a8:	d1e5      	bne.n	800d576 <acc_cal_algorithms_rx_freq_ctrl+0x2e>
 800d5aa:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 800d5ae:	45aa      	cmp	sl, r5
 800d5b0:	bf85      	ittet	hi
 800d5b2:	e9dd 2302 	ldrdhi	r2, r3, [sp, #8]
 800d5b6:	2001      	movhi	r0, #1
 800d5b8:	2000      	movls	r0, #0
 800d5ba:	801a      	strhhi	r2, [r3, #0]
 800d5bc:	b007      	add	sp, #28
 800d5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5c2:	4645      	mov	r5, r8
 800d5c4:	9202      	str	r2, [sp, #8]
 800d5c6:	46d0      	mov	r8, sl
 800d5c8:	469a      	mov	sl, r3
 800d5ca:	e7d1      	b.n	800d570 <acc_cal_algorithms_rx_freq_ctrl+0x28>

0800d5cc <acc_cal_algorithms_wavelet_duration_p1>:
 800d5cc:	b508      	push	{r3, lr}
 800d5ce:	f003 fded 	bl	80111ac <acc_alg_temp>
 800d5d2:	f110 0f14 	cmn.w	r0, #20
 800d5d6:	db06      	blt.n	800d5e6 <acc_cal_algorithms_wavelet_duration_p1+0x1a>
 800d5d8:	282c      	cmp	r0, #44	@ 0x2c
 800d5da:	dd06      	ble.n	800d5ea <acc_cal_algorithms_wavelet_duration_p1+0x1e>
 800d5dc:	2850      	cmp	r0, #80	@ 0x50
 800d5de:	bfb4      	ite	lt
 800d5e0:	2003      	movlt	r0, #3
 800d5e2:	2004      	movge	r0, #4
 800d5e4:	bd08      	pop	{r3, pc}
 800d5e6:	2001      	movs	r0, #1
 800d5e8:	bd08      	pop	{r3, pc}
 800d5ea:	2002      	movs	r0, #2
 800d5ec:	bd08      	pop	{r3, pc}
 800d5ee:	bf00      	nop

0800d5f0 <acc_cal_algorithms_phase_unwrap>:
 800d5f0:	2901      	cmp	r1, #1
 800d5f2:	d926      	bls.n	800d642 <acc_cal_algorithms_phase_unwrap+0x52>
 800d5f4:	b470      	push	{r4, r5, r6}
 800d5f6:	1f03      	subs	r3, r0, #4
 800d5f8:	4e12      	ldr	r6, [pc, #72]	@ (800d644 <acc_cal_algorithms_phase_unwrap+0x54>)
 800d5fa:	4d13      	ldr	r5, [pc, #76]	@ (800d648 <acc_cal_algorithms_phase_unwrap+0x58>)
 800d5fc:	eb03 0481 	add.w	r4, r3, r1, lsl #2
 800d600:	2100      	movs	r1, #0
 800d602:	6843      	ldr	r3, [r0, #4]
 800d604:	440b      	add	r3, r1
 800d606:	4602      	mov	r2, r0
 800d608:	f840 3f04 	str.w	r3, [r0, #4]!
 800d60c:	6812      	ldr	r2, [r2, #0]
 800d60e:	1a9a      	subs	r2, r3, r2
 800d610:	42b2      	cmp	r2, r6
 800d612:	dd09      	ble.n	800d628 <acc_cal_algorithms_phase_unwrap+0x38>
 800d614:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800d618:	f5a3 23c9 	sub.w	r3, r3, #411648	@ 0x64800
 800d61c:	3b7e      	subs	r3, #126	@ 0x7e
 800d61e:	f5a1 21c9 	sub.w	r1, r1, #411648	@ 0x64800
 800d622:	6003      	str	r3, [r0, #0]
 800d624:	397e      	subs	r1, #126	@ 0x7e
 800d626:	1a9a      	subs	r2, r3, r2
 800d628:	42aa      	cmp	r2, r5
 800d62a:	da06      	bge.n	800d63a <acc_cal_algorithms_phase_unwrap+0x4a>
 800d62c:	f503 23c9 	add.w	r3, r3, #411648	@ 0x64800
 800d630:	337e      	adds	r3, #126	@ 0x7e
 800d632:	f501 21c9 	add.w	r1, r1, #411648	@ 0x64800
 800d636:	6003      	str	r3, [r0, #0]
 800d638:	317e      	adds	r1, #126	@ 0x7e
 800d63a:	4284      	cmp	r4, r0
 800d63c:	d1e1      	bne.n	800d602 <acc_cal_algorithms_phase_unwrap+0x12>
 800d63e:	bc70      	pop	{r4, r5, r6}
 800d640:	4770      	bx	lr
 800d642:	4770      	bx	lr
 800d644:	0003243f 	.word	0x0003243f
 800d648:	fffcdbc1 	.word	0xfffcdbc1

0800d64c <acc_cal_algorithms_tx_freq_ctrl>:
 800d64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d650:	f2ad 6d0c 	subw	sp, sp, #1548	@ 0x60c
 800d654:	4606      	mov	r6, r0
 800d656:	1c8c      	adds	r4, r1, #2
 800d658:	4690      	mov	r8, r2
 800d65a:	4699      	mov	r9, r3
 800d65c:	ad01      	add	r5, sp, #4
 800d65e:	f20d 6704 	addw	r7, sp, #1540	@ 0x604
 800d662:	f9b4 1000 	ldrsh.w	r1, [r4]
 800d666:	f934 0c02 	ldrsh.w	r0, [r4, #-2]
 800d66a:	f003 f8e9 	bl	8010840 <acc_alg_atan2_q16>
 800d66e:	f845 0f04 	str.w	r0, [r5, #4]!
 800d672:	42bd      	cmp	r5, r7
 800d674:	f104 0404 	add.w	r4, r4, #4
 800d678:	d1f3      	bne.n	800d662 <acc_cal_algorithms_tx_freq_ctrl+0x16>
 800d67a:	46ca      	mov	sl, r9
 800d67c:	f1a9 0304 	sub.w	r3, r9, #4
 800d680:	f109 001c 	add.w	r0, r9, #28
 800d684:	2100      	movs	r1, #0
 800d686:	f843 1f04 	str.w	r1, [r3, #4]!
 800d68a:	4298      	cmp	r0, r3
 800d68c:	d1fb      	bne.n	800d686 <acc_cal_algorithms_tx_freq_ctrl+0x3a>
 800d68e:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 800d692:	f04f 0b00 	mov.w	fp, #0
 800d696:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d69a:	4f33      	ldr	r7, [pc, #204]	@ (800d768 <acc_cal_algorithms_tx_freq_ctrl+0x11c>)
 800d69c:	f8cd b000 	str.w	fp, [sp]
 800d6a0:	ac19      	add	r4, sp, #100	@ 0x64
 800d6a2:	00ed      	lsls	r5, r5, #3
 800d6a4:	9301      	str	r3, [sp, #4]
 800d6a6:	f640 5994 	movw	r9, #3476	@ 0xd94
 800d6aa:	2130      	movs	r1, #48	@ 0x30
 800d6ac:	f1a4 005c 	sub.w	r0, r4, #92	@ 0x5c
 800d6b0:	f7ff ff9e 	bl	800d5f0 <acc_cal_algorithms_phase_unwrap>
 800d6b4:	f1a4 0160 	sub.w	r1, r4, #96	@ 0x60
 800d6b8:	f04f 0c00 	mov.w	ip, #0
 800d6bc:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800d6c0:	6e08      	ldr	r0, [r1, #96]	@ 0x60
 800d6c2:	428c      	cmp	r4, r1
 800d6c4:	eba3 0000 	sub.w	r0, r3, r0
 800d6c8:	4484      	add	ip, r0
 800d6ca:	d1f7      	bne.n	800d6bc <acc_cal_algorithms_tx_freq_ctrl+0x70>
 800d6cc:	f1bc 0f00 	cmp.w	ip, #0
 800d6d0:	db35      	blt.n	800d73e <acc_cal_algorithms_tx_freq_ctrl+0xf2>
 800d6d2:	ea4f 119c 	mov.w	r1, ip, lsr #6
 800d6d6:	fb09 f101 	mul.w	r1, r9, r1
 800d6da:	0d49      	lsrs	r1, r1, #21
 800d6dc:	fb06 f101 	mul.w	r1, r6, r1
 800d6e0:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 800d6e4:	f8ca 1000 	str.w	r1, [sl]
 800d6e8:	f1bb 0f00 	cmp.w	fp, #0
 800d6ec:	d003      	beq.n	800d6f6 <acc_cal_algorithms_tx_freq_ctrl+0xaa>
 800d6ee:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d6f2:	4288      	cmp	r0, r1
 800d6f4:	d930      	bls.n	800d758 <acc_cal_algorithms_tx_freq_ctrl+0x10c>
 800d6f6:	f8da 1000 	ldr.w	r1, [sl]
 800d6fa:	eba1 0108 	sub.w	r1, r1, r8
 800d6fe:	2900      	cmp	r1, #0
 800d700:	bfb8      	it	lt
 800d702:	4249      	neglt	r1, r1
 800d704:	42b9      	cmp	r1, r7
 800d706:	d204      	bcs.n	800d712 <acc_cal_algorithms_tx_freq_ctrl+0xc6>
 800d708:	2301      	movs	r3, #1
 800d70a:	460f      	mov	r7, r1
 800d70c:	f8cd b004 	str.w	fp, [sp, #4]
 800d710:	9300      	str	r3, [sp, #0]
 800d712:	f10b 0301 	add.w	r3, fp, #1
 800d716:	fa1f fb83 	uxth.w	fp, r3
 800d71a:	f1bb 0f08 	cmp.w	fp, #8
 800d71e:	f10a 0a04 	add.w	sl, sl, #4
 800d722:	f104 04c0 	add.w	r4, r4, #192	@ 0xc0
 800d726:	d1c0      	bne.n	800d6aa <acc_cal_algorithms_tx_freq_ctrl+0x5e>
 800d728:	9b00      	ldr	r3, [sp, #0]
 800d72a:	b11b      	cbz	r3, 800d734 <acc_cal_algorithms_tx_freq_ctrl+0xe8>
 800d72c:	f8dd 3630 	ldr.w	r3, [sp, #1584]	@ 0x630
 800d730:	9a01      	ldr	r2, [sp, #4]
 800d732:	801a      	strh	r2, [r3, #0]
 800d734:	9800      	ldr	r0, [sp, #0]
 800d736:	f20d 6d0c 	addw	sp, sp, #1548	@ 0x60c
 800d73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d73e:	f1cc 0100 	rsb	r1, ip, #0
 800d742:	0989      	lsrs	r1, r1, #6
 800d744:	fb09 f101 	mul.w	r1, r9, r1
 800d748:	0d49      	lsrs	r1, r1, #21
 800d74a:	fb06 f101 	mul.w	r1, r6, r1
 800d74e:	eba5 2111 	sub.w	r1, r5, r1, lsr #8
 800d752:	f8ca 1000 	str.w	r1, [sl]
 800d756:	e7c7      	b.n	800d6e8 <acc_cal_algorithms_tx_freq_ctrl+0x9c>
 800d758:	2300      	movs	r3, #0
 800d75a:	9300      	str	r3, [sp, #0]
 800d75c:	9800      	ldr	r0, [sp, #0]
 800d75e:	f20d 6d0c 	addw	sp, sp, #1548	@ 0x60c
 800d762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d766:	bf00      	nop
 800d768:	000f4240 	.word	0x000f4240

0800d76c <acc_cal_algorithms_phase_enhancement>:
 800d76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d770:	b0bc      	sub	sp, #240	@ 0xf0
 800d772:	4606      	mov	r6, r0
 800d774:	460d      	mov	r5, r1
 800d776:	4617      	mov	r7, r2
 800d778:	f100 0902 	add.w	r9, r0, #2
 800d77c:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 800d780:	2400      	movs	r4, #0
 800d782:	f640 38b7 	movw	r8, #2999	@ 0xbb7
 800d786:	e005      	b.n	800d794 <acc_cal_algorithms_phase_enhancement+0x28>
 800d788:	f003 f85a 	bl	8010840 <acc_alg_atan2_q16>
 800d78c:	2c30      	cmp	r4, #48	@ 0x30
 800d78e:	f84a 0b04 	str.w	r0, [sl], #4
 800d792:	d00f      	beq.n	800d7b4 <acc_cal_algorithms_phase_enhancement+0x48>
 800d794:	f939 1024 	ldrsh.w	r1, [r9, r4, lsl #2]
 800d798:	f936 0024 	ldrsh.w	r0, [r6, r4, lsl #2]
 800d79c:	fb01 f301 	mul.w	r3, r1, r1
 800d7a0:	fb00 3300 	mla	r3, r0, r0, r3
 800d7a4:	4543      	cmp	r3, r8
 800d7a6:	f104 0401 	add.w	r4, r4, #1
 800d7aa:	dced      	bgt.n	800d788 <acc_cal_algorithms_phase_enhancement+0x1c>
 800d7ac:	2000      	movs	r0, #0
 800d7ae:	b03c      	add	sp, #240	@ 0xf0
 800d7b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7b4:	ac0b      	add	r4, sp, #44	@ 0x2c
 800d7b6:	f1ad 0602 	sub.w	r6, sp, #2
 800d7ba:	4621      	mov	r1, r4
 800d7bc:	4632      	mov	r2, r6
 800d7be:	f10d 088c 	add.w	r8, sp, #140	@ 0x8c
 800d7c2:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	bfb8      	it	lt
 800d7ca:	330f      	addlt	r3, #15
 800d7cc:	3202      	adds	r2, #2
 800d7ce:	111b      	asrs	r3, r3, #4
 800d7d0:	4541      	cmp	r1, r8
 800d7d2:	8013      	strh	r3, [r2, #0]
 800d7d4:	d1f5      	bne.n	800d7c2 <acc_cal_algorithms_phase_enhancement+0x56>
 800d7d6:	a80c      	add	r0, sp, #48	@ 0x30
 800d7d8:	2130      	movs	r1, #48	@ 0x30
 800d7da:	f7ff ff09 	bl	800d5f0 <acc_cal_algorithms_phase_unwrap>
 800d7de:	2200      	movs	r2, #0
 800d7e0:	f854 3f04 	ldr.w	r3, [r4, #4]!
 800d7e4:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800d7e6:	4544      	cmp	r4, r8
 800d7e8:	eba3 0301 	sub.w	r3, r3, r1
 800d7ec:	441a      	add	r2, r3
 800d7ee:	d1f7      	bne.n	800d7e0 <acc_cal_algorithms_phase_enhancement+0x74>
 800d7f0:	490d      	ldr	r1, [pc, #52]	@ (800d828 <acc_cal_algorithms_phase_enhancement+0xbc>)
 800d7f2:	17d3      	asrs	r3, r2, #31
 800d7f4:	fb81 1202 	smull	r1, r2, r1, r2
 800d7f8:	ebc3 12a2 	rsb	r2, r3, r2, asr #6
 800d7fc:	f502 4399 	add.w	r3, r2, #19584	@ 0x4c80
 800d800:	3330      	adds	r3, #48	@ 0x30
 800d802:	f64c 1162 	movw	r1, #51554	@ 0xc962
 800d806:	428b      	cmp	r3, r1
 800d808:	d8d0      	bhi.n	800d7ac <acc_cal_algorithms_phase_enhancement+0x40>
 800d80a:	3d02      	subs	r5, #2
 800d80c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800d810:	f836 3f02 	ldrh.w	r3, [r6, #2]!
 800d814:	f825 3f02 	strh.w	r3, [r5, #2]!
 800d818:	42b1      	cmp	r1, r6
 800d81a:	d1f9      	bne.n	800d810 <acc_cal_algorithms_phase_enhancement+0xa4>
 800d81c:	2001      	movs	r0, #1
 800d81e:	803a      	strh	r2, [r7, #0]
 800d820:	b03c      	add	sp, #240	@ 0xf0
 800d822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d826:	bf00      	nop
 800d828:	2aaaaaab 	.word	0x2aaaaaab

0800d82c <acc_cal_algorithms_calc_pulse_params>:
 800d82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d830:	b085      	sub	sp, #20
 800d832:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
 800d836:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800d83a:	9203      	str	r2, [sp, #12]
 800d83c:	d349      	bcc.n	800d8d2 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800d83e:	9b02      	ldr	r3, [sp, #8]
 800d840:	2b08      	cmp	r3, #8
 800d842:	d046      	beq.n	800d8d2 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800d844:	9a01      	ldr	r2, [sp, #4]
 800d846:	9c03      	ldr	r4, [sp, #12]
 800d848:	f1a2 0c12 	sub.w	ip, r2, #18
 800d84c:	2000      	movs	r0, #0
 800d84e:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
 800d852:	f8cd c000 	str.w	ip, [sp]
 800d856:	4680      	mov	r8, r0
 800d858:	4682      	mov	sl, r0
 800d85a:	4683      	mov	fp, r0
 800d85c:	3a02      	subs	r2, #2
 800d85e:	2701      	movs	r7, #1
 800d860:	f240 29ee 	movw	r9, #750	@ 0x2ee
 800d864:	4684      	mov	ip, r0
 800d866:	e014      	b.n	800d892 <acc_cal_algorithms_calc_pulse_params+0x66>
 800d868:	2800      	cmp	r0, #0
 800d86a:	d136      	bne.n	800d8da <acc_cal_algorithms_calc_pulse_params+0xae>
 800d86c:	459b      	cmp	fp, r3
 800d86e:	da3a      	bge.n	800d8e6 <acc_cal_algorithms_calc_pulse_params+0xba>
 800d870:	469b      	mov	fp, r3
 800d872:	f04f 0801 	mov.w	r8, #1
 800d876:	f1cc 0600 	rsb	r6, ip, #0
 800d87a:	429e      	cmp	r6, r3
 800d87c:	9b00      	ldr	r3, [sp, #0]
 800d87e:	bfc8      	it	gt
 800d880:	ebae 0c05 	subgt.w	ip, lr, r5
 800d884:	458a      	cmp	sl, r1
 800d886:	bf38      	it	cc
 800d888:	468a      	movcc	sl, r1
 800d88a:	4293      	cmp	r3, r2
 800d88c:	f104 0402 	add.w	r4, r4, #2
 800d890:	d01c      	beq.n	800d8cc <acc_cal_algorithms_calc_pulse_params+0xa0>
 800d892:	8a55      	ldrh	r5, [r2, #18]
 800d894:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 800d898:	1a6b      	subs	r3, r5, r1
 800d89a:	f503 4600 	add.w	r6, r3, #32768	@ 0x8000
 800d89e:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
 800d8a2:	bf38      	it	cc
 800d8a4:	8023      	strhcc	r3, [r4, #0]
 800d8a6:	468e      	mov	lr, r1
 800d8a8:	bf2c      	ite	cs
 800d8aa:	2700      	movcs	r7, #0
 800d8ac:	8811      	ldrhcc	r1, [r2, #0]
 800d8ae:	454b      	cmp	r3, r9
 800d8b0:	dcda      	bgt.n	800d868 <acc_cal_algorithms_calc_pulse_params+0x3c>
 800d8b2:	4e58      	ldr	r6, [pc, #352]	@ (800da14 <acc_cal_algorithms_calc_pulse_params+0x1e8>)
 800d8b4:	459b      	cmp	fp, r3
 800d8b6:	bfb8      	it	lt
 800d8b8:	469b      	movlt	fp, r3
 800d8ba:	42b3      	cmp	r3, r6
 800d8bc:	dadb      	bge.n	800d876 <acc_cal_algorithms_calc_pulse_params+0x4a>
 800d8be:	f1b8 0f00 	cmp.w	r8, #0
 800d8c2:	bf0a      	itet	eq
 800d8c4:	2700      	moveq	r7, #0
 800d8c6:	4640      	movne	r0, r8
 800d8c8:	2001      	moveq	r0, #1
 800d8ca:	e7d4      	b.n	800d876 <acc_cal_algorithms_calc_pulse_params+0x4a>
 800d8cc:	f8cd c000 	str.w	ip, [sp]
 800d8d0:	b977      	cbnz	r7, 800d8f0 <acc_cal_algorithms_calc_pulse_params+0xc4>
 800d8d2:	2000      	movs	r0, #0
 800d8d4:	b005      	add	sp, #20
 800d8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8da:	459b      	cmp	fp, r3
 800d8dc:	4680      	mov	r8, r0
 800d8de:	da05      	bge.n	800d8ec <acc_cal_algorithms_calc_pulse_params+0xc0>
 800d8e0:	469b      	mov	fp, r3
 800d8e2:	2700      	movs	r7, #0
 800d8e4:	e7c7      	b.n	800d876 <acc_cal_algorithms_calc_pulse_params+0x4a>
 800d8e6:	f04f 0801 	mov.w	r8, #1
 800d8ea:	e7c4      	b.n	800d876 <acc_cal_algorithms_calc_pulse_params+0x4a>
 800d8ec:	2700      	movs	r7, #0
 800d8ee:	e7c2      	b.n	800d876 <acc_cal_algorithms_calc_pulse_params+0x4a>
 800d8f0:	f1b8 0f00 	cmp.w	r8, #0
 800d8f4:	d0ed      	beq.n	800d8d2 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800d8f6:	2800      	cmp	r0, #0
 800d8f8:	d0eb      	beq.n	800d8d2 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800d8fa:	9b02      	ldr	r3, [sp, #8]
 800d8fc:	f1b3 0e1c 	subs.w	lr, r3, #28
 800d900:	d0e7      	beq.n	800d8d2 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800d902:	9f03      	ldr	r7, [sp, #12]
 800d904:	f8cd a008 	str.w	sl, [sp, #8]
 800d908:	f04f 0c00 	mov.w	ip, #0
 800d90c:	9003      	str	r0, [sp, #12]
 800d90e:	3712      	adds	r7, #18
 800d910:	46e1      	mov	r9, ip
 800d912:	46e0      	mov	r8, ip
 800d914:	46e2      	mov	sl, ip
 800d916:	4660      	mov	r0, ip
 800d918:	f937 3f02 	ldrsh.w	r3, [r7, #2]!
 800d91c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800d920:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800d924:	463d      	mov	r5, r7
 800d926:	463c      	mov	r4, r7
 800d928:	210a      	movs	r1, #10
 800d92a:	f934 6d02 	ldrsh.w	r6, [r4, #-2]!
 800d92e:	f935 2f02 	ldrsh.w	r2, [r5, #2]!
 800d932:	fb01 3306 	mla	r3, r1, r6, r3
 800d936:	fb01 3302 	mla	r3, r1, r2, r3
 800d93a:	3901      	subs	r1, #1
 800d93c:	d1f5      	bne.n	800d92a <acc_cal_algorithms_calc_pulse_params+0xfe>
 800d93e:	4543      	cmp	r3, r8
 800d940:	dc64      	bgt.n	800da0c <acc_cal_algorithms_calc_pulse_params+0x1e0>
 800d942:	454b      	cmp	r3, r9
 800d944:	bfa8      	it	ge
 800d946:	4643      	movge	r3, r8
 800d948:	da61      	bge.n	800da0e <acc_cal_algorithms_calc_pulse_params+0x1e2>
 800d94a:	4699      	mov	r9, r3
 800d94c:	46e2      	mov	sl, ip
 800d94e:	f10c 0c01 	add.w	ip, ip, #1
 800d952:	45f4      	cmp	ip, lr
 800d954:	d1e0      	bne.n	800d918 <acc_cal_algorithms_calc_pulse_params+0xec>
 800d956:	f24c 3350 	movw	r3, #50000	@ 0xc350
 800d95a:	4598      	cmp	r8, r3
 800d95c:	4605      	mov	r5, r0
 800d95e:	4656      	mov	r6, sl
 800d960:	e9dd a002 	ldrd	sl, r0, [sp, #8]
 800d964:	ddb5      	ble.n	800d8d2 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800d966:	4b2c      	ldr	r3, [pc, #176]	@ (800da18 <acc_cal_algorithms_calc_pulse_params+0x1ec>)
 800d968:	4599      	cmp	r9, r3
 800d96a:	dab2      	bge.n	800d8d2 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800d96c:	f1bb 0f00 	cmp.w	fp, #0
 800d970:	d0af      	beq.n	800d8d2 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800d972:	9b00      	ldr	r3, [sp, #0]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d0ac      	beq.n	800d8d2 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800d978:	9b01      	ldr	r3, [sp, #4]
 800d97a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800d97c:	881b      	ldrh	r3, [r3, #0]
 800d97e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d982:	00db      	lsls	r3, r3, #3
 800d984:	b144      	cbz	r4, 800d998 <acc_cal_algorithms_calc_pulse_params+0x16c>
 800d986:	4293      	cmp	r3, r2
 800d988:	d204      	bcs.n	800d994 <acc_cal_algorithms_calc_pulse_params+0x168>
 800d98a:	43d9      	mvns	r1, r3
 800d98c:	4459      	add	r1, fp
 800d98e:	4411      	add	r1, r2
 800d990:	fbb1 f1fb 	udiv	r1, r1, fp
 800d994:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800d996:	6021      	str	r1, [r4, #0]
 800d998:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d99a:	2900      	cmp	r1, #0
 800d99c:	d09a      	beq.n	800d8d4 <acc_cal_algorithms_calc_pulse_params+0xa8>
 800d99e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d9a0:	2900      	cmp	r1, #0
 800d9a2:	d097      	beq.n	800d8d4 <acc_cal_algorithms_calc_pulse_params+0xa8>
 800d9a4:	4629      	mov	r1, r5
 800d9a6:	9c01      	ldr	r4, [sp, #4]
 800d9a8:	310e      	adds	r1, #14
 800d9aa:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 800d9ae:	ebb3 0fc4 	cmp.w	r3, r4, lsl #3
 800d9b2:	ea4f 05c4 	mov.w	r5, r4, lsl #3
 800d9b6:	d205      	bcs.n	800d9c4 <acc_cal_algorithms_calc_pulse_params+0x198>
 800d9b8:	43db      	mvns	r3, r3
 800d9ba:	445b      	add	r3, fp
 800d9bc:	442b      	add	r3, r5
 800d9be:	fbb3 f3fb 	udiv	r3, r3, fp
 800d9c2:	1ac9      	subs	r1, r1, r3
 800d9c4:	9b01      	ldr	r3, [sp, #4]
 800d9c6:	f106 0b0e 	add.w	fp, r6, #14
 800d9ca:	f833 301b 	ldrh.w	r3, [r3, fp, lsl #1]
 800d9ce:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
 800d9d2:	ea4f 04c3 	mov.w	r4, r3, lsl #3
 800d9d6:	d907      	bls.n	800d9e8 <acc_cal_algorithms_calc_pulse_params+0x1bc>
 800d9d8:	9d00      	ldr	r5, [sp, #0]
 800d9da:	1e6b      	subs	r3, r5, #1
 800d9dc:	4413      	add	r3, r2
 800d9de:	1b1b      	subs	r3, r3, r4
 800d9e0:	fbb3 f3f5 	udiv	r3, r3, r5
 800d9e4:	ebab 0b03 	sub.w	fp, fp, r3
 800d9e8:	2900      	cmp	r1, #0
 800d9ea:	f6ff af72 	blt.w	800d8d2 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800d9ee:	f1bb 0f00 	cmp.w	fp, #0
 800d9f2:	f6ff af6e 	blt.w	800d8d2 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800d9f6:	4559      	cmp	r1, fp
 800d9f8:	f73f af6b 	bgt.w	800d8d2 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800d9fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9fe:	ebab 0b01 	sub.w	fp, fp, r1
 800da02:	f8c3 b000 	str.w	fp, [r3]
 800da06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da08:	6019      	str	r1, [r3, #0]
 800da0a:	e763      	b.n	800d8d4 <acc_cal_algorithms_calc_pulse_params+0xa8>
 800da0c:	4660      	mov	r0, ip
 800da0e:	4698      	mov	r8, r3
 800da10:	e79d      	b.n	800d94e <acc_cal_algorithms_calc_pulse_params+0x122>
 800da12:	bf00      	nop
 800da14:	fffffd12 	.word	0xfffffd12
 800da18:	ffff3cb0 	.word	0xffff3cb0

0800da1c <acc_cal_algorithms_pulseshaper_wavelet>:
 800da1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da20:	f5ad 7d44 	sub.w	sp, sp, #784	@ 0x310
 800da24:	ae04      	add	r6, sp, #16
 800da26:	af05      	add	r7, sp, #20
 800da28:	2400      	movs	r4, #0
 800da2a:	e9cd 7401 	strd	r7, r4, [sp, #4]
 800da2e:	9600      	str	r6, [sp, #0]
 800da30:	460d      	mov	r5, r1
 800da32:	aa08      	add	r2, sp, #32
 800da34:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800da38:	2190      	movs	r1, #144	@ 0x90
 800da3a:	6034      	str	r4, [r6, #0]
 800da3c:	603c      	str	r4, [r7, #0]
 800da3e:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800da42:	4680      	mov	r8, r0
 800da44:	f7ff fef2 	bl	800d82c <acc_cal_algorithms_calc_pulse_params>
 800da48:	b920      	cbnz	r0, 800da54 <acc_cal_algorithms_pulseshaper_wavelet+0x38>
 800da4a:	2000      	movs	r0, #0
 800da4c:	f50d 7d44 	add.w	sp, sp, #784	@ 0x310
 800da50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da54:	ab07      	add	r3, sp, #28
 800da56:	9301      	str	r3, [sp, #4]
 800da58:	ab06      	add	r3, sp, #24
 800da5a:	9300      	str	r3, [sp, #0]
 800da5c:	9402      	str	r4, [sp, #8]
 800da5e:	aa08      	add	r2, sp, #32
 800da60:	f508 7090 	add.w	r0, r8, #288	@ 0x120
 800da64:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800da68:	21f0      	movs	r1, #240	@ 0xf0
 800da6a:	f7ff fedf 	bl	800d82c <acc_cal_algorithms_calc_pulse_params>
 800da6e:	2800      	cmp	r0, #0
 800da70:	d0eb      	beq.n	800da4a <acc_cal_algorithms_pulseshaper_wavelet+0x2e>
 800da72:	683f      	ldr	r7, [r7, #0]
 800da74:	9c07      	ldr	r4, [sp, #28]
 800da76:	4b0b      	ldr	r3, [pc, #44]	@ (800daa4 <acc_cal_algorithms_pulseshaper_wavelet+0x88>)
 800da78:	490b      	ldr	r1, [pc, #44]	@ (800daa8 <acc_cal_algorithms_pulseshaper_wavelet+0x8c>)
 800da7a:	6832      	ldr	r2, [r6, #0]
 800da7c:	1be4      	subs	r4, r4, r7
 800da7e:	fb03 f304 	mul.w	r3, r3, r4
 800da82:	fb01 f707 	mul.w	r7, r1, r7
 800da86:	fb01 f202 	mul.w	r2, r1, r2
 800da8a:	0c1b      	lsrs	r3, r3, #16
 800da8c:	ebc3 3357 	rsb	r3, r3, r7, lsr #13
 800da90:	fb01 f104 	mul.w	r1, r1, r4
 800da94:	0b52      	lsrs	r2, r2, #13
 800da96:	e9c5 3100 	strd	r3, r1, [r5]
 800da9a:	60aa      	str	r2, [r5, #8]
 800da9c:	f50d 7d44 	add.w	sp, sp, #784	@ 0x310
 800daa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daa4:	00042aa8 	.word	0x00042aa8
 800daa8:	00010aaa 	.word	0x00010aaa

0800daac <acc_cal_algorithms_pulseshaper_supply>:
 800daac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dab0:	f5ad 7d47 	sub.w	sp, sp, #796	@ 0x31c
 800dab4:	2600      	movs	r6, #0
 800dab6:	af06      	add	r7, sp, #24
 800dab8:	f10d 0814 	add.w	r8, sp, #20
 800dabc:	4605      	mov	r5, r0
 800dabe:	460c      	mov	r4, r1
 800dac0:	e9cd 7601 	strd	r7, r6, [sp, #4]
 800dac4:	3002      	adds	r0, #2
 800dac6:	aa0a      	add	r2, sp, #40	@ 0x28
 800dac8:	f8cd 8000 	str.w	r8, [sp]
 800dacc:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800dad0:	f240 111f 	movw	r1, #287	@ 0x11f
 800dad4:	f7ff feaa 	bl	800d82c <acc_cal_algorithms_calc_pulse_params>
 800dad8:	b920      	cbnz	r0, 800dae4 <acc_cal_algorithms_pulseshaper_supply+0x38>
 800dada:	2000      	movs	r0, #0
 800dadc:	f50d 7d47 	add.w	sp, sp, #796	@ 0x31c
 800dae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dae4:	ab08      	add	r3, sp, #32
 800dae6:	f10d 0a1c 	add.w	sl, sp, #28
 800daea:	f10d 0b10 	add.w	fp, sp, #16
 800daee:	e9cd a301 	strd	sl, r3, [sp, #4]
 800daf2:	f8cd b000 	str.w	fp, [sp]
 800daf6:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800dafa:	aa0a      	add	r2, sp, #40	@ 0x28
 800dafc:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800db00:	f505 7010 	add.w	r0, r5, #576	@ 0x240
 800db04:	f7ff fe92 	bl	800d82c <acc_cal_algorithms_calc_pulse_params>
 800db08:	2800      	cmp	r0, #0
 800db0a:	d0e6      	beq.n	800dada <acc_cal_algorithms_pulseshaper_supply+0x2e>
 800db0c:	f10d 0924 	add.w	r9, sp, #36	@ 0x24
 800db10:	e9cd 6600 	strd	r6, r6, [sp]
 800db14:	aa0a      	add	r2, sp, #40	@ 0x28
 800db16:	f505 6090 	add.w	r0, r5, #1152	@ 0x480
 800db1a:	f8cd 9008 	str.w	r9, [sp, #8]
 800db1e:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800db22:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800db26:	f7ff fe81 	bl	800d82c <acc_cal_algorithms_calc_pulse_params>
 800db2a:	2800      	cmp	r0, #0
 800db2c:	d0d5      	beq.n	800dada <acc_cal_algorithms_pulseshaper_supply+0x2e>
 800db2e:	f8db c000 	ldr.w	ip, [fp]
 800db32:	f8d8 6000 	ldr.w	r6, [r8]
 800db36:	f8dd e020 	ldr.w	lr, [sp, #32]
 800db3a:	f8d7 8000 	ldr.w	r8, [r7]
 800db3e:	f8da 2000 	ldr.w	r2, [sl]
 800db42:	f8d9 9000 	ldr.w	r9, [r9]
 800db46:	4f17      	ldr	r7, [pc, #92]	@ (800dba4 <acc_cal_algorithms_pulseshaper_supply+0xf8>)
 800db48:	4d17      	ldr	r5, [pc, #92]	@ (800dba8 <acc_cal_algorithms_pulseshaper_supply+0xfc>)
 800db4a:	4918      	ldr	r1, [pc, #96]	@ (800dbac <acc_cal_algorithms_pulseshaper_supply+0x100>)
 800db4c:	4b18      	ldr	r3, [pc, #96]	@ (800dbb0 <acc_cal_algorithms_pulseshaper_supply+0x104>)
 800db4e:	eba9 090e 	sub.w	r9, r9, lr
 800db52:	eba6 060c 	sub.w	r6, r6, ip
 800db56:	eba2 0208 	sub.w	r2, r2, r8
 800db5a:	fb07 f706 	mul.w	r7, r7, r6
 800db5e:	fb05 f502 	mul.w	r5, r5, r2
 800db62:	fb01 f109 	mul.w	r1, r1, r9
 800db66:	fb03 fc0c 	mul.w	ip, r3, ip
 800db6a:	fb03 f808 	mul.w	r8, r3, r8
 800db6e:	fb03 fe0e 	mul.w	lr, r3, lr
 800db72:	0c3f      	lsrs	r7, r7, #16
 800db74:	0c2d      	lsrs	r5, r5, #16
 800db76:	0c09      	lsrs	r1, r1, #16
 800db78:	fb03 f606 	mul.w	r6, r3, r6
 800db7c:	fb03 f202 	mul.w	r2, r3, r2
 800db80:	ebc7 375c 	rsb	r7, r7, ip, lsr #13
 800db84:	ebc5 3558 	rsb	r5, r5, r8, lsr #13
 800db88:	fb03 f309 	mul.w	r3, r3, r9
 800db8c:	ebc1 315e 	rsb	r1, r1, lr, lsr #13
 800db90:	e9c4 7600 	strd	r7, r6, [r4]
 800db94:	e9c4 5202 	strd	r5, r2, [r4, #8]
 800db98:	e9c4 1304 	strd	r1, r3, [r4, #16]
 800db9c:	f50d 7d47 	add.w	sp, sp, #796	@ 0x31c
 800dba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dba4:	00021554 	.word	0x00021554
 800dba8:	00074aa6 	.word	0x00074aa6
 800dbac:	000b754e 	.word	0x000b754e
 800dbb0:	00010aaa 	.word	0x00010aaa

0800dbb4 <acc_a121_cal_session_start_1_pll_cbank_temp_program>:
 800dbb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbb8:	468a      	mov	sl, r1
 800dbba:	b085      	sub	sp, #20
 800dbbc:	4681      	mov	r9, r0
 800dbbe:	4611      	mov	r1, r2
 800dbc0:	4650      	mov	r0, sl
 800dbc2:	461f      	mov	r7, r3
 800dbc4:	2500      	movs	r5, #0
 800dbc6:	ab03      	add	r3, sp, #12
 800dbc8:	aa02      	add	r2, sp, #8
 800dbca:	e9cd 5502 	strd	r5, r5, [sp, #8]
 800dbce:	f000 ffd5 	bl	800eb7c <acc_sensor_a121_prepare_load_confmem>
 800dbd2:	4648      	mov	r0, r9
 800dbd4:	f001 f87c 	bl	800ecd0 <acc_sensor_protocol_a121_prepare_load>
 800dbd8:	b300      	cbz	r0, 800dc1c <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 800dbda:	9b03      	ldr	r3, [sp, #12]
 800dbdc:	f640 3b4a 	movw	fp, #2890	@ 0xb4a
 800dbe0:	ebab 0405 	sub.w	r4, fp, r5
 800dbe4:	429c      	cmp	r4, r3
 800dbe6:	bf2c      	ite	cs
 800dbe8:	b29c      	uxthcs	r4, r3
 800dbea:	b2a4      	uxthcc	r4, r4
 800dbec:	9e02      	ldr	r6, [sp, #8]
 800dbee:	f003 fb0d 	bl	801120c <acc_image_a121_r1a_cal_session_get>
 800dbf2:	ea4f 0855 	mov.w	r8, r5, lsr #1
 800dbf6:	0862      	lsrs	r2, r4, #1
 800dbf8:	4631      	mov	r1, r6
 800dbfa:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 800dbfe:	f003 f8cd 	bl	8010d9c <acc_confprogram_copy>
 800dc02:	f003 fb07 	bl	8011214 <acc_image_a121_r1a_cal_session_param_table_get>
 800dc06:	887a      	ldrh	r2, [r7, #2]
 800dc08:	211c      	movs	r1, #28
 800dc0a:	e9cd 1200 	strd	r1, r2, [sp]
 800dc0e:	4603      	mov	r3, r0
 800dc10:	4622      	mov	r2, r4
 800dc12:	4629      	mov	r1, r5
 800dc14:	4630      	mov	r0, r6
 800dc16:	f002 fff7 	bl	8010c08 <acc_confprogram_patch_offset>
 800dc1a:	b918      	cbnz	r0, 800dc24 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x70>
 800dc1c:	2000      	movs	r0, #0
 800dc1e:	b005      	add	sp, #20
 800dc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc24:	f003 faf6 	bl	8011214 <acc_image_a121_r1a_cal_session_param_table_get>
 800dc28:	88ba      	ldrh	r2, [r7, #4]
 800dc2a:	211a      	movs	r1, #26
 800dc2c:	e9cd 1200 	strd	r1, r2, [sp]
 800dc30:	4603      	mov	r3, r0
 800dc32:	4622      	mov	r2, r4
 800dc34:	4629      	mov	r1, r5
 800dc36:	4630      	mov	r0, r6
 800dc38:	f002 ffe6 	bl	8010c08 <acc_confprogram_patch_offset>
 800dc3c:	2800      	cmp	r0, #0
 800dc3e:	d0ed      	beq.n	800dc1c <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 800dc40:	f003 fae8 	bl	8011214 <acc_image_a121_r1a_cal_session_param_table_get>
 800dc44:	88fa      	ldrh	r2, [r7, #6]
 800dc46:	9201      	str	r2, [sp, #4]
 800dc48:	221b      	movs	r2, #27
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	9200      	str	r2, [sp, #0]
 800dc4e:	4629      	mov	r1, r5
 800dc50:	4622      	mov	r2, r4
 800dc52:	4630      	mov	r0, r6
 800dc54:	f002 ffd8 	bl	8010c08 <acc_confprogram_patch_offset>
 800dc58:	2800      	cmp	r0, #0
 800dc5a:	d0df      	beq.n	800dc1c <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 800dc5c:	f003 fada 	bl	8011214 <acc_image_a121_r1a_cal_session_param_table_get>
 800dc60:	893a      	ldrh	r2, [r7, #8]
 800dc62:	9201      	str	r2, [sp, #4]
 800dc64:	2219      	movs	r2, #25
 800dc66:	4603      	mov	r3, r0
 800dc68:	9200      	str	r2, [sp, #0]
 800dc6a:	4630      	mov	r0, r6
 800dc6c:	4622      	mov	r2, r4
 800dc6e:	4629      	mov	r1, r5
 800dc70:	f002 ffca 	bl	8010c08 <acc_confprogram_patch_offset>
 800dc74:	4606      	mov	r6, r0
 800dc76:	4623      	mov	r3, r4
 800dc78:	4652      	mov	r2, sl
 800dc7a:	4641      	mov	r1, r8
 800dc7c:	4648      	mov	r0, r9
 800dc7e:	2e00      	cmp	r6, #0
 800dc80:	d0cc      	beq.n	800dc1c <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 800dc82:	f000 ff93 	bl	800ebac <acc_sensor_a121_load_confmem>
 800dc86:	9b03      	ldr	r3, [sp, #12]
 800dc88:	441d      	add	r5, r3
 800dc8a:	b2ad      	uxth	r5, r5
 800dc8c:	f640 3249 	movw	r2, #2889	@ 0xb49
 800dc90:	4295      	cmp	r5, r2
 800dc92:	d9a5      	bls.n	800dbe0 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x2c>
 800dc94:	4648      	mov	r0, r9
 800dc96:	f240 115b 	movw	r1, #347	@ 0x15b
 800dc9a:	f001 f86f 	bl	800ed7c <acc_sensor_protocol_a121_run_program>
 800dc9e:	b005      	add	sp, #20
 800dca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dca4 <acc_a121_cal_session_start_2_pll_ibias_vfast2_ldo_program>:
 800dca4:	b570      	push	{r4, r5, r6, lr}
 800dca6:	b086      	sub	sp, #24
 800dca8:	460d      	mov	r5, r1
 800dcaa:	4604      	mov	r4, r0
 800dcac:	f003 faae 	bl	801120c <acc_image_a121_r1a_cal_session_get>
 800dcb0:	9005      	str	r0, [sp, #20]
 800dcb2:	f003 faaf 	bl	8011214 <acc_image_a121_r1a_cal_session_param_table_get>
 800dcb6:	4e09      	ldr	r6, [pc, #36]	@ (800dcdc <acc_a121_cal_session_start_2_pll_ibias_vfast2_ldo_program+0x38>)
 800dcb8:	9905      	ldr	r1, [sp, #20]
 800dcba:	9501      	str	r5, [sp, #4]
 800dcbc:	2225      	movs	r2, #37	@ 0x25
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	9200      	str	r2, [sp, #0]
 800dcc2:	4620      	mov	r0, r4
 800dcc4:	9602      	str	r6, [sp, #8]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	f003 f800 	bl	8010ccc <acc_confprogram_live_patch>
 800dccc:	4620      	mov	r0, r4
 800dcce:	f240 2132 	movw	r1, #562	@ 0x232
 800dcd2:	b006      	add	sp, #24
 800dcd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dcd8:	f001 b850 	b.w	800ed7c <acc_sensor_protocol_a121_run_program>
 800dcdc:	0800eb49 	.word	0x0800eb49

0800dce0 <acc_a121_cal_session_start_3_delay_cbank_program>:
 800dce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dce2:	b087      	sub	sp, #28
 800dce4:	4604      	mov	r4, r0
 800dce6:	460e      	mov	r6, r1
 800dce8:	4615      	mov	r5, r2
 800dcea:	f003 fa8f 	bl	801120c <acc_image_a121_r1a_cal_session_get>
 800dcee:	9005      	str	r0, [sp, #20]
 800dcf0:	f003 fa90 	bl	8011214 <acc_image_a121_r1a_cal_session_param_table_get>
 800dcf4:	4f10      	ldr	r7, [pc, #64]	@ (800dd38 <acc_a121_cal_session_start_3_delay_cbank_program+0x58>)
 800dcf6:	9905      	ldr	r1, [sp, #20]
 800dcf8:	9601      	str	r6, [sp, #4]
 800dcfa:	2226      	movs	r2, #38	@ 0x26
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	9200      	str	r2, [sp, #0]
 800dd00:	4620      	mov	r0, r4
 800dd02:	2200      	movs	r2, #0
 800dd04:	9702      	str	r7, [sp, #8]
 800dd06:	f002 ffe1 	bl	8010ccc <acc_confprogram_live_patch>
 800dd0a:	f003 fa7f 	bl	801120c <acc_image_a121_r1a_cal_session_get>
 800dd0e:	9005      	str	r0, [sp, #20]
 800dd10:	f003 fa80 	bl	8011214 <acc_image_a121_r1a_cal_session_param_table_get>
 800dd14:	2224      	movs	r2, #36	@ 0x24
 800dd16:	9905      	ldr	r1, [sp, #20]
 800dd18:	9200      	str	r2, [sp, #0]
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	9501      	str	r5, [sp, #4]
 800dd1e:	9702      	str	r7, [sp, #8]
 800dd20:	4620      	mov	r0, r4
 800dd22:	2200      	movs	r2, #0
 800dd24:	f002 ffd2 	bl	8010ccc <acc_confprogram_live_patch>
 800dd28:	4620      	mov	r0, r4
 800dd2a:	f240 21c5 	movw	r1, #709	@ 0x2c5
 800dd2e:	b007      	add	sp, #28
 800dd30:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dd34:	f001 b822 	b.w	800ed7c <acc_sensor_protocol_a121_run_program>
 800dd38:	0800eb49 	.word	0x0800eb49

0800dd3c <acc_a121_cal_session_start_4_bba_vga_program>:
 800dd3c:	f44f 7145 	mov.w	r1, #788	@ 0x314
 800dd40:	f001 b81c 	b.w	800ed7c <acc_sensor_protocol_a121_run_program>

0800dd44 <acc_a121_cal_session_start_5_area_index_program>:
 800dd44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd46:	b087      	sub	sp, #28
 800dd48:	4604      	mov	r4, r0
 800dd4a:	460f      	mov	r7, r1
 800dd4c:	4616      	mov	r6, r2
 800dd4e:	f003 fa5d 	bl	801120c <acc_image_a121_r1a_cal_session_get>
 800dd52:	9005      	str	r0, [sp, #20]
 800dd54:	f003 fa5e 	bl	8011214 <acc_image_a121_r1a_cal_session_param_table_get>
 800dd58:	883a      	ldrh	r2, [r7, #0]
 800dd5a:	4d21      	ldr	r5, [pc, #132]	@ (800dde0 <acc_a121_cal_session_start_5_area_index_program+0x9c>)
 800dd5c:	9201      	str	r2, [sp, #4]
 800dd5e:	2207      	movs	r2, #7
 800dd60:	9905      	ldr	r1, [sp, #20]
 800dd62:	9200      	str	r2, [sp, #0]
 800dd64:	4603      	mov	r3, r0
 800dd66:	2200      	movs	r2, #0
 800dd68:	4620      	mov	r0, r4
 800dd6a:	9502      	str	r5, [sp, #8]
 800dd6c:	f002 ffae 	bl	8010ccc <acc_confprogram_live_patch>
 800dd70:	f003 fa4c 	bl	801120c <acc_image_a121_r1a_cal_session_get>
 800dd74:	9005      	str	r0, [sp, #20]
 800dd76:	f003 fa4d 	bl	8011214 <acc_image_a121_r1a_cal_session_param_table_get>
 800dd7a:	2208      	movs	r2, #8
 800dd7c:	9905      	ldr	r1, [sp, #20]
 800dd7e:	9601      	str	r6, [sp, #4]
 800dd80:	4603      	mov	r3, r0
 800dd82:	9200      	str	r2, [sp, #0]
 800dd84:	9502      	str	r5, [sp, #8]
 800dd86:	2200      	movs	r2, #0
 800dd88:	4620      	mov	r0, r4
 800dd8a:	f002 ff9f 	bl	8010ccc <acc_confprogram_live_patch>
 800dd8e:	f003 fa3d 	bl	801120c <acc_image_a121_r1a_cal_session_get>
 800dd92:	9005      	str	r0, [sp, #20]
 800dd94:	f003 fa3e 	bl	8011214 <acc_image_a121_r1a_cal_session_param_table_get>
 800dd98:	2603      	movs	r6, #3
 800dd9a:	2209      	movs	r2, #9
 800dd9c:	9905      	ldr	r1, [sp, #20]
 800dd9e:	9502      	str	r5, [sp, #8]
 800dda0:	4603      	mov	r3, r0
 800dda2:	e9cd 2600 	strd	r2, r6, [sp]
 800dda6:	4620      	mov	r0, r4
 800dda8:	2200      	movs	r2, #0
 800ddaa:	f002 ff8f 	bl	8010ccc <acc_confprogram_live_patch>
 800ddae:	f003 fa2d 	bl	801120c <acc_image_a121_r1a_cal_session_get>
 800ddb2:	9005      	str	r0, [sp, #20]
 800ddb4:	f003 fa2e 	bl	8011214 <acc_image_a121_r1a_cal_session_param_table_get>
 800ddb8:	2606      	movs	r6, #6
 800ddba:	220a      	movs	r2, #10
 800ddbc:	e9cd 2600 	strd	r2, r6, [sp]
 800ddc0:	9905      	ldr	r1, [sp, #20]
 800ddc2:	9502      	str	r5, [sp, #8]
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	4620      	mov	r0, r4
 800ddca:	f002 ff7f 	bl	8010ccc <acc_confprogram_live_patch>
 800ddce:	4620      	mov	r0, r4
 800ddd0:	f240 31d5 	movw	r1, #981	@ 0x3d5
 800ddd4:	b007      	add	sp, #28
 800ddd6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ddda:	f000 bfcf 	b.w	800ed7c <acc_sensor_protocol_a121_run_program>
 800ddde:	bf00      	nop
 800dde0:	0800eb49 	.word	0x0800eb49

0800dde4 <acc_a121_cal_session_start_6_tx_freq_program>:
 800dde4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dde6:	b087      	sub	sp, #28
 800dde8:	460d      	mov	r5, r1
 800ddea:	4604      	mov	r4, r0
 800ddec:	f003 fa0e 	bl	801120c <acc_image_a121_r1a_cal_session_get>
 800ddf0:	9005      	str	r0, [sp, #20]
 800ddf2:	f003 fa0f 	bl	8011214 <acc_image_a121_r1a_cal_session_param_table_get>
 800ddf6:	882a      	ldrh	r2, [r5, #0]
 800ddf8:	4e41      	ldr	r6, [pc, #260]	@ (800df00 <acc_a121_cal_session_start_6_tx_freq_program+0x11c>)
 800ddfa:	9201      	str	r2, [sp, #4]
 800ddfc:	2221      	movs	r2, #33	@ 0x21
 800ddfe:	9905      	ldr	r1, [sp, #20]
 800de00:	9200      	str	r2, [sp, #0]
 800de02:	4603      	mov	r3, r0
 800de04:	2200      	movs	r2, #0
 800de06:	4620      	mov	r0, r4
 800de08:	9602      	str	r6, [sp, #8]
 800de0a:	f002 ff5f 	bl	8010ccc <acc_confprogram_live_patch>
 800de0e:	f003 f9fd 	bl	801120c <acc_image_a121_r1a_cal_session_get>
 800de12:	9005      	str	r0, [sp, #20]
 800de14:	f003 f9fe 	bl	8011214 <acc_image_a121_r1a_cal_session_param_table_get>
 800de18:	886f      	ldrh	r7, [r5, #2]
 800de1a:	9905      	ldr	r1, [sp, #20]
 800de1c:	9701      	str	r7, [sp, #4]
 800de1e:	2222      	movs	r2, #34	@ 0x22
 800de20:	4603      	mov	r3, r0
 800de22:	9200      	str	r2, [sp, #0]
 800de24:	9602      	str	r6, [sp, #8]
 800de26:	2200      	movs	r2, #0
 800de28:	4620      	mov	r0, r4
 800de2a:	f002 ff4f 	bl	8010ccc <acc_confprogram_live_patch>
 800de2e:	f003 f9ed 	bl	801120c <acc_image_a121_r1a_cal_session_get>
 800de32:	9005      	str	r0, [sp, #20]
 800de34:	f003 f9ee 	bl	8011214 <acc_image_a121_r1a_cal_session_param_table_get>
 800de38:	88ef      	ldrh	r7, [r5, #6]
 800de3a:	9905      	ldr	r1, [sp, #20]
 800de3c:	9701      	str	r7, [sp, #4]
 800de3e:	2201      	movs	r2, #1
 800de40:	4603      	mov	r3, r0
 800de42:	9200      	str	r2, [sp, #0]
 800de44:	9602      	str	r6, [sp, #8]
 800de46:	2200      	movs	r2, #0
 800de48:	4620      	mov	r0, r4
 800de4a:	f002 ff3f 	bl	8010ccc <acc_confprogram_live_patch>
 800de4e:	f003 f9dd 	bl	801120c <acc_image_a121_r1a_cal_session_get>
 800de52:	9005      	str	r0, [sp, #20]
 800de54:	f003 f9de 	bl	8011214 <acc_image_a121_r1a_cal_session_param_table_get>
 800de58:	892f      	ldrh	r7, [r5, #8]
 800de5a:	9905      	ldr	r1, [sp, #20]
 800de5c:	9701      	str	r7, [sp, #4]
 800de5e:	2202      	movs	r2, #2
 800de60:	4603      	mov	r3, r0
 800de62:	9200      	str	r2, [sp, #0]
 800de64:	9602      	str	r6, [sp, #8]
 800de66:	2200      	movs	r2, #0
 800de68:	4620      	mov	r0, r4
 800de6a:	f002 ff2f 	bl	8010ccc <acc_confprogram_live_patch>
 800de6e:	f003 f9cd 	bl	801120c <acc_image_a121_r1a_cal_session_get>
 800de72:	9005      	str	r0, [sp, #20]
 800de74:	f003 f9ce 	bl	8011214 <acc_image_a121_r1a_cal_session_param_table_get>
 800de78:	89af      	ldrh	r7, [r5, #12]
 800de7a:	9905      	ldr	r1, [sp, #20]
 800de7c:	9701      	str	r7, [sp, #4]
 800de7e:	2203      	movs	r2, #3
 800de80:	4603      	mov	r3, r0
 800de82:	9200      	str	r2, [sp, #0]
 800de84:	9602      	str	r6, [sp, #8]
 800de86:	2200      	movs	r2, #0
 800de88:	4620      	mov	r0, r4
 800de8a:	f002 ff1f 	bl	8010ccc <acc_confprogram_live_patch>
 800de8e:	f003 f9bd 	bl	801120c <acc_image_a121_r1a_cal_session_get>
 800de92:	9005      	str	r0, [sp, #20]
 800de94:	f003 f9be 	bl	8011214 <acc_image_a121_r1a_cal_session_param_table_get>
 800de98:	89ef      	ldrh	r7, [r5, #14]
 800de9a:	9905      	ldr	r1, [sp, #20]
 800de9c:	9701      	str	r7, [sp, #4]
 800de9e:	2204      	movs	r2, #4
 800dea0:	4603      	mov	r3, r0
 800dea2:	9200      	str	r2, [sp, #0]
 800dea4:	9602      	str	r6, [sp, #8]
 800dea6:	2200      	movs	r2, #0
 800dea8:	4620      	mov	r0, r4
 800deaa:	f002 ff0f 	bl	8010ccc <acc_confprogram_live_patch>
 800deae:	f003 f9ad 	bl	801120c <acc_image_a121_r1a_cal_session_get>
 800deb2:	9005      	str	r0, [sp, #20]
 800deb4:	f003 f9ae 	bl	8011214 <acc_image_a121_r1a_cal_session_param_table_get>
 800deb8:	8a6f      	ldrh	r7, [r5, #18]
 800deba:	9905      	ldr	r1, [sp, #20]
 800debc:	9602      	str	r6, [sp, #8]
 800debe:	2205      	movs	r2, #5
 800dec0:	4603      	mov	r3, r0
 800dec2:	9200      	str	r2, [sp, #0]
 800dec4:	9701      	str	r7, [sp, #4]
 800dec6:	2200      	movs	r2, #0
 800dec8:	4620      	mov	r0, r4
 800deca:	f002 feff 	bl	8010ccc <acc_confprogram_live_patch>
 800dece:	f003 f99d 	bl	801120c <acc_image_a121_r1a_cal_session_get>
 800ded2:	9005      	str	r0, [sp, #20]
 800ded4:	f003 f99e 	bl	8011214 <acc_image_a121_r1a_cal_session_param_table_get>
 800ded8:	2206      	movs	r2, #6
 800deda:	4603      	mov	r3, r0
 800dedc:	8aa8      	ldrh	r0, [r5, #20]
 800dede:	9905      	ldr	r1, [sp, #20]
 800dee0:	9001      	str	r0, [sp, #4]
 800dee2:	9200      	str	r2, [sp, #0]
 800dee4:	9602      	str	r6, [sp, #8]
 800dee6:	4620      	mov	r0, r4
 800dee8:	2200      	movs	r2, #0
 800deea:	f002 feef 	bl	8010ccc <acc_confprogram_live_patch>
 800deee:	4620      	mov	r0, r4
 800def0:	f44f 717b 	mov.w	r1, #1004	@ 0x3ec
 800def4:	b007      	add	sp, #28
 800def6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800defa:	f000 bf3f 	b.w	800ed7c <acc_sensor_protocol_a121_run_program>
 800defe:	bf00      	nop
 800df00:	0800eb49 	.word	0x0800eb49

0800df04 <acc_a121_cal_session_start_7_rx_freq_program>:
 800df04:	b570      	push	{r4, r5, r6, lr}
 800df06:	b086      	sub	sp, #24
 800df08:	460d      	mov	r5, r1
 800df0a:	4604      	mov	r4, r0
 800df0c:	f003 f97e 	bl	801120c <acc_image_a121_r1a_cal_session_get>
 800df10:	9005      	str	r0, [sp, #20]
 800df12:	f003 f97f 	bl	8011214 <acc_image_a121_r1a_cal_session_param_table_get>
 800df16:	4e09      	ldr	r6, [pc, #36]	@ (800df3c <acc_a121_cal_session_start_7_rx_freq_program+0x38>)
 800df18:	9905      	ldr	r1, [sp, #20]
 800df1a:	9501      	str	r5, [sp, #4]
 800df1c:	220c      	movs	r2, #12
 800df1e:	4603      	mov	r3, r0
 800df20:	9200      	str	r2, [sp, #0]
 800df22:	4620      	mov	r0, r4
 800df24:	9602      	str	r6, [sp, #8]
 800df26:	2200      	movs	r2, #0
 800df28:	f002 fed0 	bl	8010ccc <acc_confprogram_live_patch>
 800df2c:	4620      	mov	r0, r4
 800df2e:	f240 4116 	movw	r1, #1046	@ 0x416
 800df32:	b006      	add	sp, #24
 800df34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800df38:	f000 bf20 	b.w	800ed7c <acc_sensor_protocol_a121_run_program>
 800df3c:	0800eb49 	.word	0x0800eb49

0800df40 <acc_a121_cal_session_start_8_phase_enhancement_program>:
 800df40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df42:	b087      	sub	sp, #28
 800df44:	4604      	mov	r4, r0
 800df46:	460e      	mov	r6, r1
 800df48:	f003 f960 	bl	801120c <acc_image_a121_r1a_cal_session_get>
 800df4c:	9005      	str	r0, [sp, #20]
 800df4e:	f003 f961 	bl	8011214 <acc_image_a121_r1a_cal_session_param_table_get>
 800df52:	4d19      	ldr	r5, [pc, #100]	@ (800dfb8 <acc_a121_cal_session_start_8_phase_enhancement_program+0x78>)
 800df54:	9905      	ldr	r1, [sp, #20]
 800df56:	9601      	str	r6, [sp, #4]
 800df58:	220b      	movs	r2, #11
 800df5a:	4603      	mov	r3, r0
 800df5c:	9200      	str	r2, [sp, #0]
 800df5e:	4620      	mov	r0, r4
 800df60:	2200      	movs	r2, #0
 800df62:	9502      	str	r5, [sp, #8]
 800df64:	f002 feb2 	bl	8010ccc <acc_confprogram_live_patch>
 800df68:	f003 f950 	bl	801120c <acc_image_a121_r1a_cal_session_get>
 800df6c:	9005      	str	r0, [sp, #20]
 800df6e:	f003 f951 	bl	8011214 <acc_image_a121_r1a_cal_session_param_table_get>
 800df72:	2609      	movs	r6, #9
 800df74:	2200      	movs	r2, #0
 800df76:	e9cd 6200 	strd	r6, r2, [sp]
 800df7a:	9905      	ldr	r1, [sp, #20]
 800df7c:	9502      	str	r5, [sp, #8]
 800df7e:	4603      	mov	r3, r0
 800df80:	4620      	mov	r0, r4
 800df82:	f002 fea3 	bl	8010ccc <acc_confprogram_live_patch>
 800df86:	f003 f941 	bl	801120c <acc_image_a121_r1a_cal_session_get>
 800df8a:	9005      	str	r0, [sp, #20]
 800df8c:	f003 f942 	bl	8011214 <acc_image_a121_r1a_cal_session_param_table_get>
 800df90:	277e      	movs	r7, #126	@ 0x7e
 800df92:	260a      	movs	r6, #10
 800df94:	9905      	ldr	r1, [sp, #20]
 800df96:	9502      	str	r5, [sp, #8]
 800df98:	4603      	mov	r3, r0
 800df9a:	e9cd 6700 	strd	r6, r7, [sp]
 800df9e:	2200      	movs	r2, #0
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	f002 fe93 	bl	8010ccc <acc_confprogram_live_patch>
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	f240 4152 	movw	r1, #1106	@ 0x452
 800dfac:	b007      	add	sp, #28
 800dfae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dfb2:	f000 bee3 	b.w	800ed7c <acc_sensor_protocol_a121_run_program>
 800dfb6:	bf00      	nop
 800dfb8:	0800eb49 	.word	0x0800eb49

0800dfbc <acc_a121_cal_session_start_9_pulseshaper_program>:
 800dfbc:	f240 417b 	movw	r1, #1147	@ 0x47b
 800dfc0:	f000 bedc 	b.w	800ed7c <acc_sensor_protocol_a121_run_program>

0800dfc4 <acc_a121_cal_session_ack_program>:
 800dfc4:	b530      	push	{r4, r5, lr}
 800dfc6:	b083      	sub	sp, #12
 800dfc8:	4604      	mov	r4, r0
 800dfca:	aa01      	add	r2, sp, #4
 800dfcc:	2101      	movs	r1, #1
 800dfce:	f000 ff9f 	bl	800ef10 <acc_sensor_protocol_a121_get_event>
 800dfd2:	4620      	mov	r0, r4
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	2101      	movs	r1, #1
 800dfd8:	f000 ff52 	bl	800ee80 <acc_sensor_protocol_a121_ack_event>
 800dfdc:	a801      	add	r0, sp, #4
 800dfde:	f001 f809 	bl	800eff4 <acc_sensor_protocol_a121_is_done>
 800dfe2:	4604      	mov	r4, r0
 800dfe4:	b930      	cbnz	r0, 800dff4 <acc_a121_cal_session_ack_program+0x30>
 800dfe6:	4a05      	ldr	r2, [pc, #20]	@ (800dffc <acc_a121_cal_session_ack_program+0x38>)
 800dfe8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800dfec:	6915      	ldr	r5, [r2, #16]
 800dfee:	4904      	ldr	r1, [pc, #16]	@ (800e000 <acc_a121_cal_session_ack_program+0x3c>)
 800dff0:	4a04      	ldr	r2, [pc, #16]	@ (800e004 <acc_a121_cal_session_ack_program+0x40>)
 800dff2:	47a8      	blx	r5
 800dff4:	4620      	mov	r0, r4
 800dff6:	b003      	add	sp, #12
 800dff8:	bd30      	pop	{r4, r5, pc}
 800dffa:	bf00      	nop
 800dffc:	20000bd8 	.word	0x20000bd8
 800e000:	080163d8 	.word	0x080163d8
 800e004:	08016390 	.word	0x08016390

0800e008 <acc_a121_cal_session_get_1_pll_cbank_temp_program_data>:
 800e008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e00c:	4688      	mov	r8, r1
 800e00e:	4607      	mov	r7, r0
 800e010:	2132      	movs	r1, #50	@ 0x32
 800e012:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800e016:	461e      	mov	r6, r3
 800e018:	f002 ff1a 	bl	8010e50 <acc_sensor_reg_read>
 800e01c:	2312      	movs	r3, #18
 800e01e:	2200      	movs	r2, #0
 800e020:	4641      	mov	r1, r8
 800e022:	4638      	mov	r0, r7
 800e024:	f000 fdec 	bl	800ec00 <acc_sensor_a121_buffer_processed_read>
 800e028:	8802      	ldrh	r2, [r0, #0]
 800e02a:	8032      	strh	r2, [r6, #0]
 800e02c:	8842      	ldrh	r2, [r0, #2]
 800e02e:	802a      	strh	r2, [r5, #0]
 800e030:	1d03      	adds	r3, r0, #4
 800e032:	6023      	str	r3, [r4, #0]
 800e034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e038 <acc_a121_cal_session_get_2_pll_ibias_vfast2_ldo_program_data>:
 800e038:	b570      	push	{r4, r5, r6, lr}
 800e03a:	4616      	mov	r6, r2
 800e03c:	461c      	mov	r4, r3
 800e03e:	2200      	movs	r2, #0
 800e040:	2341      	movs	r3, #65	@ 0x41
 800e042:	9d04      	ldr	r5, [sp, #16]
 800e044:	f000 fddc 	bl	800ec00 <acc_sensor_a121_buffer_processed_read>
 800e048:	8c02      	ldrh	r2, [r0, #32]
 800e04a:	6030      	str	r0, [r6, #0]
 800e04c:	f100 0322 	add.w	r3, r0, #34	@ 0x22
 800e050:	8022      	strh	r2, [r4, #0]
 800e052:	602b      	str	r3, [r5, #0]
 800e054:	bd70      	pop	{r4, r5, r6, pc}
 800e056:	bf00      	nop

0800e058 <acc_a121_cal_session_get_3_delay_cbank_program_data>:
 800e058:	b510      	push	{r4, lr}
 800e05a:	2320      	movs	r3, #32
 800e05c:	4614      	mov	r4, r2
 800e05e:	2200      	movs	r2, #0
 800e060:	f000 fdce 	bl	800ec00 <acc_sensor_a121_buffer_processed_read>
 800e064:	6020      	str	r0, [r4, #0]
 800e066:	bd10      	pop	{r4, pc}

0800e068 <acc_a121_cal_session_get_4_bba_vga_program_data>:
 800e068:	b510      	push	{r4, lr}
 800e06a:	2350      	movs	r3, #80	@ 0x50
 800e06c:	4614      	mov	r4, r2
 800e06e:	2200      	movs	r2, #0
 800e070:	f000 fdc6 	bl	800ec00 <acc_sensor_a121_buffer_processed_read>
 800e074:	6020      	str	r0, [r4, #0]
 800e076:	bd10      	pop	{r4, pc}

0800e078 <acc_a121_cal_session_get_5_area_index_program_data>:
 800e078:	b510      	push	{r4, lr}
 800e07a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800e07e:	4614      	mov	r4, r2
 800e080:	2200      	movs	r2, #0
 800e082:	f000 fdbd 	bl	800ec00 <acc_sensor_a121_buffer_processed_read>
 800e086:	6020      	str	r0, [r4, #0]
 800e088:	bd10      	pop	{r4, pc}
 800e08a:	bf00      	nop

0800e08c <acc_a121_cal_session_get_6_tx_freq_program_data>:
 800e08c:	f7ff bff4 	b.w	800e078 <acc_a121_cal_session_get_5_area_index_program_data>

0800e090 <acc_a121_cal_session_get_7_rx_freq_program_data>:
 800e090:	b510      	push	{r4, lr}
 800e092:	2310      	movs	r3, #16
 800e094:	4614      	mov	r4, r2
 800e096:	2200      	movs	r2, #0
 800e098:	f000 fdb2 	bl	800ec00 <acc_sensor_a121_buffer_processed_read>
 800e09c:	6020      	str	r0, [r4, #0]
 800e09e:	bd10      	pop	{r4, pc}

0800e0a0 <acc_a121_cal_session_get_8_phase_enhancement_program_data>:
 800e0a0:	b510      	push	{r4, lr}
 800e0a2:	2360      	movs	r3, #96	@ 0x60
 800e0a4:	4614      	mov	r4, r2
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	f000 fdaa 	bl	800ec00 <acc_sensor_a121_buffer_processed_read>
 800e0ac:	6020      	str	r0, [r4, #0]
 800e0ae:	bd10      	pop	{r4, pc}

0800e0b0 <acc_a121_cal_session_get_9_pulseshaper_program_data>:
 800e0b0:	b538      	push	{r3, r4, r5, lr}
 800e0b2:	4615      	mov	r5, r2
 800e0b4:	461c      	mov	r4, r3
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	f44f 639c 	mov.w	r3, #1248	@ 0x4e0
 800e0bc:	f000 fda0 	bl	800ec00 <acc_sensor_a121_buffer_processed_read>
 800e0c0:	f500 7340 	add.w	r3, r0, #768	@ 0x300
 800e0c4:	6028      	str	r0, [r5, #0]
 800e0c6:	6023      	str	r3, [r4, #0]
 800e0c8:	bd38      	pop	{r3, r4, r5, pc}
 800e0ca:	bf00      	nop

0800e0cc <acc_rss_integration_register_a121>:
 800e0cc:	68c3      	ldr	r3, [r0, #12]
 800e0ce:	b570      	push	{r4, r5, r6, lr}
 800e0d0:	b1c3      	cbz	r3, 800e104 <acc_rss_integration_register_a121+0x38>
 800e0d2:	6843      	ldr	r3, [r0, #4]
 800e0d4:	b1cb      	cbz	r3, 800e10a <acc_rss_integration_register_a121+0x3e>
 800e0d6:	6883      	ldr	r3, [r0, #8]
 800e0d8:	b1bb      	cbz	r3, 800e10a <acc_rss_integration_register_a121+0x3e>
 800e0da:	6903      	ldr	r3, [r0, #16]
 800e0dc:	b1eb      	cbz	r3, 800e11a <acc_rss_integration_register_a121+0x4e>
 800e0de:	8802      	ldrh	r2, [r0, #0]
 800e0e0:	2a0f      	cmp	r2, #15
 800e0e2:	d914      	bls.n	800e10e <acc_rss_integration_register_a121+0x42>
 800e0e4:	4604      	mov	r4, r0
 800e0e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e0e8:	4d0d      	ldr	r5, [pc, #52]	@ (800e120 <acc_rss_integration_register_a121+0x54>)
 800e0ea:	4e0e      	ldr	r6, [pc, #56]	@ (800e124 <acc_rss_integration_register_a121+0x58>)
 800e0ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e0ee:	4b0e      	ldr	r3, [pc, #56]	@ (800e128 <acc_rss_integration_register_a121+0x5c>)
 800e0f0:	4a0e      	ldr	r2, [pc, #56]	@ (800e12c <acc_rss_integration_register_a121+0x60>)
 800e0f2:	601a      	str	r2, [r3, #0]
 800e0f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e0f8:	2302      	movs	r3, #2
 800e0fa:	e885 0003 	stmia.w	r5, {r0, r1}
 800e0fe:	7033      	strb	r3, [r6, #0]
 800e100:	2001      	movs	r0, #1
 800e102:	bd70      	pop	{r4, r5, r6, pc}
 800e104:	6943      	ldr	r3, [r0, #20]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d1e3      	bne.n	800e0d2 <acc_rss_integration_register_a121+0x6>
 800e10a:	6903      	ldr	r3, [r0, #16]
 800e10c:	b12b      	cbz	r3, 800e11a <acc_rss_integration_register_a121+0x4e>
 800e10e:	4a08      	ldr	r2, [pc, #32]	@ (800e130 <acc_rss_integration_register_a121+0x64>)
 800e110:	4908      	ldr	r1, [pc, #32]	@ (800e134 <acc_rss_integration_register_a121+0x68>)
 800e112:	2000      	movs	r0, #0
 800e114:	4798      	blx	r3
 800e116:	2000      	movs	r0, #0
 800e118:	bd70      	pop	{r4, r5, r6, pc}
 800e11a:	4618      	mov	r0, r3
 800e11c:	bd70      	pop	{r4, r5, r6, pc}
 800e11e:	bf00      	nop
 800e120:	20000bd8 	.word	0x20000bd8
 800e124:	20000a80 	.word	0x20000a80
 800e128:	20000a84 	.word	0x20000a84
 800e12c:	016e3600 	.word	0x016e3600
 800e130:	080163f8 	.word	0x080163f8
 800e134:	0801640c 	.word	0x0801640c

0800e138 <acc_rss_integration_get_sensor_reference_frequency>:
 800e138:	4b01      	ldr	r3, [pc, #4]	@ (800e140 <acc_rss_integration_get_sensor_reference_frequency+0x8>)
 800e13a:	6818      	ldr	r0, [r3, #0]
 800e13c:	4770      	bx	lr
 800e13e:	bf00      	nop
 800e140:	20000a84 	.word	0x20000a84

0800e144 <acc_rss_integration_get_max_spi_transfer_size>:
 800e144:	4b01      	ldr	r3, [pc, #4]	@ (800e14c <acc_rss_integration_get_max_spi_transfer_size+0x8>)
 800e146:	8818      	ldrh	r0, [r3, #0]
 800e148:	4770      	bx	lr
 800e14a:	bf00      	nop
 800e14c:	20000bd8 	.word	0x20000bd8

0800e150 <acc_rss_integration_sensor_device_transfer>:
 800e150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e154:	4f10      	ldr	r7, [pc, #64]	@ (800e198 <acc_rss_integration_sensor_device_transfer+0x48>)
 800e156:	f8d7 e014 	ldr.w	lr, [r7, #20]
 800e15a:	f1be 0f00 	cmp.w	lr, #0
 800e15e:	d003      	beq.n	800e168 <acc_rss_integration_sensor_device_transfer+0x18>
 800e160:	4673      	mov	r3, lr
 800e162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e166:	4718      	bx	r3
 800e168:	460c      	mov	r4, r1
 800e16a:	4606      	mov	r6, r0
 800e16c:	4611      	mov	r1, r2
 800e16e:	4615      	mov	r5, r2
 800e170:	4620      	mov	r0, r4
 800e172:	4698      	mov	r8, r3
 800e174:	f002 ffee 	bl	8011154 <acc_utils_swap16_array>
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	4630      	mov	r0, r6
 800e17c:	006a      	lsls	r2, r5, #1
 800e17e:	4621      	mov	r1, r4
 800e180:	4798      	blx	r3
 800e182:	f1b8 0f00 	cmp.w	r8, #0
 800e186:	d101      	bne.n	800e18c <acc_rss_integration_sensor_device_transfer+0x3c>
 800e188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e18c:	4629      	mov	r1, r5
 800e18e:	4620      	mov	r0, r4
 800e190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e194:	f002 bfde 	b.w	8011154 <acc_utils_swap16_array>
 800e198:	20000bd8 	.word	0x20000bd8

0800e19c <acc_rss_integration_mem_alloc_debug>:
 800e19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1a0:	4f0c      	ldr	r7, [pc, #48]	@ (800e1d4 <acc_rss_integration_mem_alloc_debug+0x38>)
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	4688      	mov	r8, r1
 800e1a6:	4616      	mov	r6, r2
 800e1a8:	4605      	mov	r5, r0
 800e1aa:	4798      	blx	r3
 800e1ac:	4604      	mov	r4, r0
 800e1ae:	b150      	cbz	r0, 800e1c6 <acc_rss_integration_mem_alloc_debug+0x2a>
 800e1b0:	4b09      	ldr	r3, [pc, #36]	@ (800e1d8 <acc_rss_integration_mem_alloc_debug+0x3c>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	b123      	cbz	r3, 800e1c0 <acc_rss_integration_mem_alloc_debug+0x24>
 800e1b6:	689f      	ldr	r7, [r3, #8]
 800e1b8:	4642      	mov	r2, r8
 800e1ba:	4633      	mov	r3, r6
 800e1bc:	4629      	mov	r1, r5
 800e1be:	47b8      	blx	r7
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	4a04      	ldr	r2, [pc, #16]	@ (800e1dc <acc_rss_integration_mem_alloc_debug+0x40>)
 800e1ca:	4905      	ldr	r1, [pc, #20]	@ (800e1e0 <acc_rss_integration_mem_alloc_debug+0x44>)
 800e1cc:	4798      	blx	r3
 800e1ce:	4620      	mov	r0, r4
 800e1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1d4:	20000bd8 	.word	0x20000bd8
 800e1d8:	20000a7c 	.word	0x20000a7c
 800e1dc:	0801641c 	.word	0x0801641c
 800e1e0:	0801640c 	.word	0x0801640c

0800e1e4 <acc_rss_integration_mem_calloc_debug>:
 800e1e4:	b538      	push	{r3, r4, r5, lr}
 800e1e6:	b1a8      	cbz	r0, 800e214 <acc_rss_integration_mem_calloc_debug+0x30>
 800e1e8:	4614      	mov	r4, r2
 800e1ea:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800e1ee:	fbb2 f2f0 	udiv	r2, r2, r0
 800e1f2:	428a      	cmp	r2, r1
 800e1f4:	d90e      	bls.n	800e214 <acc_rss_integration_mem_calloc_debug+0x30>
 800e1f6:	fb01 f500 	mul.w	r5, r1, r0
 800e1fa:	461a      	mov	r2, r3
 800e1fc:	4621      	mov	r1, r4
 800e1fe:	4628      	mov	r0, r5
 800e200:	f7ff ffcc 	bl	800e19c <acc_rss_integration_mem_alloc_debug>
 800e204:	4604      	mov	r4, r0
 800e206:	b130      	cbz	r0, 800e216 <acc_rss_integration_mem_calloc_debug+0x32>
 800e208:	462a      	mov	r2, r5
 800e20a:	2100      	movs	r1, #0
 800e20c:	f004 fcc2 	bl	8012b94 <memset>
 800e210:	4620      	mov	r0, r4
 800e212:	bd38      	pop	{r3, r4, r5, pc}
 800e214:	2400      	movs	r4, #0
 800e216:	4620      	mov	r0, r4
 800e218:	bd38      	pop	{r3, r4, r5, pc}
 800e21a:	bf00      	nop

0800e21c <acc_rss_integration_mem_free>:
 800e21c:	4b07      	ldr	r3, [pc, #28]	@ (800e23c <acc_rss_integration_mem_free+0x20>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	b510      	push	{r4, lr}
 800e222:	4604      	mov	r4, r0
 800e224:	b10b      	cbz	r3, 800e22a <acc_rss_integration_mem_free+0xe>
 800e226:	68db      	ldr	r3, [r3, #12]
 800e228:	4798      	blx	r3
 800e22a:	b12c      	cbz	r4, 800e238 <acc_rss_integration_mem_free+0x1c>
 800e22c:	4b04      	ldr	r3, [pc, #16]	@ (800e240 <acc_rss_integration_mem_free+0x24>)
 800e22e:	4620      	mov	r0, r4
 800e230:	689b      	ldr	r3, [r3, #8]
 800e232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e236:	4718      	bx	r3
 800e238:	bd10      	pop	{r4, pc}
 800e23a:	bf00      	nop
 800e23c:	20000a7c 	.word	0x20000a7c
 800e240:	20000bd8 	.word	0x20000bd8

0800e244 <acc_rss_integration_log_level>:
 800e244:	4b01      	ldr	r3, [pc, #4]	@ (800e24c <acc_rss_integration_log_level+0x8>)
 800e246:	7818      	ldrb	r0, [r3, #0]
 800e248:	4770      	bx	lr
 800e24a:	bf00      	nop
 800e24c:	20000a80 	.word	0x20000a80

0800e250 <pipeline_a121_produce>:
 800e250:	6803      	ldr	r3, [r0, #0]
 800e252:	f8d0 20e8 	ldr.w	r2, [r0, #232]	@ 0xe8
 800e256:	f8c0 20f0 	str.w	r2, [r0, #240]	@ 0xf0
 800e25a:	685a      	ldr	r2, [r3, #4]
 800e25c:	4618      	mov	r0, r3
 800e25e:	4710      	bx	r2

0800e260 <pipeline_a121_disassemble>:
 800e260:	b538      	push	{r3, r4, r5, lr}
 800e262:	6805      	ldr	r5, [r0, #0]
 800e264:	4604      	mov	r4, r0
 800e266:	b175      	cbz	r5, 800e286 <pipeline_a121_disassemble+0x26>
 800e268:	f8d5 0098 	ldr.w	r0, [r5, #152]	@ 0x98
 800e26c:	f003 f95a 	bl	8011524 <acc_element_frame_release>
 800e270:	f105 003c 	add.w	r0, r5, #60	@ 0x3c
 800e274:	f003 f9da 	bl	801162c <acc_element_frame_aux_release>
 800e278:	f8d5 0098 	ldr.w	r0, [r5, #152]	@ 0x98
 800e27c:	f7ff ffce 	bl	800e21c <acc_rss_integration_mem_free>
 800e280:	4628      	mov	r0, r5
 800e282:	f7ff ffcb 	bl	800e21c <acc_rss_integration_mem_free>
 800e286:	4620      	mov	r0, r4
 800e288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e28c:	f7ff bfc6 	b.w	800e21c <acc_rss_integration_mem_free>

0800e290 <acc_pipeline_get_buffer_size>:
 800e290:	b510      	push	{r4, lr}
 800e292:	b08e      	sub	sp, #56	@ 0x38
 800e294:	460c      	mov	r4, r1
 800e296:	4669      	mov	r1, sp
 800e298:	f000 fbda 	bl	800ea50 <acc_radar_engine_a121_get_metadata>
 800e29c:	b110      	cbz	r0, 800e2a4 <acc_pipeline_get_buffer_size+0x14>
 800e29e:	f8bd 3000 	ldrh.w	r3, [sp]
 800e2a2:	6023      	str	r3, [r4, #0]
 800e2a4:	b00e      	add	sp, #56	@ 0x38
 800e2a6:	bd10      	pop	{r4, pc}

0800e2a8 <acc_pipeline_a121_assemble>:
 800e2a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e2ac:	6803      	ldr	r3, [r0, #0]
 800e2ae:	f893 204e 	ldrb.w	r2, [r3, #78]	@ 0x4e
 800e2b2:	b09b      	sub	sp, #108	@ 0x6c
 800e2b4:	4606      	mov	r6, r0
 800e2b6:	460f      	mov	r7, r1
 800e2b8:	b122      	cbz	r2, 800e2c4 <acc_pipeline_a121_assemble+0x1c>
 800e2ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	f040 810d 	bne.w	800e4de <acc_pipeline_a121_assemble+0x236>
 800e2c4:	4aa5      	ldr	r2, [pc, #660]	@ (800e55c <acc_pipeline_a121_assemble+0x2b4>)
 800e2c6:	233d      	movs	r3, #61	@ 0x3d
 800e2c8:	2110      	movs	r1, #16
 800e2ca:	2001      	movs	r0, #1
 800e2cc:	f7ff ff8a 	bl	800e1e4 <acc_rss_integration_mem_calloc_debug>
 800e2d0:	4aa2      	ldr	r2, [pc, #648]	@ (800e55c <acc_pipeline_a121_assemble+0x2b4>)
 800e2d2:	4605      	mov	r5, r0
 800e2d4:	233e      	movs	r3, #62	@ 0x3e
 800e2d6:	21fc      	movs	r1, #252	@ 0xfc
 800e2d8:	2001      	movs	r0, #1
 800e2da:	f7ff ff83 	bl	800e1e4 <acc_rss_integration_mem_calloc_debug>
 800e2de:	4604      	mov	r4, r0
 800e2e0:	2d00      	cmp	r5, #0
 800e2e2:	f000 8134 	beq.w	800e54e <acc_pipeline_a121_assemble+0x2a6>
 800e2e6:	2c00      	cmp	r4, #0
 800e2e8:	f000 812f 	beq.w	800e54a <acc_pipeline_a121_assemble+0x2a2>
 800e2ec:	f04f 0800 	mov.w	r8, #0
 800e2f0:	f8d6 9000 	ldr.w	r9, [r6]
 800e2f4:	f8c4 8098 	str.w	r8, [r4, #152]	@ 0x98
 800e2f8:	4648      	mov	r0, r9
 800e2fa:	602c      	str	r4, [r5, #0]
 800e2fc:	a90c      	add	r1, sp, #48	@ 0x30
 800e2fe:	f000 fba7 	bl	800ea50 <acc_radar_engine_a121_get_metadata>
 800e302:	2800      	cmp	r0, #0
 800e304:	f000 80de 	beq.w	800e4c4 <acc_pipeline_a121_assemble+0x21c>
 800e308:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800e30c:	f8d6 c008 	ldr.w	ip, [r6, #8]
 800e310:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800e314:	f8bd 004a 	ldrh.w	r0, [sp, #74]	@ 0x4a
 800e318:	8723      	strh	r3, [r4, #56]	@ 0x38
 800e31a:	0049      	lsls	r1, r1, #1
 800e31c:	f8c4 10e8 	str.w	r1, [r4, #232]	@ 0xe8
 800e320:	2100      	movs	r1, #0
 800e322:	f8c4 1094 	str.w	r1, [r4, #148]	@ 0x94
 800e326:	f8a4 109c 	strh.w	r1, [r4, #156]	@ 0x9c
 800e32a:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800e32e:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
 800e332:	f104 01f4 	add.w	r1, r4, #244	@ 0xf4
 800e336:	4403      	add	r3, r0
 800e338:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88
 800e33c:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 800e340:	f104 01f6 	add.w	r1, r4, #246	@ 0xf6
 800e344:	b29b      	uxth	r3, r3
 800e346:	f104 00f0 	add.w	r0, r4, #240	@ 0xf0
 800e34a:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
 800e34e:	f104 01f7 	add.w	r1, r4, #247	@ 0xf7
 800e352:	f8a4 309e 	strh.w	r3, [r4, #158]	@ 0x9e
 800e356:	6260      	str	r0, [r4, #36]	@ 0x24
 800e358:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
 800e35c:	b13a      	cbz	r2, 800e36e <acc_pipeline_a121_assemble+0xc6>
 800e35e:	f104 0eec 	add.w	lr, r4, #236	@ 0xec
 800e362:	f104 01f5 	add.w	r1, r4, #245	@ 0xf5
 800e366:	6250      	str	r0, [r2, #36]	@ 0x24
 800e368:	f8c2 e018 	str.w	lr, [r2, #24]
 800e36c:	65d1      	str	r1, [r2, #92]	@ 0x5c
 800e36e:	e9c4 0c36 	strd	r0, ip, [r4, #216]	@ 0xd8
 800e372:	f8a4 30e4 	strh.w	r3, [r4, #228]	@ 0xe4
 800e376:	2008      	movs	r0, #8
 800e378:	f002 fd44 	bl	8010e04 <acc_element_sizeof>
 800e37c:	f899 304e 	ldrb.w	r3, [r9, #78]	@ 0x4e
 800e380:	f3c0 004f 	ubfx	r0, r0, #1, #16
 800e384:	b183      	cbz	r3, 800e3a8 <acc_pipeline_a121_assemble+0x100>
 800e386:	f103 3cff 	add.w	ip, r3, #4294967295
 800e38a:	fa5f fc8c 	uxtb.w	ip, ip
 800e38e:	eb07 0c4c 	add.w	ip, r7, ip, lsl #1
 800e392:	f10d 0156 	add.w	r1, sp, #86	@ 0x56
 800e396:	1eba      	subs	r2, r7, #2
 800e398:	f831 3b02 	ldrh.w	r3, [r1], #2
 800e39c:	fbb3 f3f0 	udiv	r3, r3, r0
 800e3a0:	f822 3f02 	strh.w	r3, [r2, #2]!
 800e3a4:	4562      	cmp	r2, ip
 800e3a6:	d1f7      	bne.n	800e398 <acc_pipeline_a121_assemble+0xf0>
 800e3a8:	f8d6 8000 	ldr.w	r8, [r6]
 800e3ac:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800e3b0:	f8bd 2046 	ldrh.w	r2, [sp, #70]	@ 0x46
 800e3b4:	f8b8 9048 	ldrh.w	r9, [r8, #72]	@ 0x48
 800e3b8:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800e3ba:	f89d 1064 	ldrb.w	r1, [sp, #100]	@ 0x64
 800e3be:	60b8      	str	r0, [r7, #8]
 800e3c0:	441a      	add	r2, r3
 800e3c2:	81fa      	strh	r2, [r7, #14]
 800e3c4:	f8bd 2048 	ldrh.w	r2, [sp, #72]	@ 0x48
 800e3c8:	7339      	strb	r1, [r7, #12]
 800e3ca:	823a      	strh	r2, [r7, #16]
 800e3cc:	f1b9 0f00 	cmp.w	r9, #0
 800e3d0:	d003      	beq.n	800e3da <acc_pipeline_a121_assemble+0x132>
 800e3d2:	f8bd 204c 	ldrh.w	r2, [sp, #76]	@ 0x4c
 800e3d6:	fbb2 f9f9 	udiv	r9, r2, r9
 800e3da:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
 800e3de:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800e3e2:	f8bd 0032 	ldrh.w	r0, [sp, #50]	@ 0x32
 800e3e6:	f8ad 0000 	strh.w	r0, [sp]
 800e3ea:	441a      	add	r2, r3
 800e3ec:	440b      	add	r3, r1
 800e3ee:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e3f2:	f8ad 3008 	strh.w	r3, [sp, #8]
 800e3f6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800e3fa:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 800e3fe:	f8ad 2002 	strh.w	r2, [sp, #2]
 800e402:	f104 073c 	add.w	r7, r4, #60	@ 0x3c
 800e406:	220f      	movs	r2, #15
 800e408:	f8ad 3004 	strh.w	r3, [sp, #4]
 800e40c:	4638      	mov	r0, r7
 800e40e:	2303      	movs	r3, #3
 800e410:	4669      	mov	r1, sp
 800e412:	f8ad 200a 	strh.w	r2, [sp, #10]
 800e416:	f88d 300c 	strb.w	r3, [sp, #12]
 800e41a:	f003 f8e5 	bl	80115e8 <acc_element_frame_aux_init>
 800e41e:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 800e422:	b370      	cbz	r0, 800e482 <acc_pipeline_a121_assemble+0x1da>
 800e424:	f8bd 304a 	ldrh.w	r3, [sp, #74]	@ 0x4a
 800e428:	f8bd 103e 	ldrh.w	r1, [sp, #62]	@ 0x3e
 800e42c:	f8b8 c048 	ldrh.w	ip, [r8, #72]	@ 0x48
 800e430:	f8ad 901a 	strh.w	r9, [sp, #26]
 800e434:	2200      	movs	r2, #0
 800e436:	4419      	add	r1, r3
 800e438:	f898 304e 	ldrb.w	r3, [r8, #78]	@ 0x4e
 800e43c:	9205      	str	r2, [sp, #20]
 800e43e:	e9cd 2208 	strd	r2, r2, [sp, #32]
 800e442:	9207      	str	r2, [sp, #28]
 800e444:	920a      	str	r2, [sp, #40]	@ 0x28
 800e446:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e448:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 800e44c:	f8ad 1014 	strh.w	r1, [sp, #20]
 800e450:	f88d 3016 	strb.w	r3, [sp, #22]
 800e454:	f8ad c018 	strh.w	ip, [sp, #24]
 800e458:	9204      	str	r2, [sp, #16]
 800e45a:	b17b      	cbz	r3, 800e47c <acc_pipeline_a121_assemble+0x1d4>
 800e45c:	3b01      	subs	r3, #1
 800e45e:	b2db      	uxtb	r3, r3
 800e460:	aa14      	add	r2, sp, #80	@ 0x50
 800e462:	eb02 0c43 	add.w	ip, r2, r3, lsl #1
 800e466:	f10d 034e 	add.w	r3, sp, #78	@ 0x4e
 800e46a:	aa07      	add	r2, sp, #28
 800e46c:	f833 1b02 	ldrh.w	r1, [r3], #2
 800e470:	f822 1b02 	strh.w	r1, [r2], #2
 800e474:	459c      	cmp	ip, r3
 800e476:	88d9      	ldrh	r1, [r3, #6]
 800e478:	80d1      	strh	r1, [r2, #6]
 800e47a:	d1f7      	bne.n	800e46c <acc_pipeline_a121_assemble+0x1c4>
 800e47c:	a904      	add	r1, sp, #16
 800e47e:	f002 ffd9 	bl	8011434 <acc_element_frame_init>
 800e482:	f104 08a0 	add.w	r8, r4, #160	@ 0xa0
 800e486:	6871      	ldr	r1, [r6, #4]
 800e488:	4640      	mov	r0, r8
 800e48a:	f003 f901 	bl	8011690 <acc_element_sink_a121_callback_init>
 800e48e:	4639      	mov	r1, r7
 800e490:	4620      	mov	r0, r4
 800e492:	f002 fcc3 	bl	8010e1c <acc_element_connect>
 800e496:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 800e49a:	2900      	cmp	r1, #0
 800e49c:	d059      	beq.n	800e552 <acc_pipeline_a121_assemble+0x2aa>
 800e49e:	4638      	mov	r0, r7
 800e4a0:	f002 fcbc 	bl	8010e1c <acc_element_connect>
 800e4a4:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 800e4a8:	4641      	mov	r1, r8
 800e4aa:	f002 fcb7 	bl	8010e1c <acc_element_connect>
 800e4ae:	6820      	ldr	r0, [r4, #0]
 800e4b0:	6883      	ldr	r3, [r0, #8]
 800e4b2:	4798      	blx	r3
 800e4b4:	2800      	cmp	r0, #0
 800e4b6:	d13b      	bne.n	800e530 <acc_pipeline_a121_assemble+0x288>
 800e4b8:	4b29      	ldr	r3, [pc, #164]	@ (800e560 <acc_pipeline_a121_assemble+0x2b8>)
 800e4ba:	4a2a      	ldr	r2, [pc, #168]	@ (800e564 <acc_pipeline_a121_assemble+0x2bc>)
 800e4bc:	691b      	ldr	r3, [r3, #16]
 800e4be:	4927      	ldr	r1, [pc, #156]	@ (800e55c <acc_pipeline_a121_assemble+0x2b4>)
 800e4c0:	4798      	blx	r3
 800e4c2:	e004      	b.n	800e4ce <acc_pipeline_a121_assemble+0x226>
 800e4c4:	4b26      	ldr	r3, [pc, #152]	@ (800e560 <acc_pipeline_a121_assemble+0x2b8>)
 800e4c6:	4a28      	ldr	r2, [pc, #160]	@ (800e568 <acc_pipeline_a121_assemble+0x2c0>)
 800e4c8:	691b      	ldr	r3, [r3, #16]
 800e4ca:	4924      	ldr	r1, [pc, #144]	@ (800e55c <acc_pipeline_a121_assemble+0x2b4>)
 800e4cc:	4798      	blx	r3
 800e4ce:	4628      	mov	r0, r5
 800e4d0:	f7ff fec6 	bl	800e260 <pipeline_a121_disassemble>
 800e4d4:	2500      	movs	r5, #0
 800e4d6:	4628      	mov	r0, r5
 800e4d8:	b01b      	add	sp, #108	@ 0x6c
 800e4da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4de:	4a1f      	ldr	r2, [pc, #124]	@ (800e55c <acc_pipeline_a121_assemble+0x2b4>)
 800e4e0:	233d      	movs	r3, #61	@ 0x3d
 800e4e2:	2110      	movs	r1, #16
 800e4e4:	2001      	movs	r0, #1
 800e4e6:	f7ff fe7d 	bl	800e1e4 <acc_rss_integration_mem_calloc_debug>
 800e4ea:	4a1c      	ldr	r2, [pc, #112]	@ (800e55c <acc_pipeline_a121_assemble+0x2b4>)
 800e4ec:	233e      	movs	r3, #62	@ 0x3e
 800e4ee:	21fc      	movs	r1, #252	@ 0xfc
 800e4f0:	4605      	mov	r5, r0
 800e4f2:	2001      	movs	r0, #1
 800e4f4:	f7ff fe76 	bl	800e1e4 <acc_rss_integration_mem_calloc_debug>
 800e4f8:	4a18      	ldr	r2, [pc, #96]	@ (800e55c <acc_pipeline_a121_assemble+0x2b4>)
 800e4fa:	4604      	mov	r4, r0
 800e4fc:	2343      	movs	r3, #67	@ 0x43
 800e4fe:	2160      	movs	r1, #96	@ 0x60
 800e500:	2001      	movs	r0, #1
 800e502:	f7ff fe6f 	bl	800e1e4 <acc_rss_integration_mem_calloc_debug>
 800e506:	4680      	mov	r8, r0
 800e508:	b125      	cbz	r5, 800e514 <acc_pipeline_a121_assemble+0x26c>
 800e50a:	b11c      	cbz	r4, 800e514 <acc_pipeline_a121_assemble+0x26c>
 800e50c:	f1b8 0f00 	cmp.w	r8, #0
 800e510:	f47f aeee 	bne.w	800e2f0 <acc_pipeline_a121_assemble+0x48>
 800e514:	4628      	mov	r0, r5
 800e516:	f7ff fe81 	bl	800e21c <acc_rss_integration_mem_free>
 800e51a:	4620      	mov	r0, r4
 800e51c:	f7ff fe7e 	bl	800e21c <acc_rss_integration_mem_free>
 800e520:	4640      	mov	r0, r8
 800e522:	f7ff fe7b 	bl	800e21c <acc_rss_integration_mem_free>
 800e526:	2500      	movs	r5, #0
 800e528:	4628      	mov	r0, r5
 800e52a:	b01b      	add	sp, #108	@ 0x6c
 800e52c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e530:	6820      	ldr	r0, [r4, #0]
 800e532:	68c3      	ldr	r3, [r0, #12]
 800e534:	4798      	blx	r3
 800e536:	4b0d      	ldr	r3, [pc, #52]	@ (800e56c <acc_pipeline_a121_assemble+0x2c4>)
 800e538:	4a0d      	ldr	r2, [pc, #52]	@ (800e570 <acc_pipeline_a121_assemble+0x2c8>)
 800e53a:	606b      	str	r3, [r5, #4]
 800e53c:	4628      	mov	r0, r5
 800e53e:	2300      	movs	r3, #0
 800e540:	e9c5 3202 	strd	r3, r2, [r5, #8]
 800e544:	b01b      	add	sp, #108	@ 0x6c
 800e546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e54a:	46a0      	mov	r8, r4
 800e54c:	e7e2      	b.n	800e514 <acc_pipeline_a121_assemble+0x26c>
 800e54e:	46a8      	mov	r8, r5
 800e550:	e7e0      	b.n	800e514 <acc_pipeline_a121_assemble+0x26c>
 800e552:	4641      	mov	r1, r8
 800e554:	4638      	mov	r0, r7
 800e556:	f002 fc61 	bl	8010e1c <acc_element_connect>
 800e55a:	e7a8      	b.n	800e4ae <acc_pipeline_a121_assemble+0x206>
 800e55c:	08016450 	.word	0x08016450
 800e560:	20000bd8 	.word	0x20000bd8
 800e564:	08016460 	.word	0x08016460
 800e568:	0801642c 	.word	0x0801642c
 800e56c:	0800e251 	.word	0x0800e251
 800e570:	0800e261 	.word	0x0800e261

0800e574 <acc_pipeline_a121_prepare_memory>:
 800e574:	6803      	ldr	r3, [r0, #0]
 800e576:	b430      	push	{r4, r5}
 800e578:	f8b3 0094 	ldrh.w	r0, [r3, #148]	@ 0x94
 800e57c:	8f1c      	ldrh	r4, [r3, #56]	@ 0x38
 800e57e:	f8b3 2096 	ldrh.w	r2, [r3, #150]	@ 0x96
 800e582:	f8d3 5098 	ldr.w	r5, [r3, #152]	@ 0x98
 800e586:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 800e58a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800e58e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800e592:	e9c3 0213 	strd	r0, r2, [r3, #76]	@ 0x4c
 800e596:	615c      	str	r4, [r3, #20]
 800e598:	b14d      	cbz	r5, 800e5ae <acc_pipeline_a121_prepare_memory+0x3a>
 800e59a:	f8b3 009c 	ldrh.w	r0, [r3, #156]	@ 0x9c
 800e59e:	f8b3 209e 	ldrh.w	r2, [r3, #158]	@ 0x9e
 800e5a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800e5a6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800e5aa:	e9c5 0204 	strd	r0, r2, [r5, #16]
 800e5ae:	f8b3 20e4 	ldrh.w	r2, [r3, #228]	@ 0xe4
 800e5b2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800e5b6:	bc30      	pop	{r4, r5}
 800e5b8:	f8c3 10b0 	str.w	r1, [r3, #176]	@ 0xb0
 800e5bc:	4770      	bx	lr
 800e5be:	bf00      	nop

0800e5c0 <acc_radar_engine_a121_context_create>:
 800e5c0:	b508      	push	{r3, lr}
 800e5c2:	4a07      	ldr	r2, [pc, #28]	@ (800e5e0 <acc_radar_engine_a121_context_create+0x20>)
 800e5c4:	2373      	movs	r3, #115	@ 0x73
 800e5c6:	f44f 71fe 	mov.w	r1, #508	@ 0x1fc
 800e5ca:	2001      	movs	r0, #1
 800e5cc:	f7ff fe0a 	bl	800e1e4 <acc_rss_integration_mem_calloc_debug>
 800e5d0:	b120      	cbz	r0, 800e5dc <acc_radar_engine_a121_context_create+0x1c>
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	f8a0 31c4 	strh.w	r3, [r0, #452]	@ 0x1c4
 800e5d8:	f880 31c6 	strb.w	r3, [r0, #454]	@ 0x1c6
 800e5dc:	bd08      	pop	{r3, pc}
 800e5de:	bf00      	nop
 800e5e0:	08016480 	.word	0x08016480

0800e5e4 <acc_radar_engine_a121_context_destroy>:
 800e5e4:	b108      	cbz	r0, 800e5ea <acc_radar_engine_a121_context_destroy+0x6>
 800e5e6:	f7ff be19 	b.w	800e21c <acc_rss_integration_mem_free>
 800e5ea:	4770      	bx	lr

0800e5ec <acc_radar_engine_a121_run_program>:
 800e5ec:	f003 b902 	b.w	80117f4 <acc_cpd_a121_meas_session_run_program>

0800e5f0 <acc_radar_engine_a121_measure>:
 800e5f0:	b510      	push	{r4, lr}
 800e5f2:	460c      	mov	r4, r1
 800e5f4:	2201      	movs	r2, #1
 800e5f6:	f891 11c6 	ldrb.w	r1, [r1, #454]	@ 0x1c6
 800e5fa:	f000 fc41 	bl	800ee80 <acc_sensor_protocol_a121_ack_event>
 800e5fe:	f894 31c5 	ldrb.w	r3, [r4, #453]	@ 0x1c5
 800e602:	b143      	cbz	r3, 800e616 <acc_radar_engine_a121_measure+0x26>
 800e604:	f894 31c6 	ldrb.w	r3, [r4, #454]	@ 0x1c6
 800e608:	2b02      	cmp	r3, #2
 800e60a:	bf0c      	ite	eq
 800e60c:	2301      	moveq	r3, #1
 800e60e:	2302      	movne	r3, #2
 800e610:	f884 31c6 	strb.w	r3, [r4, #454]	@ 0x1c6
 800e614:	bd10      	pop	{r4, pc}
 800e616:	2301      	movs	r3, #1
 800e618:	f884 31c6 	strb.w	r3, [r4, #454]	@ 0x1c6
 800e61c:	bd10      	pop	{r4, pc}
 800e61e:	bf00      	nop

0800e620 <acc_radar_engine_a121_transfer_data>:
 800e620:	b538      	push	{r3, r4, r5, lr}
 800e622:	f891 11c6 	ldrb.w	r1, [r1, #454]	@ 0x1c6
 800e626:	9c04      	ldr	r4, [sp, #16]
 800e628:	2901      	cmp	r1, #1
 800e62a:	bf14      	ite	ne
 800e62c:	f44f 5180 	movne.w	r1, #4096	@ 0x1000
 800e630:	2100      	moveq	r1, #0
 800e632:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800e636:	461d      	mov	r5, r3
 800e638:	f003 f954 	bl	80118e4 <acc_cpd_a121_meas_session_transfer_data>
 800e63c:	b118      	cbz	r0, 800e646 <acc_radar_engine_a121_transfer_data+0x26>
 800e63e:	1e28      	subs	r0, r5, #0
 800e640:	bf18      	it	ne
 800e642:	2001      	movne	r0, #1
 800e644:	bd38      	pop	{r3, r4, r5, pc}
 800e646:	4b04      	ldr	r3, [pc, #16]	@ (800e658 <acc_radar_engine_a121_transfer_data+0x38>)
 800e648:	4a04      	ldr	r2, [pc, #16]	@ (800e65c <acc_radar_engine_a121_transfer_data+0x3c>)
 800e64a:	691b      	ldr	r3, [r3, #16]
 800e64c:	4904      	ldr	r1, [pc, #16]	@ (800e660 <acc_radar_engine_a121_transfer_data+0x40>)
 800e64e:	4604      	mov	r4, r0
 800e650:	4798      	blx	r3
 800e652:	4620      	mov	r0, r4
 800e654:	bd38      	pop	{r3, r4, r5, pc}
 800e656:	bf00      	nop
 800e658:	20000bd8 	.word	0x20000bd8
 800e65c:	08016494 	.word	0x08016494
 800e660:	08016480 	.word	0x08016480

0800e664 <acc_radar_engine_a121_verify_radar_data_ready>:
 800e664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e668:	b084      	sub	sp, #16
 800e66a:	460d      	mov	r5, r1
 800e66c:	2400      	movs	r4, #0
 800e66e:	f891 11c6 	ldrb.w	r1, [r1, #454]	@ 0x1c6
 800e672:	9403      	str	r4, [sp, #12]
 800e674:	4690      	mov	r8, r2
 800e676:	4607      	mov	r7, r0
 800e678:	f000 fbe6 	bl	800ee48 <acc_sensor_protocol_a121_is_event_pending>
 800e67c:	b980      	cbnz	r0, 800e6a0 <acc_radar_engine_a121_verify_radar_data_ready+0x3c>
 800e67e:	4b15      	ldr	r3, [pc, #84]	@ (800e6d4 <acc_radar_engine_a121_verify_radar_data_ready+0x70>)
 800e680:	4a15      	ldr	r2, [pc, #84]	@ (800e6d8 <acc_radar_engine_a121_verify_radar_data_ready+0x74>)
 800e682:	691d      	ldr	r5, [r3, #16]
 800e684:	4915      	ldr	r1, [pc, #84]	@ (800e6dc <acc_radar_engine_a121_verify_radar_data_ready+0x78>)
 800e686:	463b      	mov	r3, r7
 800e688:	4604      	mov	r4, r0
 800e68a:	47a8      	blx	r5
 800e68c:	ae03      	add	r6, sp, #12
 800e68e:	4630      	mov	r0, r6
 800e690:	f000 fcb8 	bl	800f004 <acc_sensor_protocol_a121_get_frame_delayed_flag>
 800e694:	f888 0000 	strb.w	r0, [r8]
 800e698:	4620      	mov	r0, r4
 800e69a:	b004      	add	sp, #16
 800e69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6a0:	ae03      	add	r6, sp, #12
 800e6a2:	f895 11c6 	ldrb.w	r1, [r5, #454]	@ 0x1c6
 800e6a6:	4632      	mov	r2, r6
 800e6a8:	4638      	mov	r0, r7
 800e6aa:	f000 fc31 	bl	800ef10 <acc_sensor_protocol_a121_get_event>
 800e6ae:	4604      	mov	r4, r0
 800e6b0:	2800      	cmp	r0, #0
 800e6b2:	d0ec      	beq.n	800e68e <acc_radar_engine_a121_verify_radar_data_ready+0x2a>
 800e6b4:	4630      	mov	r0, r6
 800e6b6:	f000 fc95 	bl	800efe4 <acc_sensor_protocol_a121_is_handshake>
 800e6ba:	4604      	mov	r4, r0
 800e6bc:	2800      	cmp	r0, #0
 800e6be:	d1e6      	bne.n	800e68e <acc_radar_engine_a121_verify_radar_data_ready+0x2a>
 800e6c0:	4a04      	ldr	r2, [pc, #16]	@ (800e6d4 <acc_radar_engine_a121_verify_radar_data_ready+0x70>)
 800e6c2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800e6c6:	6915      	ldr	r5, [r2, #16]
 800e6c8:	4904      	ldr	r1, [pc, #16]	@ (800e6dc <acc_radar_engine_a121_verify_radar_data_ready+0x78>)
 800e6ca:	9300      	str	r3, [sp, #0]
 800e6cc:	4a04      	ldr	r2, [pc, #16]	@ (800e6e0 <acc_radar_engine_a121_verify_radar_data_ready+0x7c>)
 800e6ce:	463b      	mov	r3, r7
 800e6d0:	47a8      	blx	r5
 800e6d2:	e7dc      	b.n	800e68e <acc_radar_engine_a121_verify_radar_data_ready+0x2a>
 800e6d4:	20000bd8 	.word	0x20000bd8
 800e6d8:	080164c0 	.word	0x080164c0
 800e6dc:	08016480 	.word	0x08016480
 800e6e0:	080164e0 	.word	0x080164e0

0800e6e4 <acc_radar_engine_a121_update_buffer_header>:
 800e6e4:	f890 31c4 	ldrb.w	r3, [r0, #452]	@ 0x1c4
 800e6e8:	8011      	strh	r1, [r2, #0]
 800e6ea:	b4f0      	push	{r4, r5, r6, r7}
 800e6ec:	b133      	cbz	r3, 800e6fc <acc_radar_engine_a121_update_buffer_header+0x18>
 800e6ee:	f890 31c6 	ldrb.w	r3, [r0, #454]	@ 0x1c6
 800e6f2:	f1a3 0301 	sub.w	r3, r3, #1
 800e6f6:	fab3 f383 	clz	r3, r3
 800e6fa:	095b      	lsrs	r3, r3, #5
 800e6fc:	8053      	strh	r3, [r2, #2]
 800e6fe:	f8b0 31c8 	ldrh.w	r3, [r0, #456]	@ 0x1c8
 800e702:	8093      	strh	r3, [r2, #4]
 800e704:	1d91      	adds	r1, r2, #6
 800e706:	f500 73e5 	add.w	r3, r0, #458	@ 0x1ca
 800e70a:	f500 74fd 	add.w	r4, r0, #506	@ 0x1fa
 800e70e:	681f      	ldr	r7, [r3, #0]
 800e710:	685e      	ldr	r6, [r3, #4]
 800e712:	689d      	ldr	r5, [r3, #8]
 800e714:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800e718:	f8c1 c00c 	str.w	ip, [r1, #12]
 800e71c:	3310      	adds	r3, #16
 800e71e:	42a3      	cmp	r3, r4
 800e720:	600f      	str	r7, [r1, #0]
 800e722:	604e      	str	r6, [r1, #4]
 800e724:	608d      	str	r5, [r1, #8]
 800e726:	f101 0110 	add.w	r1, r1, #16
 800e72a:	d1f0      	bne.n	800e70e <acc_radar_engine_a121_update_buffer_header+0x2a>
 800e72c:	f8b0 31fa 	ldrh.w	r3, [r0, #506]	@ 0x1fa
 800e730:	86d3      	strh	r3, [r2, #54]	@ 0x36
 800e732:	bcf0      	pop	{r4, r5, r6, r7}
 800e734:	4770      	bx	lr
 800e736:	bf00      	nop

0800e738 <acc_radar_engine_a121_check_asic_id>:
 800e738:	f000 bc68 	b.w	800f00c <acc_sensor_protocol_a121_check_asic_id>

0800e73c <acc_radar_engine_a121_is_sensor_running>:
 800e73c:	f000 bb72 	b.w	800ee24 <acc_sensor_protocol_a121_is_sensor_running>

0800e740 <acc_radar_engine_121_populate_metadata>:
 800e740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e744:	8804      	ldrh	r4, [r0, #0]
 800e746:	2a00      	cmp	r2, #0
 800e748:	bf14      	ite	ne
 800e74a:	f44f 5280 	movne.w	r2, #4096	@ 0x1000
 800e74e:	f44f 5200 	moveq.w	r2, #8192	@ 0x2000
 800e752:	f5b4 6f9c 	cmp.w	r4, #1248	@ 0x4e0
 800e756:	bf38      	it	cc
 800e758:	f44f 649c 	movcc.w	r4, #1248	@ 0x4e0
 800e75c:	42a2      	cmp	r2, r4
 800e75e:	4606      	mov	r6, r0
 800e760:	4688      	mov	r8, r1
 800e762:	461d      	mov	r5, r3
 800e764:	d22b      	bcs.n	800e7be <acc_radar_engine_121_populate_metadata+0x7e>
 800e766:	4b17      	ldr	r3, [pc, #92]	@ (800e7c4 <acc_radar_engine_121_populate_metadata+0x84>)
 800e768:	4a17      	ldr	r2, [pc, #92]	@ (800e7c8 <acc_radar_engine_121_populate_metadata+0x88>)
 800e76a:	691b      	ldr	r3, [r3, #16]
 800e76c:	4917      	ldr	r1, [pc, #92]	@ (800e7cc <acc_radar_engine_121_populate_metadata+0x8c>)
 800e76e:	2000      	movs	r0, #0
 800e770:	4798      	blx	r3
 800e772:	2700      	movs	r7, #0
 800e774:	4916      	ldr	r1, [pc, #88]	@ (800e7d0 <acc_radar_engine_121_populate_metadata+0x90>)
 800e776:	4a17      	ldr	r2, [pc, #92]	@ (800e7d4 <acc_radar_engine_121_populate_metadata+0x94>)
 800e778:	2300      	movs	r3, #0
 800e77a:	806b      	strh	r3, [r5, #2]
 800e77c:	231c      	movs	r3, #28
 800e77e:	81ab      	strh	r3, [r5, #12]
 800e780:	e9c5 1201 	strd	r1, r2, [r5, #4]
 800e784:	f000 f9de 	bl	800eb44 <acc_sensor_a121_get_max_header_length>
 800e788:	301c      	adds	r0, #28
 800e78a:	b280      	uxth	r0, r0
 800e78c:	1903      	adds	r3, r0, r4
 800e78e:	462c      	mov	r4, r5
 800e790:	005b      	lsls	r3, r3, #1
 800e792:	81e8      	strh	r0, [r5, #14]
 800e794:	6871      	ldr	r1, [r6, #4]
 800e796:	6830      	ldr	r0, [r6, #0]
 800e798:	68b2      	ldr	r2, [r6, #8]
 800e79a:	f824 3b10 	strh.w	r3, [r4], #16
 800e79e:	68f3      	ldr	r3, [r6, #12]
 800e7a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e7a2:	6930      	ldr	r0, [r6, #16]
 800e7a4:	6971      	ldr	r1, [r6, #20]
 800e7a6:	69b2      	ldr	r2, [r6, #24]
 800e7a8:	c407      	stmia	r4!, {r0, r1, r2}
 800e7aa:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e7ae:	8bb3      	ldrh	r3, [r6, #28]
 800e7b0:	8023      	strh	r3, [r4, #0]
 800e7b2:	3530      	adds	r5, #48	@ 0x30
 800e7b4:	e885 0003 	stmia.w	r5, {r0, r1}
 800e7b8:	4638      	mov	r0, r7
 800e7ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7be:	2701      	movs	r7, #1
 800e7c0:	e7d8      	b.n	800e774 <acc_radar_engine_121_populate_metadata+0x34>
 800e7c2:	bf00      	nop
 800e7c4:	20000bd8 	.word	0x20000bd8
 800e7c8:	0801650c 	.word	0x0801650c
 800e7cc:	08016480 	.word	0x08016480
 800e7d0:	00020001 	.word	0x00020001
 800e7d4:	001b0003 	.word	0x001b0003

0800e7d8 <acc_radar_engine_a121_prepare>:
 800e7d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e7dc:	f5ad 7d0d 	sub.w	sp, sp, #564	@ 0x234
 800e7e0:	460c      	mov	r4, r1
 800e7e2:	4615      	mov	r5, r2
 800e7e4:	2100      	movs	r1, #0
 800e7e6:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800e7ea:	4606      	mov	r6, r0
 800e7ec:	a81b      	add	r0, sp, #108	@ 0x6c
 800e7ee:	4699      	mov	r9, r3
 800e7f0:	9f95      	ldr	r7, [sp, #596]	@ 0x254
 800e7f2:	f10d 080c 	add.w	r8, sp, #12
 800e7f6:	f004 f9cd 	bl	8012b94 <memset>
 800e7fa:	2238      	movs	r2, #56	@ 0x38
 800e7fc:	2100      	movs	r1, #0
 800e7fe:	a80d      	add	r0, sp, #52	@ 0x34
 800e800:	f004 f9c8 	bl	8012b94 <memset>
 800e804:	4629      	mov	r1, r5
 800e806:	4620      	mov	r0, r4
 800e808:	aa1b      	add	r2, sp, #108	@ 0x6c
 800e80a:	ab05      	add	r3, sp, #20
 800e80c:	f8cd 8000 	str.w	r8, [sp]
 800e810:	f001 fb44 	bl	800fe9c <acc_translation_a121_translate>
 800e814:	b930      	cbnz	r0, 800e824 <acc_radar_engine_a121_prepare+0x4c>
 800e816:	f04f 0800 	mov.w	r8, #0
 800e81a:	4640      	mov	r0, r8
 800e81c:	f50d 7d0d 	add.w	sp, sp, #564	@ 0x234
 800e820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e824:	f894 204b 	ldrb.w	r2, [r4, #75]	@ 0x4b
 800e828:	4641      	mov	r1, r8
 800e82a:	a805      	add	r0, sp, #20
 800e82c:	ab0d      	add	r3, sp, #52	@ 0x34
 800e82e:	f7ff ff87 	bl	800e740 <acc_radar_engine_121_populate_metadata>
 800e832:	2800      	cmp	r0, #0
 800e834:	d0ef      	beq.n	800e816 <acc_radar_engine_a121_prepare+0x3e>
 800e836:	9996      	ldr	r1, [sp, #600]	@ 0x258
 800e838:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800e83c:	800b      	strh	r3, [r1, #0]
 800e83e:	9997      	ldr	r1, [sp, #604]	@ 0x25c
 800e840:	f8bd 2044 	ldrh.w	r2, [sp, #68]	@ 0x44
 800e844:	800a      	strh	r2, [r1, #0]
 800e846:	2304      	movs	r3, #4
 800e848:	aa1b      	add	r2, sp, #108	@ 0x6c
 800e84a:	4631      	mov	r1, r6
 800e84c:	2014      	movs	r0, #20
 800e84e:	f002 fae7 	bl	8010e20 <acc_probes_execute_struct>
 800e852:	2800      	cmp	r0, #0
 800e854:	d0df      	beq.n	800e816 <acc_radar_engine_a121_prepare+0x3e>
 800e856:	9994      	ldr	r1, [sp, #592]	@ 0x250
 800e858:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e85a:	464a      	mov	r2, r9
 800e85c:	4630      	mov	r0, r6
 800e85e:	f002 ff95 	bl	801178c <acc_cpd_a121_meas_session_load_program>
 800e862:	4680      	mov	r8, r0
 800e864:	b928      	cbnz	r0, 800e872 <acc_radar_engine_a121_prepare+0x9a>
 800e866:	4b27      	ldr	r3, [pc, #156]	@ (800e904 <acc_radar_engine_a121_prepare+0x12c>)
 800e868:	4a27      	ldr	r2, [pc, #156]	@ (800e908 <acc_radar_engine_a121_prepare+0x130>)
 800e86a:	691b      	ldr	r3, [r3, #16]
 800e86c:	4927      	ldr	r1, [pc, #156]	@ (800e90c <acc_radar_engine_a121_prepare+0x134>)
 800e86e:	4798      	blx	r3
 800e870:	e7d3      	b.n	800e81a <acc_radar_engine_a121_prepare+0x42>
 800e872:	4b27      	ldr	r3, [pc, #156]	@ (800e910 <acc_radar_engine_a121_prepare+0x138>)
 800e874:	9300      	str	r3, [sp, #0]
 800e876:	2260      	movs	r2, #96	@ 0x60
 800e878:	9201      	str	r2, [sp, #4]
 800e87a:	9994      	ldr	r1, [sp, #592]	@ 0x250
 800e87c:	464a      	mov	r2, r9
 800e87e:	4630      	mov	r0, r6
 800e880:	2300      	movs	r3, #0
 800e882:	f000 fab9 	bl	800edf8 <acc_sensor_protocol_a121_load_lut>
 800e886:	4680      	mov	r8, r0
 800e888:	b3a8      	cbz	r0, 800e8f6 <acc_radar_engine_a121_prepare+0x11e>
 800e88a:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800e88e:	a91b      	add	r1, sp, #108	@ 0x6c
 800e890:	4638      	mov	r0, r7
 800e892:	f004 fa0e 	bl	8012cb2 <memcpy>
 800e896:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
 800e89a:	b122      	cbz	r2, 800e8a6 <acc_radar_engine_a121_prepare+0xce>
 800e89c:	f894 304e 	ldrb.w	r3, [r4, #78]	@ 0x4e
 800e8a0:	1e1a      	subs	r2, r3, #0
 800e8a2:	bf18      	it	ne
 800e8a4:	2201      	movne	r2, #1
 800e8a6:	2101      	movs	r1, #1
 800e8a8:	462b      	mov	r3, r5
 800e8aa:	f894 004b 	ldrb.w	r0, [r4, #75]	@ 0x4b
 800e8ae:	f887 11c6 	strb.w	r1, [r7, #454]	@ 0x1c6
 800e8b2:	f833 1b26 	ldrh.w	r1, [r3], #38
 800e8b6:	f8a7 11c8 	strh.w	r1, [r7, #456]	@ 0x1c8
 800e8ba:	f887 01c5 	strb.w	r0, [r7, #453]	@ 0x1c5
 800e8be:	f887 21c4 	strb.w	r2, [r7, #452]	@ 0x1c4
 800e8c2:	f507 71e5 	add.w	r1, r7, #458	@ 0x1ca
 800e8c6:	f105 0c56 	add.w	ip, r5, #86	@ 0x56
 800e8ca:	681c      	ldr	r4, [r3, #0]
 800e8cc:	6858      	ldr	r0, [r3, #4]
 800e8ce:	689a      	ldr	r2, [r3, #8]
 800e8d0:	68de      	ldr	r6, [r3, #12]
 800e8d2:	60ce      	str	r6, [r1, #12]
 800e8d4:	3310      	adds	r3, #16
 800e8d6:	4563      	cmp	r3, ip
 800e8d8:	600c      	str	r4, [r1, #0]
 800e8da:	6048      	str	r0, [r1, #4]
 800e8dc:	608a      	str	r2, [r1, #8]
 800e8de:	f101 0110 	add.w	r1, r1, #16
 800e8e2:	d1f2      	bne.n	800e8ca <acc_radar_engine_a121_prepare+0xf2>
 800e8e4:	f8b5 3056 	ldrh.w	r3, [r5, #86]	@ 0x56
 800e8e8:	f8a7 31fa 	strh.w	r3, [r7, #506]	@ 0x1fa
 800e8ec:	4640      	mov	r0, r8
 800e8ee:	f50d 7d0d 	add.w	sp, sp, #564	@ 0x234
 800e8f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8f6:	4b03      	ldr	r3, [pc, #12]	@ (800e904 <acc_radar_engine_a121_prepare+0x12c>)
 800e8f8:	4a06      	ldr	r2, [pc, #24]	@ (800e914 <acc_radar_engine_a121_prepare+0x13c>)
 800e8fa:	691b      	ldr	r3, [r3, #16]
 800e8fc:	4903      	ldr	r1, [pc, #12]	@ (800e90c <acc_radar_engine_a121_prepare+0x134>)
 800e8fe:	4798      	blx	r3
 800e900:	e78b      	b.n	800e81a <acc_radar_engine_a121_prepare+0x42>
 800e902:	bf00      	nop
 800e904:	20000bd8 	.word	0x20000bd8
 800e908:	0801652c 	.word	0x0801652c
 800e90c:	08016480 	.word	0x08016480
 800e910:	080188f8 	.word	0x080188f8
 800e914:	08016540 	.word	0x08016540

0800e918 <acc_radar_engine_a121_reconfigure>:
 800e918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e91c:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 800e920:	4607      	mov	r7, r0
 800e922:	9c95      	ldr	r4, [sp, #596]	@ 0x254
 800e924:	460d      	mov	r5, r1
 800e926:	4616      	mov	r6, r2
 800e928:	2100      	movs	r1, #0
 800e92a:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800e92e:	a81b      	add	r0, sp, #108	@ 0x6c
 800e930:	4699      	mov	r9, r3
 800e932:	f004 f92f 	bl	8012b94 <memset>
 800e936:	a80d      	add	r0, sp, #52	@ 0x34
 800e938:	2238      	movs	r2, #56	@ 0x38
 800e93a:	2100      	movs	r1, #0
 800e93c:	f004 f92a 	bl	8012b94 <memset>
 800e940:	f894 a1c5 	ldrb.w	sl, [r4, #453]	@ 0x1c5
 800e944:	f1ba 0f00 	cmp.w	sl, #0
 800e948:	d00c      	beq.n	800e964 <acc_radar_engine_a121_reconfigure+0x4c>
 800e94a:	4b3e      	ldr	r3, [pc, #248]	@ (800ea44 <acc_radar_engine_a121_reconfigure+0x12c>)
 800e94c:	4a3e      	ldr	r2, [pc, #248]	@ (800ea48 <acc_radar_engine_a121_reconfigure+0x130>)
 800e94e:	691b      	ldr	r3, [r3, #16]
 800e950:	493e      	ldr	r1, [pc, #248]	@ (800ea4c <acc_radar_engine_a121_reconfigure+0x134>)
 800e952:	2000      	movs	r0, #0
 800e954:	4798      	blx	r3
 800e956:	f04f 0800 	mov.w	r8, #0
 800e95a:	4640      	mov	r0, r8
 800e95c:	f50d 7d0c 	add.w	sp, sp, #560	@ 0x230
 800e960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e964:	f10d 080c 	add.w	r8, sp, #12
 800e968:	ab05      	add	r3, sp, #20
 800e96a:	f8cd 8000 	str.w	r8, [sp]
 800e96e:	aa1b      	add	r2, sp, #108	@ 0x6c
 800e970:	4631      	mov	r1, r6
 800e972:	4628      	mov	r0, r5
 800e974:	f001 fa92 	bl	800fe9c <acc_translation_a121_translate>
 800e978:	2800      	cmp	r0, #0
 800e97a:	d0ec      	beq.n	800e956 <acc_radar_engine_a121_reconfigure+0x3e>
 800e97c:	f895 204b 	ldrb.w	r2, [r5, #75]	@ 0x4b
 800e980:	4641      	mov	r1, r8
 800e982:	a805      	add	r0, sp, #20
 800e984:	ab0d      	add	r3, sp, #52	@ 0x34
 800e986:	f7ff fedb 	bl	800e740 <acc_radar_engine_121_populate_metadata>
 800e98a:	2800      	cmp	r0, #0
 800e98c:	d0e3      	beq.n	800e956 <acc_radar_engine_a121_reconfigure+0x3e>
 800e98e:	9996      	ldr	r1, [sp, #600]	@ 0x258
 800e990:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800e994:	800b      	strh	r3, [r1, #0]
 800e996:	9997      	ldr	r1, [sp, #604]	@ 0x25c
 800e998:	f8bd 2044 	ldrh.w	r2, [sp, #68]	@ 0x44
 800e99c:	800a      	strh	r2, [r1, #0]
 800e99e:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 800e9a2:	aa1b      	add	r2, sp, #108	@ 0x6c
 800e9a4:	4639      	mov	r1, r7
 800e9a6:	2014      	movs	r0, #20
 800e9a8:	f002 fa3a 	bl	8010e20 <acc_probes_execute_struct>
 800e9ac:	4680      	mov	r8, r0
 800e9ae:	2800      	cmp	r0, #0
 800e9b0:	d0d1      	beq.n	800e956 <acc_radar_engine_a121_reconfigure+0x3e>
 800e9b2:	a91b      	add	r1, sp, #108	@ 0x6c
 800e9b4:	4620      	mov	r0, r4
 800e9b6:	f002 ff21 	bl	80117fc <acc_cpd_a121_meas_session_is_patch_needed>
 800e9ba:	bbc0      	cbnz	r0, 800ea2e <acc_radar_engine_a121_reconfigure+0x116>
 800e9bc:	a91b      	add	r1, sp, #108	@ 0x6c
 800e9be:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	f004 f975 	bl	8012cb2 <memcpy>
 800e9c8:	f8b5 3048 	ldrh.w	r3, [r5, #72]	@ 0x48
 800e9cc:	bb3b      	cbnz	r3, 800ea1e <acc_radar_engine_a121_reconfigure+0x106>
 800e9ce:	2201      	movs	r2, #1
 800e9d0:	4633      	mov	r3, r6
 800e9d2:	f895 104b 	ldrb.w	r1, [r5, #75]	@ 0x4b
 800e9d6:	f884 21c6 	strb.w	r2, [r4, #454]	@ 0x1c6
 800e9da:	f833 2b26 	ldrh.w	r2, [r3], #38
 800e9de:	f8a4 21c8 	strh.w	r2, [r4, #456]	@ 0x1c8
 800e9e2:	f884 11c5 	strb.w	r1, [r4, #453]	@ 0x1c5
 800e9e6:	f884 a1c4 	strb.w	sl, [r4, #452]	@ 0x1c4
 800e9ea:	f504 71e5 	add.w	r1, r4, #458	@ 0x1ca
 800e9ee:	f106 0c56 	add.w	ip, r6, #86	@ 0x56
 800e9f2:	681d      	ldr	r5, [r3, #0]
 800e9f4:	6858      	ldr	r0, [r3, #4]
 800e9f6:	689a      	ldr	r2, [r3, #8]
 800e9f8:	68df      	ldr	r7, [r3, #12]
 800e9fa:	60cf      	str	r7, [r1, #12]
 800e9fc:	3310      	adds	r3, #16
 800e9fe:	4563      	cmp	r3, ip
 800ea00:	600d      	str	r5, [r1, #0]
 800ea02:	6048      	str	r0, [r1, #4]
 800ea04:	608a      	str	r2, [r1, #8]
 800ea06:	f101 0110 	add.w	r1, r1, #16
 800ea0a:	d1f2      	bne.n	800e9f2 <acc_radar_engine_a121_reconfigure+0xda>
 800ea0c:	f8b6 3056 	ldrh.w	r3, [r6, #86]	@ 0x56
 800ea10:	f8a4 31fa 	strh.w	r3, [r4, #506]	@ 0x1fa
 800ea14:	4640      	mov	r0, r8
 800ea16:	f50d 7d0c 	add.w	sp, sp, #560	@ 0x230
 800ea1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea1e:	f895 a04e 	ldrb.w	sl, [r5, #78]	@ 0x4e
 800ea22:	f1ba 0a00 	subs.w	sl, sl, #0
 800ea26:	bf18      	it	ne
 800ea28:	f04f 0a01 	movne.w	sl, #1
 800ea2c:	e7cf      	b.n	800e9ce <acc_radar_engine_a121_reconfigure+0xb6>
 800ea2e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ea30:	9300      	str	r3, [sp, #0]
 800ea32:	9994      	ldr	r1, [sp, #592]	@ 0x250
 800ea34:	464a      	mov	r2, r9
 800ea36:	4638      	mov	r0, r7
 800ea38:	4623      	mov	r3, r4
 800ea3a:	f002 fef1 	bl	8011820 <acc_cpd_a121_meas_session_update_program>
 800ea3e:	2800      	cmp	r0, #0
 800ea40:	d089      	beq.n	800e956 <acc_radar_engine_a121_reconfigure+0x3e>
 800ea42:	e7bb      	b.n	800e9bc <acc_radar_engine_a121_reconfigure+0xa4>
 800ea44:	20000bd8 	.word	0x20000bd8
 800ea48:	08016550 	.word	0x08016550
 800ea4c:	08016480 	.word	0x08016480

0800ea50 <acc_radar_engine_a121_get_metadata>:
 800ea50:	b570      	push	{r4, r5, r6, lr}
 800ea52:	b0fe      	sub	sp, #504	@ 0x1f8
 800ea54:	4604      	mov	r4, r0
 800ea56:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800ea5a:	460d      	mov	r5, r1
 800ea5c:	a80d      	add	r0, sp, #52	@ 0x34
 800ea5e:	2100      	movs	r1, #0
 800ea60:	ae03      	add	r6, sp, #12
 800ea62:	f004 f897 	bl	8012b94 <memset>
 800ea66:	aa0d      	add	r2, sp, #52	@ 0x34
 800ea68:	4620      	mov	r0, r4
 800ea6a:	ab05      	add	r3, sp, #20
 800ea6c:	9600      	str	r6, [sp, #0]
 800ea6e:	2100      	movs	r1, #0
 800ea70:	f001 fa14 	bl	800fe9c <acc_translation_a121_translate>
 800ea74:	b908      	cbnz	r0, 800ea7a <acc_radar_engine_a121_get_metadata+0x2a>
 800ea76:	b07e      	add	sp, #504	@ 0x1f8
 800ea78:	bd70      	pop	{r4, r5, r6, pc}
 800ea7a:	f894 204b 	ldrb.w	r2, [r4, #75]	@ 0x4b
 800ea7e:	462b      	mov	r3, r5
 800ea80:	4631      	mov	r1, r6
 800ea82:	a805      	add	r0, sp, #20
 800ea84:	f7ff fe5c 	bl	800e740 <acc_radar_engine_121_populate_metadata>
 800ea88:	b07e      	add	sp, #504	@ 0x1f8
 800ea8a:	bd70      	pop	{r4, r5, r6, pc}

0800ea8c <acc_radar_engine_a121_init_interrupts>:
 800ea8c:	f000 b906 	b.w	800ec9c <acc_sensor_protocol_a121_init_interrupts>

0800ea90 <acc_radar_engine_a121_hibernate_off>:
 800ea90:	f000 baf2 	b.w	800f078 <acc_sensor_protocol_a121_hibernate_off>

0800ea94 <acc_radar_engine_a121_is_hibernate>:
 800ea94:	f000 bb2a 	b.w	800f0ec <acc_sensor_protocol_a121_is_hibernate>

0800ea98 <internal_buffer_processed_read.part.0>:
 800ea98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea9c:	b085      	sub	sp, #20
 800ea9e:	469a      	mov	sl, r3
 800eaa0:	2600      	movs	r6, #0
 800eaa2:	f89d 4038 	ldrb.w	r4, [sp, #56]	@ 0x38
 800eaa6:	9200      	str	r2, [sp, #0]
 800eaa8:	4683      	mov	fp, r0
 800eaaa:	4689      	mov	r9, r1
 800eaac:	f7ff fb4a 	bl	800e144 <acc_rss_integration_get_max_spi_transfer_size>
 800eab0:	e9cd 6602 	strd	r6, r6, [sp, #8]
 800eab4:	f1ba 0f00 	cmp.w	sl, #0
 800eab8:	d03e      	beq.n	800eb38 <internal_buffer_processed_read.part.0+0xa0>
 800eaba:	42b4      	cmp	r4, r6
 800eabc:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800eac0:	bf14      	ite	ne
 800eac2:	f44f 43e0 	movne.w	r3, #28672	@ 0x7000
 800eac6:	f44f 4300 	moveq.w	r3, #32768	@ 0x8000
 800eaca:	f1a0 0804 	sub.w	r8, r0, #4
 800eace:	9301      	str	r3, [sp, #4]
 800ead0:	464d      	mov	r5, r9
 800ead2:	4657      	mov	r7, sl
 800ead4:	e025      	b.n	800eb22 <internal_buffer_processed_read.part.0+0x8a>
 800ead6:	9b00      	ldr	r3, [sp, #0]
 800ead8:	9901      	ldr	r1, [sp, #4]
 800eada:	8029      	strh	r1, [r5, #0]
 800eadc:	199a      	adds	r2, r3, r6
 800eade:	f04f 0100 	mov.w	r1, #0
 800eae2:	1e63      	subs	r3, r4, #1
 800eae4:	80e9      	strh	r1, [r5, #6]
 800eae6:	806a      	strh	r2, [r5, #2]
 800eae8:	80ab      	strh	r3, [r5, #4]
 800eaea:	0062      	lsls	r2, r4, #1
 800eaec:	2100      	movs	r1, #0
 800eaee:	f105 0008 	add.w	r0, r5, #8
 800eaf2:	f004 f84f 	bl	8012b94 <memset>
 800eaf6:	4629      	mov	r1, r5
 800eaf8:	2301      	movs	r3, #1
 800eafa:	4658      	mov	r0, fp
 800eafc:	1d22      	adds	r2, r4, #4
 800eafe:	f7ff fb27 	bl	800e150 <acc_rss_integration_sensor_device_transfer>
 800eb02:	ab02      	add	r3, sp, #8
 800eb04:	cb03      	ldmia	r3!, {r0, r1}
 800eb06:	4426      	add	r6, r4
 800eb08:	6069      	str	r1, [r5, #4]
 800eb0a:	6028      	str	r0, [r5, #0]
 800eb0c:	eb09 0546 	add.w	r5, r9, r6, lsl #1
 800eb10:	f859 0016 	ldr.w	r0, [r9, r6, lsl #1]
 800eb14:	6869      	ldr	r1, [r5, #4]
 800eb16:	ab02      	add	r3, sp, #8
 800eb18:	4556      	cmp	r6, sl
 800eb1a:	c303      	stmia	r3!, {r0, r1}
 800eb1c:	eba7 0704 	sub.w	r7, r7, r4
 800eb20:	d20a      	bcs.n	800eb38 <internal_buffer_processed_read.part.0+0xa0>
 800eb22:	45b8      	cmp	r8, r7
 800eb24:	4644      	mov	r4, r8
 800eb26:	bf28      	it	cs
 800eb28:	463c      	movcs	r4, r7
 800eb2a:	45b8      	cmp	r8, r7
 800eb2c:	d2d3      	bcs.n	800ead6 <internal_buffer_processed_read.part.0+0x3e>
 800eb2e:	e000      	b.n	800eb32 <internal_buffer_processed_read.part.0+0x9a>
 800eb30:	3c01      	subs	r4, #1
 800eb32:	07e3      	lsls	r3, r4, #31
 800eb34:	d4fc      	bmi.n	800eb30 <internal_buffer_processed_read.part.0+0x98>
 800eb36:	e7ce      	b.n	800ead6 <internal_buffer_processed_read.part.0+0x3e>
 800eb38:	f109 0008 	add.w	r0, r9, #8
 800eb3c:	b005      	add	sp, #20
 800eb3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb42:	bf00      	nop

0800eb44 <acc_sensor_a121_get_max_header_length>:
 800eb44:	2004      	movs	r0, #4
 800eb46:	4770      	bx	lr

0800eb48 <acc_sensor_a121_conf_write_instr>:
 800eb48:	b570      	push	{r4, r5, r6, lr}
 800eb4a:	2501      	movs	r5, #1
 800eb4c:	b084      	sub	sp, #16
 800eb4e:	f441 43a0 	orr.w	r3, r1, #20480	@ 0x5000
 800eb52:	4604      	mov	r4, r0
 800eb54:	4616      	mov	r6, r2
 800eb56:	a903      	add	r1, sp, #12
 800eb58:	462a      	mov	r2, r5
 800eb5a:	a801      	add	r0, sp, #4
 800eb5c:	f8ad 3008 	strh.w	r3, [sp, #8]
 800eb60:	9601      	str	r6, [sp, #4]
 800eb62:	f8ad 500a 	strh.w	r5, [sp, #10]
 800eb66:	f002 fb01 	bl	801116c <acc_utils_uint32_to_transfer_buffer>
 800eb6a:	4620      	mov	r0, r4
 800eb6c:	a902      	add	r1, sp, #8
 800eb6e:	2300      	movs	r3, #0
 800eb70:	2204      	movs	r2, #4
 800eb72:	f7ff faed 	bl	800e150 <acc_rss_integration_sensor_device_transfer>
 800eb76:	b004      	add	sp, #16
 800eb78:	bd70      	pop	{r4, r5, r6, pc}
 800eb7a:	bf00      	nop

0800eb7c <acc_sensor_a121_prepare_load_confmem>:
 800eb7c:	0849      	lsrs	r1, r1, #1
 800eb7e:	b570      	push	{r4, r5, r6, lr}
 800eb80:	6019      	str	r1, [r3, #0]
 800eb82:	461c      	mov	r4, r3
 800eb84:	4605      	mov	r5, r0
 800eb86:	4616      	mov	r6, r2
 800eb88:	f7ff fadc 	bl	800e144 <acc_rss_integration_get_max_spi_transfer_size>
 800eb8c:	6821      	ldr	r1, [r4, #0]
 800eb8e:	ebb1 0f50 	cmp.w	r1, r0, lsr #1
 800eb92:	d806      	bhi.n	800eba2 <acc_sensor_a121_prepare_load_confmem+0x26>
 800eb94:	3902      	subs	r1, #2
 800eb96:	f021 0101 	bic.w	r1, r1, #1
 800eb9a:	3504      	adds	r5, #4
 800eb9c:	6035      	str	r5, [r6, #0]
 800eb9e:	6021      	str	r1, [r4, #0]
 800eba0:	bd70      	pop	{r4, r5, r6, pc}
 800eba2:	f7ff facf 	bl	800e144 <acc_rss_integration_get_max_spi_transfer_size>
 800eba6:	0841      	lsrs	r1, r0, #1
 800eba8:	e7f4      	b.n	800eb94 <acc_sensor_a121_prepare_load_confmem+0x18>
 800ebaa:	bf00      	nop

0800ebac <acc_sensor_a121_load_confmem>:
 800ebac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebb0:	f103 0802 	add.w	r8, r3, #2
 800ebb4:	461c      	mov	r4, r3
 800ebb6:	4607      	mov	r7, r0
 800ebb8:	460e      	mov	r6, r1
 800ebba:	4615      	mov	r5, r2
 800ebbc:	f7ff fac2 	bl	800e144 <acc_rss_integration_get_max_spi_transfer_size>
 800ebc0:	ebb0 0f48 	cmp.w	r0, r8, lsl #1
 800ebc4:	d207      	bcs.n	800ebd6 <acc_sensor_a121_load_confmem+0x2a>
 800ebc6:	4b0b      	ldr	r3, [pc, #44]	@ (800ebf4 <acc_sensor_a121_load_confmem+0x48>)
 800ebc8:	4a0b      	ldr	r2, [pc, #44]	@ (800ebf8 <acc_sensor_a121_load_confmem+0x4c>)
 800ebca:	691b      	ldr	r3, [r3, #16]
 800ebcc:	490b      	ldr	r1, [pc, #44]	@ (800ebfc <acc_sensor_a121_load_confmem+0x50>)
 800ebce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebd2:	2000      	movs	r0, #0
 800ebd4:	4718      	bx	r3
 800ebd6:	f446 41a0 	orr.w	r1, r6, #20480	@ 0x5000
 800ebda:	3c01      	subs	r4, #1
 800ebdc:	8029      	strh	r1, [r5, #0]
 800ebde:	806c      	strh	r4, [r5, #2]
 800ebe0:	f028 4200 	bic.w	r2, r8, #2147483648	@ 0x80000000
 800ebe4:	4629      	mov	r1, r5
 800ebe6:	4638      	mov	r0, r7
 800ebe8:	2300      	movs	r3, #0
 800ebea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebee:	f7ff baaf 	b.w	800e150 <acc_rss_integration_sensor_device_transfer>
 800ebf2:	bf00      	nop
 800ebf4:	20000bd8 	.word	0x20000bd8
 800ebf8:	080165bc 	.word	0x080165bc
 800ebfc:	080165a8 	.word	0x080165a8

0800ec00 <acc_sensor_a121_buffer_processed_read>:
 800ec00:	b510      	push	{r4, lr}
 800ec02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ec06:	b082      	sub	sp, #8
 800ec08:	d805      	bhi.n	800ec16 <acc_sensor_a121_buffer_processed_read+0x16>
 800ec0a:	2400      	movs	r4, #0
 800ec0c:	9400      	str	r4, [sp, #0]
 800ec0e:	f7ff ff43 	bl	800ea98 <internal_buffer_processed_read.part.0>
 800ec12:	b002      	add	sp, #8
 800ec14:	bd10      	pop	{r4, pc}
 800ec16:	4b04      	ldr	r3, [pc, #16]	@ (800ec28 <acc_sensor_a121_buffer_processed_read+0x28>)
 800ec18:	4a04      	ldr	r2, [pc, #16]	@ (800ec2c <acc_sensor_a121_buffer_processed_read+0x2c>)
 800ec1a:	691b      	ldr	r3, [r3, #16]
 800ec1c:	4904      	ldr	r1, [pc, #16]	@ (800ec30 <acc_sensor_a121_buffer_processed_read+0x30>)
 800ec1e:	2000      	movs	r0, #0
 800ec20:	4798      	blx	r3
 800ec22:	2000      	movs	r0, #0
 800ec24:	b002      	add	sp, #8
 800ec26:	bd10      	pop	{r4, pc}
 800ec28:	20000bd8 	.word	0x20000bd8
 800ec2c:	080165dc 	.word	0x080165dc
 800ec30:	080165a8 	.word	0x080165a8

0800ec34 <acc_sensor_a121_lut_buffer_write>:
 800ec34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec38:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ec3a:	460d      	mov	r5, r1
 800ec3c:	4614      	mov	r4, r2
 800ec3e:	4681      	mov	r9, r0
 800ec40:	4698      	mov	r8, r3
 800ec42:	f7ff fa7f 	bl	800e144 <acc_rss_integration_get_max_spi_transfer_size>
 800ec46:	3c04      	subs	r4, #4
 800ec48:	1f07      	subs	r7, r0, #4
 800ec4a:	0864      	lsrs	r4, r4, #1
 800ec4c:	087f      	lsrs	r7, r7, #1
 800ec4e:	42a7      	cmp	r7, r4
 800ec50:	bf28      	it	cs
 800ec52:	4627      	movcs	r7, r4
 800ec54:	f105 0a04 	add.w	sl, r5, #4
 800ec58:	2400      	movs	r4, #0
 800ec5a:	1b33      	subs	r3, r6, r4
 800ec5c:	42bb      	cmp	r3, r7
 800ec5e:	bf28      	it	cs
 800ec60:	463b      	movcs	r3, r7
 800ec62:	1e5a      	subs	r2, r3, #1
 800ec64:	eb08 0104 	add.w	r1, r8, r4
 800ec68:	469b      	mov	fp, r3
 800ec6a:	806a      	strh	r2, [r5, #2]
 800ec6c:	ea6f 4181 	mvn.w	r1, r1, lsl #18
 800ec70:	005a      	lsls	r2, r3, #1
 800ec72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec74:	ea6f 4191 	mvn.w	r1, r1, lsr #18
 800ec78:	8029      	strh	r1, [r5, #0]
 800ec7a:	4650      	mov	r0, sl
 800ec7c:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 800ec80:	f004 f817 	bl	8012cb2 <memcpy>
 800ec84:	445c      	add	r4, fp
 800ec86:	f10b 0202 	add.w	r2, fp, #2
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	4629      	mov	r1, r5
 800ec8e:	4648      	mov	r0, r9
 800ec90:	f7ff fa5e 	bl	800e150 <acc_rss_integration_sensor_device_transfer>
 800ec94:	42a6      	cmp	r6, r4
 800ec96:	d8e0      	bhi.n	800ec5a <acc_sensor_a121_lut_buffer_write+0x26>
 800ec98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ec9c <acc_sensor_protocol_a121_init_interrupts>:
 800ec9c:	b530      	push	{r4, r5, lr}
 800ec9e:	b083      	sub	sp, #12
 800eca0:	2500      	movs	r5, #0
 800eca2:	4629      	mov	r1, r5
 800eca4:	9500      	str	r5, [sp, #0]
 800eca6:	237b      	movs	r3, #123	@ 0x7b
 800eca8:	22ff      	movs	r2, #255	@ 0xff
 800ecaa:	4604      	mov	r4, r0
 800ecac:	f002 f8f6 	bl	8010e9c <acc_sensor_reg_field_write>
 800ecb0:	2101      	movs	r1, #1
 800ecb2:	4620      	mov	r0, r4
 800ecb4:	9100      	str	r1, [sp, #0]
 800ecb6:	238b      	movs	r3, #139	@ 0x8b
 800ecb8:	2202      	movs	r2, #2
 800ecba:	f002 f8ef 	bl	8010e9c <acc_sensor_reg_field_write>
 800ecbe:	9500      	str	r5, [sp, #0]
 800ecc0:	4620      	mov	r0, r4
 800ecc2:	238b      	movs	r3, #139	@ 0x8b
 800ecc4:	2280      	movs	r2, #128	@ 0x80
 800ecc6:	2107      	movs	r1, #7
 800ecc8:	f002 f8e8 	bl	8010e9c <acc_sensor_reg_field_write>
 800eccc:	b003      	add	sp, #12
 800ecce:	bd30      	pop	{r4, r5, pc}

0800ecd0 <acc_sensor_protocol_a121_prepare_load>:
 800ecd0:	b570      	push	{r4, r5, r6, lr}
 800ecd2:	b082      	sub	sp, #8
 800ecd4:	f10d 0206 	add.w	r2, sp, #6
 800ecd8:	2400      	movs	r4, #0
 800ecda:	2137      	movs	r1, #55	@ 0x37
 800ecdc:	4605      	mov	r5, r0
 800ecde:	f8ad 4006 	strh.w	r4, [sp, #6]
 800ece2:	f002 f8b5 	bl	8010e50 <acc_sensor_reg_read>
 800ece6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ecea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ecee:	b9b3      	cbnz	r3, 800ed1e <acc_sensor_protocol_a121_prepare_load+0x4e>
 800ecf0:	f10d 0206 	add.w	r2, sp, #6
 800ecf4:	2400      	movs	r4, #0
 800ecf6:	211c      	movs	r1, #28
 800ecf8:	4628      	mov	r0, r5
 800ecfa:	f8ad 4006 	strh.w	r4, [sp, #6]
 800ecfe:	f002 f8a7 	bl	8010e50 <acc_sensor_reg_read>
 800ed02:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ed06:	051b      	lsls	r3, r3, #20
 800ed08:	d515      	bpl.n	800ed36 <acc_sensor_protocol_a121_prepare_load+0x66>
 800ed0a:	4b0e      	ldr	r3, [pc, #56]	@ (800ed44 <acc_sensor_protocol_a121_prepare_load+0x74>)
 800ed0c:	4a0e      	ldr	r2, [pc, #56]	@ (800ed48 <acc_sensor_protocol_a121_prepare_load+0x78>)
 800ed0e:	691e      	ldr	r6, [r3, #16]
 800ed10:	490e      	ldr	r1, [pc, #56]	@ (800ed4c <acc_sensor_protocol_a121_prepare_load+0x7c>)
 800ed12:	4620      	mov	r0, r4
 800ed14:	462b      	mov	r3, r5
 800ed16:	47b0      	blx	r6
 800ed18:	4620      	mov	r0, r4
 800ed1a:	b002      	add	sp, #8
 800ed1c:	bd70      	pop	{r4, r5, r6, pc}
 800ed1e:	f7ff fa91 	bl	800e244 <acc_rss_integration_log_level>
 800ed22:	2800      	cmp	r0, #0
 800ed24:	d0e4      	beq.n	800ecf0 <acc_sensor_protocol_a121_prepare_load+0x20>
 800ed26:	4b07      	ldr	r3, [pc, #28]	@ (800ed44 <acc_sensor_protocol_a121_prepare_load+0x74>)
 800ed28:	4a09      	ldr	r2, [pc, #36]	@ (800ed50 <acc_sensor_protocol_a121_prepare_load+0x80>)
 800ed2a:	691c      	ldr	r4, [r3, #16]
 800ed2c:	4907      	ldr	r1, [pc, #28]	@ (800ed4c <acc_sensor_protocol_a121_prepare_load+0x7c>)
 800ed2e:	462b      	mov	r3, r5
 800ed30:	2001      	movs	r0, #1
 800ed32:	47a0      	blx	r4
 800ed34:	e7dc      	b.n	800ecf0 <acc_sensor_protocol_a121_prepare_load+0x20>
 800ed36:	4628      	mov	r0, r5
 800ed38:	f7ff ffb0 	bl	800ec9c <acc_sensor_protocol_a121_init_interrupts>
 800ed3c:	2001      	movs	r0, #1
 800ed3e:	b002      	add	sp, #8
 800ed40:	bd70      	pop	{r4, r5, r6, pc}
 800ed42:	bf00      	nop
 800ed44:	20000bd8 	.word	0x20000bd8
 800ed48:	08016638 	.word	0x08016638
 800ed4c:	08016620 	.word	0x08016620
 800ed50:	080165f4 	.word	0x080165f4

0800ed54 <acc_sensor_protocol_a121_is_ready_to_update>:
 800ed54:	b500      	push	{lr}
 800ed56:	b083      	sub	sp, #12
 800ed58:	2300      	movs	r3, #0
 800ed5a:	f10d 0206 	add.w	r2, sp, #6
 800ed5e:	2137      	movs	r1, #55	@ 0x37
 800ed60:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ed64:	f002 f874 	bl	8010e50 <acc_sensor_reg_read>
 800ed68:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800ed6c:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
 800ed70:	3800      	subs	r0, #0
 800ed72:	bf18      	it	ne
 800ed74:	2001      	movne	r0, #1
 800ed76:	b003      	add	sp, #12
 800ed78:	f85d fb04 	ldr.w	pc, [sp], #4

0800ed7c <acc_sensor_protocol_a121_run_program>:
 800ed7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed7e:	b083      	sub	sp, #12
 800ed80:	f10d 0206 	add.w	r2, sp, #6
 800ed84:	460e      	mov	r6, r1
 800ed86:	2400      	movs	r4, #0
 800ed88:	211c      	movs	r1, #28
 800ed8a:	4607      	mov	r7, r0
 800ed8c:	f8ad 4006 	strh.w	r4, [sp, #6]
 800ed90:	f002 f85e 	bl	8010e50 <acc_sensor_reg_read>
 800ed94:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ed98:	f412 6500 	ands.w	r5, r2, #2048	@ 0x800
 800ed9c:	d10c      	bne.n	800edb8 <acc_sensor_protocol_a121_run_program+0x3c>
 800ed9e:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
 800eda2:	d313      	bcc.n	800edcc <acc_sensor_protocol_a121_run_program+0x50>
 800eda4:	4b10      	ldr	r3, [pc, #64]	@ (800ede8 <acc_sensor_protocol_a121_run_program+0x6c>)
 800eda6:	4a11      	ldr	r2, [pc, #68]	@ (800edec <acc_sensor_protocol_a121_run_program+0x70>)
 800eda8:	691c      	ldr	r4, [r3, #16]
 800edaa:	4911      	ldr	r1, [pc, #68]	@ (800edf0 <acc_sensor_protocol_a121_run_program+0x74>)
 800edac:	4628      	mov	r0, r5
 800edae:	4633      	mov	r3, r6
 800edb0:	47a0      	blx	r4
 800edb2:	4628      	mov	r0, r5
 800edb4:	b003      	add	sp, #12
 800edb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edb8:	4b0b      	ldr	r3, [pc, #44]	@ (800ede8 <acc_sensor_protocol_a121_run_program+0x6c>)
 800edba:	4a0e      	ldr	r2, [pc, #56]	@ (800edf4 <acc_sensor_protocol_a121_run_program+0x78>)
 800edbc:	691d      	ldr	r5, [r3, #16]
 800edbe:	490c      	ldr	r1, [pc, #48]	@ (800edf0 <acc_sensor_protocol_a121_run_program+0x74>)
 800edc0:	4620      	mov	r0, r4
 800edc2:	463b      	mov	r3, r7
 800edc4:	47a8      	blx	r5
 800edc6:	4620      	mov	r0, r4
 800edc8:	b003      	add	sp, #12
 800edca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edcc:	462a      	mov	r2, r5
 800edce:	4638      	mov	r0, r7
 800edd0:	211b      	movs	r1, #27
 800edd2:	f002 f853 	bl	8010e7c <acc_sensor_reg_write>
 800edd6:	4638      	mov	r0, r7
 800edd8:	f446 6200 	orr.w	r2, r6, #2048	@ 0x800
 800eddc:	211b      	movs	r1, #27
 800edde:	f002 f84d 	bl	8010e7c <acc_sensor_reg_write>
 800ede2:	2001      	movs	r0, #1
 800ede4:	b003      	add	sp, #12
 800ede6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ede8:	20000bd8 	.word	0x20000bd8
 800edec:	08016698 	.word	0x08016698
 800edf0:	08016620 	.word	0x08016620
 800edf4:	08016668 	.word	0x08016668

0800edf8 <acc_sensor_protocol_a121_load_lut>:
 800edf8:	2b7f      	cmp	r3, #127	@ 0x7f
 800edfa:	d809      	bhi.n	800ee10 <acc_sensor_protocol_a121_load_lut+0x18>
 800edfc:	b530      	push	{r4, r5, lr}
 800edfe:	b083      	sub	sp, #12
 800ee00:	461c      	mov	r4, r3
 800ee02:	9d07      	ldr	r5, [sp, #28]
 800ee04:	442c      	add	r4, r5
 800ee06:	2c80      	cmp	r4, #128	@ 0x80
 800ee08:	d904      	bls.n	800ee14 <acc_sensor_protocol_a121_load_lut+0x1c>
 800ee0a:	2000      	movs	r0, #0
 800ee0c:	b003      	add	sp, #12
 800ee0e:	bd30      	pop	{r4, r5, pc}
 800ee10:	2000      	movs	r0, #0
 800ee12:	4770      	bx	lr
 800ee14:	9c06      	ldr	r4, [sp, #24]
 800ee16:	9501      	str	r5, [sp, #4]
 800ee18:	9400      	str	r4, [sp, #0]
 800ee1a:	f7ff ff0b 	bl	800ec34 <acc_sensor_a121_lut_buffer_write>
 800ee1e:	2001      	movs	r0, #1
 800ee20:	b003      	add	sp, #12
 800ee22:	bd30      	pop	{r4, r5, pc}

0800ee24 <acc_sensor_protocol_a121_is_sensor_running>:
 800ee24:	b500      	push	{lr}
 800ee26:	b083      	sub	sp, #12
 800ee28:	2300      	movs	r3, #0
 800ee2a:	f10d 0206 	add.w	r2, sp, #6
 800ee2e:	211c      	movs	r1, #28
 800ee30:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ee34:	f002 f80c 	bl	8010e50 <acc_sensor_reg_read>
 800ee38:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800ee3c:	f3c0 20c0 	ubfx	r0, r0, #11, #1
 800ee40:	b003      	add	sp, #12
 800ee42:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee46:	bf00      	nop

0800ee48 <acc_sensor_protocol_a121_is_event_pending>:
 800ee48:	b510      	push	{r4, lr}
 800ee4a:	b082      	sub	sp, #8
 800ee4c:	460c      	mov	r4, r1
 800ee4e:	2300      	movs	r3, #0
 800ee50:	f10d 0206 	add.w	r2, sp, #6
 800ee54:	2137      	movs	r1, #55	@ 0x37
 800ee56:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ee5a:	f001 fff9 	bl	8010e50 <acc_sensor_reg_read>
 800ee5e:	2c01      	cmp	r4, #1
 800ee60:	d00b      	beq.n	800ee7a <acc_sensor_protocol_a121_is_event_pending+0x32>
 800ee62:	2c02      	cmp	r4, #2
 800ee64:	bf14      	ite	ne
 800ee66:	23c0      	movne	r3, #192	@ 0xc0
 800ee68:	2380      	moveq	r3, #128	@ 0x80
 800ee6a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ee6e:	4213      	tst	r3, r2
 800ee70:	bf14      	ite	ne
 800ee72:	2001      	movne	r0, #1
 800ee74:	2000      	moveq	r0, #0
 800ee76:	b002      	add	sp, #8
 800ee78:	bd10      	pop	{r4, pc}
 800ee7a:	2340      	movs	r3, #64	@ 0x40
 800ee7c:	e7f5      	b.n	800ee6a <acc_sensor_protocol_a121_is_event_pending+0x22>
 800ee7e:	bf00      	nop

0800ee80 <acc_sensor_protocol_a121_ack_event>:
 800ee80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee82:	b083      	sub	sp, #12
 800ee84:	2400      	movs	r4, #0
 800ee86:	2901      	cmp	r1, #1
 800ee88:	4607      	mov	r7, r0
 800ee8a:	4616      	mov	r6, r2
 800ee8c:	f8ad 4006 	strh.w	r4, [sp, #6]
 800ee90:	d019      	beq.n	800eec6 <acc_sensor_protocol_a121_ack_event+0x46>
 800ee92:	2902      	cmp	r1, #2
 800ee94:	d009      	beq.n	800eeaa <acc_sensor_protocol_a121_ack_event+0x2a>
 800ee96:	4b1a      	ldr	r3, [pc, #104]	@ (800ef00 <acc_sensor_protocol_a121_ack_event+0x80>)
 800ee98:	4a1a      	ldr	r2, [pc, #104]	@ (800ef04 <acc_sensor_protocol_a121_ack_event+0x84>)
 800ee9a:	691d      	ldr	r5, [r3, #16]
 800ee9c:	491a      	ldr	r1, [pc, #104]	@ (800ef08 <acc_sensor_protocol_a121_ack_event+0x88>)
 800ee9e:	4603      	mov	r3, r0
 800eea0:	4620      	mov	r0, r4
 800eea2:	47a8      	blx	r5
 800eea4:	4620      	mov	r0, r4
 800eea6:	b003      	add	sp, #12
 800eea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eeaa:	2146      	movs	r1, #70	@ 0x46
 800eeac:	f10d 0206 	add.w	r2, sp, #6
 800eeb0:	4638      	mov	r0, r7
 800eeb2:	f001 ffcd 	bl	8010e50 <acc_sensor_reg_read>
 800eeb6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800eeba:	2484      	movs	r4, #132	@ 0x84
 800eebc:	b175      	cbz	r5, 800eedc <acc_sensor_protocol_a121_ack_event+0x5c>
 800eebe:	b9be      	cbnz	r6, 800eef0 <acc_sensor_protocol_a121_ack_event+0x70>
 800eec0:	2001      	movs	r0, #1
 800eec2:	b003      	add	sp, #12
 800eec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eec6:	2145      	movs	r1, #69	@ 0x45
 800eec8:	f10d 0206 	add.w	r2, sp, #6
 800eecc:	4638      	mov	r0, r7
 800eece:	f001 ffbf 	bl	8010e50 <acc_sensor_reg_read>
 800eed2:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800eed6:	2483      	movs	r4, #131	@ 0x83
 800eed8:	2d00      	cmp	r5, #0
 800eeda:	d1f0      	bne.n	800eebe <acc_sensor_protocol_a121_ack_event+0x3e>
 800eedc:	4b08      	ldr	r3, [pc, #32]	@ (800ef00 <acc_sensor_protocol_a121_ack_event+0x80>)
 800eede:	4a0b      	ldr	r2, [pc, #44]	@ (800ef0c <acc_sensor_protocol_a121_ack_event+0x8c>)
 800eee0:	691c      	ldr	r4, [r3, #16]
 800eee2:	4909      	ldr	r1, [pc, #36]	@ (800ef08 <acc_sensor_protocol_a121_ack_event+0x88>)
 800eee4:	4628      	mov	r0, r5
 800eee6:	463b      	mov	r3, r7
 800eee8:	47a0      	blx	r4
 800eeea:	4628      	mov	r0, r5
 800eeec:	b003      	add	sp, #12
 800eeee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eef0:	4638      	mov	r0, r7
 800eef2:	4621      	mov	r1, r4
 800eef4:	2200      	movs	r2, #0
 800eef6:	f001 ffc1 	bl	8010e7c <acc_sensor_reg_write>
 800eefa:	4630      	mov	r0, r6
 800eefc:	e7d3      	b.n	800eea6 <acc_sensor_protocol_a121_ack_event+0x26>
 800eefe:	bf00      	nop
 800ef00:	20000bd8 	.word	0x20000bd8
 800ef04:	080166b4 	.word	0x080166b4
 800ef08:	08016620 	.word	0x08016620
 800ef0c:	080166d0 	.word	0x080166d0

0800ef10 <acc_sensor_protocol_a121_get_event>:
 800ef10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef12:	b085      	sub	sp, #20
 800ef14:	2400      	movs	r4, #0
 800ef16:	4615      	mov	r5, r2
 800ef18:	f8ad 400e 	strh.w	r4, [sp, #14]
 800ef1c:	2a00      	cmp	r2, #0
 800ef1e:	d03d      	beq.n	800ef9c <acc_sensor_protocol_a121_get_event+0x8c>
 800ef20:	2901      	cmp	r1, #1
 800ef22:	4607      	mov	r7, r0
 800ef24:	d028      	beq.n	800ef78 <acc_sensor_protocol_a121_get_event+0x68>
 800ef26:	2902      	cmp	r1, #2
 800ef28:	d11d      	bne.n	800ef66 <acc_sensor_protocol_a121_get_event+0x56>
 800ef2a:	2132      	movs	r1, #50	@ 0x32
 800ef2c:	2401      	movs	r4, #1
 800ef2e:	f10d 020e 	add.w	r2, sp, #14
 800ef32:	4638      	mov	r0, r7
 800ef34:	f001 ff8c 	bl	8010e50 <acc_sensor_reg_read>
 800ef38:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800ef3c:	806b      	strh	r3, [r5, #2]
 800ef3e:	f003 0607 	and.w	r6, r3, #7
 800ef42:	2e01      	cmp	r6, #1
 800ef44:	802e      	strh	r6, [r5, #0]
 800ef46:	d033      	beq.n	800efb0 <acc_sensor_protocol_a121_get_event+0xa0>
 800ef48:	f013 0f06 	tst.w	r3, #6
 800ef4c:	d117      	bne.n	800ef7e <acc_sensor_protocol_a121_get_event+0x6e>
 800ef4e:	b9ce      	cbnz	r6, 800ef84 <acc_sensor_protocol_a121_get_event+0x74>
 800ef50:	4a1d      	ldr	r2, [pc, #116]	@ (800efc8 <acc_sensor_protocol_a121_get_event+0xb8>)
 800ef52:	9700      	str	r7, [sp, #0]
 800ef54:	6914      	ldr	r4, [r2, #16]
 800ef56:	491d      	ldr	r1, [pc, #116]	@ (800efcc <acc_sensor_protocol_a121_get_event+0xbc>)
 800ef58:	4a1d      	ldr	r2, [pc, #116]	@ (800efd0 <acc_sensor_protocol_a121_get_event+0xc0>)
 800ef5a:	4630      	mov	r0, r6
 800ef5c:	47a0      	blx	r4
 800ef5e:	4634      	mov	r4, r6
 800ef60:	4620      	mov	r0, r4
 800ef62:	b005      	add	sp, #20
 800ef64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef66:	4b18      	ldr	r3, [pc, #96]	@ (800efc8 <acc_sensor_protocol_a121_get_event+0xb8>)
 800ef68:	4918      	ldr	r1, [pc, #96]	@ (800efcc <acc_sensor_protocol_a121_get_event+0xbc>)
 800ef6a:	691e      	ldr	r6, [r3, #16]
 800ef6c:	4a19      	ldr	r2, [pc, #100]	@ (800efd4 <acc_sensor_protocol_a121_get_event+0xc4>)
 800ef6e:	4603      	mov	r3, r0
 800ef70:	4620      	mov	r0, r4
 800ef72:	47b0      	blx	r6
 800ef74:	4621      	mov	r1, r4
 800ef76:	e7da      	b.n	800ef2e <acc_sensor_protocol_a121_get_event+0x1e>
 800ef78:	460c      	mov	r4, r1
 800ef7a:	2133      	movs	r1, #51	@ 0x33
 800ef7c:	e7d7      	b.n	800ef2e <acc_sensor_protocol_a121_get_event+0x1e>
 800ef7e:	3e02      	subs	r6, #2
 800ef80:	2e01      	cmp	r6, #1
 800ef82:	d9ed      	bls.n	800ef60 <acc_sensor_protocol_a121_get_event+0x50>
 800ef84:	4a10      	ldr	r2, [pc, #64]	@ (800efc8 <acc_sensor_protocol_a121_get_event+0xb8>)
 800ef86:	9700      	str	r7, [sp, #0]
 800ef88:	6914      	ldr	r4, [r2, #16]
 800ef8a:	4910      	ldr	r1, [pc, #64]	@ (800efcc <acc_sensor_protocol_a121_get_event+0xbc>)
 800ef8c:	4a12      	ldr	r2, [pc, #72]	@ (800efd8 <acc_sensor_protocol_a121_get_event+0xc8>)
 800ef8e:	2000      	movs	r0, #0
 800ef90:	47a0      	blx	r4
 800ef92:	2400      	movs	r4, #0
 800ef94:	4620      	mov	r0, r4
 800ef96:	802c      	strh	r4, [r5, #0]
 800ef98:	b005      	add	sp, #20
 800ef9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef9c:	4b0a      	ldr	r3, [pc, #40]	@ (800efc8 <acc_sensor_protocol_a121_get_event+0xb8>)
 800ef9e:	4a0f      	ldr	r2, [pc, #60]	@ (800efdc <acc_sensor_protocol_a121_get_event+0xcc>)
 800efa0:	691b      	ldr	r3, [r3, #16]
 800efa2:	490a      	ldr	r1, [pc, #40]	@ (800efcc <acc_sensor_protocol_a121_get_event+0xbc>)
 800efa4:	4628      	mov	r0, r5
 800efa6:	4798      	blx	r3
 800efa8:	462c      	mov	r4, r5
 800efaa:	4620      	mov	r0, r4
 800efac:	b005      	add	sp, #20
 800efae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efb0:	4a05      	ldr	r2, [pc, #20]	@ (800efc8 <acc_sensor_protocol_a121_get_event+0xb8>)
 800efb2:	9700      	str	r7, [sp, #0]
 800efb4:	6914      	ldr	r4, [r2, #16]
 800efb6:	4905      	ldr	r1, [pc, #20]	@ (800efcc <acc_sensor_protocol_a121_get_event+0xbc>)
 800efb8:	4a09      	ldr	r2, [pc, #36]	@ (800efe0 <acc_sensor_protocol_a121_get_event+0xd0>)
 800efba:	2000      	movs	r0, #0
 800efbc:	47a0      	blx	r4
 800efbe:	2400      	movs	r4, #0
 800efc0:	4620      	mov	r0, r4
 800efc2:	b005      	add	sp, #20
 800efc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efc6:	bf00      	nop
 800efc8:	20000bd8 	.word	0x20000bd8
 800efcc:	08016620 	.word	0x08016620
 800efd0:	08016718 	.word	0x08016718
 800efd4:	080166b4 	.word	0x080166b4
 800efd8:	0801677c 	.word	0x0801677c
 800efdc:	08016704 	.word	0x08016704
 800efe0:	08016748 	.word	0x08016748

0800efe4 <acc_sensor_protocol_a121_is_handshake>:
 800efe4:	8800      	ldrh	r0, [r0, #0]
 800efe6:	f1a0 0003 	sub.w	r0, r0, #3
 800efea:	fab0 f080 	clz	r0, r0
 800efee:	0940      	lsrs	r0, r0, #5
 800eff0:	4770      	bx	lr
 800eff2:	bf00      	nop

0800eff4 <acc_sensor_protocol_a121_is_done>:
 800eff4:	8800      	ldrh	r0, [r0, #0]
 800eff6:	f1a0 0002 	sub.w	r0, r0, #2
 800effa:	fab0 f080 	clz	r0, r0
 800effe:	0940      	lsrs	r0, r0, #5
 800f000:	4770      	bx	lr
 800f002:	bf00      	nop

0800f004 <acc_sensor_protocol_a121_get_frame_delayed_flag>:
 800f004:	8840      	ldrh	r0, [r0, #2]
 800f006:	f3c0 1000 	ubfx	r0, r0, #4, #1
 800f00a:	4770      	bx	lr

0800f00c <acc_sensor_protocol_a121_check_asic_id>:
 800f00c:	b570      	push	{r4, r5, r6, lr}
 800f00e:	2300      	movs	r3, #0
 800f010:	b082      	sub	sp, #8
 800f012:	f10d 0206 	add.w	r2, sp, #6
 800f016:	460d      	mov	r5, r1
 800f018:	4619      	mov	r1, r3
 800f01a:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f01e:	4604      	mov	r4, r0
 800f020:	f001 ff16 	bl	8010e50 <acc_sensor_reg_read>
 800f024:	480f      	ldr	r0, [pc, #60]	@ (800f064 <acc_sensor_protocol_a121_check_asic_id+0x58>)
 800f026:	f002 f8c9 	bl	80111bc <acc_diagnostic_log_set_scope>
 800f02a:	4621      	mov	r1, r4
 800f02c:	480e      	ldr	r0, [pc, #56]	@ (800f068 <acc_sensor_protocol_a121_check_asic_id+0x5c>)
 800f02e:	f002 f8d5 	bl	80111dc <acc_diagnostic_log_scalar>
 800f032:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800f036:	480b      	ldr	r0, [pc, #44]	@ (800f064 <acc_sensor_protocol_a121_check_asic_id+0x58>)
 800f038:	f002 f8d0 	bl	80111dc <acc_diagnostic_log_scalar>
 800f03c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f040:	f241 2210 	movw	r2, #4624	@ 0x1210
 800f044:	4293      	cmp	r3, r2
 800f046:	bf0c      	ite	eq
 800f048:	2401      	moveq	r4, #1
 800f04a:	2400      	movne	r4, #0
 800f04c:	d006      	beq.n	800f05c <acc_sensor_protocol_a121_check_asic_id+0x50>
 800f04e:	b92d      	cbnz	r5, 800f05c <acc_sensor_protocol_a121_check_asic_id+0x50>
 800f050:	4906      	ldr	r1, [pc, #24]	@ (800f06c <acc_sensor_protocol_a121_check_asic_id+0x60>)
 800f052:	4a07      	ldr	r2, [pc, #28]	@ (800f070 <acc_sensor_protocol_a121_check_asic_id+0x64>)
 800f054:	690e      	ldr	r6, [r1, #16]
 800f056:	4907      	ldr	r1, [pc, #28]	@ (800f074 <acc_sensor_protocol_a121_check_asic_id+0x68>)
 800f058:	4628      	mov	r0, r5
 800f05a:	47b0      	blx	r6
 800f05c:	4620      	mov	r0, r4
 800f05e:	b002      	add	sp, #8
 800f060:	bd70      	pop	{r4, r5, r6, pc}
 800f062:	bf00      	nop
 800f064:	080167b0 	.word	0x080167b0
 800f068:	08015ef0 	.word	0x08015ef0
 800f06c:	20000bd8 	.word	0x20000bd8
 800f070:	080167b8 	.word	0x080167b8
 800f074:	08016620 	.word	0x08016620

0800f078 <acc_sensor_protocol_a121_hibernate_off>:
 800f078:	b570      	push	{r4, r5, r6, lr}
 800f07a:	b082      	sub	sp, #8
 800f07c:	2203      	movs	r2, #3
 800f07e:	460e      	mov	r6, r1
 800f080:	2100      	movs	r1, #0
 800f082:	460d      	mov	r5, r1
 800f084:	4604      	mov	r4, r0
 800f086:	9200      	str	r2, [sp, #0]
 800f088:	f240 1349 	movw	r3, #329	@ 0x149
 800f08c:	f001 ff06 	bl	8010e9c <acc_sensor_reg_field_write>
 800f090:	4620      	mov	r0, r4
 800f092:	f240 1349 	movw	r3, #329	@ 0x149
 800f096:	2204      	movs	r2, #4
 800f098:	2102      	movs	r1, #2
 800f09a:	9500      	str	r5, [sp, #0]
 800f09c:	f001 fefe 	bl	8010e9c <acc_sensor_reg_field_write>
 800f0a0:	4620      	mov	r0, r4
 800f0a2:	f240 1349 	movw	r3, #329	@ 0x149
 800f0a6:	2210      	movs	r2, #16
 800f0a8:	2104      	movs	r1, #4
 800f0aa:	9500      	str	r5, [sp, #0]
 800f0ac:	f001 fef6 	bl	8010e9c <acc_sensor_reg_field_write>
 800f0b0:	4620      	mov	r0, r4
 800f0b2:	f240 1349 	movw	r3, #329	@ 0x149
 800f0b6:	2220      	movs	r2, #32
 800f0b8:	2105      	movs	r1, #5
 800f0ba:	9500      	str	r5, [sp, #0]
 800f0bc:	f001 feee 	bl	8010e9c <acc_sensor_reg_field_write>
 800f0c0:	9500      	str	r5, [sp, #0]
 800f0c2:	4620      	mov	r0, r4
 800f0c4:	f240 1349 	movw	r3, #329	@ 0x149
 800f0c8:	f44f 527f 	mov.w	r2, #16320	@ 0x3fc0
 800f0cc:	2106      	movs	r1, #6
 800f0ce:	f001 fee5 	bl	8010e9c <acc_sensor_reg_field_write>
 800f0d2:	b90e      	cbnz	r6, 800f0d8 <acc_sensor_protocol_a121_hibernate_off+0x60>
 800f0d4:	b002      	add	sp, #8
 800f0d6:	bd70      	pop	{r4, r5, r6, pc}
 800f0d8:	4620      	mov	r0, r4
 800f0da:	f64a 42c0 	movw	r2, #44224	@ 0xacc0
 800f0de:	2131      	movs	r1, #49	@ 0x31
 800f0e0:	b002      	add	sp, #8
 800f0e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f0e6:	f001 bec9 	b.w	8010e7c <acc_sensor_reg_write>
 800f0ea:	bf00      	nop

0800f0ec <acc_sensor_protocol_a121_is_hibernate>:
 800f0ec:	b500      	push	{lr}
 800f0ee:	b083      	sub	sp, #12
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	f10d 0206 	add.w	r2, sp, #6
 800f0f6:	2131      	movs	r1, #49	@ 0x31
 800f0f8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f0fc:	f001 fea8 	bl	8010e50 <acc_sensor_reg_read>
 800f100:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800f104:	f64a 43c0 	movw	r3, #44224	@ 0xacc0
 800f108:	1ac0      	subs	r0, r0, r3
 800f10a:	fab0 f080 	clz	r0, r0
 800f10e:	0940      	lsrs	r0, r0, #5
 800f110:	b003      	add	sp, #12
 800f112:	f85d fb04 	ldr.w	pc, [sp], #4
 800f116:	bf00      	nop

0800f118 <acc_sensor_protocol_a121_reconfigure>:
 800f118:	b508      	push	{r3, lr}
 800f11a:	2201      	movs	r2, #1
 800f11c:	2180      	movs	r1, #128	@ 0x80
 800f11e:	f001 fead 	bl	8010e7c <acc_sensor_reg_write>
 800f122:	2001      	movs	r0, #1
 800f124:	bd08      	pop	{r3, pc}
 800f126:	bf00      	nop

0800f128 <a121_diagnostics_decode_stack_level>:
 800f128:	b570      	push	{r4, r5, r6, lr}
 800f12a:	b084      	sub	sp, #16
 800f12c:	4605      	mov	r5, r0
 800f12e:	460c      	mov	r4, r1
 800f130:	4616      	mov	r6, r2
 800f132:	f7ff f887 	bl	800e244 <acc_rss_integration_log_level>
 800f136:	2801      	cmp	r0, #1
 800f138:	d90c      	bls.n	800f154 <a121_diagnostics_decode_stack_level+0x2c>
 800f13a:	f5a4 738c 	sub.w	r3, r4, #280	@ 0x118
 800f13e:	b29b      	uxth	r3, r3
 800f140:	e9cd 3400 	strd	r3, r4, [sp]
 800f144:	4a04      	ldr	r2, [pc, #16]	@ (800f158 <a121_diagnostics_decode_stack_level+0x30>)
 800f146:	9602      	str	r6, [sp, #8]
 800f148:	6914      	ldr	r4, [r2, #16]
 800f14a:	4904      	ldr	r1, [pc, #16]	@ (800f15c <a121_diagnostics_decode_stack_level+0x34>)
 800f14c:	4a04      	ldr	r2, [pc, #16]	@ (800f160 <a121_diagnostics_decode_stack_level+0x38>)
 800f14e:	462b      	mov	r3, r5
 800f150:	2002      	movs	r0, #2
 800f152:	47a0      	blx	r4
 800f154:	b004      	add	sp, #16
 800f156:	bd70      	pop	{r4, r5, r6, pc}
 800f158:	20000bd8 	.word	0x20000bd8
 800f15c:	080168b4 	.word	0x080168b4
 800f160:	0801688c 	.word	0x0801688c

0800f164 <a121_diagnostics_decode_wakeupinputwakeup>:
 800f164:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f166:	460c      	mov	r4, r1
 800f168:	3962      	subs	r1, #98	@ 0x62
 800f16a:	07cb      	lsls	r3, r1, #31
 800f16c:	b085      	sub	sp, #20
 800f16e:	4605      	mov	r5, r0
 800f170:	4616      	mov	r6, r2
 800f172:	b28f      	uxth	r7, r1
 800f174:	d410      	bmi.n	800f198 <a121_diagnostics_decode_wakeupinputwakeup+0x34>
 800f176:	f7ff f865 	bl	800e244 <acc_rss_integration_log_level>
 800f17a:	2801      	cmp	r0, #1
 800f17c:	d90a      	bls.n	800f194 <a121_diagnostics_decode_wakeupinputwakeup+0x30>
 800f17e:	087f      	lsrs	r7, r7, #1
 800f180:	e9cd 7400 	strd	r7, r4, [sp]
 800f184:	490d      	ldr	r1, [pc, #52]	@ (800f1bc <a121_diagnostics_decode_wakeupinputwakeup+0x58>)
 800f186:	9602      	str	r6, [sp, #8]
 800f188:	690c      	ldr	r4, [r1, #16]
 800f18a:	4a0d      	ldr	r2, [pc, #52]	@ (800f1c0 <a121_diagnostics_decode_wakeupinputwakeup+0x5c>)
 800f18c:	490d      	ldr	r1, [pc, #52]	@ (800f1c4 <a121_diagnostics_decode_wakeupinputwakeup+0x60>)
 800f18e:	462b      	mov	r3, r5
 800f190:	2002      	movs	r0, #2
 800f192:	47a0      	blx	r4
 800f194:	b005      	add	sp, #20
 800f196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f198:	f7ff f854 	bl	800e244 <acc_rss_integration_log_level>
 800f19c:	2801      	cmp	r0, #1
 800f19e:	d9f9      	bls.n	800f194 <a121_diagnostics_decode_wakeupinputwakeup+0x30>
 800f1a0:	087f      	lsrs	r7, r7, #1
 800f1a2:	e9cd 7400 	strd	r7, r4, [sp]
 800f1a6:	4905      	ldr	r1, [pc, #20]	@ (800f1bc <a121_diagnostics_decode_wakeupinputwakeup+0x58>)
 800f1a8:	9602      	str	r6, [sp, #8]
 800f1aa:	690c      	ldr	r4, [r1, #16]
 800f1ac:	4a06      	ldr	r2, [pc, #24]	@ (800f1c8 <a121_diagnostics_decode_wakeupinputwakeup+0x64>)
 800f1ae:	4905      	ldr	r1, [pc, #20]	@ (800f1c4 <a121_diagnostics_decode_wakeupinputwakeup+0x60>)
 800f1b0:	462b      	mov	r3, r5
 800f1b2:	2002      	movs	r0, #2
 800f1b4:	47a0      	blx	r4
 800f1b6:	b005      	add	sp, #20
 800f1b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1ba:	bf00      	nop
 800f1bc:	20000bd8 	.word	0x20000bd8
 800f1c0:	080168c8 	.word	0x080168c8
 800f1c4:	080168b4 	.word	0x080168b4
 800f1c8:	08016900 	.word	0x08016900

0800f1cc <a121_diagnostics_decode_inputmuxwakeupinput>:
 800f1cc:	b570      	push	{r4, r5, r6, lr}
 800f1ce:	b082      	sub	sp, #8
 800f1d0:	4605      	mov	r5, r0
 800f1d2:	460c      	mov	r4, r1
 800f1d4:	4616      	mov	r6, r2
 800f1d6:	f7ff f835 	bl	800e244 <acc_rss_integration_log_level>
 800f1da:	2801      	cmp	r0, #1
 800f1dc:	d90b      	bls.n	800f1f6 <a121_diagnostics_decode_inputmuxwakeupinput+0x2a>
 800f1de:	f1a4 017d 	sub.w	r1, r4, #125	@ 0x7d
 800f1e2:	4a06      	ldr	r2, [pc, #24]	@ (800f1fc <a121_diagnostics_decode_inputmuxwakeupinput+0x30>)
 800f1e4:	9601      	str	r6, [sp, #4]
 800f1e6:	b289      	uxth	r1, r1
 800f1e8:	9100      	str	r1, [sp, #0]
 800f1ea:	6914      	ldr	r4, [r2, #16]
 800f1ec:	4904      	ldr	r1, [pc, #16]	@ (800f200 <a121_diagnostics_decode_inputmuxwakeupinput+0x34>)
 800f1ee:	4a05      	ldr	r2, [pc, #20]	@ (800f204 <a121_diagnostics_decode_inputmuxwakeupinput+0x38>)
 800f1f0:	462b      	mov	r3, r5
 800f1f2:	2002      	movs	r0, #2
 800f1f4:	47a0      	blx	r4
 800f1f6:	b002      	add	sp, #8
 800f1f8:	bd70      	pop	{r4, r5, r6, pc}
 800f1fa:	bf00      	nop
 800f1fc:	20000bd8 	.word	0x20000bd8
 800f200:	080168b4 	.word	0x080168b4
 800f204:	08016938 	.word	0x08016938

0800f208 <a121_diagnostics_decode_scratchpad>:
 800f208:	b570      	push	{r4, r5, r6, lr}
 800f20a:	b082      	sub	sp, #8
 800f20c:	4605      	mov	r5, r0
 800f20e:	460c      	mov	r4, r1
 800f210:	4616      	mov	r6, r2
 800f212:	f7ff f817 	bl	800e244 <acc_rss_integration_log_level>
 800f216:	2801      	cmp	r0, #1
 800f218:	d90b      	bls.n	800f232 <a121_diagnostics_decode_scratchpad+0x2a>
 800f21a:	f1a4 012c 	sub.w	r1, r4, #44	@ 0x2c
 800f21e:	4a06      	ldr	r2, [pc, #24]	@ (800f238 <a121_diagnostics_decode_scratchpad+0x30>)
 800f220:	9601      	str	r6, [sp, #4]
 800f222:	b289      	uxth	r1, r1
 800f224:	9100      	str	r1, [sp, #0]
 800f226:	6914      	ldr	r4, [r2, #16]
 800f228:	4904      	ldr	r1, [pc, #16]	@ (800f23c <a121_diagnostics_decode_scratchpad+0x34>)
 800f22a:	4a05      	ldr	r2, [pc, #20]	@ (800f240 <a121_diagnostics_decode_scratchpad+0x38>)
 800f22c:	462b      	mov	r3, r5
 800f22e:	2002      	movs	r0, #2
 800f230:	47a0      	blx	r4
 800f232:	b002      	add	sp, #8
 800f234:	bd70      	pop	{r4, r5, r6, pc}
 800f236:	bf00      	nop
 800f238:	20000bd8 	.word	0x20000bd8
 800f23c:	080168b4 	.word	0x080168b4
 800f240:	08016968 	.word	0x08016968

0800f244 <a121_diagnostics_decode_run_status>:
 800f244:	b570      	push	{r4, r5, r6, lr}
 800f246:	b082      	sub	sp, #8
 800f248:	4605      	mov	r5, r0
 800f24a:	4614      	mov	r4, r2
 800f24c:	f7fe fffa 	bl	800e244 <acc_rss_integration_log_level>
 800f250:	2801      	cmp	r0, #1
 800f252:	d910      	bls.n	800f276 <a121_diagnostics_decode_run_status+0x32>
 800f254:	4b09      	ldr	r3, [pc, #36]	@ (800f27c <a121_diagnostics_decode_run_status+0x38>)
 800f256:	480a      	ldr	r0, [pc, #40]	@ (800f280 <a121_diagnostics_decode_run_status+0x3c>)
 800f258:	490a      	ldr	r1, [pc, #40]	@ (800f284 <a121_diagnostics_decode_run_status+0x40>)
 800f25a:	6906      	ldr	r6, [r0, #16]
 800f25c:	4a0a      	ldr	r2, [pc, #40]	@ (800f288 <a121_diagnostics_decode_run_status+0x44>)
 800f25e:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 800f262:	bf18      	it	ne
 800f264:	4619      	movne	r1, r3
 800f266:	f3c4 040a 	ubfx	r4, r4, #0, #11
 800f26a:	9100      	str	r1, [sp, #0]
 800f26c:	9401      	str	r4, [sp, #4]
 800f26e:	4907      	ldr	r1, [pc, #28]	@ (800f28c <a121_diagnostics_decode_run_status+0x48>)
 800f270:	462b      	mov	r3, r5
 800f272:	2002      	movs	r0, #2
 800f274:	47b0      	blx	r6
 800f276:	b002      	add	sp, #8
 800f278:	bd70      	pop	{r4, r5, r6, pc}
 800f27a:	bf00      	nop
 800f27c:	08016998 	.word	0x08016998
 800f280:	20000bd8 	.word	0x20000bd8
 800f284:	08016990 	.word	0x08016990
 800f288:	080169a0 	.word	0x080169a0
 800f28c:	080168b4 	.word	0x080168b4

0800f290 <a121_diagnostics_decode_asic_error>:
 800f290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f294:	4e1e      	ldr	r6, [pc, #120]	@ (800f310 <a121_diagnostics_decode_asic_error+0x80>)
 800f296:	4680      	mov	r8, r0
 800f298:	4615      	mov	r5, r2
 800f29a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f29c:	b091      	sub	sp, #68	@ 0x44
 800f29e:	ac02      	add	r4, sp, #8
 800f2a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f2a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f2a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f2a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f2a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f2aa:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f2ae:	e884 0003 	stmia.w	r4, {r0, r1}
 800f2b2:	f7fe ffc7 	bl	800e244 <acc_rss_integration_log_level>
 800f2b6:	2801      	cmp	r0, #1
 800f2b8:	d907      	bls.n	800f2ca <a121_diagnostics_decode_asic_error+0x3a>
 800f2ba:	4b16      	ldr	r3, [pc, #88]	@ (800f314 <a121_diagnostics_decode_asic_error+0x84>)
 800f2bc:	9500      	str	r5, [sp, #0]
 800f2be:	691c      	ldr	r4, [r3, #16]
 800f2c0:	4a15      	ldr	r2, [pc, #84]	@ (800f318 <a121_diagnostics_decode_asic_error+0x88>)
 800f2c2:	4916      	ldr	r1, [pc, #88]	@ (800f31c <a121_diagnostics_decode_asic_error+0x8c>)
 800f2c4:	4643      	mov	r3, r8
 800f2c6:	2002      	movs	r0, #2
 800f2c8:	47a0      	blx	r4
 800f2ca:	f8df b048 	ldr.w	fp, [pc, #72]	@ 800f314 <a121_diagnostics_decode_asic_error+0x84>
 800f2ce:	f8df a050 	ldr.w	sl, [pc, #80]	@ 800f320 <a121_diagnostics_decode_asic_error+0x90>
 800f2d2:	f8df 9048 	ldr.w	r9, [pc, #72]	@ 800f31c <a121_diagnostics_decode_asic_error+0x8c>
 800f2d6:	ac02      	add	r4, sp, #8
 800f2d8:	ae10      	add	r6, sp, #64	@ 0x40
 800f2da:	e002      	b.n	800f2e2 <a121_diagnostics_decode_asic_error+0x52>
 800f2dc:	3408      	adds	r4, #8
 800f2de:	42b4      	cmp	r4, r6
 800f2e0:	d013      	beq.n	800f30a <a121_diagnostics_decode_asic_error+0x7a>
 800f2e2:	88a3      	ldrh	r3, [r4, #4]
 800f2e4:	421d      	tst	r5, r3
 800f2e6:	d0f9      	beq.n	800f2dc <a121_diagnostics_decode_asic_error+0x4c>
 800f2e8:	f7fe ffac 	bl	800e244 <acc_rss_integration_log_level>
 800f2ec:	2801      	cmp	r0, #1
 800f2ee:	4643      	mov	r3, r8
 800f2f0:	4652      	mov	r2, sl
 800f2f2:	4649      	mov	r1, r9
 800f2f4:	f04f 0002 	mov.w	r0, #2
 800f2f8:	d9f0      	bls.n	800f2dc <a121_diagnostics_decode_asic_error+0x4c>
 800f2fa:	6827      	ldr	r7, [r4, #0]
 800f2fc:	9700      	str	r7, [sp, #0]
 800f2fe:	3408      	adds	r4, #8
 800f300:	f8db 7010 	ldr.w	r7, [fp, #16]
 800f304:	47b8      	blx	r7
 800f306:	42b4      	cmp	r4, r6
 800f308:	d1eb      	bne.n	800f2e2 <a121_diagnostics_decode_asic_error+0x52>
 800f30a:	b011      	add	sp, #68	@ 0x44
 800f30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f310:	08015828 	.word	0x08015828
 800f314:	20000bd8 	.word	0x20000bd8
 800f318:	080169b4 	.word	0x080169b4
 800f31c:	080168b4 	.word	0x080168b4
 800f320:	080169d0 	.word	0x080169d0

0800f324 <a121_diagnostics_decode_wakeup_status0>:
 800f324:	b570      	push	{r4, r5, r6, lr}
 800f326:	b082      	sub	sp, #8
 800f328:	4605      	mov	r5, r0
 800f32a:	4614      	mov	r4, r2
 800f32c:	f7fe ff8a 	bl	800e244 <acc_rss_integration_log_level>
 800f330:	2801      	cmp	r0, #1
 800f332:	d909      	bls.n	800f348 <a121_diagnostics_decode_wakeup_status0+0x24>
 800f334:	4b05      	ldr	r3, [pc, #20]	@ (800f34c <a121_diagnostics_decode_wakeup_status0+0x28>)
 800f336:	4a06      	ldr	r2, [pc, #24]	@ (800f350 <a121_diagnostics_decode_wakeup_status0+0x2c>)
 800f338:	691e      	ldr	r6, [r3, #16]
 800f33a:	4906      	ldr	r1, [pc, #24]	@ (800f354 <a121_diagnostics_decode_wakeup_status0+0x30>)
 800f33c:	f004 040f 	and.w	r4, r4, #15
 800f340:	9400      	str	r4, [sp, #0]
 800f342:	462b      	mov	r3, r5
 800f344:	2002      	movs	r0, #2
 800f346:	47b0      	blx	r6
 800f348:	b002      	add	sp, #8
 800f34a:	bd70      	pop	{r4, r5, r6, pc}
 800f34c:	20000bd8 	.word	0x20000bd8
 800f350:	080169e4 	.word	0x080169e4
 800f354:	080168b4 	.word	0x080168b4

0800f358 <acc_sensor_status_a121>:
 800f358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f35c:	ed2d 8b02 	vpush	{d8}
 800f360:	b0a3      	sub	sp, #140	@ 0x8c
 800f362:	4606      	mov	r6, r0
 800f364:	f7fe ff6e 	bl	800e244 <acc_rss_integration_log_level>
 800f368:	2801      	cmp	r0, #1
 800f36a:	d905      	bls.n	800f378 <acc_sensor_status_a121+0x20>
 800f36c:	4b2e      	ldr	r3, [pc, #184]	@ (800f428 <acc_sensor_status_a121+0xd0>)
 800f36e:	4a2f      	ldr	r2, [pc, #188]	@ (800f42c <acc_sensor_status_a121+0xd4>)
 800f370:	691b      	ldr	r3, [r3, #16]
 800f372:	492f      	ldr	r1, [pc, #188]	@ (800f430 <acc_sensor_status_a121+0xd8>)
 800f374:	2002      	movs	r0, #2
 800f376:	4798      	blx	r3
 800f378:	492e      	ldr	r1, [pc, #184]	@ (800f434 <acc_sensor_status_a121+0xdc>)
 800f37a:	f8df a0ac 	ldr.w	sl, [pc, #172]	@ 800f428 <acc_sensor_status_a121+0xd0>
 800f37e:	f8df 90bc 	ldr.w	r9, [pc, #188]	@ 800f43c <acc_sensor_status_a121+0xe4>
 800f382:	2278      	movs	r2, #120	@ 0x78
 800f384:	a804      	add	r0, sp, #16
 800f386:	f003 fc94 	bl	8012cb2 <memcpy>
 800f38a:	2201      	movs	r2, #1
 800f38c:	21d5      	movs	r1, #213	@ 0xd5
 800f38e:	4630      	mov	r0, r6
 800f390:	f001 fd74 	bl	8010e7c <acc_sensor_reg_write>
 800f394:	ab22      	add	r3, sp, #136	@ 0x88
 800f396:	ee08 3a10 	vmov	s16, r3
 800f39a:	ac04      	add	r4, sp, #16
 800f39c:	88a5      	ldrh	r5, [r4, #4]
 800f39e:	f8b4 8006 	ldrh.w	r8, [r4, #6]
 800f3a2:	44a8      	add	r8, r5
 800f3a4:	4545      	cmp	r5, r8
 800f3a6:	da2a      	bge.n	800f3fe <acc_sensor_status_a121+0xa6>
 800f3a8:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800f430 <acc_sensor_status_a121+0xd8>
 800f3ac:	e006      	b.n	800f3bc <acc_sensor_status_a121+0x64>
 800f3ae:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800f3b2:	4798      	blx	r3
 800f3b4:	3501      	adds	r5, #1
 800f3b6:	b2ad      	uxth	r5, r5
 800f3b8:	4545      	cmp	r5, r8
 800f3ba:	da20      	bge.n	800f3fe <acc_sensor_status_a121+0xa6>
 800f3bc:	4629      	mov	r1, r5
 800f3be:	4630      	mov	r0, r6
 800f3c0:	f10d 020e 	add.w	r2, sp, #14
 800f3c4:	f001 fd44 	bl	8010e50 <acc_sensor_reg_read>
 800f3c8:	68a3      	ldr	r3, [r4, #8]
 800f3ca:	4629      	mov	r1, r5
 800f3cc:	4630      	mov	r0, r6
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d1ed      	bne.n	800f3ae <acc_sensor_status_a121+0x56>
 800f3d2:	f7fe ff37 	bl	800e244 <acc_rss_integration_log_level>
 800f3d6:	2801      	cmp	r0, #1
 800f3d8:	4633      	mov	r3, r6
 800f3da:	464a      	mov	r2, r9
 800f3dc:	4659      	mov	r1, fp
 800f3de:	f04f 0002 	mov.w	r0, #2
 800f3e2:	d9e7      	bls.n	800f3b4 <acc_sensor_status_a121+0x5c>
 800f3e4:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 800f3e8:	f8cd c004 	str.w	ip, [sp, #4]
 800f3ec:	6827      	ldr	r7, [r4, #0]
 800f3ee:	9700      	str	r7, [sp, #0]
 800f3f0:	3501      	adds	r5, #1
 800f3f2:	f8da 7010 	ldr.w	r7, [sl, #16]
 800f3f6:	b2ad      	uxth	r5, r5
 800f3f8:	47b8      	blx	r7
 800f3fa:	4545      	cmp	r5, r8
 800f3fc:	dbde      	blt.n	800f3bc <acc_sensor_status_a121+0x64>
 800f3fe:	ee18 3a10 	vmov	r3, s16
 800f402:	340c      	adds	r4, #12
 800f404:	42a3      	cmp	r3, r4
 800f406:	d1c9      	bne.n	800f39c <acc_sensor_status_a121+0x44>
 800f408:	f7fe ff1c 	bl	800e244 <acc_rss_integration_log_level>
 800f40c:	2801      	cmp	r0, #1
 800f40e:	d905      	bls.n	800f41c <acc_sensor_status_a121+0xc4>
 800f410:	4b05      	ldr	r3, [pc, #20]	@ (800f428 <acc_sensor_status_a121+0xd0>)
 800f412:	4a09      	ldr	r2, [pc, #36]	@ (800f438 <acc_sensor_status_a121+0xe0>)
 800f414:	691b      	ldr	r3, [r3, #16]
 800f416:	4906      	ldr	r1, [pc, #24]	@ (800f430 <acc_sensor_status_a121+0xd8>)
 800f418:	2002      	movs	r0, #2
 800f41a:	4798      	blx	r3
 800f41c:	b023      	add	sp, #140	@ 0x8c
 800f41e:	ecbd 8b02 	vpop	{d8}
 800f422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f426:	bf00      	nop
 800f428:	20000bd8 	.word	0x20000bd8
 800f42c:	08016a04 	.word	0x08016a04
 800f430:	080168b4 	.word	0x080168b4
 800f434:	08015860 	.word	0x08015860
 800f438:	08016a54 	.word	0x08016a54
 800f43c:	08016a40 	.word	0x08016a40

0800f440 <get_pll_freq>:
 800f440:	b508      	push	{r3, lr}
 800f442:	ed2d 8b02 	vpush	{d8}
 800f446:	f7fe fe77 	bl	800e138 <acc_rss_integration_get_sensor_reference_frequency>
 800f44a:	ee07 0a90 	vmov	s15, r0
 800f44e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800f452:	eeb0 0a48 	vmov.f32	s0, s16
 800f456:	f001 fe49 	bl	80110ec <acc_cpd_pll_divisors_ref_divisor>
 800f45a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800f45e:	ecbd 8b02 	vpop	{d8}
 800f462:	bd08      	pop	{r3, pc}

0800f464 <acc_translation_a121_profile_to_pulse_params>:
 800f464:	2300      	movs	r3, #0
 800f466:	3801      	subs	r0, #1
 800f468:	b430      	push	{r4, r5}
 800f46a:	e9c2 3301 	strd	r3, r3, [r2, #4]
 800f46e:	60d3      	str	r3, [r2, #12]
 800f470:	2804      	cmp	r0, #4
 800f472:	d836      	bhi.n	800f4e2 <acc_translation_a121_profile_to_pulse_params+0x7e>
 800f474:	e8df f000 	tbb	[pc, r0]
 800f478:	2d291b0d 	.word	0x2d291b0d
 800f47c:	03          	.byte	0x03
 800f47d:	00          	.byte	0x00
 800f47e:	4b1c      	ldr	r3, [pc, #112]	@ (800f4f0 <acc_translation_a121_profile_to_pulse_params+0x8c>)
 800f480:	491c      	ldr	r1, [pc, #112]	@ (800f4f4 <acc_translation_a121_profile_to_pulse_params+0x90>)
 800f482:	2000      	movs	r0, #0
 800f484:	e9c2 3305 	strd	r3, r3, [r2, #20]
 800f488:	7010      	strb	r0, [r2, #0]
 800f48a:	61d1      	str	r1, [r2, #28]
 800f48c:	2001      	movs	r0, #1
 800f48e:	bc30      	pop	{r4, r5}
 800f490:	4770      	bx	lr
 800f492:	2001      	movs	r0, #1
 800f494:	2400      	movs	r4, #0
 800f496:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800f49a:	7014      	strb	r4, [r2, #0]
 800f49c:	82d0      	strh	r0, [r2, #22]
 800f49e:	8350      	strh	r0, [r2, #26]
 800f4a0:	61d3      	str	r3, [r2, #28]
 800f4a2:	b1d1      	cbz	r1, 800f4da <acc_translation_a121_profile_to_pulse_params+0x76>
 800f4a4:	8c8b      	ldrh	r3, [r1, #36]	@ 0x24
 800f4a6:	8293      	strh	r3, [r2, #20]
 800f4a8:	bc30      	pop	{r4, r5}
 800f4aa:	8313      	strh	r3, [r2, #24]
 800f4ac:	4770      	bx	lr
 800f4ae:	4b12      	ldr	r3, [pc, #72]	@ (800f4f8 <acc_translation_a121_profile_to_pulse_params+0x94>)
 800f4b0:	4c12      	ldr	r4, [pc, #72]	@ (800f4fc <acc_translation_a121_profile_to_pulse_params+0x98>)
 800f4b2:	61d4      	str	r4, [r2, #28]
 800f4b4:	2001      	movs	r0, #1
 800f4b6:	2596      	movs	r5, #150	@ 0x96
 800f4b8:	21fa      	movs	r1, #250	@ 0xfa
 800f4ba:	60d5      	str	r5, [r2, #12]
 800f4bc:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800f4c0:	bc30      	pop	{r4, r5}
 800f4c2:	e9c2 3305 	strd	r3, r3, [r2, #20]
 800f4c6:	7010      	strb	r0, [r2, #0]
 800f4c8:	4770      	bx	lr
 800f4ca:	4b0d      	ldr	r3, [pc, #52]	@ (800f500 <acc_translation_a121_profile_to_pulse_params+0x9c>)
 800f4cc:	490d      	ldr	r1, [pc, #52]	@ (800f504 <acc_translation_a121_profile_to_pulse_params+0xa0>)
 800f4ce:	2000      	movs	r0, #0
 800f4d0:	e7d8      	b.n	800f484 <acc_translation_a121_profile_to_pulse_params+0x20>
 800f4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800f508 <acc_translation_a121_profile_to_pulse_params+0xa4>)
 800f4d4:	490d      	ldr	r1, [pc, #52]	@ (800f50c <acc_translation_a121_profile_to_pulse_params+0xa8>)
 800f4d6:	2000      	movs	r0, #0
 800f4d8:	e7d4      	b.n	800f484 <acc_translation_a121_profile_to_pulse_params+0x20>
 800f4da:	2302      	movs	r3, #2
 800f4dc:	8293      	strh	r3, [r2, #20]
 800f4de:	8313      	strh	r3, [r2, #24]
 800f4e0:	e7d5      	b.n	800f48e <acc_translation_a121_profile_to_pulse_params+0x2a>
 800f4e2:	2000      	movs	r0, #0
 800f4e4:	e9c2 0005 	strd	r0, r0, [r2, #20]
 800f4e8:	7010      	strb	r0, [r2, #0]
 800f4ea:	61d0      	str	r0, [r2, #28]
 800f4ec:	e7cf      	b.n	800f48e <acc_translation_a121_profile_to_pulse_params+0x2a>
 800f4ee:	bf00      	nop
 800f4f0:	00050008 	.word	0x00050008
 800f4f4:	0002000b 	.word	0x0002000b
 800f4f8:	00010008 	.word	0x00010008
 800f4fc:	00030002 	.word	0x00030002
 800f500:	00020008 	.word	0x00020008
 800f504:	00020004 	.word	0x00020004
 800f508:	00030008 	.word	0x00030008
 800f50c:	00020006 	.word	0x00020006

0800f510 <acc_translation_a121_profile_to_start_point_offset>:
 800f510:	3801      	subs	r0, #1
 800f512:	2804      	cmp	r0, #4
 800f514:	d818      	bhi.n	800f548 <acc_translation_a121_profile_to_start_point_offset+0x38>
 800f516:	e8df f000 	tbb	[pc, r0]
 800f51a:	0812      	.short	0x0812
 800f51c:	0d03      	.short	0x0d03
 800f51e:	03          	.byte	0x03
 800f51f:	00          	.byte	0x00
 800f520:	f06f 030c 	mvn.w	r3, #12
 800f524:	600b      	str	r3, [r1, #0]
 800f526:	2001      	movs	r0, #1
 800f528:	4770      	bx	lr
 800f52a:	f06f 0306 	mvn.w	r3, #6
 800f52e:	600b      	str	r3, [r1, #0]
 800f530:	2001      	movs	r0, #1
 800f532:	4770      	bx	lr
 800f534:	f06f 030f 	mvn.w	r3, #15
 800f538:	600b      	str	r3, [r1, #0]
 800f53a:	2001      	movs	r0, #1
 800f53c:	4770      	bx	lr
 800f53e:	f06f 030b 	mvn.w	r3, #11
 800f542:	600b      	str	r3, [r1, #0]
 800f544:	2001      	movs	r0, #1
 800f546:	4770      	bx	lr
 800f548:	2000      	movs	r0, #0
 800f54a:	6008      	str	r0, [r1, #0]
 800f54c:	4770      	bx	lr
 800f54e:	bf00      	nop

0800f550 <acc_translation_a121_set_calibration_params>:
 800f550:	b530      	push	{r4, r5, lr}
 800f552:	460c      	mov	r4, r1
 800f554:	f8b0 2084 	ldrh.w	r2, [r0, #132]	@ 0x84
 800f558:	f8b0 3086 	ldrh.w	r3, [r0, #134]	@ 0x86
 800f55c:	f8b0 5082 	ldrh.w	r5, [r0, #130]	@ 0x82
 800f560:	f8b0 1088 	ldrh.w	r1, [r0, #136]	@ 0x88
 800f564:	8062      	strh	r2, [r4, #2]
 800f566:	8842      	ldrh	r2, [r0, #2]
 800f568:	80a3      	strh	r3, [r4, #4]
 800f56a:	8883      	ldrh	r3, [r0, #4]
 800f56c:	8025      	strh	r5, [r4, #0]
 800f56e:	b087      	sub	sp, #28
 800f570:	88c5      	ldrh	r5, [r0, #6]
 800f572:	80e1      	strh	r1, [r4, #6]
 800f574:	8941      	ldrh	r1, [r0, #10]
 800f576:	8122      	strh	r2, [r4, #8]
 800f578:	8c02      	ldrh	r2, [r0, #32]
 800f57a:	8163      	strh	r3, [r4, #10]
 800f57c:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800f57e:	8263      	strh	r3, [r4, #18]
 800f580:	81a5      	strh	r5, [r4, #12]
 800f582:	81e1      	strh	r1, [r4, #14]
 800f584:	8222      	strh	r2, [r4, #16]
 800f586:	8900      	ldrh	r0, [r0, #8]
 800f588:	466a      	mov	r2, sp
 800f58a:	2160      	movs	r1, #96	@ 0x60
 800f58c:	f001 fdb6 	bl	80110fc <acc_dll_calculate_area_settings>
 800f590:	f8bd 1000 	ldrh.w	r1, [sp]
 800f594:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f598:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f59c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
 800f5a0:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800f5a4:	82a1      	strh	r1, [r4, #20]
 800f5a6:	82e2      	strh	r2, [r4, #22]
 800f5a8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800f5ac:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800f5b0:	8323      	strh	r3, [r4, #24]
 800f5b2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800f5b6:	8365      	strh	r5, [r4, #26]
 800f5b8:	83a0      	strh	r0, [r4, #28]
 800f5ba:	83e1      	strh	r1, [r4, #30]
 800f5bc:	8422      	strh	r2, [r4, #32]
 800f5be:	8463      	strh	r3, [r4, #34]	@ 0x22
 800f5c0:	b007      	add	sp, #28
 800f5c2:	bd30      	pop	{r4, r5, pc}

0800f5c4 <acc_translation_a121_set_gain_params>:
 800f5c4:	7a83      	ldrb	r3, [r0, #10]
 800f5c6:	2b17      	cmp	r3, #23
 800f5c8:	d80e      	bhi.n	800f5e8 <acc_translation_a121_set_gain_params+0x24>
 800f5ca:	2b09      	cmp	r3, #9
 800f5cc:	d80e      	bhi.n	800f5ec <acc_translation_a121_set_gain_params+0x28>
 800f5ce:	f1c3 0309 	rsb	r3, r3, #9
 800f5d2:	2015      	movs	r0, #21
 800f5d4:	8053      	strh	r3, [r2, #2]
 800f5d6:	8010      	strh	r0, [r2, #0]
 800f5d8:	b199      	cbz	r1, 800f602 <acc_translation_a121_set_gain_params+0x3e>
 800f5da:	8853      	ldrh	r3, [r2, #2]
 800f5dc:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800f5e0:	2001      	movs	r0, #1
 800f5e2:	898b      	ldrh	r3, [r1, #12]
 800f5e4:	8093      	strh	r3, [r2, #4]
 800f5e6:	4770      	bx	lr
 800f5e8:	2000      	movs	r0, #0
 800f5ea:	4770      	bx	lr
 800f5ec:	2b10      	cmp	r3, #16
 800f5ee:	bf94      	ite	ls
 800f5f0:	f1c3 031e 	rsbls	r3, r3, #30
 800f5f4:	f1c3 0317 	rsbhi	r3, r3, #23
 800f5f8:	2000      	movs	r0, #0
 800f5fa:	8013      	strh	r3, [r2, #0]
 800f5fc:	8050      	strh	r0, [r2, #2]
 800f5fe:	2900      	cmp	r1, #0
 800f600:	d1eb      	bne.n	800f5da <acc_translation_a121_set_gain_params+0x16>
 800f602:	8091      	strh	r1, [r2, #4]
 800f604:	2001      	movs	r0, #1
 800f606:	4770      	bx	lr

0800f608 <acc_translation_a121_set_pulse_length_params>:
 800f608:	8a83      	ldrh	r3, [r0, #20]
 800f60a:	2b08      	cmp	r3, #8
 800f60c:	d802      	bhi.n	800f614 <acc_translation_a121_set_pulse_length_params+0xc>
 800f60e:	8ac2      	ldrh	r2, [r0, #22]
 800f610:	2a07      	cmp	r2, #7
 800f612:	d901      	bls.n	800f618 <acc_translation_a121_set_pulse_length_params+0x10>
 800f614:	2000      	movs	r0, #0
 800f616:	4770      	bx	lr
 800f618:	b470      	push	{r4, r5, r6}
 800f61a:	8b05      	ldrh	r5, [r0, #24]
 800f61c:	2d08      	cmp	r5, #8
 800f61e:	d902      	bls.n	800f626 <acc_translation_a121_set_pulse_length_params+0x1e>
 800f620:	2000      	movs	r0, #0
 800f622:	bc70      	pop	{r4, r5, r6}
 800f624:	4770      	bx	lr
 800f626:	8b44      	ldrh	r4, [r0, #26]
 800f628:	2c08      	cmp	r4, #8
 800f62a:	d8f9      	bhi.n	800f620 <acc_translation_a121_set_pulse_length_params+0x18>
 800f62c:	2001      	movs	r0, #1
 800f62e:	1e66      	subs	r6, r4, #1
 800f630:	fa00 f202 	lsl.w	r2, r0, r2
 800f634:	3a01      	subs	r2, #1
 800f636:	fa00 f404 	lsl.w	r4, r0, r4
 800f63a:	fa00 f606 	lsl.w	r6, r0, r6
 800f63e:	b292      	uxth	r2, r2
 800f640:	3c01      	subs	r4, #1
 800f642:	3e01      	subs	r6, #1
 800f644:	01a4      	lsls	r4, r4, #6
 800f646:	0276      	lsls	r6, r6, #9
 800f648:	800b      	strh	r3, [r1, #0]
 800f64a:	0193      	lsls	r3, r2, #6
 800f64c:	0252      	lsls	r2, r2, #9
 800f64e:	804d      	strh	r5, [r1, #2]
 800f650:	808b      	strh	r3, [r1, #4]
 800f652:	810a      	strh	r2, [r1, #8]
 800f654:	80cc      	strh	r4, [r1, #6]
 800f656:	814e      	strh	r6, [r1, #10]
 800f658:	e7e3      	b.n	800f622 <acc_translation_a121_set_pulse_length_params+0x1a>
 800f65a:	bf00      	nop

0800f65c <acc_translation_a121_set_range_params>:
 800f65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f660:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 800f664:	f890 704c 	ldrb.w	r7, [r0, #76]	@ 0x4c
 800f668:	888d      	ldrh	r5, [r1, #4]
 800f66a:	b08d      	sub	sp, #52	@ 0x34
 800f66c:	f1ba 0f18 	cmp.w	sl, #24
 800f670:	9102      	str	r1, [sp, #8]
 800f672:	4691      	mov	r9, r2
 800f674:	461c      	mov	r4, r3
 800f676:	f240 812e 	bls.w	800f8d6 <acc_translation_a121_set_range_params+0x27a>
 800f67a:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
 800f67e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800f682:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 800f686:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
 800f68a:	f3c3 02cc 	ubfx	r2, r3, #3, #13
 800f68e:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 800f692:	b29b      	uxth	r3, r3
 800f694:	f640 22aa 	movw	r2, #2730	@ 0xaaa
 800f698:	4293      	cmp	r3, r2
 800f69a:	f240 8141 	bls.w	800f920 <acc_translation_a121_set_range_params+0x2c4>
 800f69e:	4bb3      	ldr	r3, [pc, #716]	@ (800f96c <acc_translation_a121_set_range_params+0x310>)
 800f6a0:	4ab3      	ldr	r2, [pc, #716]	@ (800f970 <acc_translation_a121_set_range_params+0x314>)
 800f6a2:	691b      	ldr	r3, [r3, #16]
 800f6a4:	49b3      	ldr	r1, [pc, #716]	@ (800f974 <acc_translation_a121_set_range_params+0x318>)
 800f6a6:	2000      	movs	r0, #0
 800f6a8:	4606      	mov	r6, r0
 800f6aa:	9001      	str	r0, [sp, #4]
 800f6ac:	f04f 0801 	mov.w	r8, #1
 800f6b0:	4798      	blx	r3
 800f6b2:	46c3      	mov	fp, r8
 800f6b4:	9604      	str	r6, [sp, #16]
 800f6b6:	2f00      	cmp	r7, #0
 800f6b8:	f040 812f 	bne.w	800f91a <acc_translation_a121_set_range_params+0x2be>
 800f6bc:	2204      	movs	r2, #4
 800f6be:	9b02      	ldr	r3, [sp, #8]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	4499      	add	r9, r3
 800f6c4:	f509 43c3 	add.w	r3, r9, #24960	@ 0x6180
 800f6c8:	fb12 f205 	smulbb	r2, r2, r5
 800f6cc:	3328      	adds	r3, #40	@ 0x28
 800f6ce:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800f6d2:	3d01      	subs	r5, #1
 800f6d4:	b292      	uxth	r2, r2
 800f6d6:	428b      	cmp	r3, r1
 800f6d8:	9205      	str	r2, [sp, #20]
 800f6da:	fb0a 9a05 	mla	sl, sl, r5, r9
 800f6de:	d906      	bls.n	800f6ee <acc_translation_a121_set_range_params+0x92>
 800f6e0:	4ba2      	ldr	r3, [pc, #648]	@ (800f96c <acc_translation_a121_set_range_params+0x310>)
 800f6e2:	4aa5      	ldr	r2, [pc, #660]	@ (800f978 <acc_translation_a121_set_range_params+0x31c>)
 800f6e4:	691b      	ldr	r3, [r3, #16]
 800f6e6:	49a3      	ldr	r1, [pc, #652]	@ (800f974 <acc_translation_a121_set_range_params+0x318>)
 800f6e8:	2000      	movs	r0, #0
 800f6ea:	4798      	blx	r3
 800f6ec:	2700      	movs	r7, #0
 800f6ee:	f50a 43c3 	add.w	r3, sl, #24960	@ 0x6180
 800f6f2:	3328      	adds	r3, #40	@ 0x28
 800f6f4:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800f6f8:	4293      	cmp	r3, r2
 800f6fa:	d906      	bls.n	800f70a <acc_translation_a121_set_range_params+0xae>
 800f6fc:	4b9b      	ldr	r3, [pc, #620]	@ (800f96c <acc_translation_a121_set_range_params+0x310>)
 800f6fe:	4a9f      	ldr	r2, [pc, #636]	@ (800f97c <acc_translation_a121_set_range_params+0x320>)
 800f700:	691b      	ldr	r3, [r3, #16]
 800f702:	499c      	ldr	r1, [pc, #624]	@ (800f974 <acc_translation_a121_set_range_params+0x318>)
 800f704:	2000      	movs	r0, #0
 800f706:	4798      	blx	r3
 800f708:	2700      	movs	r7, #0
 800f70a:	f1b9 0f00 	cmp.w	r9, #0
 800f70e:	f2c0 817c 	blt.w	800fa0a <acc_translation_a121_set_range_params+0x3ae>
 800f712:	4b9b      	ldr	r3, [pc, #620]	@ (800f980 <acc_translation_a121_set_range_params+0x324>)
 800f714:	ea4f 72e9 	mov.w	r2, r9, asr #31
 800f718:	fb83 1309 	smull	r1, r3, r3, r9
 800f71c:	ebc2 03a3 	rsb	r3, r2, r3, asr #2
 800f720:	f1ba 0f00 	cmp.w	sl, #0
 800f724:	b21b      	sxth	r3, r3
 800f726:	f2c0 817e 	blt.w	800fa26 <acc_translation_a121_set_range_params+0x3ca>
 800f72a:	4995      	ldr	r1, [pc, #596]	@ (800f980 <acc_translation_a121_set_range_params+0x324>)
 800f72c:	ea4f 7cea 	mov.w	ip, sl, asr #31
 800f730:	fb81 010a 	smull	r0, r1, r1, sl
 800f734:	ebcc 01a1 	rsb	r1, ip, r1, asr #2
 800f738:	b209      	sxth	r1, r1
 800f73a:	4891      	ldr	r0, [pc, #580]	@ (800f980 <acc_translation_a121_set_range_params+0x324>)
 800f73c:	fb80 5009 	smull	r5, r0, r0, r9
 800f740:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
 800f744:	b29b      	uxth	r3, r3
 800f746:	1ac9      	subs	r1, r1, r3
 800f748:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f74c:	b288      	uxth	r0, r1
 800f74e:	ebb9 02c2 	subs.w	r2, r9, r2, lsl #3
 800f752:	b209      	sxth	r1, r1
 800f754:	fbb0 fbfb 	udiv	fp, r0, fp
 800f758:	f10b 0b01 	add.w	fp, fp, #1
 800f75c:	9106      	str	r1, [sp, #24]
 800f75e:	fa1f fb8b 	uxth.w	fp, fp
 800f762:	f04f 0118 	mov.w	r1, #24
 800f766:	fbb1 f1f8 	udiv	r1, r1, r8
 800f76a:	f100 816e 	bmi.w	800fa4a <acc_translation_a121_set_range_params+0x3ee>
 800f76e:	b210      	sxth	r0, r2
 800f770:	b292      	uxth	r2, r2
 800f772:	f8df 920c 	ldr.w	r9, [pc, #524]	@ 800f980 <acc_translation_a121_set_range_params+0x324>
 800f776:	fbb2 f5f8 	udiv	r5, r2, r8
 800f77a:	fb89 690a 	smull	r6, r9, r9, sl
 800f77e:	ebcc 09a9 	rsb	r9, ip, r9, asr #2
 800f782:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 800f786:	fb08 2515 	mls	r5, r8, r5, r2
 800f78a:	b2ad      	uxth	r5, r5
 800f78c:	ebba 09c9 	subs.w	r9, sl, r9, lsl #3
 800f790:	9500      	str	r5, [sp, #0]
 800f792:	f100 8153 	bmi.w	800fa3c <acc_translation_a121_set_range_params+0x3e0>
 800f796:	fa0f f589 	sxth.w	r5, r9
 800f79a:	950a      	str	r5, [sp, #40]	@ 0x28
 800f79c:	fa1f f989 	uxth.w	r9, r9
 800f7a0:	9d00      	ldr	r5, [sp, #0]
 800f7a2:	3901      	subs	r1, #1
 800f7a4:	b289      	uxth	r1, r1
 800f7a6:	9109      	str	r1, [sp, #36]	@ 0x24
 800f7a8:	f1bb 0f01 	cmp.w	fp, #1
 800f7ac:	fb11 5108 	smlabb	r1, r1, r8, r5
 800f7b0:	b289      	uxth	r1, r1
 800f7b2:	f000 80f3 	beq.w	800f99c <acc_translation_a121_set_range_params+0x340>
 800f7b6:	9d00      	ldr	r5, [sp, #0]
 800f7b8:	ebb9 0901 	subs.w	r9, r9, r1
 800f7bc:	bf18      	it	ne
 800f7be:	f04f 0901 	movne.w	r9, #1
 800f7c2:	4295      	cmp	r5, r2
 800f7c4:	bf14      	ite	ne
 800f7c6:	2501      	movne	r5, #1
 800f7c8:	2500      	moveq	r5, #0
 800f7ca:	ebab 0505 	sub.w	r5, fp, r5
 800f7ce:	eba5 0509 	sub.w	r5, r5, r9
 800f7d2:	fa1f f689 	uxth.w	r6, r9
 800f7d6:	b2ad      	uxth	r5, r5
 800f7d8:	9607      	str	r6, [sp, #28]
 800f7da:	f040 80e6 	bne.w	800f9aa <acc_translation_a121_set_range_params+0x34e>
 800f7de:	2100      	movs	r1, #0
 800f7e0:	9108      	str	r1, [sp, #32]
 800f7e2:	9103      	str	r1, [sp, #12]
 800f7e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f7e6:	9900      	ldr	r1, [sp, #0]
 800f7e8:	0092      	lsls	r2, r2, #2
 800f7ea:	0089      	lsls	r1, r1, #2
 800f7ec:	87a2      	strh	r2, [r4, #60]	@ 0x3c
 800f7ee:	87e1      	strh	r1, [r4, #62]	@ 0x3e
 800f7f0:	2f00      	cmp	r7, #0
 800f7f2:	f000 80b4 	beq.w	800f95e <acc_translation_a121_set_range_params+0x302>
 800f7f6:	9a02      	ldr	r2, [sp, #8]
 800f7f8:	7b92      	ldrb	r2, [r2, #14]
 800f7fa:	2a05      	cmp	r2, #5
 800f7fc:	f200 812a 	bhi.w	800fa54 <acc_translation_a121_set_range_params+0x3f8>
 800f800:	4960      	ldr	r1, [pc, #384]	@ (800f984 <acc_translation_a121_set_range_params+0x328>)
 800f802:	f831 a012 	ldrh.w	sl, [r1, r2, lsl #1]
 800f806:	ea4f 015a 	mov.w	r1, sl, lsr #1
 800f80a:	f1aa 0003 	sub.w	r0, sl, #3
 800f80e:	f1aa 0b4a 	sub.w	fp, sl, #74	@ 0x4a
 800f812:	3903      	subs	r1, #3
 800f814:	b289      	uxth	r1, r1
 800f816:	b280      	uxth	r0, r0
 800f818:	fa1f fb8b 	uxth.w	fp, fp
 800f81c:	f1aa 0a14 	sub.w	sl, sl, #20
 800f820:	f1c3 0629 	rsb	r6, r3, #41	@ 0x29
 800f824:	445e      	add	r6, fp
 800f826:	9a06      	ldr	r2, [sp, #24]
 800f828:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800f82a:	b233      	sxth	r3, r6
 800f82c:	1a9a      	subs	r2, r3, r2
 800f82e:	2a29      	cmp	r2, #41	@ 0x29
 800f830:	86e1      	strh	r1, [r4, #54]	@ 0x36
 800f832:	b2b6      	uxth	r6, r6
 800f834:	dc08      	bgt.n	800f848 <acc_translation_a121_set_range_params+0x1ec>
 800f836:	494d      	ldr	r1, [pc, #308]	@ (800f96c <acc_translation_a121_set_range_params+0x310>)
 800f838:	4a53      	ldr	r2, [pc, #332]	@ (800f988 <acc_translation_a121_set_range_params+0x32c>)
 800f83a:	690f      	ldr	r7, [r1, #16]
 800f83c:	494d      	ldr	r1, [pc, #308]	@ (800f974 <acc_translation_a121_set_range_params+0x318>)
 800f83e:	9302      	str	r3, [sp, #8]
 800f840:	2000      	movs	r0, #0
 800f842:	47b8      	blx	r7
 800f844:	9b02      	ldr	r3, [sp, #8]
 800f846:	2700      	movs	r7, #0
 800f848:	4553      	cmp	r3, sl
 800f84a:	db06      	blt.n	800f85a <acc_translation_a121_set_range_params+0x1fe>
 800f84c:	4b47      	ldr	r3, [pc, #284]	@ (800f96c <acc_translation_a121_set_range_params+0x310>)
 800f84e:	4a4f      	ldr	r2, [pc, #316]	@ (800f98c <acc_translation_a121_set_range_params+0x330>)
 800f850:	691b      	ldr	r3, [r3, #16]
 800f852:	4948      	ldr	r1, [pc, #288]	@ (800f974 <acc_translation_a121_set_range_params+0x318>)
 800f854:	2000      	movs	r0, #0
 800f856:	4798      	blx	r3
 800f858:	2700      	movs	r7, #0
 800f85a:	9b01      	ldr	r3, [sp, #4]
 800f85c:	f8a4 b038 	strh.w	fp, [r4, #56]	@ 0x38
 800f860:	2b2c      	cmp	r3, #44	@ 0x2c
 800f862:	8766      	strh	r6, [r4, #58]	@ 0x3a
 800f864:	f240 80c4 	bls.w	800f9f0 <acc_translation_a121_set_range_params+0x394>
 800f868:	2300      	movs	r3, #0
 800f86a:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
 800f86e:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800f872:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 800f876:	9b04      	ldr	r3, [sp, #16]
 800f878:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
 800f87c:	9b08      	ldr	r3, [sp, #32]
 800f87e:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 800f882:	2d00      	cmp	r5, #0
 800f884:	f000 809a 	beq.w	800f9bc <acc_translation_a121_set_range_params+0x360>
 800f888:	2301      	movs	r3, #1
 800f88a:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 800f88e:	9b03      	ldr	r3, [sp, #12]
 800f890:	9a07      	ldr	r2, [sp, #28]
 800f892:	f8a4 204c 	strh.w	r2, [r4, #76]	@ 0x4c
 800f896:	2b00      	cmp	r3, #0
 800f898:	f000 80fc 	beq.w	800fa94 <acc_translation_a121_set_range_params+0x438>
 800f89c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f89e:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 800f8a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8a4:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 800f8a8:	f1b9 0f00 	cmp.w	r9, #0
 800f8ac:	f000 80ef 	beq.w	800fa8e <acc_translation_a121_set_range_params+0x432>
 800f8b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8b2:	9a00      	ldr	r2, [sp, #0]
 800f8b4:	eba3 0902 	sub.w	r9, r3, r2
 800f8b8:	fb99 f8f8 	sdiv	r8, r9, r8
 800f8bc:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
 800f8c0:	3d01      	subs	r5, #1
 800f8c2:	b2ad      	uxth	r5, r5
 800f8c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f8c6:	9a05      	ldr	r2, [sp, #20]
 800f8c8:	f8a4 5040 	strh.w	r5, [r4, #64]	@ 0x40
 800f8cc:	4638      	mov	r0, r7
 800f8ce:	801a      	strh	r2, [r3, #0]
 800f8d0:	b00d      	add	sp, #52	@ 0x34
 800f8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8d6:	f1ba 0f00 	cmp.w	sl, #0
 800f8da:	f43f aee0 	beq.w	800f69e <acc_translation_a121_set_range_params+0x42>
 800f8de:	2318      	movs	r3, #24
 800f8e0:	fbb3 f3fa 	udiv	r3, r3, sl
 800f8e4:	fb0a f303 	mul.w	r3, sl, r3
 800f8e8:	f1c3 0318 	rsb	r3, r3, #24
 800f8ec:	b29b      	uxth	r3, r3
 800f8ee:	9304      	str	r3, [sp, #16]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	f47f aed4 	bne.w	800f69e <acc_translation_a121_set_range_params+0x42>
 800f8f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f8fa:	009b      	lsls	r3, r3, #2
 800f8fc:	b29b      	uxth	r3, r3
 800f8fe:	9301      	str	r3, [sp, #4]
 800f900:	46d0      	mov	r8, sl
 800f902:	f04f 0b01 	mov.w	fp, #1
 800f906:	b9d5      	cbnz	r5, 800f93e <acc_translation_a121_set_range_params+0x2e2>
 800f908:	4b18      	ldr	r3, [pc, #96]	@ (800f96c <acc_translation_a121_set_range_params+0x310>)
 800f90a:	4a21      	ldr	r2, [pc, #132]	@ (800f990 <acc_translation_a121_set_range_params+0x334>)
 800f90c:	691b      	ldr	r3, [r3, #16]
 800f90e:	4919      	ldr	r1, [pc, #100]	@ (800f974 <acc_translation_a121_set_range_params+0x318>)
 800f910:	4628      	mov	r0, r5
 800f912:	4798      	blx	r3
 800f914:	2f00      	cmp	r7, #0
 800f916:	f43f aed1 	beq.w	800f6bc <acc_translation_a121_set_range_params+0x60>
 800f91a:	2700      	movs	r7, #0
 800f91c:	2202      	movs	r2, #2
 800f91e:	e6ce      	b.n	800f6be <acc_translation_a121_set_range_params+0x62>
 800f920:	4b1c      	ldr	r3, [pc, #112]	@ (800f994 <acc_translation_a121_set_range_params+0x338>)
 800f922:	fba3 3b0a 	umull	r3, fp, r3, sl
 800f926:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
 800f92a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f92e:	b29b      	uxth	r3, r3
 800f930:	9304      	str	r3, [sp, #16]
 800f932:	235c      	movs	r3, #92	@ 0x5c
 800f934:	9301      	str	r3, [sp, #4]
 800f936:	f04f 0818 	mov.w	r8, #24
 800f93a:	2d00      	cmp	r5, #0
 800f93c:	d0e4      	beq.n	800f908 <acc_translation_a121_set_range_params+0x2ac>
 800f93e:	2f00      	cmp	r7, #0
 800f940:	f040 80b2 	bne.w	800faa8 <acc_translation_a121_set_range_params+0x44c>
 800f944:	9b02      	ldr	r3, [sp, #8]
 800f946:	7b1b      	ldrb	r3, [r3, #12]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	f000 80c4 	beq.w	800fad6 <acc_translation_a121_set_range_params+0x47a>
 800f94e:	4b07      	ldr	r3, [pc, #28]	@ (800f96c <acc_translation_a121_set_range_params+0x310>)
 800f950:	4a11      	ldr	r2, [pc, #68]	@ (800f998 <acc_translation_a121_set_range_params+0x33c>)
 800f952:	691b      	ldr	r3, [r3, #16]
 800f954:	4907      	ldr	r1, [pc, #28]	@ (800f974 <acc_translation_a121_set_range_params+0x318>)
 800f956:	4638      	mov	r0, r7
 800f958:	4798      	blx	r3
 800f95a:	2204      	movs	r2, #4
 800f95c:	e6af      	b.n	800f6be <acc_translation_a121_set_range_params+0x62>
 800f95e:	f04f 0b36 	mov.w	fp, #54	@ 0x36
 800f962:	f04f 0a6c 	mov.w	sl, #108	@ 0x6c
 800f966:	213d      	movs	r1, #61	@ 0x3d
 800f968:	207d      	movs	r0, #125	@ 0x7d
 800f96a:	e759      	b.n	800f820 <acc_translation_a121_set_range_params+0x1c4>
 800f96c:	20000bd8 	.word	0x20000bd8
 800f970:	08016a90 	.word	0x08016a90
 800f974:	08016aa4 	.word	0x08016aa4
 800f978:	08016b04 	.word	0x08016b04
 800f97c:	08016b18 	.word	0x08016b18
 800f980:	2aaaaaab 	.word	0x2aaaaaab
 800f984:	08016da8 	.word	0x08016da8
 800f988:	08016b4c 	.word	0x08016b4c
 800f98c:	08016b6c 	.word	0x08016b6c
 800f990:	08016ab8 	.word	0x08016ab8
 800f994:	aaaaaaab 	.word	0xaaaaaaab
 800f998:	08016acc 	.word	0x08016acc
 800f99c:	4295      	cmp	r5, r2
 800f99e:	f000 808e 	beq.w	800fabe <acc_translation_a121_set_range_params+0x462>
 800f9a2:	2500      	movs	r5, #0
 800f9a4:	4649      	mov	r1, r9
 800f9a6:	9507      	str	r5, [sp, #28]
 800f9a8:	46a9      	mov	r9, r5
 800f9aa:	2601      	movs	r6, #1
 800f9ac:	1a08      	subs	r0, r1, r0
 800f9ae:	fb90 f0f8 	sdiv	r0, r0, r8
 800f9b2:	b281      	uxth	r1, r0
 800f9b4:	9608      	str	r6, [sp, #32]
 800f9b6:	9603      	str	r6, [sp, #12]
 800f9b8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f9ba:	e714      	b.n	800f7e6 <acc_translation_a121_set_range_params+0x18a>
 800f9bc:	9b07      	ldr	r3, [sp, #28]
 800f9be:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
 800f9c2:	9b03      	ldr	r3, [sp, #12]
 800f9c4:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d06a      	beq.n	800faa2 <acc_translation_a121_set_range_params+0x446>
 800f9cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f9ce:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 800f9d8:	f1b9 0f00 	cmp.w	r9, #0
 800f9dc:	d05e      	beq.n	800fa9c <acc_translation_a121_set_range_params+0x440>
 800f9de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9e0:	9a00      	ldr	r2, [sp, #0]
 800f9e2:	eba3 0902 	sub.w	r9, r3, r2
 800f9e6:	fb99 f8f8 	sdiv	r8, r9, r8
 800f9ea:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
 800f9ee:	e769      	b.n	800f8c4 <acc_translation_a121_set_range_params+0x268>
 800f9f0:	9b01      	ldr	r3, [sp, #4]
 800f9f2:	2b1e      	cmp	r3, #30
 800f9f4:	d93e      	bls.n	800fa74 <acc_translation_a121_set_range_params+0x418>
 800f9f6:	f1a3 021e 	sub.w	r2, r3, #30
 800f9fa:	230f      	movs	r3, #15
 800f9fc:	f8a4 2054 	strh.w	r2, [r4, #84]	@ 0x54
 800fa00:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
 800fa04:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800fa08:	e735      	b.n	800f876 <acc_translation_a121_set_range_params+0x21a>
 800fa0a:	4a36      	ldr	r2, [pc, #216]	@ (800fae4 <acc_translation_a121_set_range_params+0x488>)
 800fa0c:	ea6f 0309 	mvn.w	r3, r9
 800fa10:	fba2 2303 	umull	r2, r3, r2, r3
 800fa14:	ea6f 1313 	mvn.w	r3, r3, lsr #4
 800fa18:	f1ba 0f00 	cmp.w	sl, #0
 800fa1c:	b21b      	sxth	r3, r3
 800fa1e:	ea4f 72e9 	mov.w	r2, r9, asr #31
 800fa22:	f6bf ae82 	bge.w	800f72a <acc_translation_a121_set_range_params+0xce>
 800fa26:	482f      	ldr	r0, [pc, #188]	@ (800fae4 <acc_translation_a121_set_range_params+0x488>)
 800fa28:	ea6f 010a 	mvn.w	r1, sl
 800fa2c:	fba0 0101 	umull	r0, r1, r0, r1
 800fa30:	ea6f 1111 	mvn.w	r1, r1, lsr #4
 800fa34:	b209      	sxth	r1, r1
 800fa36:	ea4f 7cea 	mov.w	ip, sl, asr #31
 800fa3a:	e67e      	b.n	800f73a <acc_translation_a121_set_range_params+0xde>
 800fa3c:	f109 0518 	add.w	r5, r9, #24
 800fa40:	fa1f f985 	uxth.w	r9, r5
 800fa44:	b22d      	sxth	r5, r5
 800fa46:	950a      	str	r5, [sp, #40]	@ 0x28
 800fa48:	e6aa      	b.n	800f7a0 <acc_translation_a121_set_range_params+0x144>
 800fa4a:	f102 0018 	add.w	r0, r2, #24
 800fa4e:	b282      	uxth	r2, r0
 800fa50:	b200      	sxth	r0, r0
 800fa52:	e68e      	b.n	800f772 <acc_translation_a121_set_range_params+0x116>
 800fa54:	4924      	ldr	r1, [pc, #144]	@ (800fae8 <acc_translation_a121_set_range_params+0x48c>)
 800fa56:	4a25      	ldr	r2, [pc, #148]	@ (800faec <acc_translation_a121_set_range_params+0x490>)
 800fa58:	690e      	ldr	r6, [r1, #16]
 800fa5a:	4925      	ldr	r1, [pc, #148]	@ (800faf0 <acc_translation_a121_set_range_params+0x494>)
 800fa5c:	9302      	str	r3, [sp, #8]
 800fa5e:	2000      	movs	r0, #0
 800fa60:	47b0      	blx	r6
 800fa62:	f04f 0b36 	mov.w	fp, #54	@ 0x36
 800fa66:	9b02      	ldr	r3, [sp, #8]
 800fa68:	f04f 0a6c 	mov.w	sl, #108	@ 0x6c
 800fa6c:	213d      	movs	r1, #61	@ 0x3d
 800fa6e:	207d      	movs	r0, #125	@ 0x7d
 800fa70:	2700      	movs	r7, #0
 800fa72:	e6d5      	b.n	800f820 <acc_translation_a121_set_range_params+0x1c4>
 800fa74:	9b01      	ldr	r3, [sp, #4]
 800fa76:	2b0f      	cmp	r3, #15
 800fa78:	d918      	bls.n	800faac <acc_translation_a121_set_range_params+0x450>
 800fa7a:	3b0f      	subs	r3, #15
 800fa7c:	220f      	movs	r2, #15
 800fa7e:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800fa82:	2300      	movs	r3, #0
 800fa84:	f8a4 2050 	strh.w	r2, [r4, #80]	@ 0x50
 800fa88:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 800fa8c:	e6f3      	b.n	800f876 <acc_translation_a121_set_range_params+0x21a>
 800fa8e:	f8a4 9046 	strh.w	r9, [r4, #70]	@ 0x46
 800fa92:	e715      	b.n	800f8c0 <acc_translation_a121_set_range_params+0x264>
 800fa94:	9b03      	ldr	r3, [sp, #12]
 800fa96:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 800fa9a:	e702      	b.n	800f8a2 <acc_translation_a121_set_range_params+0x246>
 800fa9c:	f8a4 9046 	strh.w	r9, [r4, #70]	@ 0x46
 800faa0:	e710      	b.n	800f8c4 <acc_translation_a121_set_range_params+0x268>
 800faa2:	f8a4 5042 	strh.w	r5, [r4, #66]	@ 0x42
 800faa6:	e794      	b.n	800f9d2 <acc_translation_a121_set_range_params+0x376>
 800faa8:	2202      	movs	r2, #2
 800faaa:	e608      	b.n	800f6be <acc_translation_a121_set_range_params+0x62>
 800faac:	2300      	movs	r3, #0
 800faae:	9a01      	ldr	r2, [sp, #4]
 800fab0:	f8a4 2050 	strh.w	r2, [r4, #80]	@ 0x50
 800fab4:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800fab8:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 800fabc:	e6db      	b.n	800f876 <acc_translation_a121_set_range_params+0x21a>
 800fabe:	4589      	cmp	r9, r1
 800fac0:	bf0c      	ite	eq
 800fac2:	2501      	moveq	r5, #1
 800fac4:	2500      	movne	r5, #0
 800fac6:	d108      	bne.n	800fada <acc_translation_a121_set_range_params+0x47e>
 800fac8:	2100      	movs	r1, #0
 800faca:	e9cd 1107 	strd	r1, r1, [sp, #28]
 800face:	4689      	mov	r9, r1
 800fad0:	9103      	str	r1, [sp, #12]
 800fad2:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fad4:	e687      	b.n	800f7e6 <acc_translation_a121_set_range_params+0x18a>
 800fad6:	2701      	movs	r7, #1
 800fad8:	e5f0      	b.n	800f6bc <acc_translation_a121_set_range_params+0x60>
 800fada:	2600      	movs	r6, #0
 800fadc:	4649      	mov	r1, r9
 800fade:	9607      	str	r6, [sp, #28]
 800fae0:	46b1      	mov	r9, r6
 800fae2:	e762      	b.n	800f9aa <acc_translation_a121_set_range_params+0x34e>
 800fae4:	aaaaaaab 	.word	0xaaaaaaab
 800fae8:	20000bd8 	.word	0x20000bd8
 800faec:	08016b40 	.word	0x08016b40
 800faf0:	08016aa4 	.word	0x08016aa4

0800faf4 <acc_translation_a121_subsweep_translate>:
 800faf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faf8:	f890 c04c 	ldrb.w	ip, [r0, #76]	@ 0x4c
 800fafc:	4607      	mov	r7, r0
 800fafe:	8908      	ldrh	r0, [r1, #8]
 800fb00:	460e      	mov	r6, r1
 800fb02:	f240 35ff 	movw	r5, #1023	@ 0x3ff
 800fb06:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800fb0a:	b08c      	sub	sp, #48	@ 0x30
 800fb0c:	f1bc 0f00 	cmp.w	ip, #0
 800fb10:	bf08      	it	eq
 800fb12:	4629      	moveq	r1, r5
 800fb14:	b108      	cbz	r0, 800fb1a <acc_translation_a121_subsweep_translate+0x26>
 800fb16:	4281      	cmp	r1, r0
 800fb18:	d20a      	bcs.n	800fb30 <acc_translation_a121_subsweep_translate+0x3c>
 800fb1a:	4b55      	ldr	r3, [pc, #340]	@ (800fc70 <acc_translation_a121_subsweep_translate+0x17c>)
 800fb1c:	4a55      	ldr	r2, [pc, #340]	@ (800fc74 <acc_translation_a121_subsweep_translate+0x180>)
 800fb1e:	691b      	ldr	r3, [r3, #16]
 800fb20:	4955      	ldr	r1, [pc, #340]	@ (800fc78 <acc_translation_a121_subsweep_translate+0x184>)
 800fb22:	2000      	movs	r0, #0
 800fb24:	4798      	blx	r3
 800fb26:	2500      	movs	r5, #0
 800fb28:	4628      	mov	r0, r5
 800fb2a:	b00c      	add	sp, #48	@ 0x30
 800fb2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb30:	461c      	mov	r4, r3
 800fb32:	7b73      	ldrb	r3, [r6, #13]
 800fb34:	4690      	mov	r8, r2
 800fb36:	b97b      	cbnz	r3, 800fb58 <acc_translation_a121_subsweep_translate+0x64>
 800fb38:	7bf0      	ldrb	r0, [r6, #15]
 800fb3a:	7bb5      	ldrb	r5, [r6, #14]
 800fb3c:	2d00      	cmp	r5, #0
 800fb3e:	d12d      	bne.n	800fb9c <acc_translation_a121_subsweep_translate+0xa8>
 800fb40:	2801      	cmp	r0, #1
 800fb42:	d00f      	beq.n	800fb64 <acc_translation_a121_subsweep_translate+0x70>
 800fb44:	4b4a      	ldr	r3, [pc, #296]	@ (800fc70 <acc_translation_a121_subsweep_translate+0x17c>)
 800fb46:	4a4d      	ldr	r2, [pc, #308]	@ (800fc7c <acc_translation_a121_subsweep_translate+0x188>)
 800fb48:	691b      	ldr	r3, [r3, #16]
 800fb4a:	494b      	ldr	r1, [pc, #300]	@ (800fc78 <acc_translation_a121_subsweep_translate+0x184>)
 800fb4c:	4628      	mov	r0, r5
 800fb4e:	4798      	blx	r3
 800fb50:	4628      	mov	r0, r5
 800fb52:	b00c      	add	sp, #48	@ 0x30
 800fb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb58:	7bf0      	ldrb	r0, [r6, #15]
 800fb5a:	2802      	cmp	r0, #2
 800fb5c:	d1ed      	bne.n	800fb3a <acc_translation_a121_subsweep_translate+0x46>
 800fb5e:	4b44      	ldr	r3, [pc, #272]	@ (800fc70 <acc_translation_a121_subsweep_translate+0x17c>)
 800fb60:	4a47      	ldr	r2, [pc, #284]	@ (800fc80 <acc_translation_a121_subsweep_translate+0x18c>)
 800fb62:	e7dc      	b.n	800fb1e <acc_translation_a121_subsweep_translate+0x2a>
 800fb64:	4b47      	ldr	r3, [pc, #284]	@ (800fc84 <acc_translation_a121_subsweep_translate+0x190>)
 800fb66:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800fb68:	9200      	str	r2, [sp, #0]
 800fb6a:	4631      	mov	r1, r6
 800fb6c:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 800fb70:	4638      	mov	r0, r7
 800fb72:	4623      	mov	r3, r4
 800fb74:	f7ff fd72 	bl	800f65c <acc_translation_a121_set_range_params>
 800fb78:	2800      	cmp	r0, #0
 800fb7a:	d0d4      	beq.n	800fb26 <acc_translation_a121_subsweep_translate+0x32>
 800fb7c:	4622      	mov	r2, r4
 800fb7e:	4641      	mov	r1, r8
 800fb80:	4630      	mov	r0, r6
 800fb82:	f7ff fd1f 	bl	800f5c4 <acc_translation_a121_set_gain_params>
 800fb86:	4605      	mov	r5, r0
 800fb88:	b978      	cbnz	r0, 800fbaa <acc_translation_a121_subsweep_translate+0xb6>
 800fb8a:	4b39      	ldr	r3, [pc, #228]	@ (800fc70 <acc_translation_a121_subsweep_translate+0x17c>)
 800fb8c:	4a3e      	ldr	r2, [pc, #248]	@ (800fc88 <acc_translation_a121_subsweep_translate+0x194>)
 800fb8e:	691b      	ldr	r3, [r3, #16]
 800fb90:	4939      	ldr	r1, [pc, #228]	@ (800fc78 <acc_translation_a121_subsweep_translate+0x184>)
 800fb92:	4798      	blx	r3
 800fb94:	4628      	mov	r0, r5
 800fb96:	b00c      	add	sp, #48	@ 0x30
 800fb98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb9c:	1e45      	subs	r5, r0, #1
 800fb9e:	b2ed      	uxtb	r5, r5
 800fba0:	2d04      	cmp	r5, #4
 800fba2:	d9df      	bls.n	800fb64 <acc_translation_a121_subsweep_translate+0x70>
 800fba4:	4b32      	ldr	r3, [pc, #200]	@ (800fc70 <acc_translation_a121_subsweep_translate+0x17c>)
 800fba6:	4a39      	ldr	r2, [pc, #228]	@ (800fc8c <acc_translation_a121_subsweep_translate+0x198>)
 800fba8:	e7b9      	b.n	800fb1e <acc_translation_a121_subsweep_translate+0x2a>
 800fbaa:	7bf0      	ldrb	r0, [r6, #15]
 800fbac:	aa04      	add	r2, sp, #16
 800fbae:	4641      	mov	r1, r8
 800fbb0:	f7ff fc58 	bl	800f464 <acc_translation_a121_profile_to_pulse_params>
 800fbb4:	4605      	mov	r5, r0
 800fbb6:	b970      	cbnz	r0, 800fbd6 <acc_translation_a121_subsweep_translate+0xe2>
 800fbb8:	4b2d      	ldr	r3, [pc, #180]	@ (800fc70 <acc_translation_a121_subsweep_translate+0x17c>)
 800fbba:	4a34      	ldr	r2, [pc, #208]	@ (800fc8c <acc_translation_a121_subsweep_translate+0x198>)
 800fbbc:	691b      	ldr	r3, [r3, #16]
 800fbbe:	492e      	ldr	r1, [pc, #184]	@ (800fc78 <acc_translation_a121_subsweep_translate+0x184>)
 800fbc0:	4798      	blx	r3
 800fbc2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800fbc6:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800fbca:	8562      	strh	r2, [r4, #42]	@ 0x2a
 800fbcc:	4628      	mov	r0, r5
 800fbce:	8523      	strh	r3, [r4, #40]	@ 0x28
 800fbd0:	b00c      	add	sp, #48	@ 0x30
 800fbd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbd6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800fbda:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800fbde:	8562      	strh	r2, [r4, #42]	@ 0x2a
 800fbe0:	8523      	strh	r3, [r4, #40]	@ 0x28
 800fbe2:	f104 0108 	add.w	r1, r4, #8
 800fbe6:	a804      	add	r0, sp, #16
 800fbe8:	f7ff fd0e 	bl	800f608 <acc_translation_a121_set_pulse_length_params>
 800fbec:	2800      	cmp	r0, #0
 800fbee:	d09a      	beq.n	800fb26 <acc_translation_a121_subsweep_translate+0x32>
 800fbf0:	f104 0214 	add.w	r2, r4, #20
 800fbf4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800fbf8:	9203      	str	r2, [sp, #12]
 800fbfa:	4611      	mov	r1, r2
 800fbfc:	a804      	add	r0, sp, #16
 800fbfe:	9308      	str	r3, [sp, #32]
 800fc00:	f000 fdd0 	bl	80107a4 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl>
 800fc04:	9a03      	ldr	r2, [sp, #12]
 800fc06:	4605      	mov	r5, r0
 800fc08:	b940      	cbnz	r0, 800fc1c <acc_translation_a121_subsweep_translate+0x128>
 800fc0a:	4b19      	ldr	r3, [pc, #100]	@ (800fc70 <acc_translation_a121_subsweep_translate+0x17c>)
 800fc0c:	4a20      	ldr	r2, [pc, #128]	@ (800fc90 <acc_translation_a121_subsweep_translate+0x19c>)
 800fc0e:	691b      	ldr	r3, [r3, #16]
 800fc10:	4919      	ldr	r1, [pc, #100]	@ (800fc78 <acc_translation_a121_subsweep_translate+0x184>)
 800fc12:	4798      	blx	r3
 800fc14:	4628      	mov	r0, r5
 800fc16:	b00c      	add	sp, #48	@ 0x30
 800fc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc1c:	f1b8 0f00 	cmp.w	r8, #0
 800fc20:	d00f      	beq.n	800fc42 <acc_translation_a121_subsweep_translate+0x14e>
 800fc22:	f108 015c 	add.w	r1, r8, #92	@ 0x5c
 800fc26:	a804      	add	r0, sp, #16
 800fc28:	f000 fcb6 	bl	8010598 <acc_translation_pulseshaper_calc_settings>
 800fc2c:	b948      	cbnz	r0, 800fc42 <acc_translation_a121_subsweep_translate+0x14e>
 800fc2e:	4910      	ldr	r1, [pc, #64]	@ (800fc70 <acc_translation_a121_subsweep_translate+0x17c>)
 800fc30:	4a18      	ldr	r2, [pc, #96]	@ (800fc94 <acc_translation_a121_subsweep_translate+0x1a0>)
 800fc32:	690c      	ldr	r4, [r1, #16]
 800fc34:	4910      	ldr	r1, [pc, #64]	@ (800fc78 <acc_translation_a121_subsweep_translate+0x184>)
 800fc36:	4605      	mov	r5, r0
 800fc38:	47a0      	blx	r4
 800fc3a:	4628      	mov	r0, r5
 800fc3c:	b00c      	add	sp, #48	@ 0x30
 800fc3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc42:	8933      	ldrh	r3, [r6, #8]
 800fc44:	7af2      	ldrb	r2, [r6, #11]
 800fc46:	8622      	strh	r2, [r4, #48]	@ 0x30
 800fc48:	2b01      	cmp	r3, #1
 800fc4a:	d00c      	beq.n	800fc66 <acc_translation_a121_subsweep_translate+0x172>
 800fc4c:	3b02      	subs	r3, #2
 800fc4e:	2201      	movs	r2, #1
 800fc50:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 800fc52:	85e2      	strh	r2, [r4, #46]	@ 0x2e
 800fc54:	7b73      	ldrb	r3, [r6, #13]
 800fc56:	80e3      	strh	r3, [r4, #6]
 800fc58:	4628      	mov	r0, r5
 800fc5a:	f083 0301 	eor.w	r3, r3, #1
 800fc5e:	8663      	strh	r3, [r4, #50]	@ 0x32
 800fc60:	b00c      	add	sp, #48	@ 0x30
 800fc62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc66:	2300      	movs	r3, #0
 800fc68:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 800fc6a:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 800fc6c:	e7f2      	b.n	800fc54 <acc_translation_a121_subsweep_translate+0x160>
 800fc6e:	bf00      	nop
 800fc70:	20000bd8 	.word	0x20000bd8
 800fc74:	08016b84 	.word	0x08016b84
 800fc78:	08016aa4 	.word	0x08016aa4
 800fc7c:	08016bc0 	.word	0x08016bc0
 800fc80:	08016b94 	.word	0x08016b94
 800fc84:	08016db4 	.word	0x08016db4
 800fc88:	08016bf8 	.word	0x08016bf8
 800fc8c:	08016be8 	.word	0x08016be8
 800fc90:	08016c10 	.word	0x08016c10
 800fc94:	08016c30 	.word	0x08016c30

0800fc98 <acc_translation_a121_point_to_coarse>:
 800fc98:	2800      	cmp	r0, #0
 800fc9a:	db04      	blt.n	800fca6 <acc_translation_a121_point_to_coarse+0xe>
 800fc9c:	b209      	sxth	r1, r1
 800fc9e:	fb90 f0f1 	sdiv	r0, r0, r1
 800fca2:	b200      	sxth	r0, r0
 800fca4:	4770      	bx	lr
 800fca6:	43c3      	mvns	r3, r0
 800fca8:	b208      	sxth	r0, r1
 800fcaa:	fb93 f0f0 	sdiv	r0, r3, r0
 800fcae:	43c0      	mvns	r0, r0
 800fcb0:	b200      	sxth	r0, r0
 800fcb2:	4770      	bx	lr

0800fcb4 <acc_translation_a121_point_in_coarse>:
 800fcb4:	fb90 f3f1 	sdiv	r3, r0, r1
 800fcb8:	fb03 0011 	mls	r0, r3, r1, r0
 800fcbc:	0403      	lsls	r3, r0, #16
 800fcbe:	bf48      	it	mi
 800fcc0:	1840      	addmi	r0, r0, r1
 800fcc2:	b280      	uxth	r0, r0
 800fcc4:	4770      	bx	lr
 800fcc6:	bf00      	nop

0800fcc8 <acc_translation_a121_calculate_minimum_sweep_period>:
 800fcc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fccc:	f8b1 31ac 	ldrh.w	r3, [r1, #428]	@ 0x1ac
 800fcd0:	f8b1 11a4 	ldrh.w	r1, [r1, #420]	@ 0x1a4
 800fcd4:	ed2d 8b0a 	vpush	{d8-d12}
 800fcd8:	2b01      	cmp	r3, #1
 800fcda:	b088      	sub	sp, #32
 800fcdc:	4680      	mov	r8, r0
 800fcde:	4617      	mov	r7, r2
 800fce0:	f000 80b9 	beq.w	800fe56 <acc_translation_a121_calculate_minimum_sweep_period+0x18e>
 800fce4:	ee07 1a90 	vmov	s15, r1
 800fce8:	eddf 9a5f 	vldr	s19, [pc, #380]	@ 800fe68 <acc_translation_a121_calculate_minimum_sweep_period+0x1a0>
 800fcec:	eef8 aa67 	vcvt.f32.u32	s21, s15
 800fcf0:	eeb7 9a08 	vmov.f32	s18, #120	@ 0x3fc00000  1.5
 800fcf4:	eef2 ca02 	vmov.f32	s25, #34	@ 0x41100000  9.0
 800fcf8:	f7ff fba2 	bl	800f440 <get_pll_freq>
 800fcfc:	f898 3050 	ldrb.w	r3, [r8, #80]	@ 0x50
 800fd00:	2b02      	cmp	r3, #2
 800fd02:	eef0 8a40 	vmov.f32	s17, s0
 800fd06:	f200 8099 	bhi.w	800fe3c <acc_translation_a121_calculate_minimum_sweep_period+0x174>
 800fd0a:	4958      	ldr	r1, [pc, #352]	@ (800fe6c <acc_translation_a121_calculate_minimum_sweep_period+0x1a4>)
 800fd0c:	4a58      	ldr	r2, [pc, #352]	@ (800fe70 <acc_translation_a121_calculate_minimum_sweep_period+0x1a8>)
 800fd0e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800fd12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fd16:	edd1 ba00 	vldr	s23, [r1]
 800fd1a:	ed93 ca00 	vldr	s24, [r3]
 800fd1e:	f04f 0901 	mov.w	r9, #1
 800fd22:	f898 304e 	ldrb.w	r3, [r8, #78]	@ 0x4e
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d068      	beq.n	800fdfc <acc_translation_a121_calculate_minimum_sweep_period+0x134>
 800fd2a:	2500      	movs	r5, #0
 800fd2c:	ed9f 8a51 	vldr	s16, [pc, #324]	@ 800fe74 <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>
 800fd30:	4e51      	ldr	r6, [pc, #324]	@ (800fe78 <acc_translation_a121_calculate_minimum_sweep_period+0x1b0>)
 800fd32:	ed9f ba52 	vldr	s22, [pc, #328]	@ 800fe7c <acc_translation_a121_calculate_minimum_sweep_period+0x1b4>
 800fd36:	ed9f aa52 	vldr	s20, [pc, #328]	@ 800fe80 <acc_translation_a121_calculate_minimum_sweep_period+0x1b8>
 800fd3a:	462c      	mov	r4, r5
 800fd3c:	e03d      	b.n	800fdba <acc_translation_a121_calculate_minimum_sweep_period+0xf2>
 800fd3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd42:	ee07 3a90 	vmov	s15, r3
 800fd46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd4a:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 800fd4e:	4444      	add	r4, r8
 800fd50:	f10a 0302 	add.w	r3, sl, #2
 800fd54:	8920      	ldrh	r0, [r4, #8]
 800fd56:	88a1      	ldrh	r1, [r4, #4]
 800fd58:	f898 204e 	ldrb.w	r2, [r8, #78]	@ 0x4e
 800fd5c:	005b      	lsls	r3, r3, #1
 800fd5e:	b29b      	uxth	r3, r3
 800fd60:	fb00 3303 	mla	r3, r0, r3, r3
 800fd64:	3302      	adds	r3, #2
 800fd66:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 800fd6a:	005b      	lsls	r3, r3, #1
 800fd6c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800fd70:	b29b      	uxth	r3, r3
 800fd72:	ee87 6a0a 	vdiv.f32	s12, s14, s20
 800fd76:	f10a 0a18 	add.w	sl, sl, #24
 800fd7a:	fa1f fa8a 	uxth.w	sl, sl
 800fd7e:	3501      	adds	r5, #1
 800fd80:	b2ec      	uxtb	r4, r5
 800fd82:	42a2      	cmp	r2, r4
 800fd84:	ee07 3a90 	vmov	s15, r3
 800fd88:	ee07 aa10 	vmov	s14, sl
 800fd8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd90:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800fd94:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800fd98:	eec7 5a06 	vdiv.f32	s11, s14, s12
 800fd9c:	ee07 1a90 	vmov	s15, r1
 800fda0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fda4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fda8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800fdac:	ee77 7aa9 	vadd.f32	s15, s15, s19
 800fdb0:	ee77 7a89 	vadd.f32	s15, s15, s18
 800fdb4:	ee38 8a27 	vadd.f32	s16, s16, s15
 800fdb8:	d922      	bls.n	800fe00 <acc_translation_a121_calculate_minimum_sweep_period+0x138>
 800fdba:	eb08 1304 	add.w	r3, r8, r4, lsl #4
 800fdbe:	466a      	mov	r2, sp
 800fdc0:	2100      	movs	r1, #0
 800fdc2:	7bd8      	ldrb	r0, [r3, #15]
 800fdc4:	f7ff fb4e 	bl	800f464 <acc_translation_a121_profile_to_pulse_params>
 800fdc8:	0124      	lsls	r4, r4, #4
 800fdca:	4a2e      	ldr	r2, [pc, #184]	@ (800fe84 <acc_translation_a121_calculate_minimum_sweep_period+0x1bc>)
 800fdcc:	492e      	ldr	r1, [pc, #184]	@ (800fe88 <acc_translation_a121_calculate_minimum_sweep_period+0x1c0>)
 800fdce:	4682      	mov	sl, r0
 800fdd0:	b910      	cbnz	r0, 800fdd8 <acc_translation_a121_calculate_minimum_sweep_period+0x110>
 800fdd2:	6933      	ldr	r3, [r6, #16]
 800fdd4:	4798      	blx	r3
 800fdd6:	46d1      	mov	r9, sl
 800fdd8:	eb08 0304 	add.w	r3, r8, r4
 800fddc:	4a2b      	ldr	r2, [pc, #172]	@ (800fe8c <acc_translation_a121_calculate_minimum_sweep_period+0x1c4>)
 800fdde:	7b9b      	ldrb	r3, [r3, #14]
 800fde0:	f8bd a01e 	ldrh.w	sl, [sp, #30]
 800fde4:	2b05      	cmp	r3, #5
 800fde6:	d9aa      	bls.n	800fd3e <acc_translation_a121_calculate_minimum_sweep_period+0x76>
 800fde8:	6933      	ldr	r3, [r6, #16]
 800fdea:	4a29      	ldr	r2, [pc, #164]	@ (800fe90 <acc_translation_a121_calculate_minimum_sweep_period+0x1c8>)
 800fdec:	4926      	ldr	r1, [pc, #152]	@ (800fe88 <acc_translation_a121_calculate_minimum_sweep_period+0x1c0>)
 800fdee:	2000      	movs	r0, #0
 800fdf0:	4798      	blx	r3
 800fdf2:	f04f 0900 	mov.w	r9, #0
 800fdf6:	eef0 7a4b 	vmov.f32	s15, s22
 800fdfa:	e7a6      	b.n	800fd4a <acc_translation_a121_calculate_minimum_sweep_period+0x82>
 800fdfc:	ed9f 8a1d 	vldr	s16, [pc, #116]	@ 800fe74 <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>
 800fe00:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800fe94 <acc_translation_a121_calculate_minimum_sweep_period+0x1cc>
 800fe04:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800fe80 <acc_translation_a121_calculate_minimum_sweep_period+0x1b8>
 800fe08:	ee88 6aa7 	vdiv.f32	s12, s17, s15
 800fe0c:	4648      	mov	r0, r9
 800fe0e:	eef1 7a0c 	vmov.f32	s15, #28	@ 0x40e00000  7.0
 800fe12:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800fe16:	ee6a aaa7 	vmul.f32	s21, s21, s15
 800fe1a:	ee7b ba8c 	vadd.f32	s23, s23, s24
 800fe1e:	eeca 7a87 	vdiv.f32	s15, s21, s14
 800fe22:	ee77 caac 	vadd.f32	s25, s15, s25
 800fe26:	ee3c 8a88 	vadd.f32	s16, s25, s16
 800fe2a:	ee78 ba2b 	vadd.f32	s23, s16, s23
 800fe2e:	edc7 ba00 	vstr	s23, [r7]
 800fe32:	b008      	add	sp, #32
 800fe34:	ecbd 8b0a 	vpop	{d8-d12}
 800fe38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe3c:	4b0e      	ldr	r3, [pc, #56]	@ (800fe78 <acc_translation_a121_calculate_minimum_sweep_period+0x1b0>)
 800fe3e:	ed9f ca0d 	vldr	s24, [pc, #52]	@ 800fe74 <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>
 800fe42:	4a15      	ldr	r2, [pc, #84]	@ (800fe98 <acc_translation_a121_calculate_minimum_sweep_period+0x1d0>)
 800fe44:	691b      	ldr	r3, [r3, #16]
 800fe46:	4910      	ldr	r1, [pc, #64]	@ (800fe88 <acc_translation_a121_calculate_minimum_sweep_period+0x1c0>)
 800fe48:	2000      	movs	r0, #0
 800fe4a:	4798      	blx	r3
 800fe4c:	eef0 ba4c 	vmov.f32	s23, s24
 800fe50:	f04f 0900 	mov.w	r9, #0
 800fe54:	e765      	b.n	800fd22 <acc_translation_a121_calculate_minimum_sweep_period+0x5a>
 800fe56:	ed9f 9a07 	vldr	s18, [pc, #28]	@ 800fe74 <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>
 800fe5a:	eef0 9a49 	vmov.f32	s19, s18
 800fe5e:	eef0 ca49 	vmov.f32	s25, s18
 800fe62:	eef0 aa49 	vmov.f32	s21, s18
 800fe66:	e747      	b.n	800fcf8 <acc_translation_a121_calculate_minimum_sweep_period+0x30>
 800fe68:	419d999a 	.word	0x419d999a
 800fe6c:	08016dc8 	.word	0x08016dc8
 800fe70:	08016dd4 	.word	0x08016dd4
 800fe74:	00000000 	.word	0x00000000
 800fe78:	20000bd8 	.word	0x20000bd8
 800fe7c:	43000000 	.word	0x43000000
 800fe80:	49742400 	.word	0x49742400
 800fe84:	08016be8 	.word	0x08016be8
 800fe88:	08016aa4 	.word	0x08016aa4
 800fe8c:	08016da8 	.word	0x08016da8
 800fe90:	08016b40 	.word	0x08016b40
 800fe94:	43200000 	.word	0x43200000
 800fe98:	08016c5c 	.word	0x08016c5c

0800fe9c <acc_translation_a121_translate>:
 800fe9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fea0:	ed2d 8b06 	vpush	{d8-d10}
 800fea4:	4605      	mov	r5, r0
 800fea6:	b091      	sub	sp, #68	@ 0x44
 800fea8:	f890 004e 	ldrb.w	r0, [r0, #78]	@ 0x4e
 800feac:	f895 404c 	ldrb.w	r4, [r5, #76]	@ 0x4c
 800feb0:	9408      	str	r4, [sp, #32]
 800feb2:	2804      	cmp	r0, #4
 800feb4:	f8b5 4048 	ldrh.w	r4, [r5, #72]	@ 0x48
 800feb8:	9406      	str	r4, [sp, #24]
 800feba:	468b      	mov	fp, r1
 800febc:	4614      	mov	r4, r2
 800febe:	4698      	mov	r8, r3
 800fec0:	f200 8128 	bhi.w	8010114 <acc_translation_a121_translate+0x278>
 800fec4:	edd5 7a10 	vldr	s15, [r5, #64]	@ 0x40
 800fec8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fed0:	f100 8169 	bmi.w	80101a6 <acc_translation_a121_translate+0x30a>
 800fed4:	f895 3056 	ldrb.w	r3, [r5, #86]	@ 0x56
 800fed8:	2b00      	cmp	r3, #0
 800feda:	f040 81a5 	bne.w	8010228 <acc_translation_a121_translate+0x38c>
 800fede:	f7fe f92b 	bl	800e138 <acc_rss_integration_get_sensor_reference_frequency>
 800fee2:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 800fee6:	ee07 0a10 	vmov	s14, r0
 800feea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800feee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fef2:	eeb8 8a47 	vcvt.f32.u32	s16, s14
 800fef6:	f340 81d4 	ble.w	80102a2 <acc_translation_a121_translate+0x406>
 800fefa:	eec8 8a27 	vdiv.f32	s17, s16, s15
 800fefe:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ff02:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800ff06:	f100 81e3 	bmi.w	80102d0 <acc_translation_a121_translate+0x434>
 800ff0a:	ee18 0a90 	vmov	r0, s17
 800ff0e:	f7f0 fe3b 	bl	8000b88 <__aeabi_f2ulz>
 800ff12:	2901      	cmp	r1, #1
 800ff14:	bf08      	it	eq
 800ff16:	2800      	cmpeq	r0, #0
 800ff18:	f080 81da 	bcs.w	80102d0 <acc_translation_a121_translate+0x434>
 800ff1c:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	f000 81a9 	beq.w	8010278 <acc_translation_a121_translate+0x3dc>
 800ff26:	4bc9      	ldr	r3, [pc, #804]	@ (801024c <acc_translation_a121_translate+0x3b0>)
 800ff28:	4ac9      	ldr	r2, [pc, #804]	@ (8010250 <acc_translation_a121_translate+0x3b4>)
 800ff2a:	691b      	ldr	r3, [r3, #16]
 800ff2c:	49c9      	ldr	r1, [pc, #804]	@ (8010254 <acc_translation_a121_translate+0x3b8>)
 800ff2e:	2000      	movs	r0, #0
 800ff30:	4798      	blx	r3
 800ff32:	9b06      	ldr	r3, [sp, #24]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	f000 810a 	beq.w	801014e <acc_translation_a121_translate+0x2b2>
 800ff3a:	f895 304e 	ldrb.w	r3, [r5, #78]	@ 0x4e
 800ff3e:	9304      	str	r3, [sp, #16]
 800ff40:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	f000 8108 	beq.w	801015a <acc_translation_a121_translate+0x2be>
 800ff4a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	7113      	strb	r3, [r2, #4]
 800ff50:	f8a4 31ac 	strh.w	r3, [r4, #428]	@ 0x1ac
 800ff54:	f1bb 0f00 	cmp.w	fp, #0
 800ff58:	f000 82da 	beq.w	8010510 <acc_translation_a121_translate+0x674>
 800ff5c:	4658      	mov	r0, fp
 800ff5e:	4621      	mov	r1, r4
 800ff60:	f7ff faf6 	bl	800f550 <acc_translation_a121_set_calibration_params>
 800ff64:	2200      	movs	r2, #0
 800ff66:	2301      	movs	r3, #1
 800ff68:	4617      	mov	r7, r2
 800ff6a:	f8a8 2002 	strh.w	r2, [r8, #2]
 800ff6e:	9202      	str	r2, [sp, #8]
 800ff70:	4610      	mov	r0, r2
 800ff72:	f8a8 300a 	strh.w	r3, [r8, #10]
 800ff76:	f04f 0c02 	mov.w	ip, #2
 800ff7a:	f8b4 11ac 	ldrh.w	r1, [r4, #428]	@ 0x1ac
 800ff7e:	2901      	cmp	r1, #1
 800ff80:	d104      	bne.n	800ff8c <acc_translation_a121_translate+0xf0>
 800ff82:	9902      	ldr	r1, [sp, #8]
 800ff84:	9e06      	ldr	r6, [sp, #24]
 800ff86:	fb06 f101 	mul.w	r1, r6, r1
 800ff8a:	9102      	str	r1, [sp, #8]
 800ff8c:	f8b5 1054 	ldrh.w	r1, [r5, #84]	@ 0x54
 800ff90:	f895 e052 	ldrb.w	lr, [r5, #82]	@ 0x52
 800ff94:	f895 9053 	ldrb.w	r9, [r5, #83]	@ 0x53
 800ff98:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 800ff9c:	f8a4 e19e 	strh.w	lr, [r4, #414]	@ 0x19e
 800ffa0:	ea4f 0a51 	mov.w	sl, r1, lsr #1
 800ffa4:	3903      	subs	r1, #3
 800ffa6:	9103      	str	r1, [sp, #12]
 800ffa8:	9902      	ldr	r1, [sp, #8]
 800ffaa:	f8a4 71a0 	strh.w	r7, [r4, #416]	@ 0x1a0
 800ffae:	f64f 7eff 	movw	lr, #65535	@ 0xffff
 800ffb2:	4571      	cmp	r1, lr
 800ffb4:	bf28      	it	cs
 800ffb6:	4671      	movcs	r1, lr
 800ffb8:	468e      	mov	lr, r1
 800ffba:	f1aa 0a03 	sub.w	sl, sl, #3
 800ffbe:	9903      	ldr	r1, [sp, #12]
 800ffc0:	f8a4 a1aa 	strh.w	sl, [r4, #426]	@ 0x1aa
 800ffc4:	f089 0901 	eor.w	r9, r9, #1
 800ffc8:	f8a4 91a6 	strh.w	r9, [r4, #422]	@ 0x1a6
 800ffcc:	f8a4 11a8 	strh.w	r1, [r4, #424]	@ 0x1a8
 800ffd0:	f8a4 e1a4 	strh.w	lr, [r4, #420]	@ 0x1a4
 800ffd4:	f8a8 200c 	strh.w	r2, [r8, #12]
 800ffd8:	f8a8 3004 	strh.w	r3, [r8, #4]
 800ffdc:	f8a8 c006 	strh.w	ip, [r8, #6]
 800ffe0:	2e00      	cmp	r6, #0
 800ffe2:	f000 811c 	beq.w	801021e <acc_translation_a121_translate+0x382>
 800ffe6:	3341      	adds	r3, #65	@ 0x41
 800ffe8:	2240      	movs	r2, #64	@ 0x40
 800ffea:	f8a8 3000 	strh.w	r3, [r8]
 800ffee:	f8a8 2008 	strh.w	r2, [r8, #8]
 800fff2:	2601      	movs	r6, #1
 800fff4:	f8a4 61c0 	strh.w	r6, [r4, #448]	@ 0x1c0
 800fff8:	f1bb 0f00 	cmp.w	fp, #0
 800fffc:	d003      	beq.n	8010006 <acc_translation_a121_translate+0x16a>
 800fffe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8010002:	f8a4 31c2 	strh.w	r3, [r4, #450]	@ 0x1c2
 8010006:	2800      	cmp	r0, #0
 8010008:	f040 80e5 	bne.w	80101d6 <acc_translation_a121_translate+0x33a>
 801000c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801000e:	edd5 5a10 	vldr	s11, [r5, #64]	@ 0x40
 8010012:	2300      	movs	r3, #0
 8010014:	6013      	str	r3, [r2, #0]
 8010016:	9b08      	ldr	r3, [sp, #32]
 8010018:	f8a4 31b2 	strh.w	r3, [r4, #434]	@ 0x1b2
 801001c:	9b06      	ldr	r3, [sp, #24]
 801001e:	2b01      	cmp	r3, #1
 8010020:	f240 80f7 	bls.w	8010212 <acc_translation_a121_translate+0x376>
 8010024:	f8b5 3048 	ldrh.w	r3, [r5, #72]	@ 0x48
 8010028:	2201      	movs	r2, #1
 801002a:	3b02      	subs	r3, #2
 801002c:	f8a4 31ae 	strh.w	r3, [r4, #430]	@ 0x1ae
 8010030:	f8a4 21b0 	strh.w	r2, [r4, #432]	@ 0x1b0
 8010034:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8010258 <acc_translation_a121_translate+0x3bc>
 8010038:	ed9f 6a88 	vldr	s12, [pc, #544]	@ 801025c <acc_translation_a121_translate+0x3c0>
 801003c:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 8010040:	ee28 7a07 	vmul.f32	s14, s16, s14
 8010044:	ee68 7a27 	vmul.f32	s15, s16, s15
 8010048:	eec7 6a06 	vdiv.f32	s13, s14, s12
 801004c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8010050:	eec8 7a06 	vdiv.f32	s15, s16, s12
 8010054:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8010058:	ee37 7a06 	vadd.f32	s14, s14, s12
 801005c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010060:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010064:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8010068:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 801006c:	ee17 2a10 	vmov	r2, s14
 8010070:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010074:	ee16 3a90 	vmov	r3, s13
 8010078:	eef5 5a40 	vcmp.f32	s11, #0.0
 801007c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010080:	f8a4 21b6 	strh.w	r2, [r4, #438]	@ 0x1b6
 8010084:	ee17 2a90 	vmov	r2, s15
 8010088:	f8a4 31b8 	strh.w	r3, [r4, #440]	@ 0x1b8
 801008c:	bf14      	ite	ne
 801008e:	2301      	movne	r3, #1
 8010090:	2300      	moveq	r3, #0
 8010092:	f8a4 21b4 	strh.w	r2, [r4, #436]	@ 0x1b4
 8010096:	8723      	strh	r3, [r4, #56]	@ 0x38
 8010098:	2800      	cmp	r0, #0
 801009a:	f000 808b 	beq.w	80101b4 <acc_translation_a121_translate+0x318>
 801009e:	eef5 5a40 	vcmp.f32	s11, #0.0
 80100a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100a6:	d00a      	beq.n	80100be <acc_translation_a121_translate+0x222>
 80100a8:	eec8 7a25 	vdiv.f32	s15, s16, s11
 80100ac:	ee37 6a86 	vadd.f32	s12, s15, s12
 80100b0:	eefc 7ac6 	vcvt.u32.f32	s15, s12
 80100b4:	ee17 3a90 	vmov	r3, s15
 80100b8:	0c1a      	lsrs	r2, r3, #16
 80100ba:	87a3      	strh	r3, [r4, #60]	@ 0x3c
 80100bc:	8762      	strh	r2, [r4, #58]	@ 0x3a
 80100be:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 80100c2:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 80100c6:	f895 204b 	ldrb.w	r2, [r5, #75]	@ 0x4b
 80100ca:	8623      	strh	r3, [r4, #48]	@ 0x30
 80100cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80100d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100d4:	bf14      	ite	ne
 80100d6:	2301      	movne	r3, #1
 80100d8:	2300      	moveq	r3, #0
 80100da:	8662      	strh	r2, [r4, #50]	@ 0x32
 80100dc:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80100de:	d006      	beq.n	80100ee <acc_translation_a121_translate+0x252>
 80100e0:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 80100e4:	ee17 3a90 	vmov	r3, s15
 80100e8:	0c1a      	lsrs	r2, r3, #16
 80100ea:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 80100ec:	85a2      	strh	r2, [r4, #44]	@ 0x2c
 80100ee:	f895 3051 	ldrb.w	r3, [r5, #81]	@ 0x51
 80100f2:	f8a4 31be 	strh.w	r3, [r4, #446]	@ 0x1be
 80100f6:	2101      	movs	r1, #1
 80100f8:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80100fc:	f640 0301 	movw	r3, #2049	@ 0x801
 8010100:	84a1      	strh	r1, [r4, #36]	@ 0x24
 8010102:	f8a4 21ba 	strh.w	r2, [r4, #442]	@ 0x1ba
 8010106:	f8a4 31bc 	strh.w	r3, [r4, #444]	@ 0x1bc
 801010a:	b011      	add	sp, #68	@ 0x44
 801010c:	ecbd 8b06 	vpop	{d8-d10}
 8010110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010114:	4b4d      	ldr	r3, [pc, #308]	@ (801024c <acc_translation_a121_translate+0x3b0>)
 8010116:	4a52      	ldr	r2, [pc, #328]	@ (8010260 <acc_translation_a121_translate+0x3c4>)
 8010118:	691b      	ldr	r3, [r3, #16]
 801011a:	494e      	ldr	r1, [pc, #312]	@ (8010254 <acc_translation_a121_translate+0x3b8>)
 801011c:	2000      	movs	r0, #0
 801011e:	4798      	blx	r3
 8010120:	f7fe f80a 	bl	800e138 <acc_rss_integration_get_sensor_reference_frequency>
 8010124:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 8010128:	ee07 0a10 	vmov	s14, r0
 801012c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010134:	eeb8 8a47 	vcvt.f32.u32	s16, s14
 8010138:	dd32      	ble.n	80101a0 <acc_translation_a121_translate+0x304>
 801013a:	eec8 8a27 	vdiv.f32	s17, s16, s15
 801013e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010142:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8010146:	9b06      	ldr	r3, [sp, #24]
 8010148:	2b00      	cmp	r3, #0
 801014a:	f47f aef6 	bne.w	800ff3a <acc_translation_a121_translate+0x9e>
 801014e:	9304      	str	r3, [sp, #16]
 8010150:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 8010154:	2b00      	cmp	r3, #0
 8010156:	f47f aef8 	bne.w	800ff4a <acc_translation_a121_translate+0xae>
 801015a:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
 801015e:	2a02      	cmp	r2, #2
 8010160:	f040 80ef 	bne.w	8010342 <acc_translation_a121_translate+0x4a6>
 8010164:	f895 204e 	ldrb.w	r2, [r5, #78]	@ 0x4e
 8010168:	2a01      	cmp	r2, #1
 801016a:	d069      	beq.n	8010240 <acc_translation_a121_translate+0x3a4>
 801016c:	2200      	movs	r2, #0
 801016e:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8010170:	7102      	strb	r2, [r0, #4]
 8010172:	f8a4 21ac 	strh.w	r2, [r4, #428]	@ 0x1ac
 8010176:	2b00      	cmp	r3, #0
 8010178:	f43f aeec 	beq.w	800ff54 <acc_translation_a121_translate+0xb8>
 801017c:	f895 304f 	ldrb.w	r3, [r5, #79]	@ 0x4f
 8010180:	2b01      	cmp	r3, #1
 8010182:	f000 814f 	beq.w	8010424 <acc_translation_a121_translate+0x588>
 8010186:	2b02      	cmp	r3, #2
 8010188:	f000 80f3 	beq.w	8010372 <acc_translation_a121_translate+0x4d6>
 801018c:	2b00      	cmp	r3, #0
 801018e:	f000 80dd 	beq.w	801034c <acc_translation_a121_translate+0x4b0>
 8010192:	4b2e      	ldr	r3, [pc, #184]	@ (801024c <acc_translation_a121_translate+0x3b0>)
 8010194:	4a33      	ldr	r2, [pc, #204]	@ (8010264 <acc_translation_a121_translate+0x3c8>)
 8010196:	691b      	ldr	r3, [r3, #16]
 8010198:	492e      	ldr	r1, [pc, #184]	@ (8010254 <acc_translation_a121_translate+0x3b8>)
 801019a:	2000      	movs	r0, #0
 801019c:	4798      	blx	r3
 801019e:	e6d9      	b.n	800ff54 <acc_translation_a121_translate+0xb8>
 80101a0:	eddf 8a33 	vldr	s17, [pc, #204]	@ 8010270 <acc_translation_a121_translate+0x3d4>
 80101a4:	e7cf      	b.n	8010146 <acc_translation_a121_translate+0x2aa>
 80101a6:	4b29      	ldr	r3, [pc, #164]	@ (801024c <acc_translation_a121_translate+0x3b0>)
 80101a8:	4a2f      	ldr	r2, [pc, #188]	@ (8010268 <acc_translation_a121_translate+0x3cc>)
 80101aa:	691b      	ldr	r3, [r3, #16]
 80101ac:	4929      	ldr	r1, [pc, #164]	@ (8010254 <acc_translation_a121_translate+0x3b8>)
 80101ae:	2000      	movs	r0, #0
 80101b0:	4798      	blx	r3
 80101b2:	e7b5      	b.n	8010120 <acc_translation_a121_translate+0x284>
 80101b4:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 80101b8:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 80101bc:	f895 204b 	ldrb.w	r2, [r5, #75]	@ 0x4b
 80101c0:	8623      	strh	r3, [r4, #48]	@ 0x30
 80101c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80101c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101ca:	bf14      	ite	ne
 80101cc:	2301      	movne	r3, #1
 80101ce:	2300      	moveq	r3, #0
 80101d0:	8662      	strh	r2, [r4, #50]	@ 0x32
 80101d2:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80101d4:	e78b      	b.n	80100ee <acc_translation_a121_translate+0x252>
 80101d6:	f895 304d 	ldrb.w	r3, [r5, #77]	@ 0x4d
 80101da:	2600      	movs	r6, #0
 80101dc:	a80b      	add	r0, sp, #44	@ 0x2c
 80101de:	f504 71d1 	add.w	r1, r4, #418	@ 0x1a2
 80101e2:	e9cd 630e 	strd	r6, r3, [sp, #56]	@ 0x38
 80101e6:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 80101ea:	f88d 602c 	strb.w	r6, [sp, #44]	@ 0x2c
 80101ee:	f000 fad9 	bl	80107a4 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl>
 80101f2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80101f4:	2300      	movs	r3, #0
 80101f6:	6013      	str	r3, [r2, #0]
 80101f8:	b110      	cbz	r0, 8010200 <acc_translation_a121_translate+0x364>
 80101fa:	9b04      	ldr	r3, [sp, #16]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d16e      	bne.n	80102de <acc_translation_a121_translate+0x442>
 8010200:	9b08      	ldr	r3, [sp, #32]
 8010202:	edd5 5a10 	vldr	s11, [r5, #64]	@ 0x40
 8010206:	f8a4 31b2 	strh.w	r3, [r4, #434]	@ 0x1b2
 801020a:	9b06      	ldr	r3, [sp, #24]
 801020c:	2b01      	cmp	r3, #1
 801020e:	f63f af09 	bhi.w	8010024 <acc_translation_a121_translate+0x188>
 8010212:	2300      	movs	r3, #0
 8010214:	f8a4 31ae 	strh.w	r3, [r4, #430]	@ 0x1ae
 8010218:	f8a4 31b0 	strh.w	r3, [r4, #432]	@ 0x1b0
 801021c:	e70a      	b.n	8010034 <acc_translation_a121_translate+0x198>
 801021e:	f8a8 6008 	strh.w	r6, [r8, #8]
 8010222:	f8a8 c000 	strh.w	ip, [r8]
 8010226:	e6e5      	b.n	800fff4 <acc_translation_a121_translate+0x158>
 8010228:	f895 304b 	ldrb.w	r3, [r5, #75]	@ 0x4b
 801022c:	2b00      	cmp	r3, #0
 801022e:	f43f ae56 	beq.w	800fede <acc_translation_a121_translate+0x42>
 8010232:	4b06      	ldr	r3, [pc, #24]	@ (801024c <acc_translation_a121_translate+0x3b0>)
 8010234:	4a0d      	ldr	r2, [pc, #52]	@ (801026c <acc_translation_a121_translate+0x3d0>)
 8010236:	691b      	ldr	r3, [r3, #16]
 8010238:	4906      	ldr	r1, [pc, #24]	@ (8010254 <acc_translation_a121_translate+0x3b8>)
 801023a:	2000      	movs	r0, #0
 801023c:	4798      	blx	r3
 801023e:	e76f      	b.n	8010120 <acc_translation_a121_translate+0x284>
 8010240:	7be9      	ldrb	r1, [r5, #15]
 8010242:	3901      	subs	r1, #1
 8010244:	2901      	cmp	r1, #1
 8010246:	d892      	bhi.n	801016e <acc_translation_a121_translate+0x2d2>
 8010248:	e790      	b.n	801016c <acc_translation_a121_translate+0x2d0>
 801024a:	bf00      	nop
 801024c:	20000bd8 	.word	0x20000bd8
 8010250:	08016cec 	.word	0x08016cec
 8010254:	08016aa4 	.word	0x08016aa4
 8010258:	43960000 	.word	0x43960000
 801025c:	49742400 	.word	0x49742400
 8010260:	08016c7c 	.word	0x08016c7c
 8010264:	08016d68 	.word	0x08016d68
 8010268:	08016c98 	.word	0x08016c98
 801026c:	08016cac 	.word	0x08016cac
 8010270:	00000000 	.word	0x00000000
 8010274:	ed5f 8a02 	vldr	s17, [pc, #-8]	@ 8010270 <acc_translation_a121_translate+0x3d4>
 8010278:	f895 104f 	ldrb.w	r1, [r5, #79]	@ 0x4f
 801027c:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
 8010280:	9806      	ldr	r0, [sp, #24]
 8010282:	2800      	cmp	r0, #0
 8010284:	f000 8161 	beq.w	801054a <acc_translation_a121_translate+0x6ae>
 8010288:	f895 004e 	ldrb.w	r0, [r5, #78]	@ 0x4e
 801028c:	9004      	str	r0, [sp, #16]
 801028e:	4291      	cmp	r1, r2
 8010290:	f240 814b 	bls.w	801052a <acc_translation_a121_translate+0x68e>
 8010294:	4bb4      	ldr	r3, [pc, #720]	@ (8010568 <acc_translation_a121_translate+0x6cc>)
 8010296:	4ab5      	ldr	r2, [pc, #724]	@ (801056c <acc_translation_a121_translate+0x6d0>)
 8010298:	691b      	ldr	r3, [r3, #16]
 801029a:	49b5      	ldr	r1, [pc, #724]	@ (8010570 <acc_translation_a121_translate+0x6d4>)
 801029c:	2000      	movs	r0, #0
 801029e:	4798      	blx	r3
 80102a0:	e756      	b.n	8010150 <acc_translation_a121_translate+0x2b4>
 80102a2:	d413      	bmi.n	80102cc <acc_translation_a121_translate+0x430>
 80102a4:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d0e3      	beq.n	8010274 <acc_translation_a121_translate+0x3d8>
 80102ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80102b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102b4:	d107      	bne.n	80102c6 <acc_translation_a121_translate+0x42a>
 80102b6:	edd5 7a10 	vldr	s15, [r5, #64]	@ 0x40
 80102ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80102be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102c2:	f040 811b 	bne.w	80104fc <acc_translation_a121_translate+0x660>
 80102c6:	eddf 8aab 	vldr	s17, [pc, #684]	@ 8010574 <acc_translation_a121_translate+0x6d8>
 80102ca:	e62c      	b.n	800ff26 <acc_translation_a121_translate+0x8a>
 80102cc:	eddf 8aa9 	vldr	s17, [pc, #676]	@ 8010574 <acc_translation_a121_translate+0x6d8>
 80102d0:	4ba5      	ldr	r3, [pc, #660]	@ (8010568 <acc_translation_a121_translate+0x6cc>)
 80102d2:	4aa9      	ldr	r2, [pc, #676]	@ (8010578 <acc_translation_a121_translate+0x6dc>)
 80102d4:	691b      	ldr	r3, [r3, #16]
 80102d6:	49a6      	ldr	r1, [pc, #664]	@ (8010570 <acc_translation_a121_translate+0x6d4>)
 80102d8:	2000      	movs	r0, #0
 80102da:	4798      	blx	r3
 80102dc:	e733      	b.n	8010146 <acc_translation_a121_translate+0x2aa>
 80102de:	aa0b      	add	r2, sp, #44	@ 0x2c
 80102e0:	4621      	mov	r1, r4
 80102e2:	4628      	mov	r0, r5
 80102e4:	f7ff fcf0 	bl	800fcc8 <acc_translation_a121_calculate_minimum_sweep_period>
 80102e8:	2800      	cmp	r0, #0
 80102ea:	d089      	beq.n	8010200 <acc_translation_a121_translate+0x364>
 80102ec:	ed9d 7a0b 	vldr	s14, [sp, #44]	@ 0x2c
 80102f0:	eddf 7aa2 	vldr	s15, [pc, #648]	@ 801057c <acc_translation_a121_translate+0x6e0>
 80102f4:	eddf 6aa2 	vldr	s13, [pc, #648]	@ 8010580 <acc_translation_a121_translate+0x6e4>
 80102f8:	edd5 5a10 	vldr	s11, [r5, #64]	@ 0x40
 80102fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80102fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010302:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010306:	ee77 7a86 	vadd.f32	s15, s15, s12
 801030a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801030e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010312:	edcd 7a0b 	vstr	s15, [sp, #44]	@ 0x2c
 8010316:	eef4 5ac7 	vcmpe.f32	s11, s14
 801031a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801031e:	ed83 7a00 	vstr	s14, [r3]
 8010322:	f77f ae78 	ble.w	8010016 <acc_translation_a121_translate+0x17a>
 8010326:	4b90      	ldr	r3, [pc, #576]	@ (8010568 <acc_translation_a121_translate+0x6cc>)
 8010328:	4a96      	ldr	r2, [pc, #600]	@ (8010584 <acc_translation_a121_translate+0x6e8>)
 801032a:	691f      	ldr	r7, [r3, #16]
 801032c:	4990      	ldr	r1, [pc, #576]	@ (8010570 <acc_translation_a121_translate+0x6d4>)
 801032e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8010332:	4630      	mov	r0, r6
 8010334:	ee17 3a90 	vmov	r3, s15
 8010338:	47b8      	blx	r7
 801033a:	edd5 5a10 	vldr	s11, [r5, #64]	@ 0x40
 801033e:	4630      	mov	r0, r6
 8010340:	e669      	b.n	8010016 <acc_translation_a121_translate+0x17a>
 8010342:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010344:	7113      	strb	r3, [r2, #4]
 8010346:	f8a4 31ac 	strh.w	r3, [r4, #428]	@ 0x1ac
 801034a:	e603      	b.n	800ff54 <acc_translation_a121_translate+0xb8>
 801034c:	2301      	movs	r3, #1
 801034e:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8010350:	8523      	strh	r3, [r4, #40]	@ 0x28
 8010352:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 8010356:	2b01      	cmp	r3, #1
 8010358:	d012      	beq.n	8010380 <acc_translation_a121_translate+0x4e4>
 801035a:	2b02      	cmp	r3, #2
 801035c:	f000 80b7 	beq.w	80104ce <acc_translation_a121_translate+0x632>
 8010360:	2b00      	cmp	r3, #0
 8010362:	d063      	beq.n	801042c <acc_translation_a121_translate+0x590>
 8010364:	4b80      	ldr	r3, [pc, #512]	@ (8010568 <acc_translation_a121_translate+0x6cc>)
 8010366:	4a88      	ldr	r2, [pc, #544]	@ (8010588 <acc_translation_a121_translate+0x6ec>)
 8010368:	691b      	ldr	r3, [r3, #16]
 801036a:	4981      	ldr	r1, [pc, #516]	@ (8010570 <acc_translation_a121_translate+0x6d4>)
 801036c:	2000      	movs	r0, #0
 801036e:	4798      	blx	r3
 8010370:	e5f0      	b.n	800ff54 <acc_translation_a121_translate+0xb8>
 8010372:	2300      	movs	r3, #0
 8010374:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8010376:	8523      	strh	r3, [r4, #40]	@ 0x28
 8010378:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 801037c:	2b01      	cmp	r3, #1
 801037e:	d1ec      	bne.n	801035a <acc_translation_a121_translate+0x4be>
 8010380:	2200      	movs	r2, #0
 8010382:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8010384:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8010386:	f1bb 0f00 	cmp.w	fp, #0
 801038a:	f040 80e0 	bne.w	801054e <acc_translation_a121_translate+0x6b2>
 801038e:	2301      	movs	r3, #1
 8010390:	f8a8 b002 	strh.w	fp, [r8, #2]
 8010394:	f8a8 b00c 	strh.w	fp, [r8, #12]
 8010398:	f8a8 300a 	strh.w	r3, [r8, #10]
 801039c:	2600      	movs	r6, #0
 801039e:	f104 033e 	add.w	r3, r4, #62	@ 0x3e
 80103a2:	ed9f aa7a 	vldr	s20, [pc, #488]	@ 801058c <acc_translation_a121_translate+0x6f0>
 80103a6:	eddf aa7a 	vldr	s21, [pc, #488]	@ 8010590 <acc_translation_a121_translate+0x6f4>
 80103aa:	eddf 9a72 	vldr	s19, [pc, #456]	@ 8010574 <acc_translation_a121_translate+0x6d8>
 80103ae:	ed9f 9a79 	vldr	s18, [pc, #484]	@ 8010594 <acc_translation_a121_translate+0x6f8>
 80103b2:	9607      	str	r6, [sp, #28]
 80103b4:	9602      	str	r6, [sp, #8]
 80103b6:	f108 090e 	add.w	r9, r8, #14
 80103ba:	462f      	mov	r7, r5
 80103bc:	f104 0a46 	add.w	sl, r4, #70	@ 0x46
 80103c0:	9503      	str	r5, [sp, #12]
 80103c2:	9409      	str	r4, [sp, #36]	@ 0x24
 80103c4:	9305      	str	r3, [sp, #20]
 80103c6:	e9dd 0403 	ldrd	r0, r4, [sp, #12]
 80103ca:	fa5f fc86 	uxtb.w	ip, r6
 80103ce:	4564      	cmp	r4, ip
 80103d0:	4653      	mov	r3, sl
 80103d2:	4639      	mov	r1, r7
 80103d4:	465a      	mov	r2, fp
 80103d6:	f04f 0c00 	mov.w	ip, #0
 80103da:	d82b      	bhi.n	8010434 <acc_translation_a121_translate+0x598>
 80103dc:	9b05      	ldr	r3, [sp, #20]
 80103de:	f8a9 c000 	strh.w	ip, [r9]
 80103e2:	f8a9 c008 	strh.w	ip, [r9, #8]
 80103e6:	f823 c016 	strh.w	ip, [r3, r6, lsl #1]
 80103ea:	3601      	adds	r6, #1
 80103ec:	2e04      	cmp	r6, #4
 80103ee:	f109 0902 	add.w	r9, r9, #2
 80103f2:	f107 0710 	add.w	r7, r7, #16
 80103f6:	f10a 0a56 	add.w	sl, sl, #86	@ 0x56
 80103fa:	d1e4      	bne.n	80103c6 <acc_translation_a121_translate+0x52a>
 80103fc:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 8010400:	9906      	ldr	r1, [sp, #24]
 8010402:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8010406:	9d03      	ldr	r5, [sp, #12]
 8010408:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801040a:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 801040e:	fb12 f201 	smulbb	r2, r2, r1
 8010412:	b292      	uxth	r2, r2
 8010414:	4413      	add	r3, r2
 8010416:	b29b      	uxth	r3, r3
 8010418:	f103 0c01 	add.w	ip, r3, #1
 801041c:	fa1f fc8c 	uxth.w	ip, ip
 8010420:	2001      	movs	r0, #1
 8010422:	e5aa      	b.n	800ff7a <acc_translation_a121_translate+0xde>
 8010424:	2200      	movs	r2, #0
 8010426:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8010428:	8522      	strh	r2, [r4, #40]	@ 0x28
 801042a:	e792      	b.n	8010352 <acc_translation_a121_translate+0x4b6>
 801042c:	2301      	movs	r3, #1
 801042e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8010430:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8010432:	e7a8      	b.n	8010386 <acc_translation_a121_translate+0x4ea>
 8010434:	9d05      	ldr	r5, [sp, #20]
 8010436:	f04f 0401 	mov.w	r4, #1
 801043a:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 801043e:	ac0b      	add	r4, sp, #44	@ 0x2c
 8010440:	9400      	str	r4, [sp, #0]
 8010442:	f7ff fb57 	bl	800faf4 <acc_translation_a121_subsweep_translate>
 8010446:	2800      	cmp	r0, #0
 8010448:	d045      	beq.n	80104d6 <acc_translation_a121_translate+0x63a>
 801044a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801044e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8010452:	f8a9 3000 	strh.w	r3, [r9]
 8010456:	f8a9 2008 	strh.w	r2, [r9, #8]
 801045a:	4413      	add	r3, r2
 801045c:	7bfa      	ldrb	r2, [r7, #15]
 801045e:	f8a8 300c 	strh.w	r3, [r8, #12]
 8010462:	2a01      	cmp	r2, #1
 8010464:	f8ba 3028 	ldrh.w	r3, [sl, #40]	@ 0x28
 8010468:	d02e      	beq.n	80104c8 <acc_translation_a121_translate+0x62c>
 801046a:	2a02      	cmp	r2, #2
 801046c:	bf0c      	ite	eq
 801046e:	eef0 5a49 	vmoveq.f32	s11, s18
 8010472:	eef0 5a69 	vmovne.f32	s11, s19
 8010476:	3301      	adds	r3, #1
 8010478:	b29b      	uxth	r3, r3
 801047a:	ee07 3a10 	vmov	s14, r3
 801047e:	88bb      	ldrh	r3, [r7, #4]
 8010480:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8010484:	ee06 3a10 	vmov	s12, r3
 8010488:	893b      	ldrh	r3, [r7, #8]
 801048a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 801048e:	ee07 3a90 	vmov	s15, r3
 8010492:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010496:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 801049a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801049e:	ee67 7a06 	vmul.f32	s15, s14, s12
 80104a2:	9b02      	ldr	r3, [sp, #8]
 80104a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80104a8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80104ac:	ee67 7a8a 	vmul.f32	s15, s15, s20
 80104b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80104b4:	ee17 2a90 	vmov	r2, s15
 80104b8:	4413      	add	r3, r2
 80104ba:	9302      	str	r3, [sp, #8]
 80104bc:	9b07      	ldr	r3, [sp, #28]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d193      	bne.n	80103ea <acc_translation_a121_translate+0x54e>
 80104c2:	7afb      	ldrb	r3, [r7, #11]
 80104c4:	9307      	str	r3, [sp, #28]
 80104c6:	e790      	b.n	80103ea <acc_translation_a121_translate+0x54e>
 80104c8:	eef0 5a6a 	vmov.f32	s11, s21
 80104cc:	e7d3      	b.n	8010476 <acc_translation_a121_translate+0x5da>
 80104ce:	2300      	movs	r3, #0
 80104d0:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80104d2:	86e3      	strh	r3, [r4, #54]	@ 0x36
 80104d4:	e757      	b.n	8010386 <acc_translation_a121_translate+0x4ea>
 80104d6:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 80104da:	9906      	ldr	r1, [sp, #24]
 80104dc:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 80104e0:	9d03      	ldr	r5, [sp, #12]
 80104e2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80104e4:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 80104e8:	fb12 f201 	smulbb	r2, r2, r1
 80104ec:	b292      	uxth	r2, r2
 80104ee:	4413      	add	r3, r2
 80104f0:	b29b      	uxth	r3, r3
 80104f2:	f103 0c01 	add.w	ip, r3, #1
 80104f6:	fa1f fc8c 	uxth.w	ip, ip
 80104fa:	e53e      	b.n	800ff7a <acc_translation_a121_translate+0xde>
 80104fc:	f895 104f 	ldrb.w	r1, [r5, #79]	@ 0x4f
 8010500:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
 8010504:	eddf 8a1b 	vldr	s17, [pc, #108]	@ 8010574 <acc_translation_a121_translate+0x6d8>
 8010508:	4291      	cmp	r1, r2
 801050a:	f47f ad0c 	bne.w	800ff26 <acc_translation_a121_translate+0x8a>
 801050e:	e6b7      	b.n	8010280 <acc_translation_a121_translate+0x3e4>
 8010510:	2301      	movs	r3, #1
 8010512:	f8a8 b002 	strh.w	fp, [r8, #2]
 8010516:	f8a8 300a 	strh.w	r3, [r8, #10]
 801051a:	465f      	mov	r7, fp
 801051c:	f04f 0c02 	mov.w	ip, #2
 8010520:	465a      	mov	r2, fp
 8010522:	f8cd b008 	str.w	fp, [sp, #8]
 8010526:	4658      	mov	r0, fp
 8010528:	e527      	b.n	800ff7a <acc_translation_a121_translate+0xde>
 801052a:	b933      	cbnz	r3, 801053a <acc_translation_a121_translate+0x69e>
 801052c:	2a02      	cmp	r2, #2
 801052e:	d00a      	beq.n	8010546 <acc_translation_a121_translate+0x6aa>
 8010530:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010532:	7113      	strb	r3, [r2, #4]
 8010534:	f8a4 31ac 	strh.w	r3, [r4, #428]	@ 0x1ac
 8010538:	e620      	b.n	801017c <acc_translation_a121_translate+0x2e0>
 801053a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801053c:	2300      	movs	r3, #0
 801053e:	7113      	strb	r3, [r2, #4]
 8010540:	f8a4 31ac 	strh.w	r3, [r4, #428]	@ 0x1ac
 8010544:	e61a      	b.n	801017c <acc_translation_a121_translate+0x2e0>
 8010546:	2301      	movs	r3, #1
 8010548:	e60c      	b.n	8010164 <acc_translation_a121_translate+0x2c8>
 801054a:	9004      	str	r0, [sp, #16]
 801054c:	e69f      	b.n	801028e <acc_translation_a121_translate+0x3f2>
 801054e:	4621      	mov	r1, r4
 8010550:	4658      	mov	r0, fp
 8010552:	f7fe fffd 	bl	800f550 <acc_translation_a121_set_calibration_params>
 8010556:	2300      	movs	r3, #0
 8010558:	2201      	movs	r2, #1
 801055a:	f8a8 3002 	strh.w	r3, [r8, #2]
 801055e:	f8a8 300c 	strh.w	r3, [r8, #12]
 8010562:	f8a8 200a 	strh.w	r2, [r8, #10]
 8010566:	e719      	b.n	801039c <acc_translation_a121_translate+0x500>
 8010568:	20000bd8 	.word	0x20000bd8
 801056c:	08016d18 	.word	0x08016d18
 8010570:	08016aa4 	.word	0x08016aa4
 8010574:	00000000 	.word	0x00000000
 8010578:	08016cd8 	.word	0x08016cd8
 801057c:	3c23d70a 	.word	0x3c23d70a
 8010580:	49742400 	.word	0x49742400
 8010584:	08016d88 	.word	0x08016d88
 8010588:	08016c5c 	.word	0x08016c5c
 801058c:	3e124925 	.word	0x3e124925
 8010590:	3e4ccccd 	.word	0x3e4ccccd
 8010594:	3d75c28f 	.word	0x3d75c28f

08010598 <acc_translation_pulseshaper_calc_settings>:
 8010598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801059c:	7804      	ldrb	r4, [r0, #0]
 801059e:	2300      	movs	r3, #0
 80105a0:	8093      	strh	r3, [r2, #4]
 80105a2:	b374      	cbz	r4, 8010602 <acc_translation_pulseshaper_calc_settings+0x6a>
 80105a4:	6846      	ldr	r6, [r0, #4]
 80105a6:	2401      	movs	r4, #1
 80105a8:	4637      	mov	r7, r6
 80105aa:	8214      	strh	r4, [r2, #16]
 80105ac:	b3a6      	cbz	r6, 8010618 <acc_translation_pulseshaper_calc_settings+0x80>
 80105ae:	e9d1 9a03 	ldrd	r9, sl, [r1, #12]
 80105b2:	f8d1 8008 	ldr.w	r8, [r1, #8]
 80105b6:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80105ba:	461c      	mov	r4, r3
 80105bc:	eb09 4513 	add.w	r5, r9, r3, lsr #16
 80105c0:	eba5 0508 	sub.w	r5, r5, r8
 80105c4:	4575      	cmp	r5, lr
 80105c6:	fa1f fc84 	uxth.w	ip, r4
 80105ca:	4453      	add	r3, sl
 80105cc:	f104 0401 	add.w	r4, r4, #1
 80105d0:	da02      	bge.n	80105d8 <acc_translation_pulseshaper_calc_settings+0x40>
 80105d2:	2c0f      	cmp	r4, #15
 80105d4:	d1f2      	bne.n	80105bc <acc_translation_pulseshaper_calc_settings+0x24>
 80105d6:	46a4      	mov	ip, r4
 80105d8:	e9d1 8e07 	ldrd	r8, lr, [r1, #28]
 80105dc:	2505      	movs	r5, #5
 80105de:	f8a2 c006 	strh.w	ip, [r2, #6]
 80105e2:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 80105e6:	eb08 4413 	add.w	r4, r8, r3, lsr #16
 80105ea:	1ba4      	subs	r4, r4, r6
 80105ec:	f105 0c01 	add.w	ip, r5, #1
 80105f0:	4473      	add	r3, lr
 80105f2:	d563      	bpl.n	80106bc <acc_translation_pulseshaper_calc_settings+0x124>
 80105f4:	fa1f f58c 	uxth.w	r5, ip
 80105f8:	2d14      	cmp	r5, #20
 80105fa:	d1f4      	bne.n	80105e6 <acc_translation_pulseshaper_calc_settings+0x4e>
 80105fc:	2000      	movs	r0, #0
 80105fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010602:	8214      	strh	r4, [r2, #16]
 8010604:	80d4      	strh	r4, [r2, #6]
 8010606:	8054      	strh	r4, [r2, #2]
 8010608:	8114      	strh	r4, [r2, #8]
 801060a:	81d4      	strh	r4, [r2, #14]
 801060c:	8154      	strh	r4, [r2, #10]
 801060e:	8194      	strh	r4, [r2, #12]
 8010610:	8254      	strh	r4, [r2, #18]
 8010612:	2001      	movs	r0, #1
 8010614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010618:	f8d0 c008 	ldr.w	ip, [r0, #8]
 801061c:	80d6      	strh	r6, [r2, #6]
 801061e:	f5bc 7f16 	cmp.w	ip, #600	@ 0x258
 8010622:	8056      	strh	r6, [r2, #2]
 8010624:	d343      	bcc.n	80106ae <acc_translation_pulseshaper_calc_settings+0x116>
 8010626:	f8d1 e014 	ldr.w	lr, [r1, #20]
 801062a:	ebac 050e 	sub.w	r5, ip, lr
 801062e:	f5b5 7fc8 	cmp.w	r5, #400	@ 0x190
 8010632:	f340 80b3 	ble.w	801079c <acc_translation_pulseshaper_calc_settings+0x204>
 8010636:	2400      	movs	r4, #0
 8010638:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801063c:	4620      	mov	r0, r4
 801063e:	3002      	adds	r0, #2
 8010640:	fb03 f000 	mul.w	r0, r3, r0
 8010644:	42a8      	cmp	r0, r5
 8010646:	f104 0401 	add.w	r4, r4, #1
 801064a:	dbf7      	blt.n	801063c <acc_translation_pulseshaper_calc_settings+0xa4>
 801064c:	2e00      	cmp	r6, #0
 801064e:	bf14      	ite	ne
 8010650:	2501      	movne	r5, #1
 8010652:	2500      	moveq	r5, #0
 8010654:	f04f 0001 	mov.w	r0, #1
 8010658:	8115      	strh	r5, [r2, #8]
 801065a:	81d0      	strh	r0, [r2, #14]
 801065c:	d14f      	bne.n	80106fe <acc_translation_pulseshaper_calc_settings+0x166>
 801065e:	8156      	strh	r6, [r2, #10]
 8010660:	b344      	cbz	r4, 80106b4 <acc_translation_pulseshaper_calc_settings+0x11c>
 8010662:	fb03 c314 	mls	r3, r3, r4, ip
 8010666:	2000      	movs	r0, #0
 8010668:	e9d1 ce00 	ldrd	ip, lr, [r1]
 801066c:	4601      	mov	r1, r0
 801066e:	e001      	b.n	8010674 <acc_translation_pulseshaper_calc_settings+0xdc>
 8010670:	2916      	cmp	r1, #22
 8010672:	d0c3      	beq.n	80105fc <acc_translation_pulseshaper_calc_settings+0x64>
 8010674:	eb0c 4510 	add.w	r5, ip, r0, lsr #16
 8010678:	1aed      	subs	r5, r5, r3
 801067a:	b28e      	uxth	r6, r1
 801067c:	4470      	add	r0, lr
 801067e:	f101 0101 	add.w	r1, r1, #1
 8010682:	d4f5      	bmi.n	8010670 <acc_translation_pulseshaper_calc_settings+0xd8>
 8010684:	b15e      	cbz	r6, 801069e <acc_translation_pulseshaper_calc_settings+0x106>
 8010686:	b957      	cbnz	r7, 801069e <acc_translation_pulseshaper_calc_settings+0x106>
 8010688:	1e71      	subs	r1, r6, #1
 801068a:	b289      	uxth	r1, r1
 801068c:	fb0e fe01 	mul.w	lr, lr, r1
 8010690:	eb0c 4c1e 	add.w	ip, ip, lr, lsr #16
 8010694:	eba3 030c 	sub.w	r3, r3, ip
 8010698:	429d      	cmp	r5, r3
 801069a:	bfc8      	it	gt
 801069c:	460e      	movgt	r6, r1
 801069e:	8196      	strh	r6, [r2, #12]
 80106a0:	2c00      	cmp	r4, #0
 80106a2:	d0b5      	beq.n	8010610 <acc_translation_pulseshaper_calc_settings+0x78>
 80106a4:	1de3      	adds	r3, r4, #7
 80106a6:	2401      	movs	r4, #1
 80106a8:	409c      	lsls	r4, r3
 80106aa:	b2a4      	uxth	r4, r4
 80106ac:	e7b0      	b.n	8010610 <acc_translation_pulseshaper_calc_settings+0x78>
 80106ae:	8116      	strh	r6, [r2, #8]
 80106b0:	81d6      	strh	r6, [r2, #14]
 80106b2:	8156      	strh	r6, [r2, #10]
 80106b4:	2400      	movs	r4, #0
 80106b6:	4663      	mov	r3, ip
 80106b8:	4627      	mov	r7, r4
 80106ba:	e7d4      	b.n	8010666 <acc_translation_pulseshaper_calc_settings+0xce>
 80106bc:	2d05      	cmp	r5, #5
 80106be:	d00a      	beq.n	80106d6 <acc_translation_pulseshaper_calc_settings+0x13e>
 80106c0:	1e6b      	subs	r3, r5, #1
 80106c2:	b29b      	uxth	r3, r3
 80106c4:	fb0e fe03 	mul.w	lr, lr, r3
 80106c8:	eb08 4e1e 	add.w	lr, r8, lr, lsr #16
 80106cc:	eba6 0e0e 	sub.w	lr, r6, lr
 80106d0:	4574      	cmp	r4, lr
 80106d2:	bfc8      	it	gt
 80106d4:	461d      	movgt	r5, r3
 80106d6:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80106da:	8055      	strh	r5, [r2, #2]
 80106dc:	f5bc 7f16 	cmp.w	ip, #600	@ 0x258
 80106e0:	d349      	bcc.n	8010776 <acc_translation_pulseshaper_calc_settings+0x1de>
 80106e2:	f8d1 e014 	ldr.w	lr, [r1, #20]
 80106e6:	ebac 050e 	sub.w	r5, ip, lr
 80106ea:	f5b5 7fc8 	cmp.w	r5, #400	@ 0x190
 80106ee:	dca2      	bgt.n	8010636 <acc_translation_pulseshaper_calc_settings+0x9e>
 80106f0:	1e30      	subs	r0, r6, #0
 80106f2:	bf18      	it	ne
 80106f4:	2001      	movne	r0, #1
 80106f6:	2301      	movs	r3, #1
 80106f8:	8110      	strh	r0, [r2, #8]
 80106fa:	81d3      	strh	r3, [r2, #14]
 80106fc:	2400      	movs	r4, #0
 80106fe:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8010702:	fb03 c314 	mls	r3, r3, r4, ip
 8010706:	2500      	movs	r5, #0
 8010708:	f8d1 9018 	ldr.w	r9, [r1, #24]
 801070c:	4628      	mov	r0, r5
 801070e:	e002      	b.n	8010716 <acc_translation_pulseshaper_calc_settings+0x17e>
 8010710:	2816      	cmp	r0, #22
 8010712:	f43f af73 	beq.w	80105fc <acc_translation_pulseshaper_calc_settings+0x64>
 8010716:	eb0e 4715 	add.w	r7, lr, r5, lsr #16
 801071a:	1aff      	subs	r7, r7, r3
 801071c:	fa1f f880 	uxth.w	r8, r0
 8010720:	444d      	add	r5, r9
 8010722:	f100 0001 	add.w	r0, r0, #1
 8010726:	d4f3      	bmi.n	8010710 <acc_translation_pulseshaper_calc_settings+0x178>
 8010728:	f1b8 0f00 	cmp.w	r8, #0
 801072c:	d12a      	bne.n	8010784 <acc_translation_pulseshaper_calc_settings+0x1ec>
 801072e:	f8a2 800a 	strh.w	r8, [r2, #10]
 8010732:	b1c4      	cbz	r4, 8010766 <acc_translation_pulseshaper_calc_settings+0x1ce>
 8010734:	4637      	mov	r7, r6
 8010736:	2e00      	cmp	r6, #0
 8010738:	d095      	beq.n	8010666 <acc_translation_pulseshaper_calc_settings+0xce>
 801073a:	e9d1 0503 	ldrd	r0, r5, [r1, #12]
 801073e:	88d6      	ldrh	r6, [r2, #6]
 8010740:	fb05 f506 	mul.w	r5, r5, r6
 8010744:	688e      	ldr	r6, [r1, #8]
 8010746:	eb00 4015 	add.w	r0, r0, r5, lsr #16
 801074a:	1b80      	subs	r0, r0, r6
 801074c:	f53f af56 	bmi.w	80105fc <acc_translation_pulseshaper_calc_settings+0x64>
 8010750:	e9d1 5607 	ldrd	r5, r6, [r1, #28]
 8010754:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 8010758:	fb06 f60c 	mul.w	r6, r6, ip
 801075c:	eb05 4516 	add.w	r5, r5, r6, lsr #16
 8010760:	4428      	add	r0, r5
 8010762:	4403      	add	r3, r0
 8010764:	e77f      	b.n	8010666 <acc_translation_pulseshaper_calc_settings+0xce>
 8010766:	4637      	mov	r7, r6
 8010768:	2e00      	cmp	r6, #0
 801076a:	d0a3      	beq.n	80106b4 <acc_translation_pulseshaper_calc_settings+0x11c>
 801076c:	fb09 f308 	mul.w	r3, r9, r8
 8010770:	eb0e 4313 	add.w	r3, lr, r3, lsr #16
 8010774:	e7e1      	b.n	801073a <acc_translation_pulseshaper_calc_settings+0x1a2>
 8010776:	2400      	movs	r4, #0
 8010778:	f8d1 e014 	ldr.w	lr, [r1, #20]
 801077c:	8114      	strh	r4, [r2, #8]
 801077e:	81d4      	strh	r4, [r2, #14]
 8010780:	4663      	mov	r3, ip
 8010782:	e7c0      	b.n	8010706 <acc_translation_pulseshaper_calc_settings+0x16e>
 8010784:	f108 35ff 	add.w	r5, r8, #4294967295
 8010788:	b2ad      	uxth	r5, r5
 801078a:	fb09 f005 	mul.w	r0, r9, r5
 801078e:	eb0e 4010 	add.w	r0, lr, r0, lsr #16
 8010792:	1a18      	subs	r0, r3, r0
 8010794:	4287      	cmp	r7, r0
 8010796:	bfc8      	it	gt
 8010798:	46a8      	movgt	r8, r5
 801079a:	e7c8      	b.n	801072e <acc_translation_pulseshaper_calc_settings+0x196>
 801079c:	8116      	strh	r6, [r2, #8]
 801079e:	81d4      	strh	r4, [r2, #14]
 80107a0:	8156      	strh	r6, [r2, #10]
 80107a2:	e787      	b.n	80106b4 <acc_translation_pulseshaper_calc_settings+0x11c>

080107a4 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl>:
 80107a4:	7803      	ldrb	r3, [r0, #0]
 80107a6:	b13b      	cbz	r3, 80107b8 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x14>
 80107a8:	6842      	ldr	r2, [r0, #4]
 80107aa:	b12a      	cbz	r2, 80107b8 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x14>
 80107ac:	6902      	ldr	r2, [r0, #16]
 80107ae:	2a02      	cmp	r2, #2
 80107b0:	d90b      	bls.n	80107ca <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x26>
 80107b2:	2300      	movs	r3, #0
 80107b4:	4618      	mov	r0, r3
 80107b6:	4770      	bx	lr
 80107b8:	6903      	ldr	r3, [r0, #16]
 80107ba:	2b07      	cmp	r3, #7
 80107bc:	d8f9      	bhi.n	80107b2 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0xe>
 80107be:	4a05      	ldr	r2, [pc, #20]	@ (80107d4 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x30>)
 80107c0:	5cd3      	ldrb	r3, [r2, r3]
 80107c2:	800b      	strh	r3, [r1, #0]
 80107c4:	2301      	movs	r3, #1
 80107c6:	4618      	mov	r0, r3
 80107c8:	4770      	bx	lr
 80107ca:	4803      	ldr	r0, [pc, #12]	@ (80107d8 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x34>)
 80107cc:	5c82      	ldrb	r2, [r0, r2]
 80107ce:	800a      	strh	r2, [r1, #0]
 80107d0:	4618      	mov	r0, r3
 80107d2:	4770      	bx	lr
 80107d4:	08016de0 	.word	0x08016de0
 80107d8:	08016de8 	.word	0x08016de8

080107dc <acc_utils_bool_to_str>:
 80107dc:	4a03      	ldr	r2, [pc, #12]	@ (80107ec <acc_utils_bool_to_str+0x10>)
 80107de:	4b04      	ldr	r3, [pc, #16]	@ (80107f0 <acc_utils_bool_to_str+0x14>)
 80107e0:	2800      	cmp	r0, #0
 80107e2:	bf14      	ite	ne
 80107e4:	4610      	movne	r0, r2
 80107e6:	4618      	moveq	r0, r3
 80107e8:	4770      	bx	lr
 80107ea:	bf00      	nop
 80107ec:	08016dec 	.word	0x08016dec
 80107f0:	08016df4 	.word	0x08016df4

080107f4 <acc_utils_idle_state_to_str>:
 80107f4:	2802      	cmp	r0, #2
 80107f6:	bf9a      	itte	ls
 80107f8:	4b02      	ldrls	r3, [pc, #8]	@ (8010804 <acc_utils_idle_state_to_str+0x10>)
 80107fa:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80107fe:	4802      	ldrhi	r0, [pc, #8]	@ (8010808 <acc_utils_idle_state_to_str+0x14>)
 8010800:	4770      	bx	lr
 8010802:	bf00      	nop
 8010804:	08016e8c 	.word	0x08016e8c
 8010808:	08016dfc 	.word	0x08016dfc

0801080c <acc_utils_profile_to_str>:
 801080c:	3801      	subs	r0, #1
 801080e:	b2c0      	uxtb	r0, r0
 8010810:	2804      	cmp	r0, #4
 8010812:	bf9a      	itte	ls
 8010814:	4b02      	ldrls	r3, [pc, #8]	@ (8010820 <acc_utils_profile_to_str+0x14>)
 8010816:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801081a:	4802      	ldrhi	r0, [pc, #8]	@ (8010824 <acc_utils_profile_to_str+0x18>)
 801081c:	4770      	bx	lr
 801081e:	bf00      	nop
 8010820:	08016e98 	.word	0x08016e98
 8010824:	08016dfc 	.word	0x08016dfc

08010828 <acc_utils_prf_to_str>:
 8010828:	2805      	cmp	r0, #5
 801082a:	bf9a      	itte	ls
 801082c:	4b02      	ldrls	r3, [pc, #8]	@ (8010838 <acc_utils_prf_to_str+0x10>)
 801082e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8010832:	4802      	ldrhi	r0, [pc, #8]	@ (801083c <acc_utils_prf_to_str+0x14>)
 8010834:	4770      	bx	lr
 8010836:	bf00      	nop
 8010838:	08016eac 	.word	0x08016eac
 801083c:	08016dfc 	.word	0x08016dfc

08010840 <acc_alg_atan2_q16>:
 8010840:	2800      	cmp	r0, #0
 8010842:	bfb8      	it	lt
 8010844:	4240      	neglt	r0, r0
 8010846:	b4f0      	push	{r4, r5, r6, r7}
 8010848:	bfba      	itte	lt
 801084a:	b200      	sxthlt	r0, r0
 801084c:	2401      	movlt	r4, #1
 801084e:	2400      	movge	r4, #0
 8010850:	2900      	cmp	r1, #0
 8010852:	db3f      	blt.n	80108d4 <acc_alg_atan2_q16+0x94>
 8010854:	4288      	cmp	r0, r1
 8010856:	db38      	blt.n	80108ca <acc_alg_atan2_q16+0x8a>
 8010858:	2200      	movs	r2, #0
 801085a:	4603      	mov	r3, r0
 801085c:	b368      	cbz	r0, 80108ba <acc_alg_atan2_q16+0x7a>
 801085e:	4608      	mov	r0, r1
 8010860:	2600      	movs	r6, #0
 8010862:	f643 4528 	movw	r5, #15400	@ 0x3c28
 8010866:	0400      	lsls	r0, r0, #16
 8010868:	fbb0 f1f3 	udiv	r1, r0, r3
 801086c:	42a9      	cmp	r1, r5
 801086e:	d948      	bls.n	8010902 <acc_alg_atan2_q16+0xc2>
 8010870:	f246 33d6 	movw	r3, #25558	@ 0x63d6
 8010874:	4299      	cmp	r1, r3
 8010876:	d936      	bls.n	80108e6 <acc_alg_atan2_q16+0xa6>
 8010878:	f648 0372 	movw	r3, #34930	@ 0x8872
 801087c:	4299      	cmp	r1, r3
 801087e:	d942      	bls.n	8010906 <acc_alg_atan2_q16+0xc6>
 8010880:	f64a 4349 	movw	r3, #44105	@ 0xac49
 8010884:	4299      	cmp	r1, r3
 8010886:	d940      	bls.n	801090a <acc_alg_atan2_q16+0xca>
 8010888:	f24d 03a3 	movw	r3, #53411	@ 0xd0a3
 801088c:	4299      	cmp	r1, r3
 801088e:	d93e      	bls.n	801090e <acc_alg_atan2_q16+0xce>
 8010890:	f24f 734b 	movw	r3, #63307	@ 0xf74b
 8010894:	4299      	cmp	r1, r3
 8010896:	bf98      	it	ls
 8010898:	2705      	movls	r7, #5
 801089a:	d925      	bls.n	80108e8 <acc_alg_atan2_q16+0xa8>
 801089c:	f24f 754c 	movw	r5, #63308	@ 0xf74c
 80108a0:	f248 2333 	movw	r3, #33331	@ 0x8233
 80108a4:	f24c 40a3 	movw	r0, #50339	@ 0xc4a3
 80108a8:	1b49      	subs	r1, r1, r5
 80108aa:	fb03 f101 	mul.w	r1, r3, r1
 80108ae:	eb00 4011 	add.w	r0, r0, r1, lsr #16
 80108b2:	b116      	cbz	r6, 80108ba <acc_alg_atan2_q16+0x7a>
 80108b4:	f5c0 30c9 	rsb	r0, r0, #102912	@ 0x19200
 80108b8:	301f      	adds	r0, #31
 80108ba:	b114      	cbz	r4, 80108c2 <acc_alg_atan2_q16+0x82>
 80108bc:	f5c0 3049 	rsb	r0, r0, #205824	@ 0x32400
 80108c0:	303f      	adds	r0, #63	@ 0x3f
 80108c2:	b102      	cbz	r2, 80108c6 <acc_alg_atan2_q16+0x86>
 80108c4:	4240      	negs	r0, r0
 80108c6:	bcf0      	pop	{r4, r5, r6, r7}
 80108c8:	4770      	bx	lr
 80108ca:	460b      	mov	r3, r1
 80108cc:	b9b1      	cbnz	r1, 80108fc <acc_alg_atan2_q16+0xbc>
 80108ce:	4811      	ldr	r0, [pc, #68]	@ (8010914 <acc_alg_atan2_q16+0xd4>)
 80108d0:	460a      	mov	r2, r1
 80108d2:	e7f2      	b.n	80108ba <acc_alg_atan2_q16+0x7a>
 80108d4:	4249      	negs	r1, r1
 80108d6:	b209      	sxth	r1, r1
 80108d8:	4288      	cmp	r0, r1
 80108da:	f04f 0201 	mov.w	r2, #1
 80108de:	dabc      	bge.n	801085a <acc_alg_atan2_q16+0x1a>
 80108e0:	460b      	mov	r3, r1
 80108e2:	4616      	mov	r6, r2
 80108e4:	e7bd      	b.n	8010862 <acc_alg_atan2_q16+0x22>
 80108e6:	2701      	movs	r7, #1
 80108e8:	480b      	ldr	r0, [pc, #44]	@ (8010918 <acc_alg_atan2_q16+0xd8>)
 80108ea:	4b0c      	ldr	r3, [pc, #48]	@ (801091c <acc_alg_atan2_q16+0xdc>)
 80108ec:	f850 5037 	ldr.w	r5, [r0, r7, lsl #3]
 80108f0:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 80108f4:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 80108f8:	6840      	ldr	r0, [r0, #4]
 80108fa:	e7d5      	b.n	80108a8 <acc_alg_atan2_q16+0x68>
 80108fc:	2200      	movs	r2, #0
 80108fe:	2601      	movs	r6, #1
 8010900:	e7af      	b.n	8010862 <acc_alg_atan2_q16+0x22>
 8010902:	2700      	movs	r7, #0
 8010904:	e7f0      	b.n	80108e8 <acc_alg_atan2_q16+0xa8>
 8010906:	2702      	movs	r7, #2
 8010908:	e7ee      	b.n	80108e8 <acc_alg_atan2_q16+0xa8>
 801090a:	2703      	movs	r7, #3
 801090c:	e7ec      	b.n	80108e8 <acc_alg_atan2_q16+0xa8>
 801090e:	2704      	movs	r7, #4
 8010910:	e7ea      	b.n	80108e8 <acc_alg_atan2_q16+0xa8>
 8010912:	bf00      	nop
 8010914:	0001921f 	.word	0x0001921f
 8010918:	08016ec4 	.word	0x08016ec4
 801091c:	08016efc 	.word	0x08016efc

08010920 <acc_alg_basic_util_crc32>:
 8010920:	b1a9      	cbz	r1, 801094e <acc_alg_basic_util_crc32+0x2e>
 8010922:	b430      	push	{r4, r5}
 8010924:	4a0b      	ldr	r2, [pc, #44]	@ (8010954 <acc_alg_basic_util_crc32+0x34>)
 8010926:	1e44      	subs	r4, r0, #1
 8010928:	1865      	adds	r5, r4, r1
 801092a:	f04f 30ff 	mov.w	r0, #4294967295
 801092e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8010932:	2308      	movs	r3, #8
 8010934:	4048      	eors	r0, r1
 8010936:	07c1      	lsls	r1, r0, #31
 8010938:	bf4c      	ite	mi
 801093a:	ea82 0050 	eormi.w	r0, r2, r0, lsr #1
 801093e:	0840      	lsrpl	r0, r0, #1
 8010940:	3b01      	subs	r3, #1
 8010942:	d1f8      	bne.n	8010936 <acc_alg_basic_util_crc32+0x16>
 8010944:	42ac      	cmp	r4, r5
 8010946:	d1f2      	bne.n	801092e <acc_alg_basic_util_crc32+0xe>
 8010948:	43c0      	mvns	r0, r0
 801094a:	bc30      	pop	{r4, r5}
 801094c:	4770      	bx	lr
 801094e:	4608      	mov	r0, r1
 8010950:	4770      	bx	lr
 8010952:	bf00      	nop
 8010954:	edb88320 	.word	0xedb88320

08010958 <acc_alg_least_square_fit>:
 8010958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801095c:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 8010960:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8010964:	b08d      	sub	sp, #52	@ 0x34
 8010966:	2600      	movs	r6, #0
 8010968:	4683      	mov	fp, r0
 801096a:	4682      	mov	sl, r0
 801096c:	4680      	mov	r8, r0
 801096e:	4667      	mov	r7, ip
 8010970:	46b1      	mov	r9, r6
 8010972:	a803      	add	r0, sp, #12
 8010974:	ea4f 0589 	mov.w	r5, r9, lsl #2
 8010978:	4686      	mov	lr, r0
 801097a:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8010ad8 <acc_alg_least_square_fit+0x180>
 801097e:	4643      	mov	r3, r8
 8010980:	b16a      	cbz	r2, 801099e <acc_alg_least_square_fit+0x46>
 8010982:	199c      	adds	r4, r3, r6
 8010984:	442c      	add	r4, r5
 8010986:	edd4 7a00 	vldr	s15, [r4]
 801098a:	461c      	mov	r4, r3
 801098c:	edd4 6a00 	vldr	s13, [r4]
 8010990:	330c      	adds	r3, #12
 8010992:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010996:	42bb      	cmp	r3, r7
 8010998:	ee37 7a27 	vadd.f32	s14, s14, s15
 801099c:	d1f1      	bne.n	8010982 <acc_alg_least_square_fit+0x2a>
 801099e:	3504      	adds	r5, #4
 80109a0:	2d0c      	cmp	r5, #12
 80109a2:	ecae 7a01 	vstmia	lr!, {s14}
 80109a6:	d1e8      	bne.n	801097a <acc_alg_least_square_fit+0x22>
 80109a8:	f109 0901 	add.w	r9, r9, #1
 80109ac:	f1b9 0f03 	cmp.w	r9, #3
 80109b0:	f100 0010 	add.w	r0, r0, #16
 80109b4:	f108 0804 	add.w	r8, r8, #4
 80109b8:	f1a6 0604 	sub.w	r6, r6, #4
 80109bc:	f107 0704 	add.w	r7, r7, #4
 80109c0:	d1d8      	bne.n	8010974 <acc_alg_least_square_fit+0x1c>
 80109c2:	ed9d 6a04 	vldr	s12, [sp, #16]
 80109c6:	eddd 5a05 	vldr	s11, [sp, #20]
 80109ca:	eddd 6a08 	vldr	s13, [sp, #32]
 80109ce:	4668      	mov	r0, sp
 80109d0:	f10b 040c 	add.w	r4, fp, #12
 80109d4:	eddf 7a40 	vldr	s15, [pc, #256]	@ 8010ad8 <acc_alg_least_square_fit+0x180>
 80109d8:	4653      	mov	r3, sl
 80109da:	b13a      	cbz	r2, 80109ec <acc_alg_least_square_fit+0x94>
 80109dc:	461d      	mov	r5, r3
 80109de:	ed95 7a00 	vldr	s14, [r5]
 80109e2:	330c      	adds	r3, #12
 80109e4:	4563      	cmp	r3, ip
 80109e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80109ea:	d1f7      	bne.n	80109dc <acc_alg_least_square_fit+0x84>
 80109ec:	f10a 0a04 	add.w	sl, sl, #4
 80109f0:	45a2      	cmp	sl, r4
 80109f2:	ece0 7a01 	vstmia	r0!, {s15}
 80109f6:	f10c 0c04 	add.w	ip, ip, #4
 80109fa:	d1eb      	bne.n	80109d4 <acc_alg_least_square_fit+0x7c>
 80109fc:	eddd 7a03 	vldr	s15, [sp, #12]
 8010a00:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a08:	d010      	beq.n	8010a2c <acc_alg_least_square_fit+0xd4>
 8010a0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010a0e:	ee87 4a27 	vdiv.f32	s8, s14, s15
 8010a12:	eddd 7a07 	vldr	s15, [sp, #28]
 8010a16:	ee66 4a04 	vmul.f32	s9, s12, s8
 8010a1a:	ee26 5a24 	vmul.f32	s10, s12, s9
 8010a1e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8010a22:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a2a:	d106      	bne.n	8010a3a <acc_alg_least_square_fit+0xe2>
 8010a2c:	2000      	movs	r0, #0
 8010a2e:	2300      	movs	r3, #0
 8010a30:	f8cb 3000 	str.w	r3, [fp]
 8010a34:	b00d      	add	sp, #52	@ 0x34
 8010a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a3a:	eec7 2a27 	vdiv.f32	s5, s14, s15
 8010a3e:	ee65 3a84 	vmul.f32	s7, s11, s8
 8010a42:	ee25 7aa4 	vmul.f32	s14, s11, s9
 8010a46:	ee66 7a23 	vmul.f32	s15, s12, s7
 8010a4a:	ed9d 5a0b 	vldr	s10, [sp, #44]	@ 0x2c
 8010a4e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010a52:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8010a56:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8010a5a:	ee65 6aa3 	vmul.f32	s13, s11, s7
 8010a5e:	ee75 6a66 	vsub.f32	s13, s10, s13
 8010a62:	ee27 5a27 	vmul.f32	s10, s14, s15
 8010a66:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8010a6a:	eef5 6a40 	vcmp.f32	s13, #0.0
 8010a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a72:	d0db      	beq.n	8010a2c <acc_alg_least_square_fit+0xd4>
 8010a74:	ed9d 5a00 	vldr	s10, [sp]
 8010a78:	ed9d 3a01 	vldr	s6, [sp, #4]
 8010a7c:	ed9d 2a02 	vldr	s4, [sp, #8]
 8010a80:	ee64 4a85 	vmul.f32	s9, s9, s10
 8010a84:	ee63 3a85 	vmul.f32	s7, s7, s10
 8010a88:	ee73 4a64 	vsub.f32	s9, s6, s9
 8010a8c:	2001      	movs	r0, #1
 8010a8e:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8010a92:	2300      	movs	r3, #0
 8010a94:	ee72 7a67 	vsub.f32	s15, s4, s15
 8010a98:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8010a9c:	eec3 7aa6 	vdiv.f32	s15, s7, s13
 8010aa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010aa4:	edc1 7a02 	vstr	s15, [r1, #8]
 8010aa8:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010aac:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8010ab0:	ee67 7a22 	vmul.f32	s15, s14, s5
 8010ab4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8010ab8:	edc1 7a01 	vstr	s15, [r1, #4]
 8010abc:	ee35 6a46 	vsub.f32	s12, s10, s12
 8010ac0:	ee76 5a65 	vsub.f32	s11, s12, s11
 8010ac4:	ee25 4a84 	vmul.f32	s8, s11, s8
 8010ac8:	ed81 4a00 	vstr	s8, [r1]
 8010acc:	f8cb 3000 	str.w	r3, [fp]
 8010ad0:	b00d      	add	sp, #52	@ 0x34
 8010ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ad6:	bf00      	nop
 8010ad8:	00000000 	.word	0x00000000

08010adc <acc_confprogram_modify_bin_sensor>:
 8010adc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ae0:	b085      	sub	sp, #20
 8010ae2:	2601      	movs	r6, #1
 8010ae4:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8010ae8:	fa06 f503 	lsl.w	r5, r6, r3
 8010aec:	4545      	cmp	r5, r8
 8010aee:	461c      	mov	r4, r3
 8010af0:	460b      	mov	r3, r1
 8010af2:	d80d      	bhi.n	8010b10 <acc_confprogram_modify_bin_sensor+0x34>
 8010af4:	4a14      	ldr	r2, [pc, #80]	@ (8010b48 <acc_confprogram_modify_bin_sensor+0x6c>)
 8010af6:	f8cd 8000 	str.w	r8, [sp]
 8010afa:	3d01      	subs	r5, #1
 8010afc:	9501      	str	r5, [sp, #4]
 8010afe:	6914      	ldr	r4, [r2, #16]
 8010b00:	4912      	ldr	r1, [pc, #72]	@ (8010b4c <acc_confprogram_modify_bin_sensor+0x70>)
 8010b02:	4a13      	ldr	r2, [pc, #76]	@ (8010b50 <acc_confprogram_modify_bin_sensor+0x74>)
 8010b04:	2000      	movs	r0, #0
 8010b06:	47a0      	blx	r4
 8010b08:	2000      	movs	r0, #0
 8010b0a:	b005      	add	sp, #20
 8010b0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b10:	4691      	mov	r9, r2
 8010b12:	4607      	mov	r7, r0
 8010b14:	9103      	str	r1, [sp, #12]
 8010b16:	f1c4 0420 	rsb	r4, r4, #32
 8010b1a:	f000 f9ed 	bl	8010ef8 <acc_sensor_conf_read_instr>
 8010b1e:	f04f 31ff 	mov.w	r1, #4294967295
 8010b22:	fa21 f404 	lsr.w	r4, r1, r4
 8010b26:	9b03      	ldr	r3, [sp, #12]
 8010b28:	fa04 f409 	lsl.w	r4, r4, r9
 8010b2c:	ea20 0404 	bic.w	r4, r0, r4
 8010b30:	fa08 f209 	lsl.w	r2, r8, r9
 8010b34:	4619      	mov	r1, r3
 8010b36:	4638      	mov	r0, r7
 8010b38:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010b3a:	4322      	orrs	r2, r4
 8010b3c:	4798      	blx	r3
 8010b3e:	4630      	mov	r0, r6
 8010b40:	b005      	add	sp, #20
 8010b42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b46:	bf00      	nop
 8010b48:	20000bd8 	.word	0x20000bd8
 8010b4c:	08016f50 	.word	0x08016f50
 8010b50:	08016f18 	.word	0x08016f18

08010b54 <acc_confprogram_modify_bin>:
 8010b54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010b58:	b085      	sub	sp, #20
 8010b5a:	2401      	movs	r4, #1
 8010b5c:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8010b60:	fa04 f703 	lsl.w	r7, r4, r3
 8010b64:	4547      	cmp	r7, r8
 8010b66:	461e      	mov	r6, r3
 8010b68:	460b      	mov	r3, r1
 8010b6a:	d80d      	bhi.n	8010b88 <acc_confprogram_modify_bin+0x34>
 8010b6c:	4a17      	ldr	r2, [pc, #92]	@ (8010bcc <acc_confprogram_modify_bin+0x78>)
 8010b6e:	f8cd 8000 	str.w	r8, [sp]
 8010b72:	3f01      	subs	r7, #1
 8010b74:	9701      	str	r7, [sp, #4]
 8010b76:	6914      	ldr	r4, [r2, #16]
 8010b78:	4915      	ldr	r1, [pc, #84]	@ (8010bd0 <acc_confprogram_modify_bin+0x7c>)
 8010b7a:	4a16      	ldr	r2, [pc, #88]	@ (8010bd4 <acc_confprogram_modify_bin+0x80>)
 8010b7c:	2000      	movs	r0, #0
 8010b7e:	47a0      	blx	r4
 8010b80:	2000      	movs	r0, #0
 8010b82:	b005      	add	sp, #20
 8010b84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b88:	eb00 0541 	add.w	r5, r0, r1, lsl #1
 8010b8c:	4691      	mov	r9, r2
 8010b8e:	4628      	mov	r0, r5
 8010b90:	4622      	mov	r2, r4
 8010b92:	a902      	add	r1, sp, #8
 8010b94:	f000 faf8 	bl	8011188 <acc_utils_transfer_buffer_to_uint32>
 8010b98:	f1c6 0620 	rsb	r6, r6, #32
 8010b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8010ba0:	fa22 f606 	lsr.w	r6, r2, r6
 8010ba4:	9a02      	ldr	r2, [sp, #8]
 8010ba6:	fa06 f609 	lsl.w	r6, r6, r9
 8010baa:	fa08 f809 	lsl.w	r8, r8, r9
 8010bae:	ea22 0206 	bic.w	r2, r2, r6
 8010bb2:	ea42 0608 	orr.w	r6, r2, r8
 8010bb6:	a803      	add	r0, sp, #12
 8010bb8:	4629      	mov	r1, r5
 8010bba:	4622      	mov	r2, r4
 8010bbc:	9603      	str	r6, [sp, #12]
 8010bbe:	f000 fad5 	bl	801116c <acc_utils_uint32_to_transfer_buffer>
 8010bc2:	4620      	mov	r0, r4
 8010bc4:	b005      	add	sp, #20
 8010bc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010bca:	bf00      	nop
 8010bcc:	20000bd8 	.word	0x20000bd8
 8010bd0:	08016f50 	.word	0x08016f50
 8010bd4:	08016f5c 	.word	0x08016f5c

08010bd8 <acc_confprogram_modify_runif>:
 8010bd8:	b570      	push	{r4, r5, r6, lr}
 8010bda:	eb00 0442 	add.w	r4, r0, r2, lsl #1
 8010bde:	b082      	sub	sp, #8
 8010be0:	2201      	movs	r2, #1
 8010be2:	460e      	mov	r6, r1
 8010be4:	4620      	mov	r0, r4
 8010be6:	4669      	mov	r1, sp
 8010be8:	461d      	mov	r5, r3
 8010bea:	f000 facd 	bl	8011188 <acc_utils_transfer_buffer_to_uint32>
 8010bee:	9a00      	ldr	r2, [sp, #0]
 8010bf0:	f022 020f 	bic.w	r2, r2, #15
 8010bf4:	b105      	cbz	r5, 8010bf8 <acc_confprogram_modify_runif+0x20>
 8010bf6:	4332      	orrs	r2, r6
 8010bf8:	9201      	str	r2, [sp, #4]
 8010bfa:	4621      	mov	r1, r4
 8010bfc:	2201      	movs	r2, #1
 8010bfe:	a801      	add	r0, sp, #4
 8010c00:	f000 fab4 	bl	801116c <acc_utils_uint32_to_transfer_buffer>
 8010c04:	b002      	add	sp, #8
 8010c06:	bd70      	pop	{r4, r5, r6, pc}

08010c08 <acc_confprogram_patch_offset>:
 8010c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c0c:	b083      	sub	sp, #12
 8010c0e:	f8bd 7028 	ldrh.w	r7, [sp, #40]	@ 0x28
 8010c12:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8010c16:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8010c1a:	887b      	ldrh	r3, [r7, #2]
 8010c1c:	b303      	cbz	r3, 8010c60 <acc_confprogram_patch_offset+0x58>
 8010c1e:	460d      	mov	r5, r1
 8010c20:	6879      	ldr	r1, [r7, #4]
 8010c22:	4680      	mov	r8, r0
 8010c24:	18ae      	adds	r6, r5, r2
 8010c26:	2400      	movs	r4, #0
 8010c28:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8010c2c:	0042      	lsls	r2, r0, #1
 8010c2e:	b292      	uxth	r2, r2
 8010c30:	42aa      	cmp	r2, r5
 8010c32:	d312      	bcc.n	8010c5a <acc_confprogram_patch_offset+0x52>
 8010c34:	42b2      	cmp	r2, r6
 8010c36:	da10      	bge.n	8010c5a <acc_confprogram_patch_offset+0x52>
 8010c38:	f3c0 7301 	ubfx	r3, r0, #28, #2
 8010c3c:	2b01      	cmp	r3, #1
 8010c3e:	d036      	beq.n	8010cae <acc_confprogram_patch_offset+0xa6>
 8010c40:	2b02      	cmp	r3, #2
 8010c42:	d024      	beq.n	8010c8e <acc_confprogram_patch_offset+0x86>
 8010c44:	b183      	cbz	r3, 8010c68 <acc_confprogram_patch_offset+0x60>
 8010c46:	4b1e      	ldr	r3, [pc, #120]	@ (8010cc0 <acc_confprogram_patch_offset+0xb8>)
 8010c48:	4a1e      	ldr	r2, [pc, #120]	@ (8010cc4 <acc_confprogram_patch_offset+0xbc>)
 8010c4a:	691b      	ldr	r3, [r3, #16]
 8010c4c:	491e      	ldr	r1, [pc, #120]	@ (8010cc8 <acc_confprogram_patch_offset+0xc0>)
 8010c4e:	2000      	movs	r0, #0
 8010c50:	4798      	blx	r3
 8010c52:	2000      	movs	r0, #0
 8010c54:	b003      	add	sp, #12
 8010c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c5a:	3401      	adds	r4, #1
 8010c5c:	42a3      	cmp	r3, r4
 8010c5e:	d8e3      	bhi.n	8010c28 <acc_confprogram_patch_offset+0x20>
 8010c60:	2001      	movs	r0, #1
 8010c62:	b003      	add	sp, #12
 8010c64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c68:	1b52      	subs	r2, r2, r5
 8010c6a:	f3c0 5344 	ubfx	r3, r0, #21, #5
 8010c6e:	b291      	uxth	r1, r2
 8010c70:	f8cd 9000 	str.w	r9, [sp]
 8010c74:	f3c0 4204 	ubfx	r2, r0, #16, #5
 8010c78:	4640      	mov	r0, r8
 8010c7a:	f7ff ff6b 	bl	8010b54 <acc_confprogram_modify_bin>
 8010c7e:	887b      	ldrh	r3, [r7, #2]
 8010c80:	3401      	adds	r4, #1
 8010c82:	42a3      	cmp	r3, r4
 8010c84:	d9e6      	bls.n	8010c54 <acc_confprogram_patch_offset+0x4c>
 8010c86:	2800      	cmp	r0, #0
 8010c88:	d0e4      	beq.n	8010c54 <acc_confprogram_patch_offset+0x4c>
 8010c8a:	6879      	ldr	r1, [r7, #4]
 8010c8c:	e7cc      	b.n	8010c28 <acc_confprogram_patch_offset+0x20>
 8010c8e:	1b52      	subs	r2, r2, r5
 8010c90:	fab9 f389 	clz	r3, r9
 8010c94:	b292      	uxth	r2, r2
 8010c96:	f3c0 4103 	ubfx	r1, r0, #16, #4
 8010c9a:	095b      	lsrs	r3, r3, #5
 8010c9c:	4640      	mov	r0, r8
 8010c9e:	f7ff ff9b 	bl	8010bd8 <acc_confprogram_modify_runif>
 8010ca2:	887b      	ldrh	r3, [r7, #2]
 8010ca4:	3401      	adds	r4, #1
 8010ca6:	42a3      	cmp	r3, r4
 8010ca8:	d8ef      	bhi.n	8010c8a <acc_confprogram_patch_offset+0x82>
 8010caa:	2001      	movs	r0, #1
 8010cac:	e7d9      	b.n	8010c62 <acc_confprogram_patch_offset+0x5a>
 8010cae:	1b52      	subs	r2, r2, r5
 8010cb0:	f1b9 0300 	subs.w	r3, r9, #0
 8010cb4:	b292      	uxth	r2, r2
 8010cb6:	f3c0 4103 	ubfx	r1, r0, #16, #4
 8010cba:	bf18      	it	ne
 8010cbc:	2301      	movne	r3, #1
 8010cbe:	e7ed      	b.n	8010c9c <acc_confprogram_patch_offset+0x94>
 8010cc0:	20000bd8 	.word	0x20000bd8
 8010cc4:	08016f94 	.word	0x08016f94
 8010cc8:	08016f50 	.word	0x08016f50

08010ccc <acc_confprogram_live_patch>:
 8010ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cd0:	b083      	sub	sp, #12
 8010cd2:	e9dd 9a0d 	ldrd	r9, sl, [sp, #52]	@ 0x34
 8010cd6:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 8010cda:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8010cde:	8873      	ldrh	r3, [r6, #2]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d050      	beq.n	8010d86 <acc_confprogram_live_patch+0xba>
 8010ce4:	4607      	mov	r7, r0
 8010ce6:	468b      	mov	fp, r1
 8010ce8:	4690      	mov	r8, r2
 8010cea:	2501      	movs	r5, #1
 8010cec:	6873      	ldr	r3, [r6, #4]
 8010cee:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8010cf2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010cf6:	f3c0 7401 	ubfx	r4, r0, #28, #2
 8010cfa:	2c01      	cmp	r4, #1
 8010cfc:	d00c      	beq.n	8010d18 <acc_confprogram_live_patch+0x4c>
 8010cfe:	2c02      	cmp	r4, #2
 8010d00:	d032      	beq.n	8010d68 <acc_confprogram_live_patch+0x9c>
 8010d02:	b1ec      	cbz	r4, 8010d40 <acc_confprogram_live_patch+0x74>
 8010d04:	4b22      	ldr	r3, [pc, #136]	@ (8010d90 <acc_confprogram_live_patch+0xc4>)
 8010d06:	4a23      	ldr	r2, [pc, #140]	@ (8010d94 <acc_confprogram_live_patch+0xc8>)
 8010d08:	691b      	ldr	r3, [r3, #16]
 8010d0a:	4923      	ldr	r1, [pc, #140]	@ (8010d98 <acc_confprogram_live_patch+0xcc>)
 8010d0c:	2000      	movs	r0, #0
 8010d0e:	4798      	blx	r3
 8010d10:	2000      	movs	r0, #0
 8010d12:	b003      	add	sp, #12
 8010d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d18:	eb08 0100 	add.w	r1, r8, r0
 8010d1c:	b289      	uxth	r1, r1
 8010d1e:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
 8010d22:	f022 020f 	bic.w	r2, r2, #15
 8010d26:	f1b9 0f00 	cmp.w	r9, #0
 8010d2a:	d002      	beq.n	8010d32 <acc_confprogram_live_patch+0x66>
 8010d2c:	f3c0 4003 	ubfx	r0, r0, #16, #4
 8010d30:	4302      	orrs	r2, r0
 8010d32:	4638      	mov	r0, r7
 8010d34:	47d0      	blx	sl
 8010d36:	8873      	ldrh	r3, [r6, #2]
 8010d38:	42ab      	cmp	r3, r5
 8010d3a:	d924      	bls.n	8010d86 <acc_confprogram_live_patch+0xba>
 8010d3c:	3501      	adds	r5, #1
 8010d3e:	e7d5      	b.n	8010cec <acc_confprogram_live_patch+0x20>
 8010d40:	eb08 0100 	add.w	r1, r8, r0
 8010d44:	f3c0 5344 	ubfx	r3, r0, #21, #5
 8010d48:	f3c0 4204 	ubfx	r2, r0, #16, #5
 8010d4c:	e9cd 9a00 	strd	r9, sl, [sp]
 8010d50:	b289      	uxth	r1, r1
 8010d52:	4638      	mov	r0, r7
 8010d54:	f7ff fec2 	bl	8010adc <acc_confprogram_modify_bin_sensor>
 8010d58:	8873      	ldrh	r3, [r6, #2]
 8010d5a:	42ab      	cmp	r3, r5
 8010d5c:	d9d9      	bls.n	8010d12 <acc_confprogram_live_patch+0x46>
 8010d5e:	2800      	cmp	r0, #0
 8010d60:	d1ec      	bne.n	8010d3c <acc_confprogram_live_patch+0x70>
 8010d62:	b003      	add	sp, #12
 8010d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d68:	eb08 0100 	add.w	r1, r8, r0
 8010d6c:	b289      	uxth	r1, r1
 8010d6e:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
 8010d72:	f022 020f 	bic.w	r2, r2, #15
 8010d76:	f1b9 0f00 	cmp.w	r9, #0
 8010d7a:	d0d7      	beq.n	8010d2c <acc_confprogram_live_patch+0x60>
 8010d7c:	4638      	mov	r0, r7
 8010d7e:	47d0      	blx	sl
 8010d80:	8873      	ldrh	r3, [r6, #2]
 8010d82:	42ab      	cmp	r3, r5
 8010d84:	d8da      	bhi.n	8010d3c <acc_confprogram_live_patch+0x70>
 8010d86:	2001      	movs	r0, #1
 8010d88:	b003      	add	sp, #12
 8010d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d8e:	bf00      	nop
 8010d90:	20000bd8 	.word	0x20000bd8
 8010d94:	08016fb8 	.word	0x08016fb8
 8010d98:	08016f50 	.word	0x08016f50

08010d9c <acc_confprogram_copy>:
 8010d9c:	b152      	cbz	r2, 8010db4 <acc_confprogram_copy+0x18>
 8010d9e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8010da2:	3804      	subs	r0, #4
 8010da4:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8010da8:	804b      	strh	r3, [r1, #2]
 8010daa:	0c1b      	lsrs	r3, r3, #16
 8010dac:	800b      	strh	r3, [r1, #0]
 8010dae:	3104      	adds	r1, #4
 8010db0:	4291      	cmp	r1, r2
 8010db2:	d1f7      	bne.n	8010da4 <acc_confprogram_copy+0x8>
 8010db4:	4770      	bx	lr
 8010db6:	bf00      	nop

08010db8 <acc_confprogram_get_parameter_patch_range>:
 8010db8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010dbc:	b470      	push	{r4, r5, r6}
 8010dbe:	884e      	ldrh	r6, [r1, #2]
 8010dc0:	b1c6      	cbz	r6, 8010df4 <acc_confprogram_get_parameter_patch_range+0x3c>
 8010dc2:	6848      	ldr	r0, [r1, #4]
 8010dc4:	2500      	movs	r5, #0
 8010dc6:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8010dca:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 8010dce:	f850 1b04 	ldr.w	r1, [r0], #4
 8010dd2:	b289      	uxth	r1, r1
 8010dd4:	428c      	cmp	r4, r1
 8010dd6:	bf28      	it	cs
 8010dd8:	460c      	movcs	r4, r1
 8010dda:	428d      	cmp	r5, r1
 8010ddc:	bf38      	it	cc
 8010dde:	460d      	movcc	r5, r1
 8010de0:	4286      	cmp	r6, r0
 8010de2:	d1f4      	bne.n	8010dce <acc_confprogram_get_parameter_patch_range+0x16>
 8010de4:	0064      	lsls	r4, r4, #1
 8010de6:	006d      	lsls	r5, r5, #1
 8010de8:	b2a4      	uxth	r4, r4
 8010dea:	b2ad      	uxth	r5, r5
 8010dec:	8014      	strh	r4, [r2, #0]
 8010dee:	801d      	strh	r5, [r3, #0]
 8010df0:	bc70      	pop	{r4, r5, r6}
 8010df2:	4770      	bx	lr
 8010df4:	4635      	mov	r5, r6
 8010df6:	f64f 74fe 	movw	r4, #65534	@ 0xfffe
 8010dfa:	8014      	strh	r4, [r2, #0]
 8010dfc:	801d      	strh	r5, [r3, #0]
 8010dfe:	bc70      	pop	{r4, r5, r6}
 8010e00:	4770      	bx	lr
 8010e02:	bf00      	nop

08010e04 <acc_element_sizeof>:
 8010e04:	3801      	subs	r0, #1
 8010e06:	b2c0      	uxtb	r0, r0
 8010e08:	2807      	cmp	r0, #7
 8010e0a:	bf9a      	itte	ls
 8010e0c:	4b02      	ldrls	r3, [pc, #8]	@ (8010e18 <acc_element_sizeof+0x14>)
 8010e0e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8010e12:	2000      	movhi	r0, #0
 8010e14:	4770      	bx	lr
 8010e16:	bf00      	nop
 8010e18:	08016fe0 	.word	0x08016fe0

08010e1c <acc_element_connect>:
 8010e1c:	6001      	str	r1, [r0, #0]
 8010e1e:	4770      	bx	lr

08010e20 <acc_probes_execute_struct>:
 8010e20:	b530      	push	{r4, r5, lr}
 8010e22:	4c0a      	ldr	r4, [pc, #40]	@ (8010e4c <acc_probes_execute_struct+0x2c>)
 8010e24:	eb04 1400 	add.w	r4, r4, r0, lsl #4
 8010e28:	b085      	sub	sp, #20
 8010e2a:	6865      	ldr	r5, [r4, #4]
 8010e2c:	f88d 0004 	strb.w	r0, [sp, #4]
 8010e30:	2007      	movs	r0, #7
 8010e32:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8010e36:	b135      	cbz	r5, 8010e46 <acc_probes_execute_struct+0x26>
 8010e38:	4611      	mov	r1, r2
 8010e3a:	a801      	add	r0, sp, #4
 8010e3c:	461a      	mov	r2, r3
 8010e3e:	68e3      	ldr	r3, [r4, #12]
 8010e40:	47a8      	blx	r5
 8010e42:	b005      	add	sp, #20
 8010e44:	bd30      	pop	{r4, r5, pc}
 8010e46:	2001      	movs	r0, #1
 8010e48:	b005      	add	sp, #20
 8010e4a:	bd30      	pop	{r4, r5, pc}
 8010e4c:	2000004c 	.word	0x2000004c

08010e50 <acc_sensor_reg_read>:
 8010e50:	b530      	push	{r4, r5, lr}
 8010e52:	b083      	sub	sp, #12
 8010e54:	f441 5140 	orr.w	r1, r1, #12288	@ 0x3000
 8010e58:	4614      	mov	r4, r2
 8010e5a:	2500      	movs	r5, #0
 8010e5c:	f8ad 1000 	strh.w	r1, [sp]
 8010e60:	2301      	movs	r3, #1
 8010e62:	2203      	movs	r2, #3
 8010e64:	4669      	mov	r1, sp
 8010e66:	f8ad 5002 	strh.w	r5, [sp, #2]
 8010e6a:	f8ad 5004 	strh.w	r5, [sp, #4]
 8010e6e:	f7fd f96f 	bl	800e150 <acc_rss_integration_sensor_device_transfer>
 8010e72:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010e76:	8023      	strh	r3, [r4, #0]
 8010e78:	b003      	add	sp, #12
 8010e7a:	bd30      	pop	{r4, r5, pc}

08010e7c <acc_sensor_reg_write>:
 8010e7c:	b530      	push	{r4, r5, lr}
 8010e7e:	b083      	sub	sp, #12
 8010e80:	f441 5480 	orr.w	r4, r1, #4096	@ 0x1000
 8010e84:	4615      	mov	r5, r2
 8010e86:	2300      	movs	r3, #0
 8010e88:	2202      	movs	r2, #2
 8010e8a:	a901      	add	r1, sp, #4
 8010e8c:	f8ad 4004 	strh.w	r4, [sp, #4]
 8010e90:	f8ad 5006 	strh.w	r5, [sp, #6]
 8010e94:	f7fd f95c 	bl	800e150 <acc_rss_integration_sensor_device_transfer>
 8010e98:	b003      	add	sp, #12
 8010e9a:	bd30      	pop	{r4, r5, pc}

08010e9c <acc_sensor_reg_field_write>:
 8010e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ea0:	b082      	sub	sp, #8
 8010ea2:	461d      	mov	r5, r3
 8010ea4:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8010ea8:	f8bd 4028 	ldrh.w	r4, [sp, #40]	@ 0x28
 8010eac:	f8ad 3000 	strh.w	r3, [sp]
 8010eb0:	2700      	movs	r7, #0
 8010eb2:	468a      	mov	sl, r1
 8010eb4:	4691      	mov	r9, r2
 8010eb6:	4669      	mov	r1, sp
 8010eb8:	2301      	movs	r3, #1
 8010eba:	2203      	movs	r2, #3
 8010ebc:	4680      	mov	r8, r0
 8010ebe:	f8ad 7002 	strh.w	r7, [sp, #2]
 8010ec2:	f8ad 7004 	strh.w	r7, [sp, #4]
 8010ec6:	f7fd f943 	bl	800e150 <acc_rss_integration_sensor_device_transfer>
 8010eca:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 8010ece:	fa04 f10a 	lsl.w	r1, r4, sl
 8010ed2:	4071      	eors	r1, r6
 8010ed4:	ea01 0409 	and.w	r4, r1, r9
 8010ed8:	f445 5580 	orr.w	r5, r5, #4096	@ 0x1000
 8010edc:	4640      	mov	r0, r8
 8010ede:	463b      	mov	r3, r7
 8010ee0:	4669      	mov	r1, sp
 8010ee2:	4074      	eors	r4, r6
 8010ee4:	2202      	movs	r2, #2
 8010ee6:	f8ad 5000 	strh.w	r5, [sp]
 8010eea:	f8ad 4002 	strh.w	r4, [sp, #2]
 8010eee:	f7fd f92f 	bl	800e150 <acc_rss_integration_sensor_device_transfer>
 8010ef2:	b002      	add	sp, #8
 8010ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010ef8 <acc_sensor_conf_read_instr>:
 8010ef8:	b530      	push	{r4, r5, lr}
 8010efa:	b085      	sub	sp, #20
 8010efc:	2401      	movs	r4, #1
 8010efe:	f441 4120 	orr.w	r1, r1, #40960	@ 0xa000
 8010f02:	4623      	mov	r3, r4
 8010f04:	2500      	movs	r5, #0
 8010f06:	f8ad 1004 	strh.w	r1, [sp, #4]
 8010f0a:	2205      	movs	r2, #5
 8010f0c:	a901      	add	r1, sp, #4
 8010f0e:	f8ad 4006 	strh.w	r4, [sp, #6]
 8010f12:	f8ad 5008 	strh.w	r5, [sp, #8]
 8010f16:	f8cd 500a 	str.w	r5, [sp, #10]
 8010f1a:	f7fd f919 	bl	800e150 <acc_rss_integration_sensor_device_transfer>
 8010f1e:	f10d 000a 	add.w	r0, sp, #10
 8010f22:	4622      	mov	r2, r4
 8010f24:	4669      	mov	r1, sp
 8010f26:	f000 f92f 	bl	8011188 <acc_utils_transfer_buffer_to_uint32>
 8010f2a:	9800      	ldr	r0, [sp, #0]
 8010f2c:	b005      	add	sp, #20
 8010f2e:	bd30      	pop	{r4, r5, pc}

08010f30 <acc_cpd_pll_divisors_calculate>:
 8010f30:	edd0 7a00 	vldr	s15, [r0]
 8010f34:	ed9f 6a61 	vldr	s12, [pc, #388]	@ 80110bc <acc_cpd_pll_divisors_calculate+0x18c>
 8010f38:	eddf 6a61 	vldr	s13, [pc, #388]	@ 80110c0 <acc_cpd_pll_divisors_calculate+0x190>
 8010f3c:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8010f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f42:	4606      	mov	r6, r0
 8010f44:	b083      	sub	sp, #12
 8010f46:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8010f4a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010f4e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010f52:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8010f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f5a:	ee17 3a10 	vmov	r3, s14
 8010f5e:	b29c      	uxth	r4, r3
 8010f60:	dc06      	bgt.n	8010f70 <acc_cpd_pll_divisors_calculate+0x40>
 8010f62:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80110c4 <acc_cpd_pll_divisors_calculate+0x194>
 8010f66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f6e:	d571      	bpl.n	8011054 <acc_cpd_pll_divisors_calculate+0x124>
 8010f70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f78:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80110c8 <acc_cpd_pll_divisors_calculate+0x198>
 8010f7c:	bf4c      	ite	mi
 8010f7e:	4b53      	ldrmi	r3, [pc, #332]	@ (80110cc <acc_cpd_pll_divisors_calculate+0x19c>)
 8010f80:	4b53      	ldrpl	r3, [pc, #332]	@ (80110d0 <acc_cpd_pll_divisors_calculate+0x1a0>)
 8010f82:	ed9f 6a51 	vldr	s12, [pc, #324]	@ 80110c8 <acc_cpd_pll_divisors_calculate+0x198>
 8010f86:	eddf 6a53 	vldr	s13, [pc, #332]	@ 80110d4 <acc_cpd_pll_divisors_calculate+0x1a4>
 8010f8a:	4d53      	ldr	r5, [pc, #332]	@ (80110d8 <acc_cpd_pll_divisors_calculate+0x1a8>)
 8010f8c:	4953      	ldr	r1, [pc, #332]	@ (80110dc <acc_cpd_pll_divisors_calculate+0x1ac>)
 8010f8e:	692f      	ldr	r7, [r5, #16]
 8010f90:	bf48      	it	mi
 8010f92:	eef1 7a67 	vnegmi.f32	s15, s15
 8010f96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010f9a:	2000      	movs	r0, #0
 8010f9c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8010fa0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fa8:	ee17 2a10 	vmov	r2, s14
 8010fac:	bf4c      	ite	mi
 8010fae:	eeb1 7a67 	vnegmi.f32	s14, s15
 8010fb2:	eeb0 7a67 	vmovpl.f32	s14, s15
 8010fb6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010fba:	9200      	str	r2, [sp, #0]
 8010fbc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8010fc0:	4a47      	ldr	r2, [pc, #284]	@ (80110e0 <acc_cpd_pll_divisors_calculate+0x1b0>)
 8010fc2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8010fc6:	3c10      	subs	r4, #16
 8010fc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010fcc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010fd4:	edcd 7a01 	vstr	s15, [sp, #4]
 8010fd8:	47b8      	blx	r7
 8010fda:	2cef      	cmp	r4, #239	@ 0xef
 8010fdc:	d937      	bls.n	801104e <acc_cpd_pll_divisors_calculate+0x11e>
 8010fde:	edd6 7a00 	vldr	s15, [r6]
 8010fe2:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80110c8 <acc_cpd_pll_divisors_calculate+0x198>
 8010fe6:	ed9f 6a38 	vldr	s12, [pc, #224]	@ 80110c8 <acc_cpd_pll_divisors_calculate+0x198>
 8010fea:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 80110d4 <acc_cpd_pll_divisors_calculate+0x1a4>
 8010fee:	692c      	ldr	r4, [r5, #16]
 8010ff0:	493a      	ldr	r1, [pc, #232]	@ (80110dc <acc_cpd_pll_divisors_calculate+0x1ac>)
 8010ff2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ffa:	bf48      	it	mi
 8010ffc:	eef1 7a67 	vnegmi.f32	s15, s15
 8011000:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011004:	bf4c      	ite	mi
 8011006:	4b31      	ldrmi	r3, [pc, #196]	@ (80110cc <acc_cpd_pll_divisors_calculate+0x19c>)
 8011008:	4b31      	ldrpl	r3, [pc, #196]	@ (80110d0 <acc_cpd_pll_divisors_calculate+0x1a0>)
 801100a:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 801100e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011016:	ee17 2a10 	vmov	r2, s14
 801101a:	bf4c      	ite	mi
 801101c:	eeb1 7a67 	vnegmi.f32	s14, s15
 8011020:	eeb0 7a67 	vmovpl.f32	s14, s15
 8011024:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011028:	9200      	str	r2, [sp, #0]
 801102a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 801102e:	4a2c      	ldr	r2, [pc, #176]	@ (80110e0 <acc_cpd_pll_divisors_calculate+0x1b0>)
 8011030:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8011034:	2000      	movs	r0, #0
 8011036:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801103a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801103e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011042:	edcd 7a01 	vstr	s15, [sp, #4]
 8011046:	47a0      	blx	r4
 8011048:	2000      	movs	r0, #0
 801104a:	b003      	add	sp, #12
 801104c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801104e:	2000      	movs	r0, #0
 8011050:	b003      	add	sp, #12
 8011052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011054:	f1a4 0310 	sub.w	r3, r4, #16
 8011058:	b29b      	uxth	r3, r3
 801105a:	2bef      	cmp	r3, #239	@ 0xef
 801105c:	d901      	bls.n	8011062 <acc_cpd_pll_divisors_calculate+0x132>
 801105e:	4d1e      	ldr	r5, [pc, #120]	@ (80110d8 <acc_cpd_pll_divisors_calculate+0x1a8>)
 8011060:	e7bf      	b.n	8010fe2 <acc_cpd_pll_divisors_calculate+0xb2>
 8011062:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011066:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80110e4 <acc_cpd_pll_divisors_calculate+0x1b4>
 801106a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80110e8 <acc_cpd_pll_divisors_calculate+0x1b8>
 801106e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011072:	2c3f      	cmp	r4, #63	@ 0x3f
 8011074:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801107c:	ee17 2a90 	vmov	r2, s15
 8011080:	810a      	strh	r2, [r1, #8]
 8011082:	d912      	bls.n	80110aa <acc_cpd_pll_divisors_calculate+0x17a>
 8011084:	2cbf      	cmp	r4, #191	@ 0xbf
 8011086:	f04f 0301 	mov.w	r3, #1
 801108a:	bf98      	it	ls
 801108c:	f1a4 0240 	subls.w	r2, r4, #64	@ 0x40
 8011090:	804b      	strh	r3, [r1, #2]
 8011092:	bf8c      	ite	hi
 8011094:	08e2      	lsrhi	r2, r4, #3
 8011096:	f3c2 02cf 	ubfxls	r2, r2, #3, #16
 801109a:	f004 0307 	and.w	r3, r4, #7
 801109e:	808a      	strh	r2, [r1, #4]
 80110a0:	80cb      	strh	r3, [r1, #6]
 80110a2:	2001      	movs	r0, #1
 80110a4:	800c      	strh	r4, [r1, #0]
 80110a6:	b003      	add	sp, #12
 80110a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110aa:	2200      	movs	r2, #0
 80110ac:	2c2f      	cmp	r4, #47	@ 0x2f
 80110ae:	bf88      	it	hi
 80110b0:	4623      	movhi	r3, r4
 80110b2:	808b      	strh	r3, [r1, #4]
 80110b4:	804a      	strh	r2, [r1, #2]
 80110b6:	80ca      	strh	r2, [r1, #6]
 80110b8:	e7f3      	b.n	80110a2 <acc_cpd_pll_divisors_calculate+0x172>
 80110ba:	bf00      	nop
 80110bc:	4f1502f9 	.word	0x4f1502f9
 80110c0:	4c989680 	.word	0x4c989680
 80110c4:	4b989680 	.word	0x4b989680
 80110c8:	350637bd 	.word	0x350637bd
 80110cc:	08016a3c 	.word	0x08016a3c
 80110d0:	08016634 	.word	0x08016634
 80110d4:	49742400 	.word	0x49742400
 80110d8:	20000bd8 	.word	0x20000bd8
 80110dc:	0801702c 	.word	0x0801702c
 80110e0:	08017000 	.word	0x08017000
 80110e4:	b55b38e8 	.word	0xb55b38e8
 80110e8:	427c0000 	.word	0x427c0000

080110ec <acc_cpd_pll_divisors_ref_divisor>:
 80110ec:	eddf 7a02 	vldr	s15, [pc, #8]	@ 80110f8 <acc_cpd_pll_divisors_ref_divisor+0xc>
 80110f0:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80110f4:	f003 bd76 	b.w	8014be4 <roundf>
 80110f8:	4f1502f9 	.word	0x4f1502f9

080110fc <acc_dll_calculate_area_settings>:
 80110fc:	0080      	lsls	r0, r0, #2
 80110fe:	b280      	uxth	r0, r0
 8011100:	eb00 0351 	add.w	r3, r0, r1, lsr #1
 8011104:	b29b      	uxth	r3, r3
 8011106:	428b      	cmp	r3, r1
 8011108:	8010      	strh	r0, [r2, #0]
 801110a:	8053      	strh	r3, [r2, #2]
 801110c:	d20c      	bcs.n	8011128 <acc_dll_calculate_area_settings+0x2c>
 801110e:	2301      	movs	r3, #1
 8011110:	2100      	movs	r1, #0
 8011112:	2003      	movs	r0, #3
 8011114:	8093      	strh	r3, [r2, #4]
 8011116:	8153      	strh	r3, [r2, #10]
 8011118:	8193      	strh	r3, [r2, #12]
 801111a:	8213      	strh	r3, [r2, #16]
 801111c:	80d1      	strh	r1, [r2, #6]
 801111e:	8251      	strh	r1, [r2, #18]
 8011120:	8291      	strh	r1, [r2, #20]
 8011122:	8110      	strh	r0, [r2, #8]
 8011124:	81d0      	strh	r0, [r2, #14]
 8011126:	4770      	bx	lr
 8011128:	b430      	push	{r4, r5}
 801112a:	fbb3 f4f1 	udiv	r4, r3, r1
 801112e:	2500      	movs	r5, #0
 8011130:	fb01 3114 	mls	r1, r1, r4, r3
 8011134:	2401      	movs	r4, #1
 8011136:	2303      	movs	r3, #3
 8011138:	8094      	strh	r4, [r2, #4]
 801113a:	80d4      	strh	r4, [r2, #6]
 801113c:	8154      	strh	r4, [r2, #10]
 801113e:	8214      	strh	r4, [r2, #16]
 8011140:	8254      	strh	r4, [r2, #18]
 8011142:	8195      	strh	r5, [r2, #12]
 8011144:	81d5      	strh	r5, [r2, #14]
 8011146:	8295      	strh	r5, [r2, #20]
 8011148:	8050      	strh	r0, [r2, #2]
 801114a:	bc30      	pop	{r4, r5}
 801114c:	8011      	strh	r1, [r2, #0]
 801114e:	8113      	strh	r3, [r2, #8]
 8011150:	4770      	bx	lr
 8011152:	bf00      	nop

08011154 <acc_utils_swap16_array>:
 8011154:	b141      	cbz	r1, 8011168 <acc_utils_swap16_array+0x14>
 8011156:	3802      	subs	r0, #2
 8011158:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801115c:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8011160:	ba5b      	rev16	r3, r3
 8011162:	4288      	cmp	r0, r1
 8011164:	8003      	strh	r3, [r0, #0]
 8011166:	d1f9      	bne.n	801115c <acc_utils_swap16_array+0x8>
 8011168:	4770      	bx	lr
 801116a:	bf00      	nop

0801116c <acc_utils_uint32_to_transfer_buffer>:
 801116c:	b152      	cbz	r2, 8011184 <acc_utils_uint32_to_transfer_buffer+0x18>
 801116e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8011172:	3804      	subs	r0, #4
 8011174:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8011178:	804b      	strh	r3, [r1, #2]
 801117a:	0c1b      	lsrs	r3, r3, #16
 801117c:	800b      	strh	r3, [r1, #0]
 801117e:	3104      	adds	r1, #4
 8011180:	4291      	cmp	r1, r2
 8011182:	d1f7      	bne.n	8011174 <acc_utils_uint32_to_transfer_buffer+0x8>
 8011184:	4770      	bx	lr
 8011186:	bf00      	nop

08011188 <acc_utils_transfer_buffer_to_uint32>:
 8011188:	b17a      	cbz	r2, 80111aa <acc_utils_transfer_buffer_to_uint32+0x22>
 801118a:	b410      	push	{r4}
 801118c:	3904      	subs	r1, #4
 801118e:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8011192:	8802      	ldrh	r2, [r0, #0]
 8011194:	8843      	ldrh	r3, [r0, #2]
 8011196:	3004      	adds	r0, #4
 8011198:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801119c:	4284      	cmp	r4, r0
 801119e:	f841 3f04 	str.w	r3, [r1, #4]!
 80111a2:	d1f6      	bne.n	8011192 <acc_utils_transfer_buffer_to_uint32+0xa>
 80111a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111a8:	4770      	bx	lr
 80111aa:	4770      	bx	lr

080111ac <acc_alg_temp>:
 80111ac:	f240 13e5 	movw	r3, #485	@ 0x1e5
 80111b0:	fb03 f000 	mul.w	r0, r3, r0
 80111b4:	0c00      	lsrs	r0, r0, #16
 80111b6:	f5a0 7089 	sub.w	r0, r0, #274	@ 0x112
 80111ba:	4770      	bx	lr

080111bc <acc_diagnostic_log_set_scope>:
 80111bc:	4b02      	ldr	r3, [pc, #8]	@ (80111c8 <acc_diagnostic_log_set_scope+0xc>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	b10b      	cbz	r3, 80111c6 <acc_diagnostic_log_set_scope+0xa>
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	4718      	bx	r3
 80111c6:	4770      	bx	lr
 80111c8:	20000a88 	.word	0x20000a88

080111cc <acc_diagnostic_log_array>:
 80111cc:	4b02      	ldr	r3, [pc, #8]	@ (80111d8 <acc_diagnostic_log_array+0xc>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	b10b      	cbz	r3, 80111d6 <acc_diagnostic_log_array+0xa>
 80111d2:	68db      	ldr	r3, [r3, #12]
 80111d4:	4718      	bx	r3
 80111d6:	4770      	bx	lr
 80111d8:	20000a88 	.word	0x20000a88

080111dc <acc_diagnostic_log_scalar>:
 80111dc:	4b02      	ldr	r3, [pc, #8]	@ (80111e8 <acc_diagnostic_log_scalar+0xc>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	b10b      	cbz	r3, 80111e6 <acc_diagnostic_log_scalar+0xa>
 80111e2:	695b      	ldr	r3, [r3, #20]
 80111e4:	4718      	bx	r3
 80111e6:	4770      	bx	lr
 80111e8:	20000a88 	.word	0x20000a88

080111ec <acc_diagnostic_log_data_u16>:
 80111ec:	4b02      	ldr	r3, [pc, #8]	@ (80111f8 <acc_diagnostic_log_data_u16+0xc>)
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	b10b      	cbz	r3, 80111f6 <acc_diagnostic_log_data_u16+0xa>
 80111f2:	6a1b      	ldr	r3, [r3, #32]
 80111f4:	4718      	bx	r3
 80111f6:	4770      	bx	lr
 80111f8:	20000a88 	.word	0x20000a88

080111fc <acc_diagnostic_log_data_i16>:
 80111fc:	4b02      	ldr	r3, [pc, #8]	@ (8011208 <acc_diagnostic_log_data_i16+0xc>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	b10b      	cbz	r3, 8011206 <acc_diagnostic_log_data_i16+0xa>
 8011202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011204:	4718      	bx	r3
 8011206:	4770      	bx	lr
 8011208:	20000a88 	.word	0x20000a88

0801120c <acc_image_a121_r1a_cal_session_get>:
 801120c:	4800      	ldr	r0, [pc, #0]	@ (8011210 <acc_image_a121_r1a_cal_session_get+0x4>)
 801120e:	4770      	bx	lr
 8011210:	08017040 	.word	0x08017040

08011214 <acc_image_a121_r1a_cal_session_param_table_get>:
 8011214:	4800      	ldr	r0, [pc, #0]	@ (8011218 <acc_image_a121_r1a_cal_session_param_table_get+0x4>)
 8011216:	4770      	bx	lr
 8011218:	080186d4 	.word	0x080186d4

0801121c <acc_alg_comp_iq_imb>:
 801121c:	b430      	push	{r4, r5}
 801121e:	8814      	ldrh	r4, [r2, #0]
 8011220:	9a02      	ldr	r2, [sp, #8]
 8011222:	f004 051f 	and.w	r5, r4, #31
 8011226:	3530      	adds	r5, #48	@ 0x30
 8011228:	fb00 f005 	mul.w	r0, r0, r5
 801122c:	0aa5      	lsrs	r5, r4, #10
 801122e:	3d20      	subs	r5, #32
 8011230:	f3c4 1444 	ubfx	r4, r4, #5, #5
 8011234:	fb01 f505 	mul.w	r5, r1, r5
 8011238:	2800      	cmp	r0, #0
 801123a:	f104 0430 	add.w	r4, r4, #48	@ 0x30
 801123e:	fb01 f104 	mul.w	r1, r1, r4
 8011242:	bfb8      	it	lt
 8011244:	303f      	addlt	r0, #63	@ 0x3f
 8011246:	2d00      	cmp	r5, #0
 8011248:	bfb8      	it	lt
 801124a:	351f      	addlt	r5, #31
 801124c:	2900      	cmp	r1, #0
 801124e:	ea4f 10a0 	mov.w	r0, r0, asr #6
 8011252:	bfb8      	it	lt
 8011254:	313f      	addlt	r1, #63	@ 0x3f
 8011256:	eb00 1065 	add.w	r0, r0, r5, asr #5
 801125a:	1189      	asrs	r1, r1, #6
 801125c:	8018      	strh	r0, [r3, #0]
 801125e:	bc30      	pop	{r4, r5}
 8011260:	8011      	strh	r1, [r2, #0]
 8011262:	4770      	bx	lr

08011264 <acc_alg_iq_imb_comp_to_fix_point>:
 8011264:	eef6 7a08 	vmov.f32	s15, #104	@ 0x3f400000  0.750
 8011268:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8011344 <acc_alg_iq_imb_comp_to_fix_point+0xe0>
 801126c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8011348 <acc_alg_iq_imb_comp_to_fix_point+0xe4>
 8011270:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011274:	ee31 1a67 	vsub.f32	s2, s2, s15
 8011278:	ee20 0a07 	vmul.f32	s0, s0, s14
 801127c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011280:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8011284:	ee70 0a86 	vadd.f32	s1, s1, s12
 8011288:	ee30 0a27 	vadd.f32	s0, s0, s15
 801128c:	ee21 1a07 	vmul.f32	s2, s2, s14
 8011290:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 8011294:	ee60 0aa6 	vmul.f32	s1, s1, s13
 8011298:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801129c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112a0:	ee31 1a27 	vadd.f32	s2, s2, s15
 80112a4:	ee70 0aa7 	vadd.f32	s1, s1, s15
 80112a8:	dc22      	bgt.n	80112f0 <acc_alg_iq_imb_comp_to_fix_point+0x8c>
 80112aa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80112ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112b2:	bf48      	it	mi
 80112b4:	2300      	movmi	r3, #0
 80112b6:	d537      	bpl.n	8011328 <acc_alg_iq_imb_comp_to_fix_point+0xc4>
 80112b8:	eddf 7a24 	vldr	s15, [pc, #144]	@ 801134c <acc_alg_iq_imb_comp_to_fix_point+0xe8>
 80112bc:	eef4 0ae7 	vcmpe.f32	s1, s15
 80112c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112c4:	dd1d      	ble.n	8011302 <acc_alg_iq_imb_comp_to_fix_point+0x9e>
 80112c6:	ea6f 5383 	mvn.w	r3, r3, lsl #22
 80112ca:	ea6f 5393 	mvn.w	r3, r3, lsr #22
 80112ce:	eef3 7a0f 	vmov.f32	s15, #63	@ 0x41f80000  31.0
 80112d2:	eeb4 1ae7 	vcmpe.f32	s2, s15
 80112d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112da:	dc20      	bgt.n	801131e <acc_alg_iq_imb_comp_to_fix_point+0xba>
 80112dc:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 80112e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112e4:	bf48      	it	mi
 80112e6:	2200      	movmi	r2, #0
 80112e8:	d524      	bpl.n	8011334 <acc_alg_iq_imb_comp_to_fix_point+0xd0>
 80112ea:	4313      	orrs	r3, r2
 80112ec:	8003      	strh	r3, [r0, #0]
 80112ee:	4770      	bx	lr
 80112f0:	eddf 7a16 	vldr	s15, [pc, #88]	@ 801134c <acc_alg_iq_imb_comp_to_fix_point+0xe8>
 80112f4:	eef4 0ae7 	vcmpe.f32	s1, s15
 80112f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112fc:	f04f 031f 	mov.w	r3, #31
 8011300:	dce1      	bgt.n	80112c6 <acc_alg_iq_imb_comp_to_fix_point+0x62>
 8011302:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8011306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801130a:	d4e0      	bmi.n	80112ce <acc_alg_iq_imb_comp_to_fix_point+0x6a>
 801130c:	eefc 0ae0 	vcvt.u32.f32	s1, s1
 8011310:	ee10 2a90 	vmov	r2, s1
 8011314:	b292      	uxth	r2, r2
 8011316:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 801131a:	b21b      	sxth	r3, r3
 801131c:	e7d7      	b.n	80112ce <acc_alg_iq_imb_comp_to_fix_point+0x6a>
 801131e:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8011322:	4313      	orrs	r3, r2
 8011324:	8003      	strh	r3, [r0, #0]
 8011326:	4770      	bx	lr
 8011328:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801132c:	ee10 3a10 	vmov	r3, s0
 8011330:	b21b      	sxth	r3, r3
 8011332:	e7c1      	b.n	80112b8 <acc_alg_iq_imb_comp_to_fix_point+0x54>
 8011334:	eefc 7ac1 	vcvt.u32.f32	s15, s2
 8011338:	ee17 2a90 	vmov	r2, s15
 801133c:	f342 020a 	sbfx	r2, r2, #0, #11
 8011340:	0152      	lsls	r2, r2, #5
 8011342:	e7d2      	b.n	80112ea <acc_alg_iq_imb_comp_to_fix_point+0x86>
 8011344:	42800000 	.word	0x42800000
 8011348:	42000000 	.word	0x42000000
 801134c:	427c0000 	.word	0x427c0000

08011350 <element_frame_reset>:
 8011350:	6800      	ldr	r0, [r0, #0]
 8011352:	68c3      	ldr	r3, [r0, #12]
 8011354:	4718      	bx	r3
 8011356:	bf00      	nop

08011358 <element_frame_callback>:
 8011358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801135a:	6995      	ldr	r5, [r2, #24]
 801135c:	782b      	ldrb	r3, [r5, #0]
 801135e:	f8b5 e002 	ldrh.w	lr, [r5, #2]
 8011362:	4614      	mov	r4, r2
 8011364:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8011368:	460f      	mov	r7, r1
 801136a:	f8b3 6044 	ldrh.w	r6, [r3, #68]	@ 0x44
 801136e:	6963      	ldr	r3, [r4, #20]
 8011370:	4601      	mov	r1, r0
 8011372:	0072      	lsls	r2, r6, #1
 8011374:	eb03 004e 	add.w	r0, r3, lr, lsl #1
 8011378:	f001 fbf2 	bl	8012b60 <memmove>
 801137c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 801137e:	8869      	ldrh	r1, [r5, #2]
 8011380:	7813      	ldrb	r3, [r2, #0]
 8011382:	440e      	add	r6, r1
 8011384:	806e      	strh	r6, [r5, #2]
 8011386:	b903      	cbnz	r3, 801138a <element_frame_callback+0x32>
 8011388:	793b      	ldrb	r3, [r7, #4]
 801138a:	7013      	strb	r3, [r2, #0]
 801138c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801138e:	bf00      	nop

08011390 <element_frame_event>:
 8011390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011394:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8011396:	f8d0 8018 	ldr.w	r8, [r0, #24]
 801139a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801139e:	2400      	movs	r4, #0
 80113a0:	f8a8 4002 	strh.w	r4, [r8, #2]
 80113a4:	4605      	mov	r5, r0
 80113a6:	701c      	strb	r4, [r3, #0]
 80113a8:	f100 074c 	add.w	r7, r0, #76	@ 0x4c
 80113ac:	f857 6b04 	ldr.w	r6, [r7], #4
 80113b0:	4649      	mov	r1, r9
 80113b2:	4630      	mov	r0, r6
 80113b4:	b136      	cbz	r6, 80113c4 <element_frame_event+0x34>
 80113b6:	f000 fb11 	bl	80119dc <acc_pipeline_subsweep_prepare_memory>
 80113ba:	f888 4000 	strb.w	r4, [r8]
 80113be:	4630      	mov	r0, r6
 80113c0:	f000 fb24 	bl	8011a0c <acc_pipeline_subsweep_produce>
 80113c4:	3401      	adds	r4, #1
 80113c6:	b2e4      	uxtb	r4, r4
 80113c8:	2c04      	cmp	r4, #4
 80113ca:	d1ef      	bne.n	80113ac <element_frame_event+0x1c>
 80113cc:	6828      	ldr	r0, [r5, #0]
 80113ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113d2:	6843      	ldr	r3, [r0, #4]
 80113d4:	4718      	bx	r3
 80113d6:	bf00      	nop

080113d8 <element_frame_validate>:
 80113d8:	b570      	push	{r4, r5, r6, lr}
 80113da:	4604      	mov	r4, r0
 80113dc:	6980      	ldr	r0, [r0, #24]
 80113de:	b178      	cbz	r0, 8011400 <element_frame_validate+0x28>
 80113e0:	69e3      	ldr	r3, [r4, #28]
 80113e2:	b143      	cbz	r3, 80113f6 <element_frame_validate+0x1e>
 80113e4:	f7fc ff2e 	bl	800e244 <acc_rss_integration_log_level>
 80113e8:	b128      	cbz	r0, 80113f6 <element_frame_validate+0x1e>
 80113ea:	4b0e      	ldr	r3, [pc, #56]	@ (8011424 <element_frame_validate+0x4c>)
 80113ec:	4a0e      	ldr	r2, [pc, #56]	@ (8011428 <element_frame_validate+0x50>)
 80113ee:	691b      	ldr	r3, [r3, #16]
 80113f0:	490e      	ldr	r1, [pc, #56]	@ (801142c <element_frame_validate+0x54>)
 80113f2:	2001      	movs	r0, #1
 80113f4:	4798      	blx	r3
 80113f6:	6820      	ldr	r0, [r4, #0]
 80113f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80113fc:	6883      	ldr	r3, [r0, #8]
 80113fe:	4718      	bx	r3
 8011400:	4d08      	ldr	r5, [pc, #32]	@ (8011424 <element_frame_validate+0x4c>)
 8011402:	4a0b      	ldr	r2, [pc, #44]	@ (8011430 <element_frame_validate+0x58>)
 8011404:	692b      	ldr	r3, [r5, #16]
 8011406:	4909      	ldr	r1, [pc, #36]	@ (801142c <element_frame_validate+0x54>)
 8011408:	4798      	blx	r3
 801140a:	69e3      	ldr	r3, [r4, #28]
 801140c:	b13b      	cbz	r3, 801141e <element_frame_validate+0x46>
 801140e:	f7fc ff19 	bl	800e244 <acc_rss_integration_log_level>
 8011412:	b120      	cbz	r0, 801141e <element_frame_validate+0x46>
 8011414:	692b      	ldr	r3, [r5, #16]
 8011416:	4a04      	ldr	r2, [pc, #16]	@ (8011428 <element_frame_validate+0x50>)
 8011418:	4904      	ldr	r1, [pc, #16]	@ (801142c <element_frame_validate+0x54>)
 801141a:	2001      	movs	r0, #1
 801141c:	4798      	blx	r3
 801141e:	2000      	movs	r0, #0
 8011420:	bd70      	pop	{r4, r5, r6, pc}
 8011422:	bf00      	nop
 8011424:	20000bd8 	.word	0x20000bd8
 8011428:	080189e4 	.word	0x080189e4
 801142c:	080189d4 	.word	0x080189d4
 8011430:	080189b8 	.word	0x080189b8

08011434 <acc_element_frame_init>:
 8011434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011438:	460d      	mov	r5, r1
 801143a:	4b33      	ldr	r3, [pc, #204]	@ (8011508 <acc_element_frame_init+0xd4>)
 801143c:	4a33      	ldr	r2, [pc, #204]	@ (801150c <acc_element_frame_init+0xd8>)
 801143e:	4934      	ldr	r1, [pc, #208]	@ (8011510 <acc_element_frame_init+0xdc>)
 8011440:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 8011444:	896e      	ldrh	r6, [r5, #10]
 8011446:	6043      	str	r3, [r0, #4]
 8011448:	2300      	movs	r3, #0
 801144a:	e9c0 1202 	strd	r1, r2, [r0, #8]
 801144e:	e9c0 3313 	strd	r3, r3, [r0, #76]	@ 0x4c
 8011452:	e9c0 3315 	strd	r3, r3, [r0, #84]	@ 0x54
 8011456:	f8a0 c038 	strh.w	ip, [r0, #56]	@ 0x38
 801145a:	8746      	strh	r6, [r0, #58]	@ 0x3a
 801145c:	79aa      	ldrb	r2, [r5, #6]
 801145e:	b087      	sub	sp, #28
 8011460:	2a00      	cmp	r2, #0
 8011462:	d04c      	beq.n	80114fe <acc_element_frame_init+0xca>
 8011464:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 8011520 <acc_element_frame_init+0xec>
 8011468:	4607      	mov	r7, r0
 801146a:	4699      	mov	r9, r3
 801146c:	461c      	mov	r4, r3
 801146e:	e007      	b.n	8011480 <acc_element_frame_init+0x4c>
 8011470:	79ab      	ldrb	r3, [r5, #6]
 8011472:	fa5f f489 	uxtb.w	r4, r9
 8011476:	42a3      	cmp	r3, r4
 8011478:	d941      	bls.n	80114fe <acc_element_frame_init+0xca>
 801147a:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 801147e:	896e      	ldrh	r6, [r5, #10]
 8011480:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8011484:	69e8      	ldr	r0, [r5, #28]
 8011486:	f8ad 6012 	strh.w	r6, [sp, #18]
 801148a:	eb05 0144 	add.w	r1, r5, r4, lsl #1
 801148e:	eb07 0244 	add.w	r2, r7, r4, lsl #1
 8011492:	898b      	ldrh	r3, [r1, #12]
 8011494:	8a89      	ldrh	r1, [r1, #20]
 8011496:	f8a2 1044 	strh.w	r1, [r2, #68]	@ 0x44
 801149a:	8793      	strh	r3, [r2, #60]	@ 0x3c
 801149c:	4473      	add	r3, lr
 801149e:	eb00 1204 	add.w	r2, r0, r4, lsl #4
 80114a2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80114a6:	4668      	mov	r0, sp
 80114a8:	682b      	ldr	r3, [r5, #0]
 80114aa:	9302      	str	r3, [sp, #8]
 80114ac:	f8cd 8000 	str.w	r8, [sp]
 80114b0:	9701      	str	r7, [sp, #4]
 80114b2:	f8ad c010 	strh.w	ip, [sp, #16]
 80114b6:	f8ad 100e 	strh.w	r1, [sp, #14]
 80114ba:	9205      	str	r2, [sp, #20]
 80114bc:	f000 fa1a 	bl	80118f4 <acc_pipeline_subsweep_assemble>
 80114c0:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 80114c4:	f109 0901 	add.w	r9, r9, #1
 80114c8:	4606      	mov	r6, r0
 80114ca:	64d8      	str	r0, [r3, #76]	@ 0x4c
 80114cc:	2800      	cmp	r0, #0
 80114ce:	d1cf      	bne.n	8011470 <acc_element_frame_init+0x3c>
 80114d0:	4b10      	ldr	r3, [pc, #64]	@ (8011514 <acc_element_frame_init+0xe0>)
 80114d2:	4a11      	ldr	r2, [pc, #68]	@ (8011518 <acc_element_frame_init+0xe4>)
 80114d4:	691b      	ldr	r3, [r3, #16]
 80114d6:	4911      	ldr	r1, [pc, #68]	@ (801151c <acc_element_frame_init+0xe8>)
 80114d8:	4798      	blx	r3
 80114da:	b164      	cbz	r4, 80114f6 <acc_element_frame_init+0xc2>
 80114dc:	3c01      	subs	r4, #1
 80114de:	b2e4      	uxtb	r4, r4
 80114e0:	3413      	adds	r4, #19
 80114e2:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80114e6:	3748      	adds	r7, #72	@ 0x48
 80114e8:	6820      	ldr	r0, [r4, #0]
 80114ea:	f000 fa6b 	bl	80119c4 <acc_pipeline_subsweep_disassemble>
 80114ee:	f844 6904 	str.w	r6, [r4], #-4
 80114f2:	42a7      	cmp	r7, r4
 80114f4:	d1f8      	bne.n	80114e8 <acc_element_frame_init+0xb4>
 80114f6:	2000      	movs	r0, #0
 80114f8:	b007      	add	sp, #28
 80114fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114fe:	2001      	movs	r0, #1
 8011500:	b007      	add	sp, #28
 8011502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011506:	bf00      	nop
 8011508:	08011391 	.word	0x08011391
 801150c:	08011351 	.word	0x08011351
 8011510:	080113d9 	.word	0x080113d9
 8011514:	20000bd8 	.word	0x20000bd8
 8011518:	080189f4 	.word	0x080189f4
 801151c:	080189d4 	.word	0x080189d4
 8011520:	08011359 	.word	0x08011359

08011524 <acc_element_frame_release>:
 8011524:	b178      	cbz	r0, 8011546 <acc_element_frame_release+0x22>
 8011526:	b570      	push	{r4, r5, r6, lr}
 8011528:	f100 044c 	add.w	r4, r0, #76	@ 0x4c
 801152c:	f100 055c 	add.w	r5, r0, #92	@ 0x5c
 8011530:	2600      	movs	r6, #0
 8011532:	f854 0b04 	ldr.w	r0, [r4], #4
 8011536:	b118      	cbz	r0, 8011540 <acc_element_frame_release+0x1c>
 8011538:	f000 fa44 	bl	80119c4 <acc_pipeline_subsweep_disassemble>
 801153c:	f844 6c04 	str.w	r6, [r4, #-4]
 8011540:	42ac      	cmp	r4, r5
 8011542:	d1f6      	bne.n	8011532 <acc_element_frame_release+0xe>
 8011544:	bd70      	pop	{r4, r5, r6, pc}
 8011546:	4770      	bx	lr

08011548 <element_frame_aux_reset>:
 8011548:	6800      	ldr	r0, [r0, #0]
 801154a:	68c3      	ldr	r3, [r0, #12]
 801154c:	4718      	bx	r3
 801154e:	bf00      	nop

08011550 <element_frame_aux_validate>:
 8011550:	6800      	ldr	r0, [r0, #0]
 8011552:	6883      	ldr	r3, [r0, #8]
 8011554:	4718      	bx	r3
 8011556:	bf00      	nop

08011558 <element_frame_aux_event>:
 8011558:	b570      	push	{r4, r5, r6, lr}
 801155a:	6902      	ldr	r2, [r0, #16]
 801155c:	f8b0 1042 	ldrh.w	r1, [r0, #66]	@ 0x42
 8011560:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8011564:	4604      	mov	r4, r0
 8011566:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 801156a:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 801156c:	2b03      	cmp	r3, #3
 801156e:	bf08      	it	eq
 8011570:	f480 4000 	eoreq.w	r0, r0, #32768	@ 0x8000
 8011574:	f7ff fe1a 	bl	80111ac <acc_alg_temp>
 8011578:	8028      	strh	r0, [r5, #0]
 801157a:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 801157c:	6923      	ldr	r3, [r4, #16]
 801157e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8011582:	b14a      	cbz	r2, 8011598 <element_frame_aux_event+0x40>
 8011584:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 8011588:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801158c:	2a01      	cmp	r2, #1
 801158e:	d903      	bls.n	8011598 <element_frame_aux_event+0x40>
 8011590:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8011592:	2101      	movs	r1, #1
 8011594:	7011      	strb	r1, [r2, #0]
 8011596:	e002      	b.n	801159e <element_frame_aux_event+0x46>
 8011598:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 801159a:	2100      	movs	r1, #0
 801159c:	7011      	strb	r1, [r2, #0]
 801159e:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 80115a0:	8fe0      	ldrh	r0, [r4, #62]	@ 0x3e
 80115a2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80115a6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80115aa:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 80115ac:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80115ae:	882d      	ldrh	r5, [r5, #0]
 80115b0:	f1a2 0301 	sub.w	r3, r2, #1
 80115b4:	fab3 f383 	clz	r3, r3
 80115b8:	095b      	lsrs	r3, r3, #5
 80115ba:	700b      	strb	r3, [r1, #0]
 80115bc:	f7ff fdf6 	bl	80111ac <acc_alg_temp>
 80115c0:	1a2d      	subs	r5, r5, r0
 80115c2:	b22d      	sxth	r5, r5
 80115c4:	2d00      	cmp	r5, #0
 80115c6:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 80115ca:	6820      	ldr	r0, [r4, #0]
 80115cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80115ce:	bfb8      	it	lt
 80115d0:	426d      	neglt	r5, r5
 80115d2:	b22d      	sxth	r5, r5
 80115d4:	42ab      	cmp	r3, r5
 80115d6:	bfac      	ite	ge
 80115d8:	2500      	movge	r5, #0
 80115da:	2501      	movlt	r5, #1
 80115dc:	7015      	strb	r5, [r2, #0]
 80115de:	6843      	ldr	r3, [r0, #4]
 80115e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80115e4:	4718      	bx	r3
 80115e6:	bf00      	nop

080115e8 <acc_element_frame_aux_init>:
 80115e8:	b430      	push	{r4, r5}
 80115ea:	880b      	ldrh	r3, [r1, #0]
 80115ec:	4d0c      	ldr	r5, [pc, #48]	@ (8011620 <acc_element_frame_aux_init+0x38>)
 80115ee:	4c0d      	ldr	r4, [pc, #52]	@ (8011624 <acc_element_frame_aux_init+0x3c>)
 80115f0:	4a0d      	ldr	r2, [pc, #52]	@ (8011628 <acc_element_frame_aux_init+0x40>)
 80115f2:	6045      	str	r5, [r0, #4]
 80115f4:	884d      	ldrh	r5, [r1, #2]
 80115f6:	6084      	str	r4, [r0, #8]
 80115f8:	888c      	ldrh	r4, [r1, #4]
 80115fa:	60c2      	str	r2, [r0, #12]
 80115fc:	88ca      	ldrh	r2, [r1, #6]
 80115fe:	8743      	strh	r3, [r0, #58]	@ 0x3a
 8011600:	890b      	ldrh	r3, [r1, #8]
 8011602:	f8a0 3042 	strh.w	r3, [r0, #66]	@ 0x42
 8011606:	8785      	strh	r5, [r0, #60]	@ 0x3c
 8011608:	87c4      	strh	r4, [r0, #62]	@ 0x3e
 801160a:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 801160e:	7b0b      	ldrb	r3, [r1, #12]
 8011610:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8011614:	894b      	ldrh	r3, [r1, #10]
 8011616:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
 801161a:	bc30      	pop	{r4, r5}
 801161c:	2001      	movs	r0, #1
 801161e:	4770      	bx	lr
 8011620:	08011559 	.word	0x08011559
 8011624:	08011551 	.word	0x08011551
 8011628:	08011549 	.word	0x08011549

0801162c <acc_element_frame_aux_release>:
 801162c:	4770      	bx	lr
 801162e:	bf00      	nop

08011630 <sink_a121_callback_consume>:
 8011630:	e9d0 230f 	ldrd	r2, r3, [r0, #60]	@ 0x3c
 8011634:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8011636:	6900      	ldr	r0, [r0, #16]
 8011638:	4718      	bx	r3
 801163a:	bf00      	nop

0801163c <sink_a121_callback_reset>:
 801163c:	4770      	bx	lr
 801163e:	bf00      	nop

08011640 <sink_a121_callback_validate>:
 8011640:	6983      	ldr	r3, [r0, #24]
 8011642:	b510      	push	{r4, lr}
 8011644:	4604      	mov	r4, r0
 8011646:	b1bb      	cbz	r3, 8011678 <sink_a121_callback_validate+0x38>
 8011648:	f7fc fdfc 	bl	800e244 <acc_rss_integration_log_level>
 801164c:	b948      	cbnz	r0, 8011662 <sink_a121_callback_validate+0x22>
 801164e:	6963      	ldr	r3, [r4, #20]
 8011650:	b183      	cbz	r3, 8011674 <sink_a121_callback_validate+0x34>
 8011652:	4b0b      	ldr	r3, [pc, #44]	@ (8011680 <sink_a121_callback_validate+0x40>)
 8011654:	4a0b      	ldr	r2, [pc, #44]	@ (8011684 <sink_a121_callback_validate+0x44>)
 8011656:	691b      	ldr	r3, [r3, #16]
 8011658:	490b      	ldr	r1, [pc, #44]	@ (8011688 <sink_a121_callback_validate+0x48>)
 801165a:	2000      	movs	r0, #0
 801165c:	4798      	blx	r3
 801165e:	2000      	movs	r0, #0
 8011660:	bd10      	pop	{r4, pc}
 8011662:	4b07      	ldr	r3, [pc, #28]	@ (8011680 <sink_a121_callback_validate+0x40>)
 8011664:	4a09      	ldr	r2, [pc, #36]	@ (801168c <sink_a121_callback_validate+0x4c>)
 8011666:	691b      	ldr	r3, [r3, #16]
 8011668:	4907      	ldr	r1, [pc, #28]	@ (8011688 <sink_a121_callback_validate+0x48>)
 801166a:	2001      	movs	r0, #1
 801166c:	4798      	blx	r3
 801166e:	6963      	ldr	r3, [r4, #20]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d1ee      	bne.n	8011652 <sink_a121_callback_validate+0x12>
 8011674:	2001      	movs	r0, #1
 8011676:	bd10      	pop	{r4, pc}
 8011678:	69c3      	ldr	r3, [r0, #28]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d1e4      	bne.n	8011648 <sink_a121_callback_validate+0x8>
 801167e:	e7e6      	b.n	801164e <sink_a121_callback_validate+0xe>
 8011680:	20000bd8 	.word	0x20000bd8
 8011684:	08018a50 	.word	0x08018a50
 8011688:	08018a34 	.word	0x08018a34
 801168c:	08018a18 	.word	0x08018a18

08011690 <acc_element_sink_a121_callback_init>:
 8011690:	b410      	push	{r4}
 8011692:	4a05      	ldr	r2, [pc, #20]	@ (80116a8 <acc_element_sink_a121_callback_init+0x18>)
 8011694:	4c05      	ldr	r4, [pc, #20]	@ (80116ac <acc_element_sink_a121_callback_init+0x1c>)
 8011696:	4b06      	ldr	r3, [pc, #24]	@ (80116b0 <acc_element_sink_a121_callback_init+0x20>)
 8011698:	6401      	str	r1, [r0, #64]	@ 0x40
 801169a:	e9c0 4201 	strd	r4, r2, [r0, #4]
 801169e:	60c3      	str	r3, [r0, #12]
 80116a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80116a4:	4770      	bx	lr
 80116a6:	bf00      	nop
 80116a8:	08011641 	.word	0x08011641
 80116ac:	08011631 	.word	0x08011631
 80116b0:	0801163d 	.word	0x0801163d

080116b4 <patch_program_parameters>:
 80116b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116b8:	f5c2 661d 	rsb	r6, r2, #2512	@ 0x9d0
 80116bc:	469a      	mov	sl, r3
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	360e      	adds	r6, #14
 80116c2:	42b3      	cmp	r3, r6
 80116c4:	b083      	sub	sp, #12
 80116c6:	bf94      	ite	ls
 80116c8:	b29e      	uxthls	r6, r3
 80116ca:	b2b6      	uxthhi	r6, r6
 80116cc:	4690      	mov	r8, r2
 80116ce:	4605      	mov	r5, r0
 80116d0:	4689      	mov	r9, r1
 80116d2:	f000 f9a7 	bl	8011a24 <acc_image_a121_r1a_meas_session_get>
 80116d6:	ea4f 0358 	mov.w	r3, r8, lsr #1
 80116da:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80116de:	0872      	lsrs	r2, r6, #1
 80116e0:	4649      	mov	r1, r9
 80116e2:	f7ff fb5b 	bl	8010d9c <acc_confprogram_copy>
 80116e6:	f000 f9a5 	bl	8011a34 <acc_cpd_a121_meas_session_parameters_patch_table_get>
 80116ea:	4607      	mov	r7, r0
 80116ec:	3d02      	subs	r5, #2
 80116ee:	1e44      	subs	r4, r0, #1
 80116f0:	37e1      	adds	r7, #225	@ 0xe1
 80116f2:	f814 bf01 	ldrb.w	fp, [r4, #1]!
 80116f6:	f000 f999 	bl	8011a2c <acc_image_a121_r1a_meas_session_param_table_get>
 80116fa:	f835 2f02 	ldrh.w	r2, [r5, #2]!
 80116fe:	4603      	mov	r3, r0
 8011700:	e9cd b200 	strd	fp, r2, [sp]
 8011704:	4641      	mov	r1, r8
 8011706:	4632      	mov	r2, r6
 8011708:	4648      	mov	r0, r9
 801170a:	f7ff fa7d 	bl	8010c08 <acc_confprogram_patch_offset>
 801170e:	42bc      	cmp	r4, r7
 8011710:	d001      	beq.n	8011716 <patch_program_parameters+0x62>
 8011712:	2800      	cmp	r0, #0
 8011714:	d1ed      	bne.n	80116f2 <patch_program_parameters+0x3e>
 8011716:	f8ca 6000 	str.w	r6, [sl]
 801171a:	b003      	add	sp, #12
 801171c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011720 <get_parameter_patch_range.constprop.0>:
 8011720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011724:	b085      	sub	sp, #20
 8011726:	4606      	mov	r6, r0
 8011728:	460d      	mov	r5, r1
 801172a:	4693      	mov	fp, r2
 801172c:	469a      	mov	sl, r3
 801172e:	f000 f981 	bl	8011a34 <acc_cpd_a121_meas_session_parameters_patch_table_get>
 8011732:	3e02      	subs	r6, #2
 8011734:	4604      	mov	r4, r0
 8011736:	3d02      	subs	r5, #2
 8011738:	f100 09e2 	add.w	r9, r0, #226	@ 0xe2
 801173c:	2700      	movs	r7, #0
 801173e:	f640 18de 	movw	r8, #2526	@ 0x9de
 8011742:	f836 2f02 	ldrh.w	r2, [r6, #2]!
 8011746:	f835 3f02 	ldrh.w	r3, [r5, #2]!
 801174a:	429a      	cmp	r2, r3
 801174c:	d013      	beq.n	8011776 <get_parameter_patch_range.constprop.0+0x56>
 801174e:	7821      	ldrb	r1, [r4, #0]
 8011750:	9101      	str	r1, [sp, #4]
 8011752:	f000 f96b 	bl	8011a2c <acc_image_a121_r1a_meas_session_param_table_get>
 8011756:	f10d 030e 	add.w	r3, sp, #14
 801175a:	aa03      	add	r2, sp, #12
 801175c:	9901      	ldr	r1, [sp, #4]
 801175e:	f7ff fb2b 	bl	8010db8 <acc_confprogram_get_parameter_patch_range>
 8011762:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8011766:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801176a:	4590      	cmp	r8, r2
 801176c:	bf28      	it	cs
 801176e:	4690      	movcs	r8, r2
 8011770:	429f      	cmp	r7, r3
 8011772:	bf38      	it	cc
 8011774:	461f      	movcc	r7, r3
 8011776:	3401      	adds	r4, #1
 8011778:	454c      	cmp	r4, r9
 801177a:	d1e2      	bne.n	8011742 <get_parameter_patch_range.constprop.0+0x22>
 801177c:	f8ab 8000 	strh.w	r8, [fp]
 8011780:	f8aa 7000 	strh.w	r7, [sl]
 8011784:	b005      	add	sp, #20
 8011786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801178a:	bf00      	nop

0801178c <acc_cpd_a121_meas_session_load_program>:
 801178c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011790:	4688      	mov	r8, r1
 8011792:	b084      	sub	sp, #16
 8011794:	4607      	mov	r7, r0
 8011796:	4611      	mov	r1, r2
 8011798:	4640      	mov	r0, r8
 801179a:	4699      	mov	r9, r3
 801179c:	2400      	movs	r4, #0
 801179e:	ab02      	add	r3, sp, #8
 80117a0:	aa01      	add	r2, sp, #4
 80117a2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80117a6:	f7fd f9e9 	bl	800eb7c <acc_sensor_a121_prepare_load_confmem>
 80117aa:	4638      	mov	r0, r7
 80117ac:	f7fd fa90 	bl	800ecd0 <acc_sensor_protocol_a121_prepare_load>
 80117b0:	b1d8      	cbz	r0, 80117ea <acc_cpd_a121_meas_session_load_program+0x5e>
 80117b2:	9d02      	ldr	r5, [sp, #8]
 80117b4:	f640 1add 	movw	sl, #2525	@ 0x9dd
 80117b8:	e000      	b.n	80117bc <acc_cpd_a121_meas_session_load_program+0x30>
 80117ba:	b1b6      	cbz	r6, 80117ea <acc_cpd_a121_meas_session_load_program+0x5e>
 80117bc:	4622      	mov	r2, r4
 80117be:	9901      	ldr	r1, [sp, #4]
 80117c0:	9503      	str	r5, [sp, #12]
 80117c2:	ab03      	add	r3, sp, #12
 80117c4:	4648      	mov	r0, r9
 80117c6:	f7ff ff75 	bl	80116b4 <patch_program_parameters>
 80117ca:	0861      	lsrs	r1, r4, #1
 80117cc:	4606      	mov	r6, r0
 80117ce:	9b03      	ldr	r3, [sp, #12]
 80117d0:	4638      	mov	r0, r7
 80117d2:	4642      	mov	r2, r8
 80117d4:	f7fd f9ea 	bl	800ebac <acc_sensor_a121_load_confmem>
 80117d8:	9d02      	ldr	r5, [sp, #8]
 80117da:	442c      	add	r4, r5
 80117dc:	b2a4      	uxth	r4, r4
 80117de:	4554      	cmp	r4, sl
 80117e0:	4630      	mov	r0, r6
 80117e2:	d9ea      	bls.n	80117ba <acc_cpd_a121_meas_session_load_program+0x2e>
 80117e4:	b004      	add	sp, #16
 80117e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117ea:	2000      	movs	r0, #0
 80117ec:	b004      	add	sp, #16
 80117ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117f2:	bf00      	nop

080117f4 <acc_cpd_a121_meas_session_run_program>:
 80117f4:	2115      	movs	r1, #21
 80117f6:	f7fd bac1 	b.w	800ed7c <acc_sensor_protocol_a121_run_program>
 80117fa:	bf00      	nop

080117fc <acc_cpd_a121_meas_session_is_patch_needed>:
 80117fc:	b500      	push	{lr}
 80117fe:	b083      	sub	sp, #12
 8011800:	f10d 0306 	add.w	r3, sp, #6
 8011804:	aa01      	add	r2, sp, #4
 8011806:	f7ff ff8b 	bl	8011720 <get_parameter_patch_range.constprop.0>
 801180a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801180e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011812:	4298      	cmp	r0, r3
 8011814:	bf34      	ite	cc
 8011816:	2000      	movcc	r0, #0
 8011818:	2001      	movcs	r0, #1
 801181a:	b003      	add	sp, #12
 801181c:	f85d fb04 	ldr.w	pc, [sp], #4

08011820 <acc_cpd_a121_meas_session_update_program>:
 8011820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011824:	b085      	sub	sp, #20
 8011826:	468a      	mov	sl, r1
 8011828:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38
 801182c:	4693      	mov	fp, r2
 801182e:	461c      	mov	r4, r3
 8011830:	4607      	mov	r7, r0
 8011832:	f7fd fa8f 	bl	800ed54 <acc_sensor_protocol_a121_is_ready_to_update>
 8011836:	b198      	cbz	r0, 8011860 <acc_cpd_a121_meas_session_update_program+0x40>
 8011838:	4620      	mov	r0, r4
 801183a:	ab03      	add	r3, sp, #12
 801183c:	aa02      	add	r2, sp, #8
 801183e:	4649      	mov	r1, r9
 8011840:	f7ff ff6e 	bl	8011720 <get_parameter_patch_range.constprop.0>
 8011844:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 8011848:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801184c:	4544      	cmp	r4, r8
 801184e:	d91c      	bls.n	801188a <acc_cpd_a121_meas_session_update_program+0x6a>
 8011850:	2501      	movs	r5, #1
 8011852:	4638      	mov	r0, r7
 8011854:	f7fd fc60 	bl	800f118 <acc_sensor_protocol_a121_reconfigure>
 8011858:	4628      	mov	r0, r5
 801185a:	b005      	add	sp, #20
 801185c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011860:	4638      	mov	r0, r7
 8011862:	f7fd fc43 	bl	800f0ec <acc_sensor_protocol_a121_is_hibernate>
 8011866:	4605      	mov	r5, r0
 8011868:	2800      	cmp	r0, #0
 801186a:	d1e5      	bne.n	8011838 <acc_cpd_a121_meas_session_update_program+0x18>
 801186c:	f7fc fcea 	bl	800e244 <acc_rss_integration_log_level>
 8011870:	2800      	cmp	r0, #0
 8011872:	d0f1      	beq.n	8011858 <acc_cpd_a121_meas_session_update_program+0x38>
 8011874:	4b18      	ldr	r3, [pc, #96]	@ (80118d8 <acc_cpd_a121_meas_session_update_program+0xb8>)
 8011876:	4a19      	ldr	r2, [pc, #100]	@ (80118dc <acc_cpd_a121_meas_session_update_program+0xbc>)
 8011878:	691c      	ldr	r4, [r3, #16]
 801187a:	4919      	ldr	r1, [pc, #100]	@ (80118e0 <acc_cpd_a121_meas_session_update_program+0xc0>)
 801187c:	463b      	mov	r3, r7
 801187e:	2001      	movs	r0, #1
 8011880:	47a0      	blx	r4
 8011882:	4628      	mov	r0, r5
 8011884:	b005      	add	sp, #20
 8011886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801188a:	ab02      	add	r3, sp, #8
 801188c:	f108 0602 	add.w	r6, r8, #2
 8011890:	4659      	mov	r1, fp
 8011892:	aa01      	add	r2, sp, #4
 8011894:	4650      	mov	r0, sl
 8011896:	f7fd f971 	bl	800eb7c <acc_sensor_a121_prepare_load_confmem>
 801189a:	1b36      	subs	r6, r6, r4
 801189c:	9b02      	ldr	r3, [sp, #8]
 801189e:	b2b6      	uxth	r6, r6
 80118a0:	429e      	cmp	r6, r3
 80118a2:	bf28      	it	cs
 80118a4:	461e      	movcs	r6, r3
 80118a6:	9602      	str	r6, [sp, #8]
 80118a8:	e004      	b.n	80118b4 <acc_cpd_a121_meas_session_update_program+0x94>
 80118aa:	9e02      	ldr	r6, [sp, #8]
 80118ac:	4434      	add	r4, r6
 80118ae:	b2a4      	uxth	r4, r4
 80118b0:	4544      	cmp	r4, r8
 80118b2:	d8ce      	bhi.n	8011852 <acc_cpd_a121_meas_session_update_program+0x32>
 80118b4:	9901      	ldr	r1, [sp, #4]
 80118b6:	9603      	str	r6, [sp, #12]
 80118b8:	ab03      	add	r3, sp, #12
 80118ba:	4622      	mov	r2, r4
 80118bc:	4648      	mov	r0, r9
 80118be:	f7ff fef9 	bl	80116b4 <patch_program_parameters>
 80118c2:	4605      	mov	r5, r0
 80118c4:	2800      	cmp	r0, #0
 80118c6:	d0f0      	beq.n	80118aa <acc_cpd_a121_meas_session_update_program+0x8a>
 80118c8:	9b03      	ldr	r3, [sp, #12]
 80118ca:	4652      	mov	r2, sl
 80118cc:	0861      	lsrs	r1, r4, #1
 80118ce:	4638      	mov	r0, r7
 80118d0:	f7fd f96c 	bl	800ebac <acc_sensor_a121_load_confmem>
 80118d4:	e7e9      	b.n	80118aa <acc_cpd_a121_meas_session_update_program+0x8a>
 80118d6:	bf00      	nop
 80118d8:	20000bd8 	.word	0x20000bd8
 80118dc:	08018a78 	.word	0x08018a78
 80118e0:	08018a9c 	.word	0x08018a9c

080118e4 <acc_cpd_a121_meas_session_transfer_data>:
 80118e4:	b410      	push	{r4}
 80118e6:	460c      	mov	r4, r1
 80118e8:	4611      	mov	r1, r2
 80118ea:	4622      	mov	r2, r4
 80118ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118f0:	f7fd b986 	b.w	800ec00 <acc_sensor_a121_buffer_processed_read>

080118f4 <acc_pipeline_subsweep_assemble>:
 80118f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118f6:	4a30      	ldr	r2, [pc, #192]	@ (80119b8 <acc_pipeline_subsweep_assemble+0xc4>)
 80118f8:	b085      	sub	sp, #20
 80118fa:	4605      	mov	r5, r0
 80118fc:	2333      	movs	r3, #51	@ 0x33
 80118fe:	21e8      	movs	r1, #232	@ 0xe8
 8011900:	2001      	movs	r0, #1
 8011902:	f7fc fc6f 	bl	800e1e4 <acc_rss_integration_mem_calloc_debug>
 8011906:	4604      	mov	r4, r0
 8011908:	2800      	cmp	r0, #0
 801190a:	d042      	beq.n	8011992 <acc_pipeline_subsweep_assemble+0x9e>
 801190c:	89ab      	ldrh	r3, [r5, #12]
 801190e:	68a9      	ldr	r1, [r5, #8]
 8011910:	8a2e      	ldrh	r6, [r5, #16]
 8011912:	8a6a      	ldrh	r2, [r5, #18]
 8011914:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011918:	f100 073c 	add.w	r7, r0, #60	@ 0x3c
 801191c:	696b      	ldr	r3, [r5, #20]
 801191e:	9100      	str	r1, [sp, #0]
 8011920:	f8ad 6006 	strh.w	r6, [sp, #6]
 8011924:	4669      	mov	r1, sp
 8011926:	f104 0694 	add.w	r6, r4, #148	@ 0x94
 801192a:	4638      	mov	r0, r7
 801192c:	f8ad 2008 	strh.w	r2, [sp, #8]
 8011930:	9303      	str	r3, [sp, #12]
 8011932:	f000 f975 	bl	8011c20 <acc_element_phase_enhancement_init>
 8011936:	6829      	ldr	r1, [r5, #0]
 8011938:	4630      	mov	r0, r6
 801193a:	f7ff fea9 	bl	8011690 <acc_element_sink_a121_callback_init>
 801193e:	89eb      	ldrh	r3, [r5, #14]
 8011940:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
 8011944:	6868      	ldr	r0, [r5, #4]
 8011946:	f8c4 00d0 	str.w	r0, [r4, #208]	@ 0xd0
 801194a:	005b      	lsls	r3, r3, #1
 801194c:	2200      	movs	r2, #0
 801194e:	f104 05e0 	add.w	r5, r4, #224	@ 0xe0
 8011952:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
 8011956:	f104 03e4 	add.w	r3, r4, #228	@ 0xe4
 801195a:	f8a4 c092 	strh.w	ip, [r4, #146]	@ 0x92
 801195e:	f8a4 c0d8 	strh.w	ip, [r4, #216]	@ 0xd8
 8011962:	8722      	strh	r2, [r4, #56]	@ 0x38
 8011964:	f8a4 2090 	strh.w	r2, [r4, #144]	@ 0x90
 8011968:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 801196c:	4639      	mov	r1, r7
 801196e:	6265      	str	r5, [r4, #36]	@ 0x24
 8011970:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
 8011974:	4620      	mov	r0, r4
 8011976:	f7ff fa51 	bl	8010e1c <acc_element_connect>
 801197a:	4631      	mov	r1, r6
 801197c:	4638      	mov	r0, r7
 801197e:	f7ff fa4d 	bl	8010e1c <acc_element_connect>
 8011982:	6820      	ldr	r0, [r4, #0]
 8011984:	6883      	ldr	r3, [r0, #8]
 8011986:	4798      	blx	r3
 8011988:	4605      	mov	r5, r0
 801198a:	b128      	cbz	r0, 8011998 <acc_pipeline_subsweep_assemble+0xa4>
 801198c:	6820      	ldr	r0, [r4, #0]
 801198e:	68c3      	ldr	r3, [r0, #12]
 8011990:	4798      	blx	r3
 8011992:	4620      	mov	r0, r4
 8011994:	b005      	add	sp, #20
 8011996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011998:	4b08      	ldr	r3, [pc, #32]	@ (80119bc <acc_pipeline_subsweep_assemble+0xc8>)
 801199a:	4a09      	ldr	r2, [pc, #36]	@ (80119c0 <acc_pipeline_subsweep_assemble+0xcc>)
 801199c:	691b      	ldr	r3, [r3, #16]
 801199e:	4906      	ldr	r1, [pc, #24]	@ (80119b8 <acc_pipeline_subsweep_assemble+0xc4>)
 80119a0:	4798      	blx	r3
 80119a2:	4638      	mov	r0, r7
 80119a4:	f000 f96e 	bl	8011c84 <acc_element_phase_enhancement_release>
 80119a8:	4620      	mov	r0, r4
 80119aa:	f7fc fc37 	bl	800e21c <acc_rss_integration_mem_free>
 80119ae:	462c      	mov	r4, r5
 80119b0:	4620      	mov	r0, r4
 80119b2:	b005      	add	sp, #20
 80119b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119b6:	bf00      	nop
 80119b8:	08018ab4 	.word	0x08018ab4
 80119bc:	20000bd8 	.word	0x20000bd8
 80119c0:	08016460 	.word	0x08016460

080119c4 <acc_pipeline_subsweep_disassemble>:
 80119c4:	b148      	cbz	r0, 80119da <acc_pipeline_subsweep_disassemble+0x16>
 80119c6:	b510      	push	{r4, lr}
 80119c8:	4604      	mov	r4, r0
 80119ca:	303c      	adds	r0, #60	@ 0x3c
 80119cc:	f000 f95a 	bl	8011c84 <acc_element_phase_enhancement_release>
 80119d0:	4620      	mov	r0, r4
 80119d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119d6:	f7fc bc21 	b.w	800e21c <acc_rss_integration_mem_free>
 80119da:	4770      	bx	lr

080119dc <acc_pipeline_subsweep_prepare_memory>:
 80119dc:	b430      	push	{r4, r5}
 80119de:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 80119e2:	f8b0 50d8 	ldrh.w	r5, [r0, #216]	@ 0xd8
 80119e6:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 80119e8:	f8b0 3092 	ldrh.w	r3, [r0, #146]	@ 0x92
 80119ec:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 80119f0:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80119f4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80119f8:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 80119fc:	6144      	str	r4, [r0, #20]
 80119fe:	e9c0 2313 	strd	r2, r3, [r0, #76]	@ 0x4c
 8011a02:	bc30      	pop	{r4, r5}
 8011a04:	f8c0 10a4 	str.w	r1, [r0, #164]	@ 0xa4
 8011a08:	4770      	bx	lr
 8011a0a:	bf00      	nop

08011a0c <acc_pipeline_subsweep_produce>:
 8011a0c:	6803      	ldr	r3, [r0, #0]
 8011a0e:	f8d0 20dc 	ldr.w	r2, [r0, #220]	@ 0xdc
 8011a12:	f8c0 20e0 	str.w	r2, [r0, #224]	@ 0xe0
 8011a16:	2100      	movs	r1, #0
 8011a18:	f880 10e4 	strb.w	r1, [r0, #228]	@ 0xe4
 8011a1c:	685a      	ldr	r2, [r3, #4]
 8011a1e:	4618      	mov	r0, r3
 8011a20:	4710      	bx	r2
 8011a22:	bf00      	nop

08011a24 <acc_image_a121_r1a_meas_session_get>:
 8011a24:	4800      	ldr	r0, [pc, #0]	@ (8011a28 <acc_image_a121_r1a_meas_session_get+0x4>)
 8011a26:	4770      	bx	lr
 8011a28:	08018ac8 	.word	0x08018ac8

08011a2c <acc_image_a121_r1a_meas_session_param_table_get>:
 8011a2c:	4800      	ldr	r0, [pc, #0]	@ (8011a30 <acc_image_a121_r1a_meas_session_param_table_get+0x4>)
 8011a2e:	4770      	bx	lr
 8011a30:	08019e84 	.word	0x08019e84

08011a34 <acc_cpd_a121_meas_session_parameters_patch_table_get>:
 8011a34:	4800      	ldr	r0, [pc, #0]	@ (8011a38 <acc_cpd_a121_meas_session_parameters_patch_table_get+0x4>)
 8011a36:	4770      	bx	lr
 8011a38:	0801ac2c 	.word	0x0801ac2c

08011a3c <element_phase_enhancement_reset>:
 8011a3c:	6800      	ldr	r0, [r0, #0]
 8011a3e:	68c3      	ldr	r3, [r0, #12]
 8011a40:	4718      	bx	r3
 8011a42:	bf00      	nop

08011a44 <element_phase_enhancement_validate>:
 8011a44:	6800      	ldr	r0, [r0, #0]
 8011a46:	6883      	ldr	r3, [r0, #8]
 8011a48:	4718      	bx	r3
 8011a4a:	bf00      	nop

08011a4c <element_phase_enhancement_event>:
 8011a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a50:	ed2d 8b04 	vpush	{d8-d9}
 8011a54:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8011a58:	b089      	sub	sp, #36	@ 0x24
 8011a5a:	4683      	mov	fp, r0
 8011a5c:	9303      	str	r3, [sp, #12]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	f000 80d1 	beq.w	8011c06 <element_phase_enhancement_event+0x1ba>
 8011a64:	8fc2      	ldrh	r2, [r0, #62]	@ 0x3e
 8011a66:	6904      	ldr	r4, [r0, #16]
 8011a68:	8f81      	ldrh	r1, [r0, #60]	@ 0x3c
 8011a6a:	f8b0 304c 	ldrh.w	r3, [r0, #76]	@ 0x4c
 8011a6e:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8011a70:	f934 1011 	ldrsh.w	r1, [r4, r1, lsl #1]
 8011a74:	9006      	str	r0, [sp, #24]
 8011a76:	0052      	lsls	r2, r2, #1
 8011a78:	9201      	str	r2, [sp, #4]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	f000 80c3 	beq.w	8011c06 <element_phase_enhancement_event+0x1ba>
 8011a80:	2300      	movs	r3, #0
 8011a82:	010a      	lsls	r2, r1, #4
 8011a84:	eddf 8a64 	vldr	s17, [pc, #400]	@ 8011c18 <element_phase_enhancement_event+0x1cc>
 8011a88:	9302      	str	r3, [sp, #8]
 8011a8a:	9207      	str	r2, [sp, #28]
 8011a8c:	469a      	mov	sl, r3
 8011a8e:	e9db 3211 	ldrd	r3, r2, [fp, #68]	@ 0x44
 8011a92:	f8bb 604e 	ldrh.w	r6, [fp, #78]	@ 0x4e
 8011a96:	4413      	add	r3, r2
 8011a98:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8011a9c:	fb02 3606 	mla	r6, r2, r6, r3
 8011aa0:	2118      	movs	r1, #24
 8011aa2:	4630      	mov	r0, r6
 8011aa4:	f7fe f906 	bl	800fcb4 <acc_translation_a121_point_in_coarse>
 8011aa8:	2118      	movs	r1, #24
 8011aaa:	4605      	mov	r5, r0
 8011aac:	4630      	mov	r0, r6
 8011aae:	f7fe f8f3 	bl	800fc98 <acc_translation_a121_point_to_coarse>
 8011ab2:	9b07      	ldr	r3, [sp, #28]
 8011ab4:	0400      	lsls	r0, r0, #16
 8011ab6:	fb80 0103 	smull	r0, r1, r0, r3
 8011aba:	2800      	cmp	r0, #0
 8011abc:	f171 0300 	sbcs.w	r3, r1, #0
 8011ac0:	da04      	bge.n	8011acc <element_phase_enhancement_event+0x80>
 8011ac2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011ac6:	18c0      	adds	r0, r0, r3
 8011ac8:	f141 0100 	adc.w	r1, r1, #0
 8011acc:	9b06      	ldr	r3, [sp, #24]
 8011ace:	441d      	add	r5, r3
 8011ad0:	0c03      	lsrs	r3, r0, #16
 8011ad2:	f934 2015 	ldrsh.w	r2, [r4, r5, lsl #1]
 8011ad6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8011ada:	eba3 1302 	sub.w	r3, r3, r2, lsl #4
 8011ade:	ee07 3a90 	vmov	s15, r3
 8011ae2:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 8011ae6:	ee29 9a28 	vmul.f32	s18, s18, s17
 8011aea:	eeb0 0a49 	vmov.f32	s0, s18
 8011aee:	f002 ffa3 	bl	8014a38 <cosf>
 8011af2:	eeb0 8a40 	vmov.f32	s16, s0
 8011af6:	eeb0 0a49 	vmov.f32	s0, s18
 8011afa:	f002 ffe9 	bl	8014ad0 <sinf>
 8011afe:	f8bb 9040 	ldrh.w	r9, [fp, #64]	@ 0x40
 8011b02:	f1b9 0f00 	cmp.w	r9, #0
 8011b06:	d073      	beq.n	8011bf0 <element_phase_enhancement_event+0x1a4>
 8011b08:	f8db 3050 	ldr.w	r3, [fp, #80]	@ 0x50
 8011b0c:	f8bb 2042 	ldrh.w	r2, [fp, #66]	@ 0x42
 8011b10:	f8cd b014 	str.w	fp, [sp, #20]
 8011b14:	2000      	movs	r0, #0
 8011b16:	f893 8000 	ldrb.w	r8, [r3]
 8011b1a:	f8df c100 	ldr.w	ip, [pc, #256]	@ 8011c1c <element_phase_enhancement_event+0x1d0>
 8011b1e:	9304      	str	r3, [sp, #16]
 8011b20:	4605      	mov	r5, r0
 8011b22:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8011b26:	f647 77ff 	movw	r7, #32767	@ 0x7fff
 8011b2a:	4693      	mov	fp, r2
 8011b2c:	e009      	b.n	8011b42 <element_phase_enhancement_event+0xf6>
 8011b2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011b32:	52e2      	strh	r2, [r4, r3]
 8011b34:	3501      	adds	r5, #1
 8011b36:	fa1f fe85 	uxth.w	lr, r5
 8011b3a:	45f1      	cmp	r9, lr
 8011b3c:	4458      	add	r0, fp
 8011b3e:	8071      	strh	r1, [r6, #2]
 8011b40:	d952      	bls.n	8011be8 <element_phase_enhancement_event+0x19c>
 8011b42:	9a01      	ldr	r2, [sp, #4]
 8011b44:	eb0a 0350 	add.w	r3, sl, r0, lsr #1
 8011b48:	b29b      	uxth	r3, r3
 8011b4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011b4e:	18e6      	adds	r6, r4, r3
 8011b50:	5ee2      	ldrsh	r2, [r4, r3]
 8011b52:	ee07 2a90 	vmov	s15, r2
 8011b56:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 8011b5a:	ee06 2a90 	vmov	s13, r2
 8011b5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011b62:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011b66:	ee27 7a88 	vmul.f32	s14, s15, s16
 8011b6a:	ee66 5a80 	vmul.f32	s11, s13, s0
 8011b6e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011b72:	ee66 6a88 	vmul.f32	s13, s13, s16
 8011b76:	ee37 7a65 	vsub.f32	s14, s14, s11
 8011b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011b7e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8011b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011b8a:	bf4c      	ite	mi
 8011b8c:	ee37 7a46 	vsubmi.f32	s14, s14, s12
 8011b90:	ee37 7a06 	vaddpl.f32	s14, s14, s12
 8011b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b98:	bf4c      	ite	mi
 8011b9a:	ee77 7ac6 	vsubmi.f32	s15, s15, s12
 8011b9e:	ee77 7a86 	vaddpl.f32	s15, s15, s12
 8011ba2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8011ba6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011baa:	ee17 ea10 	vmov	lr, s14
 8011bae:	ee17 1a90 	vmov	r1, s15
 8011bb2:	ee17 2a10 	vmov	r2, s14
 8011bb6:	45e6      	cmp	lr, ip
 8011bb8:	bfb8      	it	lt
 8011bba:	4662      	movlt	r2, ip
 8011bbc:	4561      	cmp	r1, ip
 8011bbe:	bfb8      	it	lt
 8011bc0:	4661      	movlt	r1, ip
 8011bc2:	42ba      	cmp	r2, r7
 8011bc4:	bfa8      	it	ge
 8011bc6:	463a      	movge	r2, r7
 8011bc8:	42b9      	cmp	r1, r7
 8011bca:	bfa8      	it	ge
 8011bcc:	4639      	movge	r1, r7
 8011bce:	f1b8 0f00 	cmp.w	r8, #0
 8011bd2:	d1ae      	bne.n	8011b32 <element_phase_enhancement_event+0xe6>
 8011bd4:	4596      	cmp	lr, r2
 8011bd6:	d1aa      	bne.n	8011b2e <element_phase_enhancement_event+0xe2>
 8011bd8:	ee17 ea90 	vmov	lr, s15
 8011bdc:	ebbe 0801 	subs.w	r8, lr, r1
 8011be0:	bf18      	it	ne
 8011be2:	f04f 0801 	movne.w	r8, #1
 8011be6:	e7a4      	b.n	8011b32 <element_phase_enhancement_event+0xe6>
 8011be8:	e9dd 3b04 	ldrd	r3, fp, [sp, #16]
 8011bec:	f883 8000 	strb.w	r8, [r3]
 8011bf0:	9b02      	ldr	r3, [sp, #8]
 8011bf2:	3301      	adds	r3, #1
 8011bf4:	461a      	mov	r2, r3
 8011bf6:	9302      	str	r3, [sp, #8]
 8011bf8:	f8bb 304c 	ldrh.w	r3, [fp, #76]	@ 0x4c
 8011bfc:	fa1f fa82 	uxth.w	sl, r2
 8011c00:	4553      	cmp	r3, sl
 8011c02:	f63f af44 	bhi.w	8011a8e <element_phase_enhancement_event+0x42>
 8011c06:	f8db 0000 	ldr.w	r0, [fp]
 8011c0a:	6843      	ldr	r3, [r0, #4]
 8011c0c:	b009      	add	sp, #36	@ 0x24
 8011c0e:	ecbd 8b04 	vpop	{d8-d9}
 8011c12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c16:	4718      	bx	r3
 8011c18:	37800000 	.word	0x37800000
 8011c1c:	ffff8000 	.word	0xffff8000

08011c20 <acc_element_phase_enhancement_init>:
 8011c20:	b570      	push	{r4, r5, r6, lr}
 8011c22:	4604      	mov	r4, r0
 8011c24:	460d      	mov	r5, r1
 8011c26:	4814      	ldr	r0, [pc, #80]	@ (8011c78 <acc_element_phase_enhancement_init+0x58>)
 8011c28:	4914      	ldr	r1, [pc, #80]	@ (8011c7c <acc_element_phase_enhancement_init+0x5c>)
 8011c2a:	68eb      	ldr	r3, [r5, #12]
 8011c2c:	4a14      	ldr	r2, [pc, #80]	@ (8011c80 <acc_element_phase_enhancement_init+0x60>)
 8011c2e:	60e2      	str	r2, [r4, #12]
 8011c30:	e9c4 0101 	strd	r0, r1, [r4, #4]
 8011c34:	b082      	sub	sp, #8
 8011c36:	a901      	add	r1, sp, #4
 8011c38:	7bd8      	ldrb	r0, [r3, #15]
 8011c3a:	f7fd fc69 	bl	800f510 <acc_translation_a121_profile_to_start_point_offset>
 8011c3e:	68eb      	ldr	r3, [r5, #12]
 8011c40:	882a      	ldrh	r2, [r5, #0]
 8011c42:	8869      	ldrh	r1, [r5, #2]
 8011c44:	8762      	strh	r2, [r4, #58]	@ 0x3a
 8011c46:	88aa      	ldrh	r2, [r5, #4]
 8011c48:	88ee      	ldrh	r6, [r5, #6]
 8011c4a:	87a1      	strh	r1, [r4, #60]	@ 0x3c
 8011c4c:	8929      	ldrh	r1, [r5, #8]
 8011c4e:	87e2      	strh	r2, [r4, #62]	@ 0x3e
 8011c50:	7b1a      	ldrb	r2, [r3, #12]
 8011c52:	681d      	ldr	r5, [r3, #0]
 8011c54:	f8a4 1042 	strh.w	r1, [r4, #66]	@ 0x42
 8011c58:	f884 2038 	strb.w	r2, [r4, #56]	@ 0x38
 8011c5c:	9901      	ldr	r1, [sp, #4]
 8011c5e:	88da      	ldrh	r2, [r3, #6]
 8011c60:	889b      	ldrh	r3, [r3, #4]
 8011c62:	f8a4 6040 	strh.w	r6, [r4, #64]	@ 0x40
 8011c66:	e9c4 5111 	strd	r5, r1, [r4, #68]	@ 0x44
 8011c6a:	f8a4 204e 	strh.w	r2, [r4, #78]	@ 0x4e
 8011c6e:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
 8011c72:	b002      	add	sp, #8
 8011c74:	bd70      	pop	{r4, r5, r6, pc}
 8011c76:	bf00      	nop
 8011c78:	08011a4d 	.word	0x08011a4d
 8011c7c:	08011a45 	.word	0x08011a45
 8011c80:	08011a3d 	.word	0x08011a3d

08011c84 <acc_element_phase_enhancement_release>:
 8011c84:	4770      	bx	lr
 8011c86:	bf00      	nop

08011c88 <_calloc_r>:
 8011c88:	b570      	push	{r4, r5, r6, lr}
 8011c8a:	fba1 5402 	umull	r5, r4, r1, r2
 8011c8e:	b93c      	cbnz	r4, 8011ca0 <_calloc_r+0x18>
 8011c90:	4629      	mov	r1, r5
 8011c92:	f000 f83f 	bl	8011d14 <_malloc_r>
 8011c96:	4606      	mov	r6, r0
 8011c98:	b928      	cbnz	r0, 8011ca6 <_calloc_r+0x1e>
 8011c9a:	2600      	movs	r6, #0
 8011c9c:	4630      	mov	r0, r6
 8011c9e:	bd70      	pop	{r4, r5, r6, pc}
 8011ca0:	220c      	movs	r2, #12
 8011ca2:	6002      	str	r2, [r0, #0]
 8011ca4:	e7f9      	b.n	8011c9a <_calloc_r+0x12>
 8011ca6:	462a      	mov	r2, r5
 8011ca8:	4621      	mov	r1, r4
 8011caa:	f000 ff73 	bl	8012b94 <memset>
 8011cae:	e7f5      	b.n	8011c9c <_calloc_r+0x14>

08011cb0 <malloc>:
 8011cb0:	4b02      	ldr	r3, [pc, #8]	@ (8011cbc <malloc+0xc>)
 8011cb2:	4601      	mov	r1, r0
 8011cb4:	6818      	ldr	r0, [r3, #0]
 8011cb6:	f000 b82d 	b.w	8011d14 <_malloc_r>
 8011cba:	bf00      	nop
 8011cbc:	200001d8 	.word	0x200001d8

08011cc0 <free>:
 8011cc0:	4b02      	ldr	r3, [pc, #8]	@ (8011ccc <free+0xc>)
 8011cc2:	4601      	mov	r1, r0
 8011cc4:	6818      	ldr	r0, [r3, #0]
 8011cc6:	f001 be4f 	b.w	8013968 <_free_r>
 8011cca:	bf00      	nop
 8011ccc:	200001d8 	.word	0x200001d8

08011cd0 <sbrk_aligned>:
 8011cd0:	b570      	push	{r4, r5, r6, lr}
 8011cd2:	4e0f      	ldr	r6, [pc, #60]	@ (8011d10 <sbrk_aligned+0x40>)
 8011cd4:	460c      	mov	r4, r1
 8011cd6:	6831      	ldr	r1, [r6, #0]
 8011cd8:	4605      	mov	r5, r0
 8011cda:	b911      	cbnz	r1, 8011ce2 <sbrk_aligned+0x12>
 8011cdc:	f000 ff9a 	bl	8012c14 <_sbrk_r>
 8011ce0:	6030      	str	r0, [r6, #0]
 8011ce2:	4621      	mov	r1, r4
 8011ce4:	4628      	mov	r0, r5
 8011ce6:	f000 ff95 	bl	8012c14 <_sbrk_r>
 8011cea:	1c43      	adds	r3, r0, #1
 8011cec:	d103      	bne.n	8011cf6 <sbrk_aligned+0x26>
 8011cee:	f04f 34ff 	mov.w	r4, #4294967295
 8011cf2:	4620      	mov	r0, r4
 8011cf4:	bd70      	pop	{r4, r5, r6, pc}
 8011cf6:	1cc4      	adds	r4, r0, #3
 8011cf8:	f024 0403 	bic.w	r4, r4, #3
 8011cfc:	42a0      	cmp	r0, r4
 8011cfe:	d0f8      	beq.n	8011cf2 <sbrk_aligned+0x22>
 8011d00:	1a21      	subs	r1, r4, r0
 8011d02:	4628      	mov	r0, r5
 8011d04:	f000 ff86 	bl	8012c14 <_sbrk_r>
 8011d08:	3001      	adds	r0, #1
 8011d0a:	d1f2      	bne.n	8011cf2 <sbrk_aligned+0x22>
 8011d0c:	e7ef      	b.n	8011cee <sbrk_aligned+0x1e>
 8011d0e:	bf00      	nop
 8011d10:	20000a8c 	.word	0x20000a8c

08011d14 <_malloc_r>:
 8011d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d18:	1ccd      	adds	r5, r1, #3
 8011d1a:	f025 0503 	bic.w	r5, r5, #3
 8011d1e:	3508      	adds	r5, #8
 8011d20:	2d0c      	cmp	r5, #12
 8011d22:	bf38      	it	cc
 8011d24:	250c      	movcc	r5, #12
 8011d26:	2d00      	cmp	r5, #0
 8011d28:	4606      	mov	r6, r0
 8011d2a:	db01      	blt.n	8011d30 <_malloc_r+0x1c>
 8011d2c:	42a9      	cmp	r1, r5
 8011d2e:	d904      	bls.n	8011d3a <_malloc_r+0x26>
 8011d30:	230c      	movs	r3, #12
 8011d32:	6033      	str	r3, [r6, #0]
 8011d34:	2000      	movs	r0, #0
 8011d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011e10 <_malloc_r+0xfc>
 8011d3e:	f000 f869 	bl	8011e14 <__malloc_lock>
 8011d42:	f8d8 3000 	ldr.w	r3, [r8]
 8011d46:	461c      	mov	r4, r3
 8011d48:	bb44      	cbnz	r4, 8011d9c <_malloc_r+0x88>
 8011d4a:	4629      	mov	r1, r5
 8011d4c:	4630      	mov	r0, r6
 8011d4e:	f7ff ffbf 	bl	8011cd0 <sbrk_aligned>
 8011d52:	1c43      	adds	r3, r0, #1
 8011d54:	4604      	mov	r4, r0
 8011d56:	d158      	bne.n	8011e0a <_malloc_r+0xf6>
 8011d58:	f8d8 4000 	ldr.w	r4, [r8]
 8011d5c:	4627      	mov	r7, r4
 8011d5e:	2f00      	cmp	r7, #0
 8011d60:	d143      	bne.n	8011dea <_malloc_r+0xd6>
 8011d62:	2c00      	cmp	r4, #0
 8011d64:	d04b      	beq.n	8011dfe <_malloc_r+0xea>
 8011d66:	6823      	ldr	r3, [r4, #0]
 8011d68:	4639      	mov	r1, r7
 8011d6a:	4630      	mov	r0, r6
 8011d6c:	eb04 0903 	add.w	r9, r4, r3
 8011d70:	f000 ff50 	bl	8012c14 <_sbrk_r>
 8011d74:	4581      	cmp	r9, r0
 8011d76:	d142      	bne.n	8011dfe <_malloc_r+0xea>
 8011d78:	6821      	ldr	r1, [r4, #0]
 8011d7a:	1a6d      	subs	r5, r5, r1
 8011d7c:	4629      	mov	r1, r5
 8011d7e:	4630      	mov	r0, r6
 8011d80:	f7ff ffa6 	bl	8011cd0 <sbrk_aligned>
 8011d84:	3001      	adds	r0, #1
 8011d86:	d03a      	beq.n	8011dfe <_malloc_r+0xea>
 8011d88:	6823      	ldr	r3, [r4, #0]
 8011d8a:	442b      	add	r3, r5
 8011d8c:	6023      	str	r3, [r4, #0]
 8011d8e:	f8d8 3000 	ldr.w	r3, [r8]
 8011d92:	685a      	ldr	r2, [r3, #4]
 8011d94:	bb62      	cbnz	r2, 8011df0 <_malloc_r+0xdc>
 8011d96:	f8c8 7000 	str.w	r7, [r8]
 8011d9a:	e00f      	b.n	8011dbc <_malloc_r+0xa8>
 8011d9c:	6822      	ldr	r2, [r4, #0]
 8011d9e:	1b52      	subs	r2, r2, r5
 8011da0:	d420      	bmi.n	8011de4 <_malloc_r+0xd0>
 8011da2:	2a0b      	cmp	r2, #11
 8011da4:	d917      	bls.n	8011dd6 <_malloc_r+0xc2>
 8011da6:	1961      	adds	r1, r4, r5
 8011da8:	42a3      	cmp	r3, r4
 8011daa:	6025      	str	r5, [r4, #0]
 8011dac:	bf18      	it	ne
 8011dae:	6059      	strne	r1, [r3, #4]
 8011db0:	6863      	ldr	r3, [r4, #4]
 8011db2:	bf08      	it	eq
 8011db4:	f8c8 1000 	streq.w	r1, [r8]
 8011db8:	5162      	str	r2, [r4, r5]
 8011dba:	604b      	str	r3, [r1, #4]
 8011dbc:	4630      	mov	r0, r6
 8011dbe:	f000 f82f 	bl	8011e20 <__malloc_unlock>
 8011dc2:	f104 000b 	add.w	r0, r4, #11
 8011dc6:	1d23      	adds	r3, r4, #4
 8011dc8:	f020 0007 	bic.w	r0, r0, #7
 8011dcc:	1ac2      	subs	r2, r0, r3
 8011dce:	bf1c      	itt	ne
 8011dd0:	1a1b      	subne	r3, r3, r0
 8011dd2:	50a3      	strne	r3, [r4, r2]
 8011dd4:	e7af      	b.n	8011d36 <_malloc_r+0x22>
 8011dd6:	6862      	ldr	r2, [r4, #4]
 8011dd8:	42a3      	cmp	r3, r4
 8011dda:	bf0c      	ite	eq
 8011ddc:	f8c8 2000 	streq.w	r2, [r8]
 8011de0:	605a      	strne	r2, [r3, #4]
 8011de2:	e7eb      	b.n	8011dbc <_malloc_r+0xa8>
 8011de4:	4623      	mov	r3, r4
 8011de6:	6864      	ldr	r4, [r4, #4]
 8011de8:	e7ae      	b.n	8011d48 <_malloc_r+0x34>
 8011dea:	463c      	mov	r4, r7
 8011dec:	687f      	ldr	r7, [r7, #4]
 8011dee:	e7b6      	b.n	8011d5e <_malloc_r+0x4a>
 8011df0:	461a      	mov	r2, r3
 8011df2:	685b      	ldr	r3, [r3, #4]
 8011df4:	42a3      	cmp	r3, r4
 8011df6:	d1fb      	bne.n	8011df0 <_malloc_r+0xdc>
 8011df8:	2300      	movs	r3, #0
 8011dfa:	6053      	str	r3, [r2, #4]
 8011dfc:	e7de      	b.n	8011dbc <_malloc_r+0xa8>
 8011dfe:	230c      	movs	r3, #12
 8011e00:	6033      	str	r3, [r6, #0]
 8011e02:	4630      	mov	r0, r6
 8011e04:	f000 f80c 	bl	8011e20 <__malloc_unlock>
 8011e08:	e794      	b.n	8011d34 <_malloc_r+0x20>
 8011e0a:	6005      	str	r5, [r0, #0]
 8011e0c:	e7d6      	b.n	8011dbc <_malloc_r+0xa8>
 8011e0e:	bf00      	nop
 8011e10:	20000a90 	.word	0x20000a90

08011e14 <__malloc_lock>:
 8011e14:	4801      	ldr	r0, [pc, #4]	@ (8011e1c <__malloc_lock+0x8>)
 8011e16:	f000 bf4a 	b.w	8012cae <__retarget_lock_acquire_recursive>
 8011e1a:	bf00      	nop
 8011e1c:	20000bd4 	.word	0x20000bd4

08011e20 <__malloc_unlock>:
 8011e20:	4801      	ldr	r0, [pc, #4]	@ (8011e28 <__malloc_unlock+0x8>)
 8011e22:	f000 bf45 	b.w	8012cb0 <__retarget_lock_release_recursive>
 8011e26:	bf00      	nop
 8011e28:	20000bd4 	.word	0x20000bd4

08011e2c <__cvt>:
 8011e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011e30:	ec57 6b10 	vmov	r6, r7, d0
 8011e34:	2f00      	cmp	r7, #0
 8011e36:	460c      	mov	r4, r1
 8011e38:	4619      	mov	r1, r3
 8011e3a:	463b      	mov	r3, r7
 8011e3c:	bfbb      	ittet	lt
 8011e3e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8011e42:	461f      	movlt	r7, r3
 8011e44:	2300      	movge	r3, #0
 8011e46:	232d      	movlt	r3, #45	@ 0x2d
 8011e48:	700b      	strb	r3, [r1, #0]
 8011e4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011e4c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8011e50:	4691      	mov	r9, r2
 8011e52:	f023 0820 	bic.w	r8, r3, #32
 8011e56:	bfbc      	itt	lt
 8011e58:	4632      	movlt	r2, r6
 8011e5a:	4616      	movlt	r6, r2
 8011e5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011e60:	d005      	beq.n	8011e6e <__cvt+0x42>
 8011e62:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8011e66:	d100      	bne.n	8011e6a <__cvt+0x3e>
 8011e68:	3401      	adds	r4, #1
 8011e6a:	2102      	movs	r1, #2
 8011e6c:	e000      	b.n	8011e70 <__cvt+0x44>
 8011e6e:	2103      	movs	r1, #3
 8011e70:	ab03      	add	r3, sp, #12
 8011e72:	9301      	str	r3, [sp, #4]
 8011e74:	ab02      	add	r3, sp, #8
 8011e76:	9300      	str	r3, [sp, #0]
 8011e78:	ec47 6b10 	vmov	d0, r6, r7
 8011e7c:	4653      	mov	r3, sl
 8011e7e:	4622      	mov	r2, r4
 8011e80:	f000 ffae 	bl	8012de0 <_dtoa_r>
 8011e84:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011e88:	4605      	mov	r5, r0
 8011e8a:	d119      	bne.n	8011ec0 <__cvt+0x94>
 8011e8c:	f019 0f01 	tst.w	r9, #1
 8011e90:	d00e      	beq.n	8011eb0 <__cvt+0x84>
 8011e92:	eb00 0904 	add.w	r9, r0, r4
 8011e96:	2200      	movs	r2, #0
 8011e98:	2300      	movs	r3, #0
 8011e9a:	4630      	mov	r0, r6
 8011e9c:	4639      	mov	r1, r7
 8011e9e:	f7ee fdeb 	bl	8000a78 <__aeabi_dcmpeq>
 8011ea2:	b108      	cbz	r0, 8011ea8 <__cvt+0x7c>
 8011ea4:	f8cd 900c 	str.w	r9, [sp, #12]
 8011ea8:	2230      	movs	r2, #48	@ 0x30
 8011eaa:	9b03      	ldr	r3, [sp, #12]
 8011eac:	454b      	cmp	r3, r9
 8011eae:	d31e      	bcc.n	8011eee <__cvt+0xc2>
 8011eb0:	9b03      	ldr	r3, [sp, #12]
 8011eb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011eb4:	1b5b      	subs	r3, r3, r5
 8011eb6:	4628      	mov	r0, r5
 8011eb8:	6013      	str	r3, [r2, #0]
 8011eba:	b004      	add	sp, #16
 8011ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ec0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011ec4:	eb00 0904 	add.w	r9, r0, r4
 8011ec8:	d1e5      	bne.n	8011e96 <__cvt+0x6a>
 8011eca:	7803      	ldrb	r3, [r0, #0]
 8011ecc:	2b30      	cmp	r3, #48	@ 0x30
 8011ece:	d10a      	bne.n	8011ee6 <__cvt+0xba>
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	4630      	mov	r0, r6
 8011ed6:	4639      	mov	r1, r7
 8011ed8:	f7ee fdce 	bl	8000a78 <__aeabi_dcmpeq>
 8011edc:	b918      	cbnz	r0, 8011ee6 <__cvt+0xba>
 8011ede:	f1c4 0401 	rsb	r4, r4, #1
 8011ee2:	f8ca 4000 	str.w	r4, [sl]
 8011ee6:	f8da 3000 	ldr.w	r3, [sl]
 8011eea:	4499      	add	r9, r3
 8011eec:	e7d3      	b.n	8011e96 <__cvt+0x6a>
 8011eee:	1c59      	adds	r1, r3, #1
 8011ef0:	9103      	str	r1, [sp, #12]
 8011ef2:	701a      	strb	r2, [r3, #0]
 8011ef4:	e7d9      	b.n	8011eaa <__cvt+0x7e>

08011ef6 <__exponent>:
 8011ef6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011ef8:	2900      	cmp	r1, #0
 8011efa:	bfba      	itte	lt
 8011efc:	4249      	neglt	r1, r1
 8011efe:	232d      	movlt	r3, #45	@ 0x2d
 8011f00:	232b      	movge	r3, #43	@ 0x2b
 8011f02:	2909      	cmp	r1, #9
 8011f04:	7002      	strb	r2, [r0, #0]
 8011f06:	7043      	strb	r3, [r0, #1]
 8011f08:	dd29      	ble.n	8011f5e <__exponent+0x68>
 8011f0a:	f10d 0307 	add.w	r3, sp, #7
 8011f0e:	461d      	mov	r5, r3
 8011f10:	270a      	movs	r7, #10
 8011f12:	461a      	mov	r2, r3
 8011f14:	fbb1 f6f7 	udiv	r6, r1, r7
 8011f18:	fb07 1416 	mls	r4, r7, r6, r1
 8011f1c:	3430      	adds	r4, #48	@ 0x30
 8011f1e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011f22:	460c      	mov	r4, r1
 8011f24:	2c63      	cmp	r4, #99	@ 0x63
 8011f26:	f103 33ff 	add.w	r3, r3, #4294967295
 8011f2a:	4631      	mov	r1, r6
 8011f2c:	dcf1      	bgt.n	8011f12 <__exponent+0x1c>
 8011f2e:	3130      	adds	r1, #48	@ 0x30
 8011f30:	1e94      	subs	r4, r2, #2
 8011f32:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011f36:	1c41      	adds	r1, r0, #1
 8011f38:	4623      	mov	r3, r4
 8011f3a:	42ab      	cmp	r3, r5
 8011f3c:	d30a      	bcc.n	8011f54 <__exponent+0x5e>
 8011f3e:	f10d 0309 	add.w	r3, sp, #9
 8011f42:	1a9b      	subs	r3, r3, r2
 8011f44:	42ac      	cmp	r4, r5
 8011f46:	bf88      	it	hi
 8011f48:	2300      	movhi	r3, #0
 8011f4a:	3302      	adds	r3, #2
 8011f4c:	4403      	add	r3, r0
 8011f4e:	1a18      	subs	r0, r3, r0
 8011f50:	b003      	add	sp, #12
 8011f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f54:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011f58:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011f5c:	e7ed      	b.n	8011f3a <__exponent+0x44>
 8011f5e:	2330      	movs	r3, #48	@ 0x30
 8011f60:	3130      	adds	r1, #48	@ 0x30
 8011f62:	7083      	strb	r3, [r0, #2]
 8011f64:	70c1      	strb	r1, [r0, #3]
 8011f66:	1d03      	adds	r3, r0, #4
 8011f68:	e7f1      	b.n	8011f4e <__exponent+0x58>
	...

08011f6c <_printf_float>:
 8011f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f70:	b08d      	sub	sp, #52	@ 0x34
 8011f72:	460c      	mov	r4, r1
 8011f74:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011f78:	4616      	mov	r6, r2
 8011f7a:	461f      	mov	r7, r3
 8011f7c:	4605      	mov	r5, r0
 8011f7e:	f000 fe11 	bl	8012ba4 <_localeconv_r>
 8011f82:	6803      	ldr	r3, [r0, #0]
 8011f84:	9304      	str	r3, [sp, #16]
 8011f86:	4618      	mov	r0, r3
 8011f88:	f7ee f94a 	bl	8000220 <strlen>
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011f90:	f8d8 3000 	ldr.w	r3, [r8]
 8011f94:	9005      	str	r0, [sp, #20]
 8011f96:	3307      	adds	r3, #7
 8011f98:	f023 0307 	bic.w	r3, r3, #7
 8011f9c:	f103 0208 	add.w	r2, r3, #8
 8011fa0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011fa4:	f8d4 b000 	ldr.w	fp, [r4]
 8011fa8:	f8c8 2000 	str.w	r2, [r8]
 8011fac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011fb0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8011fb4:	9307      	str	r3, [sp, #28]
 8011fb6:	f8cd 8018 	str.w	r8, [sp, #24]
 8011fba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8011fbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011fc2:	4b9c      	ldr	r3, [pc, #624]	@ (8012234 <_printf_float+0x2c8>)
 8011fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8011fc8:	f7ee fd88 	bl	8000adc <__aeabi_dcmpun>
 8011fcc:	bb70      	cbnz	r0, 801202c <_printf_float+0xc0>
 8011fce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011fd2:	4b98      	ldr	r3, [pc, #608]	@ (8012234 <_printf_float+0x2c8>)
 8011fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8011fd8:	f7ee fd62 	bl	8000aa0 <__aeabi_dcmple>
 8011fdc:	bb30      	cbnz	r0, 801202c <_printf_float+0xc0>
 8011fde:	2200      	movs	r2, #0
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	4640      	mov	r0, r8
 8011fe4:	4649      	mov	r1, r9
 8011fe6:	f7ee fd51 	bl	8000a8c <__aeabi_dcmplt>
 8011fea:	b110      	cbz	r0, 8011ff2 <_printf_float+0x86>
 8011fec:	232d      	movs	r3, #45	@ 0x2d
 8011fee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011ff2:	4a91      	ldr	r2, [pc, #580]	@ (8012238 <_printf_float+0x2cc>)
 8011ff4:	4b91      	ldr	r3, [pc, #580]	@ (801223c <_printf_float+0x2d0>)
 8011ff6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011ffa:	bf94      	ite	ls
 8011ffc:	4690      	movls	r8, r2
 8011ffe:	4698      	movhi	r8, r3
 8012000:	2303      	movs	r3, #3
 8012002:	6123      	str	r3, [r4, #16]
 8012004:	f02b 0304 	bic.w	r3, fp, #4
 8012008:	6023      	str	r3, [r4, #0]
 801200a:	f04f 0900 	mov.w	r9, #0
 801200e:	9700      	str	r7, [sp, #0]
 8012010:	4633      	mov	r3, r6
 8012012:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012014:	4621      	mov	r1, r4
 8012016:	4628      	mov	r0, r5
 8012018:	f000 f9d2 	bl	80123c0 <_printf_common>
 801201c:	3001      	adds	r0, #1
 801201e:	f040 808d 	bne.w	801213c <_printf_float+0x1d0>
 8012022:	f04f 30ff 	mov.w	r0, #4294967295
 8012026:	b00d      	add	sp, #52	@ 0x34
 8012028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801202c:	4642      	mov	r2, r8
 801202e:	464b      	mov	r3, r9
 8012030:	4640      	mov	r0, r8
 8012032:	4649      	mov	r1, r9
 8012034:	f7ee fd52 	bl	8000adc <__aeabi_dcmpun>
 8012038:	b140      	cbz	r0, 801204c <_printf_float+0xe0>
 801203a:	464b      	mov	r3, r9
 801203c:	2b00      	cmp	r3, #0
 801203e:	bfbc      	itt	lt
 8012040:	232d      	movlt	r3, #45	@ 0x2d
 8012042:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012046:	4a7e      	ldr	r2, [pc, #504]	@ (8012240 <_printf_float+0x2d4>)
 8012048:	4b7e      	ldr	r3, [pc, #504]	@ (8012244 <_printf_float+0x2d8>)
 801204a:	e7d4      	b.n	8011ff6 <_printf_float+0x8a>
 801204c:	6863      	ldr	r3, [r4, #4]
 801204e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8012052:	9206      	str	r2, [sp, #24]
 8012054:	1c5a      	adds	r2, r3, #1
 8012056:	d13b      	bne.n	80120d0 <_printf_float+0x164>
 8012058:	2306      	movs	r3, #6
 801205a:	6063      	str	r3, [r4, #4]
 801205c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012060:	2300      	movs	r3, #0
 8012062:	6022      	str	r2, [r4, #0]
 8012064:	9303      	str	r3, [sp, #12]
 8012066:	ab0a      	add	r3, sp, #40	@ 0x28
 8012068:	e9cd a301 	strd	sl, r3, [sp, #4]
 801206c:	ab09      	add	r3, sp, #36	@ 0x24
 801206e:	9300      	str	r3, [sp, #0]
 8012070:	6861      	ldr	r1, [r4, #4]
 8012072:	ec49 8b10 	vmov	d0, r8, r9
 8012076:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801207a:	4628      	mov	r0, r5
 801207c:	f7ff fed6 	bl	8011e2c <__cvt>
 8012080:	9b06      	ldr	r3, [sp, #24]
 8012082:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012084:	2b47      	cmp	r3, #71	@ 0x47
 8012086:	4680      	mov	r8, r0
 8012088:	d129      	bne.n	80120de <_printf_float+0x172>
 801208a:	1cc8      	adds	r0, r1, #3
 801208c:	db02      	blt.n	8012094 <_printf_float+0x128>
 801208e:	6863      	ldr	r3, [r4, #4]
 8012090:	4299      	cmp	r1, r3
 8012092:	dd41      	ble.n	8012118 <_printf_float+0x1ac>
 8012094:	f1aa 0a02 	sub.w	sl, sl, #2
 8012098:	fa5f fa8a 	uxtb.w	sl, sl
 801209c:	3901      	subs	r1, #1
 801209e:	4652      	mov	r2, sl
 80120a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80120a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80120a6:	f7ff ff26 	bl	8011ef6 <__exponent>
 80120aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80120ac:	1813      	adds	r3, r2, r0
 80120ae:	2a01      	cmp	r2, #1
 80120b0:	4681      	mov	r9, r0
 80120b2:	6123      	str	r3, [r4, #16]
 80120b4:	dc02      	bgt.n	80120bc <_printf_float+0x150>
 80120b6:	6822      	ldr	r2, [r4, #0]
 80120b8:	07d2      	lsls	r2, r2, #31
 80120ba:	d501      	bpl.n	80120c0 <_printf_float+0x154>
 80120bc:	3301      	adds	r3, #1
 80120be:	6123      	str	r3, [r4, #16]
 80120c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d0a2      	beq.n	801200e <_printf_float+0xa2>
 80120c8:	232d      	movs	r3, #45	@ 0x2d
 80120ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80120ce:	e79e      	b.n	801200e <_printf_float+0xa2>
 80120d0:	9a06      	ldr	r2, [sp, #24]
 80120d2:	2a47      	cmp	r2, #71	@ 0x47
 80120d4:	d1c2      	bne.n	801205c <_printf_float+0xf0>
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d1c0      	bne.n	801205c <_printf_float+0xf0>
 80120da:	2301      	movs	r3, #1
 80120dc:	e7bd      	b.n	801205a <_printf_float+0xee>
 80120de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80120e2:	d9db      	bls.n	801209c <_printf_float+0x130>
 80120e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80120e8:	d118      	bne.n	801211c <_printf_float+0x1b0>
 80120ea:	2900      	cmp	r1, #0
 80120ec:	6863      	ldr	r3, [r4, #4]
 80120ee:	dd0b      	ble.n	8012108 <_printf_float+0x19c>
 80120f0:	6121      	str	r1, [r4, #16]
 80120f2:	b913      	cbnz	r3, 80120fa <_printf_float+0x18e>
 80120f4:	6822      	ldr	r2, [r4, #0]
 80120f6:	07d0      	lsls	r0, r2, #31
 80120f8:	d502      	bpl.n	8012100 <_printf_float+0x194>
 80120fa:	3301      	adds	r3, #1
 80120fc:	440b      	add	r3, r1
 80120fe:	6123      	str	r3, [r4, #16]
 8012100:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012102:	f04f 0900 	mov.w	r9, #0
 8012106:	e7db      	b.n	80120c0 <_printf_float+0x154>
 8012108:	b913      	cbnz	r3, 8012110 <_printf_float+0x1a4>
 801210a:	6822      	ldr	r2, [r4, #0]
 801210c:	07d2      	lsls	r2, r2, #31
 801210e:	d501      	bpl.n	8012114 <_printf_float+0x1a8>
 8012110:	3302      	adds	r3, #2
 8012112:	e7f4      	b.n	80120fe <_printf_float+0x192>
 8012114:	2301      	movs	r3, #1
 8012116:	e7f2      	b.n	80120fe <_printf_float+0x192>
 8012118:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801211c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801211e:	4299      	cmp	r1, r3
 8012120:	db05      	blt.n	801212e <_printf_float+0x1c2>
 8012122:	6823      	ldr	r3, [r4, #0]
 8012124:	6121      	str	r1, [r4, #16]
 8012126:	07d8      	lsls	r0, r3, #31
 8012128:	d5ea      	bpl.n	8012100 <_printf_float+0x194>
 801212a:	1c4b      	adds	r3, r1, #1
 801212c:	e7e7      	b.n	80120fe <_printf_float+0x192>
 801212e:	2900      	cmp	r1, #0
 8012130:	bfd4      	ite	le
 8012132:	f1c1 0202 	rsble	r2, r1, #2
 8012136:	2201      	movgt	r2, #1
 8012138:	4413      	add	r3, r2
 801213a:	e7e0      	b.n	80120fe <_printf_float+0x192>
 801213c:	6823      	ldr	r3, [r4, #0]
 801213e:	055a      	lsls	r2, r3, #21
 8012140:	d407      	bmi.n	8012152 <_printf_float+0x1e6>
 8012142:	6923      	ldr	r3, [r4, #16]
 8012144:	4642      	mov	r2, r8
 8012146:	4631      	mov	r1, r6
 8012148:	4628      	mov	r0, r5
 801214a:	47b8      	blx	r7
 801214c:	3001      	adds	r0, #1
 801214e:	d12b      	bne.n	80121a8 <_printf_float+0x23c>
 8012150:	e767      	b.n	8012022 <_printf_float+0xb6>
 8012152:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012156:	f240 80dd 	bls.w	8012314 <_printf_float+0x3a8>
 801215a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801215e:	2200      	movs	r2, #0
 8012160:	2300      	movs	r3, #0
 8012162:	f7ee fc89 	bl	8000a78 <__aeabi_dcmpeq>
 8012166:	2800      	cmp	r0, #0
 8012168:	d033      	beq.n	80121d2 <_printf_float+0x266>
 801216a:	4a37      	ldr	r2, [pc, #220]	@ (8012248 <_printf_float+0x2dc>)
 801216c:	2301      	movs	r3, #1
 801216e:	4631      	mov	r1, r6
 8012170:	4628      	mov	r0, r5
 8012172:	47b8      	blx	r7
 8012174:	3001      	adds	r0, #1
 8012176:	f43f af54 	beq.w	8012022 <_printf_float+0xb6>
 801217a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801217e:	4543      	cmp	r3, r8
 8012180:	db02      	blt.n	8012188 <_printf_float+0x21c>
 8012182:	6823      	ldr	r3, [r4, #0]
 8012184:	07d8      	lsls	r0, r3, #31
 8012186:	d50f      	bpl.n	80121a8 <_printf_float+0x23c>
 8012188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801218c:	4631      	mov	r1, r6
 801218e:	4628      	mov	r0, r5
 8012190:	47b8      	blx	r7
 8012192:	3001      	adds	r0, #1
 8012194:	f43f af45 	beq.w	8012022 <_printf_float+0xb6>
 8012198:	f04f 0900 	mov.w	r9, #0
 801219c:	f108 38ff 	add.w	r8, r8, #4294967295
 80121a0:	f104 0a1a 	add.w	sl, r4, #26
 80121a4:	45c8      	cmp	r8, r9
 80121a6:	dc09      	bgt.n	80121bc <_printf_float+0x250>
 80121a8:	6823      	ldr	r3, [r4, #0]
 80121aa:	079b      	lsls	r3, r3, #30
 80121ac:	f100 8103 	bmi.w	80123b6 <_printf_float+0x44a>
 80121b0:	68e0      	ldr	r0, [r4, #12]
 80121b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80121b4:	4298      	cmp	r0, r3
 80121b6:	bfb8      	it	lt
 80121b8:	4618      	movlt	r0, r3
 80121ba:	e734      	b.n	8012026 <_printf_float+0xba>
 80121bc:	2301      	movs	r3, #1
 80121be:	4652      	mov	r2, sl
 80121c0:	4631      	mov	r1, r6
 80121c2:	4628      	mov	r0, r5
 80121c4:	47b8      	blx	r7
 80121c6:	3001      	adds	r0, #1
 80121c8:	f43f af2b 	beq.w	8012022 <_printf_float+0xb6>
 80121cc:	f109 0901 	add.w	r9, r9, #1
 80121d0:	e7e8      	b.n	80121a4 <_printf_float+0x238>
 80121d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	dc39      	bgt.n	801224c <_printf_float+0x2e0>
 80121d8:	4a1b      	ldr	r2, [pc, #108]	@ (8012248 <_printf_float+0x2dc>)
 80121da:	2301      	movs	r3, #1
 80121dc:	4631      	mov	r1, r6
 80121de:	4628      	mov	r0, r5
 80121e0:	47b8      	blx	r7
 80121e2:	3001      	adds	r0, #1
 80121e4:	f43f af1d 	beq.w	8012022 <_printf_float+0xb6>
 80121e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80121ec:	ea59 0303 	orrs.w	r3, r9, r3
 80121f0:	d102      	bne.n	80121f8 <_printf_float+0x28c>
 80121f2:	6823      	ldr	r3, [r4, #0]
 80121f4:	07d9      	lsls	r1, r3, #31
 80121f6:	d5d7      	bpl.n	80121a8 <_printf_float+0x23c>
 80121f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80121fc:	4631      	mov	r1, r6
 80121fe:	4628      	mov	r0, r5
 8012200:	47b8      	blx	r7
 8012202:	3001      	adds	r0, #1
 8012204:	f43f af0d 	beq.w	8012022 <_printf_float+0xb6>
 8012208:	f04f 0a00 	mov.w	sl, #0
 801220c:	f104 0b1a 	add.w	fp, r4, #26
 8012210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012212:	425b      	negs	r3, r3
 8012214:	4553      	cmp	r3, sl
 8012216:	dc01      	bgt.n	801221c <_printf_float+0x2b0>
 8012218:	464b      	mov	r3, r9
 801221a:	e793      	b.n	8012144 <_printf_float+0x1d8>
 801221c:	2301      	movs	r3, #1
 801221e:	465a      	mov	r2, fp
 8012220:	4631      	mov	r1, r6
 8012222:	4628      	mov	r0, r5
 8012224:	47b8      	blx	r7
 8012226:	3001      	adds	r0, #1
 8012228:	f43f aefb 	beq.w	8012022 <_printf_float+0xb6>
 801222c:	f10a 0a01 	add.w	sl, sl, #1
 8012230:	e7ee      	b.n	8012210 <_printf_float+0x2a4>
 8012232:	bf00      	nop
 8012234:	7fefffff 	.word	0x7fefffff
 8012238:	0801ad0e 	.word	0x0801ad0e
 801223c:	0801ad12 	.word	0x0801ad12
 8012240:	0801ad16 	.word	0x0801ad16
 8012244:	0801ad1a 	.word	0x0801ad1a
 8012248:	0801ad1e 	.word	0x0801ad1e
 801224c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801224e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012252:	4553      	cmp	r3, sl
 8012254:	bfa8      	it	ge
 8012256:	4653      	movge	r3, sl
 8012258:	2b00      	cmp	r3, #0
 801225a:	4699      	mov	r9, r3
 801225c:	dc36      	bgt.n	80122cc <_printf_float+0x360>
 801225e:	f04f 0b00 	mov.w	fp, #0
 8012262:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012266:	f104 021a 	add.w	r2, r4, #26
 801226a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801226c:	9306      	str	r3, [sp, #24]
 801226e:	eba3 0309 	sub.w	r3, r3, r9
 8012272:	455b      	cmp	r3, fp
 8012274:	dc31      	bgt.n	80122da <_printf_float+0x36e>
 8012276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012278:	459a      	cmp	sl, r3
 801227a:	dc3a      	bgt.n	80122f2 <_printf_float+0x386>
 801227c:	6823      	ldr	r3, [r4, #0]
 801227e:	07da      	lsls	r2, r3, #31
 8012280:	d437      	bmi.n	80122f2 <_printf_float+0x386>
 8012282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012284:	ebaa 0903 	sub.w	r9, sl, r3
 8012288:	9b06      	ldr	r3, [sp, #24]
 801228a:	ebaa 0303 	sub.w	r3, sl, r3
 801228e:	4599      	cmp	r9, r3
 8012290:	bfa8      	it	ge
 8012292:	4699      	movge	r9, r3
 8012294:	f1b9 0f00 	cmp.w	r9, #0
 8012298:	dc33      	bgt.n	8012302 <_printf_float+0x396>
 801229a:	f04f 0800 	mov.w	r8, #0
 801229e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80122a2:	f104 0b1a 	add.w	fp, r4, #26
 80122a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122a8:	ebaa 0303 	sub.w	r3, sl, r3
 80122ac:	eba3 0309 	sub.w	r3, r3, r9
 80122b0:	4543      	cmp	r3, r8
 80122b2:	f77f af79 	ble.w	80121a8 <_printf_float+0x23c>
 80122b6:	2301      	movs	r3, #1
 80122b8:	465a      	mov	r2, fp
 80122ba:	4631      	mov	r1, r6
 80122bc:	4628      	mov	r0, r5
 80122be:	47b8      	blx	r7
 80122c0:	3001      	adds	r0, #1
 80122c2:	f43f aeae 	beq.w	8012022 <_printf_float+0xb6>
 80122c6:	f108 0801 	add.w	r8, r8, #1
 80122ca:	e7ec      	b.n	80122a6 <_printf_float+0x33a>
 80122cc:	4642      	mov	r2, r8
 80122ce:	4631      	mov	r1, r6
 80122d0:	4628      	mov	r0, r5
 80122d2:	47b8      	blx	r7
 80122d4:	3001      	adds	r0, #1
 80122d6:	d1c2      	bne.n	801225e <_printf_float+0x2f2>
 80122d8:	e6a3      	b.n	8012022 <_printf_float+0xb6>
 80122da:	2301      	movs	r3, #1
 80122dc:	4631      	mov	r1, r6
 80122de:	4628      	mov	r0, r5
 80122e0:	9206      	str	r2, [sp, #24]
 80122e2:	47b8      	blx	r7
 80122e4:	3001      	adds	r0, #1
 80122e6:	f43f ae9c 	beq.w	8012022 <_printf_float+0xb6>
 80122ea:	9a06      	ldr	r2, [sp, #24]
 80122ec:	f10b 0b01 	add.w	fp, fp, #1
 80122f0:	e7bb      	b.n	801226a <_printf_float+0x2fe>
 80122f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80122f6:	4631      	mov	r1, r6
 80122f8:	4628      	mov	r0, r5
 80122fa:	47b8      	blx	r7
 80122fc:	3001      	adds	r0, #1
 80122fe:	d1c0      	bne.n	8012282 <_printf_float+0x316>
 8012300:	e68f      	b.n	8012022 <_printf_float+0xb6>
 8012302:	9a06      	ldr	r2, [sp, #24]
 8012304:	464b      	mov	r3, r9
 8012306:	4442      	add	r2, r8
 8012308:	4631      	mov	r1, r6
 801230a:	4628      	mov	r0, r5
 801230c:	47b8      	blx	r7
 801230e:	3001      	adds	r0, #1
 8012310:	d1c3      	bne.n	801229a <_printf_float+0x32e>
 8012312:	e686      	b.n	8012022 <_printf_float+0xb6>
 8012314:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012318:	f1ba 0f01 	cmp.w	sl, #1
 801231c:	dc01      	bgt.n	8012322 <_printf_float+0x3b6>
 801231e:	07db      	lsls	r3, r3, #31
 8012320:	d536      	bpl.n	8012390 <_printf_float+0x424>
 8012322:	2301      	movs	r3, #1
 8012324:	4642      	mov	r2, r8
 8012326:	4631      	mov	r1, r6
 8012328:	4628      	mov	r0, r5
 801232a:	47b8      	blx	r7
 801232c:	3001      	adds	r0, #1
 801232e:	f43f ae78 	beq.w	8012022 <_printf_float+0xb6>
 8012332:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012336:	4631      	mov	r1, r6
 8012338:	4628      	mov	r0, r5
 801233a:	47b8      	blx	r7
 801233c:	3001      	adds	r0, #1
 801233e:	f43f ae70 	beq.w	8012022 <_printf_float+0xb6>
 8012342:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012346:	2200      	movs	r2, #0
 8012348:	2300      	movs	r3, #0
 801234a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801234e:	f7ee fb93 	bl	8000a78 <__aeabi_dcmpeq>
 8012352:	b9c0      	cbnz	r0, 8012386 <_printf_float+0x41a>
 8012354:	4653      	mov	r3, sl
 8012356:	f108 0201 	add.w	r2, r8, #1
 801235a:	4631      	mov	r1, r6
 801235c:	4628      	mov	r0, r5
 801235e:	47b8      	blx	r7
 8012360:	3001      	adds	r0, #1
 8012362:	d10c      	bne.n	801237e <_printf_float+0x412>
 8012364:	e65d      	b.n	8012022 <_printf_float+0xb6>
 8012366:	2301      	movs	r3, #1
 8012368:	465a      	mov	r2, fp
 801236a:	4631      	mov	r1, r6
 801236c:	4628      	mov	r0, r5
 801236e:	47b8      	blx	r7
 8012370:	3001      	adds	r0, #1
 8012372:	f43f ae56 	beq.w	8012022 <_printf_float+0xb6>
 8012376:	f108 0801 	add.w	r8, r8, #1
 801237a:	45d0      	cmp	r8, sl
 801237c:	dbf3      	blt.n	8012366 <_printf_float+0x3fa>
 801237e:	464b      	mov	r3, r9
 8012380:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012384:	e6df      	b.n	8012146 <_printf_float+0x1da>
 8012386:	f04f 0800 	mov.w	r8, #0
 801238a:	f104 0b1a 	add.w	fp, r4, #26
 801238e:	e7f4      	b.n	801237a <_printf_float+0x40e>
 8012390:	2301      	movs	r3, #1
 8012392:	4642      	mov	r2, r8
 8012394:	e7e1      	b.n	801235a <_printf_float+0x3ee>
 8012396:	2301      	movs	r3, #1
 8012398:	464a      	mov	r2, r9
 801239a:	4631      	mov	r1, r6
 801239c:	4628      	mov	r0, r5
 801239e:	47b8      	blx	r7
 80123a0:	3001      	adds	r0, #1
 80123a2:	f43f ae3e 	beq.w	8012022 <_printf_float+0xb6>
 80123a6:	f108 0801 	add.w	r8, r8, #1
 80123aa:	68e3      	ldr	r3, [r4, #12]
 80123ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80123ae:	1a5b      	subs	r3, r3, r1
 80123b0:	4543      	cmp	r3, r8
 80123b2:	dcf0      	bgt.n	8012396 <_printf_float+0x42a>
 80123b4:	e6fc      	b.n	80121b0 <_printf_float+0x244>
 80123b6:	f04f 0800 	mov.w	r8, #0
 80123ba:	f104 0919 	add.w	r9, r4, #25
 80123be:	e7f4      	b.n	80123aa <_printf_float+0x43e>

080123c0 <_printf_common>:
 80123c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123c4:	4616      	mov	r6, r2
 80123c6:	4698      	mov	r8, r3
 80123c8:	688a      	ldr	r2, [r1, #8]
 80123ca:	690b      	ldr	r3, [r1, #16]
 80123cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80123d0:	4293      	cmp	r3, r2
 80123d2:	bfb8      	it	lt
 80123d4:	4613      	movlt	r3, r2
 80123d6:	6033      	str	r3, [r6, #0]
 80123d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80123dc:	4607      	mov	r7, r0
 80123de:	460c      	mov	r4, r1
 80123e0:	b10a      	cbz	r2, 80123e6 <_printf_common+0x26>
 80123e2:	3301      	adds	r3, #1
 80123e4:	6033      	str	r3, [r6, #0]
 80123e6:	6823      	ldr	r3, [r4, #0]
 80123e8:	0699      	lsls	r1, r3, #26
 80123ea:	bf42      	ittt	mi
 80123ec:	6833      	ldrmi	r3, [r6, #0]
 80123ee:	3302      	addmi	r3, #2
 80123f0:	6033      	strmi	r3, [r6, #0]
 80123f2:	6825      	ldr	r5, [r4, #0]
 80123f4:	f015 0506 	ands.w	r5, r5, #6
 80123f8:	d106      	bne.n	8012408 <_printf_common+0x48>
 80123fa:	f104 0a19 	add.w	sl, r4, #25
 80123fe:	68e3      	ldr	r3, [r4, #12]
 8012400:	6832      	ldr	r2, [r6, #0]
 8012402:	1a9b      	subs	r3, r3, r2
 8012404:	42ab      	cmp	r3, r5
 8012406:	dc26      	bgt.n	8012456 <_printf_common+0x96>
 8012408:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801240c:	6822      	ldr	r2, [r4, #0]
 801240e:	3b00      	subs	r3, #0
 8012410:	bf18      	it	ne
 8012412:	2301      	movne	r3, #1
 8012414:	0692      	lsls	r2, r2, #26
 8012416:	d42b      	bmi.n	8012470 <_printf_common+0xb0>
 8012418:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801241c:	4641      	mov	r1, r8
 801241e:	4638      	mov	r0, r7
 8012420:	47c8      	blx	r9
 8012422:	3001      	adds	r0, #1
 8012424:	d01e      	beq.n	8012464 <_printf_common+0xa4>
 8012426:	6823      	ldr	r3, [r4, #0]
 8012428:	6922      	ldr	r2, [r4, #16]
 801242a:	f003 0306 	and.w	r3, r3, #6
 801242e:	2b04      	cmp	r3, #4
 8012430:	bf02      	ittt	eq
 8012432:	68e5      	ldreq	r5, [r4, #12]
 8012434:	6833      	ldreq	r3, [r6, #0]
 8012436:	1aed      	subeq	r5, r5, r3
 8012438:	68a3      	ldr	r3, [r4, #8]
 801243a:	bf0c      	ite	eq
 801243c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012440:	2500      	movne	r5, #0
 8012442:	4293      	cmp	r3, r2
 8012444:	bfc4      	itt	gt
 8012446:	1a9b      	subgt	r3, r3, r2
 8012448:	18ed      	addgt	r5, r5, r3
 801244a:	2600      	movs	r6, #0
 801244c:	341a      	adds	r4, #26
 801244e:	42b5      	cmp	r5, r6
 8012450:	d11a      	bne.n	8012488 <_printf_common+0xc8>
 8012452:	2000      	movs	r0, #0
 8012454:	e008      	b.n	8012468 <_printf_common+0xa8>
 8012456:	2301      	movs	r3, #1
 8012458:	4652      	mov	r2, sl
 801245a:	4641      	mov	r1, r8
 801245c:	4638      	mov	r0, r7
 801245e:	47c8      	blx	r9
 8012460:	3001      	adds	r0, #1
 8012462:	d103      	bne.n	801246c <_printf_common+0xac>
 8012464:	f04f 30ff 	mov.w	r0, #4294967295
 8012468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801246c:	3501      	adds	r5, #1
 801246e:	e7c6      	b.n	80123fe <_printf_common+0x3e>
 8012470:	18e1      	adds	r1, r4, r3
 8012472:	1c5a      	adds	r2, r3, #1
 8012474:	2030      	movs	r0, #48	@ 0x30
 8012476:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801247a:	4422      	add	r2, r4
 801247c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012480:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012484:	3302      	adds	r3, #2
 8012486:	e7c7      	b.n	8012418 <_printf_common+0x58>
 8012488:	2301      	movs	r3, #1
 801248a:	4622      	mov	r2, r4
 801248c:	4641      	mov	r1, r8
 801248e:	4638      	mov	r0, r7
 8012490:	47c8      	blx	r9
 8012492:	3001      	adds	r0, #1
 8012494:	d0e6      	beq.n	8012464 <_printf_common+0xa4>
 8012496:	3601      	adds	r6, #1
 8012498:	e7d9      	b.n	801244e <_printf_common+0x8e>
	...

0801249c <_printf_i>:
 801249c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80124a0:	7e0f      	ldrb	r7, [r1, #24]
 80124a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80124a4:	2f78      	cmp	r7, #120	@ 0x78
 80124a6:	4691      	mov	r9, r2
 80124a8:	4680      	mov	r8, r0
 80124aa:	460c      	mov	r4, r1
 80124ac:	469a      	mov	sl, r3
 80124ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80124b2:	d807      	bhi.n	80124c4 <_printf_i+0x28>
 80124b4:	2f62      	cmp	r7, #98	@ 0x62
 80124b6:	d80a      	bhi.n	80124ce <_printf_i+0x32>
 80124b8:	2f00      	cmp	r7, #0
 80124ba:	f000 80d2 	beq.w	8012662 <_printf_i+0x1c6>
 80124be:	2f58      	cmp	r7, #88	@ 0x58
 80124c0:	f000 80b9 	beq.w	8012636 <_printf_i+0x19a>
 80124c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80124c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80124cc:	e03a      	b.n	8012544 <_printf_i+0xa8>
 80124ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80124d2:	2b15      	cmp	r3, #21
 80124d4:	d8f6      	bhi.n	80124c4 <_printf_i+0x28>
 80124d6:	a101      	add	r1, pc, #4	@ (adr r1, 80124dc <_printf_i+0x40>)
 80124d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80124dc:	08012535 	.word	0x08012535
 80124e0:	08012549 	.word	0x08012549
 80124e4:	080124c5 	.word	0x080124c5
 80124e8:	080124c5 	.word	0x080124c5
 80124ec:	080124c5 	.word	0x080124c5
 80124f0:	080124c5 	.word	0x080124c5
 80124f4:	08012549 	.word	0x08012549
 80124f8:	080124c5 	.word	0x080124c5
 80124fc:	080124c5 	.word	0x080124c5
 8012500:	080124c5 	.word	0x080124c5
 8012504:	080124c5 	.word	0x080124c5
 8012508:	08012649 	.word	0x08012649
 801250c:	08012573 	.word	0x08012573
 8012510:	08012603 	.word	0x08012603
 8012514:	080124c5 	.word	0x080124c5
 8012518:	080124c5 	.word	0x080124c5
 801251c:	0801266b 	.word	0x0801266b
 8012520:	080124c5 	.word	0x080124c5
 8012524:	08012573 	.word	0x08012573
 8012528:	080124c5 	.word	0x080124c5
 801252c:	080124c5 	.word	0x080124c5
 8012530:	0801260b 	.word	0x0801260b
 8012534:	6833      	ldr	r3, [r6, #0]
 8012536:	1d1a      	adds	r2, r3, #4
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	6032      	str	r2, [r6, #0]
 801253c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012540:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012544:	2301      	movs	r3, #1
 8012546:	e09d      	b.n	8012684 <_printf_i+0x1e8>
 8012548:	6833      	ldr	r3, [r6, #0]
 801254a:	6820      	ldr	r0, [r4, #0]
 801254c:	1d19      	adds	r1, r3, #4
 801254e:	6031      	str	r1, [r6, #0]
 8012550:	0606      	lsls	r6, r0, #24
 8012552:	d501      	bpl.n	8012558 <_printf_i+0xbc>
 8012554:	681d      	ldr	r5, [r3, #0]
 8012556:	e003      	b.n	8012560 <_printf_i+0xc4>
 8012558:	0645      	lsls	r5, r0, #25
 801255a:	d5fb      	bpl.n	8012554 <_printf_i+0xb8>
 801255c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012560:	2d00      	cmp	r5, #0
 8012562:	da03      	bge.n	801256c <_printf_i+0xd0>
 8012564:	232d      	movs	r3, #45	@ 0x2d
 8012566:	426d      	negs	r5, r5
 8012568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801256c:	4859      	ldr	r0, [pc, #356]	@ (80126d4 <_printf_i+0x238>)
 801256e:	230a      	movs	r3, #10
 8012570:	e011      	b.n	8012596 <_printf_i+0xfa>
 8012572:	6821      	ldr	r1, [r4, #0]
 8012574:	6833      	ldr	r3, [r6, #0]
 8012576:	0608      	lsls	r0, r1, #24
 8012578:	f853 5b04 	ldr.w	r5, [r3], #4
 801257c:	d402      	bmi.n	8012584 <_printf_i+0xe8>
 801257e:	0649      	lsls	r1, r1, #25
 8012580:	bf48      	it	mi
 8012582:	b2ad      	uxthmi	r5, r5
 8012584:	2f6f      	cmp	r7, #111	@ 0x6f
 8012586:	4853      	ldr	r0, [pc, #332]	@ (80126d4 <_printf_i+0x238>)
 8012588:	6033      	str	r3, [r6, #0]
 801258a:	bf14      	ite	ne
 801258c:	230a      	movne	r3, #10
 801258e:	2308      	moveq	r3, #8
 8012590:	2100      	movs	r1, #0
 8012592:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012596:	6866      	ldr	r6, [r4, #4]
 8012598:	60a6      	str	r6, [r4, #8]
 801259a:	2e00      	cmp	r6, #0
 801259c:	bfa2      	ittt	ge
 801259e:	6821      	ldrge	r1, [r4, #0]
 80125a0:	f021 0104 	bicge.w	r1, r1, #4
 80125a4:	6021      	strge	r1, [r4, #0]
 80125a6:	b90d      	cbnz	r5, 80125ac <_printf_i+0x110>
 80125a8:	2e00      	cmp	r6, #0
 80125aa:	d04b      	beq.n	8012644 <_printf_i+0x1a8>
 80125ac:	4616      	mov	r6, r2
 80125ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80125b2:	fb03 5711 	mls	r7, r3, r1, r5
 80125b6:	5dc7      	ldrb	r7, [r0, r7]
 80125b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80125bc:	462f      	mov	r7, r5
 80125be:	42bb      	cmp	r3, r7
 80125c0:	460d      	mov	r5, r1
 80125c2:	d9f4      	bls.n	80125ae <_printf_i+0x112>
 80125c4:	2b08      	cmp	r3, #8
 80125c6:	d10b      	bne.n	80125e0 <_printf_i+0x144>
 80125c8:	6823      	ldr	r3, [r4, #0]
 80125ca:	07df      	lsls	r7, r3, #31
 80125cc:	d508      	bpl.n	80125e0 <_printf_i+0x144>
 80125ce:	6923      	ldr	r3, [r4, #16]
 80125d0:	6861      	ldr	r1, [r4, #4]
 80125d2:	4299      	cmp	r1, r3
 80125d4:	bfde      	ittt	le
 80125d6:	2330      	movle	r3, #48	@ 0x30
 80125d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80125dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80125e0:	1b92      	subs	r2, r2, r6
 80125e2:	6122      	str	r2, [r4, #16]
 80125e4:	f8cd a000 	str.w	sl, [sp]
 80125e8:	464b      	mov	r3, r9
 80125ea:	aa03      	add	r2, sp, #12
 80125ec:	4621      	mov	r1, r4
 80125ee:	4640      	mov	r0, r8
 80125f0:	f7ff fee6 	bl	80123c0 <_printf_common>
 80125f4:	3001      	adds	r0, #1
 80125f6:	d14a      	bne.n	801268e <_printf_i+0x1f2>
 80125f8:	f04f 30ff 	mov.w	r0, #4294967295
 80125fc:	b004      	add	sp, #16
 80125fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012602:	6823      	ldr	r3, [r4, #0]
 8012604:	f043 0320 	orr.w	r3, r3, #32
 8012608:	6023      	str	r3, [r4, #0]
 801260a:	4833      	ldr	r0, [pc, #204]	@ (80126d8 <_printf_i+0x23c>)
 801260c:	2778      	movs	r7, #120	@ 0x78
 801260e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012612:	6823      	ldr	r3, [r4, #0]
 8012614:	6831      	ldr	r1, [r6, #0]
 8012616:	061f      	lsls	r7, r3, #24
 8012618:	f851 5b04 	ldr.w	r5, [r1], #4
 801261c:	d402      	bmi.n	8012624 <_printf_i+0x188>
 801261e:	065f      	lsls	r7, r3, #25
 8012620:	bf48      	it	mi
 8012622:	b2ad      	uxthmi	r5, r5
 8012624:	6031      	str	r1, [r6, #0]
 8012626:	07d9      	lsls	r1, r3, #31
 8012628:	bf44      	itt	mi
 801262a:	f043 0320 	orrmi.w	r3, r3, #32
 801262e:	6023      	strmi	r3, [r4, #0]
 8012630:	b11d      	cbz	r5, 801263a <_printf_i+0x19e>
 8012632:	2310      	movs	r3, #16
 8012634:	e7ac      	b.n	8012590 <_printf_i+0xf4>
 8012636:	4827      	ldr	r0, [pc, #156]	@ (80126d4 <_printf_i+0x238>)
 8012638:	e7e9      	b.n	801260e <_printf_i+0x172>
 801263a:	6823      	ldr	r3, [r4, #0]
 801263c:	f023 0320 	bic.w	r3, r3, #32
 8012640:	6023      	str	r3, [r4, #0]
 8012642:	e7f6      	b.n	8012632 <_printf_i+0x196>
 8012644:	4616      	mov	r6, r2
 8012646:	e7bd      	b.n	80125c4 <_printf_i+0x128>
 8012648:	6833      	ldr	r3, [r6, #0]
 801264a:	6825      	ldr	r5, [r4, #0]
 801264c:	6961      	ldr	r1, [r4, #20]
 801264e:	1d18      	adds	r0, r3, #4
 8012650:	6030      	str	r0, [r6, #0]
 8012652:	062e      	lsls	r6, r5, #24
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	d501      	bpl.n	801265c <_printf_i+0x1c0>
 8012658:	6019      	str	r1, [r3, #0]
 801265a:	e002      	b.n	8012662 <_printf_i+0x1c6>
 801265c:	0668      	lsls	r0, r5, #25
 801265e:	d5fb      	bpl.n	8012658 <_printf_i+0x1bc>
 8012660:	8019      	strh	r1, [r3, #0]
 8012662:	2300      	movs	r3, #0
 8012664:	6123      	str	r3, [r4, #16]
 8012666:	4616      	mov	r6, r2
 8012668:	e7bc      	b.n	80125e4 <_printf_i+0x148>
 801266a:	6833      	ldr	r3, [r6, #0]
 801266c:	1d1a      	adds	r2, r3, #4
 801266e:	6032      	str	r2, [r6, #0]
 8012670:	681e      	ldr	r6, [r3, #0]
 8012672:	6862      	ldr	r2, [r4, #4]
 8012674:	2100      	movs	r1, #0
 8012676:	4630      	mov	r0, r6
 8012678:	f7ed fd82 	bl	8000180 <memchr>
 801267c:	b108      	cbz	r0, 8012682 <_printf_i+0x1e6>
 801267e:	1b80      	subs	r0, r0, r6
 8012680:	6060      	str	r0, [r4, #4]
 8012682:	6863      	ldr	r3, [r4, #4]
 8012684:	6123      	str	r3, [r4, #16]
 8012686:	2300      	movs	r3, #0
 8012688:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801268c:	e7aa      	b.n	80125e4 <_printf_i+0x148>
 801268e:	6923      	ldr	r3, [r4, #16]
 8012690:	4632      	mov	r2, r6
 8012692:	4649      	mov	r1, r9
 8012694:	4640      	mov	r0, r8
 8012696:	47d0      	blx	sl
 8012698:	3001      	adds	r0, #1
 801269a:	d0ad      	beq.n	80125f8 <_printf_i+0x15c>
 801269c:	6823      	ldr	r3, [r4, #0]
 801269e:	079b      	lsls	r3, r3, #30
 80126a0:	d413      	bmi.n	80126ca <_printf_i+0x22e>
 80126a2:	68e0      	ldr	r0, [r4, #12]
 80126a4:	9b03      	ldr	r3, [sp, #12]
 80126a6:	4298      	cmp	r0, r3
 80126a8:	bfb8      	it	lt
 80126aa:	4618      	movlt	r0, r3
 80126ac:	e7a6      	b.n	80125fc <_printf_i+0x160>
 80126ae:	2301      	movs	r3, #1
 80126b0:	4632      	mov	r2, r6
 80126b2:	4649      	mov	r1, r9
 80126b4:	4640      	mov	r0, r8
 80126b6:	47d0      	blx	sl
 80126b8:	3001      	adds	r0, #1
 80126ba:	d09d      	beq.n	80125f8 <_printf_i+0x15c>
 80126bc:	3501      	adds	r5, #1
 80126be:	68e3      	ldr	r3, [r4, #12]
 80126c0:	9903      	ldr	r1, [sp, #12]
 80126c2:	1a5b      	subs	r3, r3, r1
 80126c4:	42ab      	cmp	r3, r5
 80126c6:	dcf2      	bgt.n	80126ae <_printf_i+0x212>
 80126c8:	e7eb      	b.n	80126a2 <_printf_i+0x206>
 80126ca:	2500      	movs	r5, #0
 80126cc:	f104 0619 	add.w	r6, r4, #25
 80126d0:	e7f5      	b.n	80126be <_printf_i+0x222>
 80126d2:	bf00      	nop
 80126d4:	0801ad20 	.word	0x0801ad20
 80126d8:	0801ad31 	.word	0x0801ad31

080126dc <std>:
 80126dc:	2300      	movs	r3, #0
 80126de:	b510      	push	{r4, lr}
 80126e0:	4604      	mov	r4, r0
 80126e2:	e9c0 3300 	strd	r3, r3, [r0]
 80126e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80126ea:	6083      	str	r3, [r0, #8]
 80126ec:	8181      	strh	r1, [r0, #12]
 80126ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80126f0:	81c2      	strh	r2, [r0, #14]
 80126f2:	6183      	str	r3, [r0, #24]
 80126f4:	4619      	mov	r1, r3
 80126f6:	2208      	movs	r2, #8
 80126f8:	305c      	adds	r0, #92	@ 0x5c
 80126fa:	f000 fa4b 	bl	8012b94 <memset>
 80126fe:	4b0d      	ldr	r3, [pc, #52]	@ (8012734 <std+0x58>)
 8012700:	6263      	str	r3, [r4, #36]	@ 0x24
 8012702:	4b0d      	ldr	r3, [pc, #52]	@ (8012738 <std+0x5c>)
 8012704:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012706:	4b0d      	ldr	r3, [pc, #52]	@ (801273c <std+0x60>)
 8012708:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801270a:	4b0d      	ldr	r3, [pc, #52]	@ (8012740 <std+0x64>)
 801270c:	6323      	str	r3, [r4, #48]	@ 0x30
 801270e:	4b0d      	ldr	r3, [pc, #52]	@ (8012744 <std+0x68>)
 8012710:	6224      	str	r4, [r4, #32]
 8012712:	429c      	cmp	r4, r3
 8012714:	d006      	beq.n	8012724 <std+0x48>
 8012716:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801271a:	4294      	cmp	r4, r2
 801271c:	d002      	beq.n	8012724 <std+0x48>
 801271e:	33d0      	adds	r3, #208	@ 0xd0
 8012720:	429c      	cmp	r4, r3
 8012722:	d105      	bne.n	8012730 <std+0x54>
 8012724:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801272c:	f000 babe 	b.w	8012cac <__retarget_lock_init_recursive>
 8012730:	bd10      	pop	{r4, pc}
 8012732:	bf00      	nop
 8012734:	08012941 	.word	0x08012941
 8012738:	08012963 	.word	0x08012963
 801273c:	0801299b 	.word	0x0801299b
 8012740:	080129bf 	.word	0x080129bf
 8012744:	20000a94 	.word	0x20000a94

08012748 <stdio_exit_handler>:
 8012748:	4a02      	ldr	r2, [pc, #8]	@ (8012754 <stdio_exit_handler+0xc>)
 801274a:	4903      	ldr	r1, [pc, #12]	@ (8012758 <stdio_exit_handler+0x10>)
 801274c:	4803      	ldr	r0, [pc, #12]	@ (801275c <stdio_exit_handler+0x14>)
 801274e:	f000 b869 	b.w	8012824 <_fwalk_sglue>
 8012752:	bf00      	nop
 8012754:	200001cc 	.word	0x200001cc
 8012758:	0801473d 	.word	0x0801473d
 801275c:	200001dc 	.word	0x200001dc

08012760 <cleanup_stdio>:
 8012760:	6841      	ldr	r1, [r0, #4]
 8012762:	4b0c      	ldr	r3, [pc, #48]	@ (8012794 <cleanup_stdio+0x34>)
 8012764:	4299      	cmp	r1, r3
 8012766:	b510      	push	{r4, lr}
 8012768:	4604      	mov	r4, r0
 801276a:	d001      	beq.n	8012770 <cleanup_stdio+0x10>
 801276c:	f001 ffe6 	bl	801473c <_fflush_r>
 8012770:	68a1      	ldr	r1, [r4, #8]
 8012772:	4b09      	ldr	r3, [pc, #36]	@ (8012798 <cleanup_stdio+0x38>)
 8012774:	4299      	cmp	r1, r3
 8012776:	d002      	beq.n	801277e <cleanup_stdio+0x1e>
 8012778:	4620      	mov	r0, r4
 801277a:	f001 ffdf 	bl	801473c <_fflush_r>
 801277e:	68e1      	ldr	r1, [r4, #12]
 8012780:	4b06      	ldr	r3, [pc, #24]	@ (801279c <cleanup_stdio+0x3c>)
 8012782:	4299      	cmp	r1, r3
 8012784:	d004      	beq.n	8012790 <cleanup_stdio+0x30>
 8012786:	4620      	mov	r0, r4
 8012788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801278c:	f001 bfd6 	b.w	801473c <_fflush_r>
 8012790:	bd10      	pop	{r4, pc}
 8012792:	bf00      	nop
 8012794:	20000a94 	.word	0x20000a94
 8012798:	20000afc 	.word	0x20000afc
 801279c:	20000b64 	.word	0x20000b64

080127a0 <global_stdio_init.part.0>:
 80127a0:	b510      	push	{r4, lr}
 80127a2:	4b0b      	ldr	r3, [pc, #44]	@ (80127d0 <global_stdio_init.part.0+0x30>)
 80127a4:	4c0b      	ldr	r4, [pc, #44]	@ (80127d4 <global_stdio_init.part.0+0x34>)
 80127a6:	4a0c      	ldr	r2, [pc, #48]	@ (80127d8 <global_stdio_init.part.0+0x38>)
 80127a8:	601a      	str	r2, [r3, #0]
 80127aa:	4620      	mov	r0, r4
 80127ac:	2200      	movs	r2, #0
 80127ae:	2104      	movs	r1, #4
 80127b0:	f7ff ff94 	bl	80126dc <std>
 80127b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80127b8:	2201      	movs	r2, #1
 80127ba:	2109      	movs	r1, #9
 80127bc:	f7ff ff8e 	bl	80126dc <std>
 80127c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80127c4:	2202      	movs	r2, #2
 80127c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80127ca:	2112      	movs	r1, #18
 80127cc:	f7ff bf86 	b.w	80126dc <std>
 80127d0:	20000bcc 	.word	0x20000bcc
 80127d4:	20000a94 	.word	0x20000a94
 80127d8:	08012749 	.word	0x08012749

080127dc <__sfp_lock_acquire>:
 80127dc:	4801      	ldr	r0, [pc, #4]	@ (80127e4 <__sfp_lock_acquire+0x8>)
 80127de:	f000 ba66 	b.w	8012cae <__retarget_lock_acquire_recursive>
 80127e2:	bf00      	nop
 80127e4:	20000bd5 	.word	0x20000bd5

080127e8 <__sfp_lock_release>:
 80127e8:	4801      	ldr	r0, [pc, #4]	@ (80127f0 <__sfp_lock_release+0x8>)
 80127ea:	f000 ba61 	b.w	8012cb0 <__retarget_lock_release_recursive>
 80127ee:	bf00      	nop
 80127f0:	20000bd5 	.word	0x20000bd5

080127f4 <__sinit>:
 80127f4:	b510      	push	{r4, lr}
 80127f6:	4604      	mov	r4, r0
 80127f8:	f7ff fff0 	bl	80127dc <__sfp_lock_acquire>
 80127fc:	6a23      	ldr	r3, [r4, #32]
 80127fe:	b11b      	cbz	r3, 8012808 <__sinit+0x14>
 8012800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012804:	f7ff bff0 	b.w	80127e8 <__sfp_lock_release>
 8012808:	4b04      	ldr	r3, [pc, #16]	@ (801281c <__sinit+0x28>)
 801280a:	6223      	str	r3, [r4, #32]
 801280c:	4b04      	ldr	r3, [pc, #16]	@ (8012820 <__sinit+0x2c>)
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d1f5      	bne.n	8012800 <__sinit+0xc>
 8012814:	f7ff ffc4 	bl	80127a0 <global_stdio_init.part.0>
 8012818:	e7f2      	b.n	8012800 <__sinit+0xc>
 801281a:	bf00      	nop
 801281c:	08012761 	.word	0x08012761
 8012820:	20000bcc 	.word	0x20000bcc

08012824 <_fwalk_sglue>:
 8012824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012828:	4607      	mov	r7, r0
 801282a:	4688      	mov	r8, r1
 801282c:	4614      	mov	r4, r2
 801282e:	2600      	movs	r6, #0
 8012830:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012834:	f1b9 0901 	subs.w	r9, r9, #1
 8012838:	d505      	bpl.n	8012846 <_fwalk_sglue+0x22>
 801283a:	6824      	ldr	r4, [r4, #0]
 801283c:	2c00      	cmp	r4, #0
 801283e:	d1f7      	bne.n	8012830 <_fwalk_sglue+0xc>
 8012840:	4630      	mov	r0, r6
 8012842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012846:	89ab      	ldrh	r3, [r5, #12]
 8012848:	2b01      	cmp	r3, #1
 801284a:	d907      	bls.n	801285c <_fwalk_sglue+0x38>
 801284c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012850:	3301      	adds	r3, #1
 8012852:	d003      	beq.n	801285c <_fwalk_sglue+0x38>
 8012854:	4629      	mov	r1, r5
 8012856:	4638      	mov	r0, r7
 8012858:	47c0      	blx	r8
 801285a:	4306      	orrs	r6, r0
 801285c:	3568      	adds	r5, #104	@ 0x68
 801285e:	e7e9      	b.n	8012834 <_fwalk_sglue+0x10>

08012860 <iprintf>:
 8012860:	b40f      	push	{r0, r1, r2, r3}
 8012862:	b507      	push	{r0, r1, r2, lr}
 8012864:	4906      	ldr	r1, [pc, #24]	@ (8012880 <iprintf+0x20>)
 8012866:	ab04      	add	r3, sp, #16
 8012868:	6808      	ldr	r0, [r1, #0]
 801286a:	f853 2b04 	ldr.w	r2, [r3], #4
 801286e:	6881      	ldr	r1, [r0, #8]
 8012870:	9301      	str	r3, [sp, #4]
 8012872:	f001 fdc7 	bl	8014404 <_vfiprintf_r>
 8012876:	b003      	add	sp, #12
 8012878:	f85d eb04 	ldr.w	lr, [sp], #4
 801287c:	b004      	add	sp, #16
 801287e:	4770      	bx	lr
 8012880:	200001d8 	.word	0x200001d8

08012884 <_puts_r>:
 8012884:	6a03      	ldr	r3, [r0, #32]
 8012886:	b570      	push	{r4, r5, r6, lr}
 8012888:	6884      	ldr	r4, [r0, #8]
 801288a:	4605      	mov	r5, r0
 801288c:	460e      	mov	r6, r1
 801288e:	b90b      	cbnz	r3, 8012894 <_puts_r+0x10>
 8012890:	f7ff ffb0 	bl	80127f4 <__sinit>
 8012894:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012896:	07db      	lsls	r3, r3, #31
 8012898:	d405      	bmi.n	80128a6 <_puts_r+0x22>
 801289a:	89a3      	ldrh	r3, [r4, #12]
 801289c:	0598      	lsls	r0, r3, #22
 801289e:	d402      	bmi.n	80128a6 <_puts_r+0x22>
 80128a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80128a2:	f000 fa04 	bl	8012cae <__retarget_lock_acquire_recursive>
 80128a6:	89a3      	ldrh	r3, [r4, #12]
 80128a8:	0719      	lsls	r1, r3, #28
 80128aa:	d502      	bpl.n	80128b2 <_puts_r+0x2e>
 80128ac:	6923      	ldr	r3, [r4, #16]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d135      	bne.n	801291e <_puts_r+0x9a>
 80128b2:	4621      	mov	r1, r4
 80128b4:	4628      	mov	r0, r5
 80128b6:	f000 f8fd 	bl	8012ab4 <__swsetup_r>
 80128ba:	b380      	cbz	r0, 801291e <_puts_r+0x9a>
 80128bc:	f04f 35ff 	mov.w	r5, #4294967295
 80128c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80128c2:	07da      	lsls	r2, r3, #31
 80128c4:	d405      	bmi.n	80128d2 <_puts_r+0x4e>
 80128c6:	89a3      	ldrh	r3, [r4, #12]
 80128c8:	059b      	lsls	r3, r3, #22
 80128ca:	d402      	bmi.n	80128d2 <_puts_r+0x4e>
 80128cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80128ce:	f000 f9ef 	bl	8012cb0 <__retarget_lock_release_recursive>
 80128d2:	4628      	mov	r0, r5
 80128d4:	bd70      	pop	{r4, r5, r6, pc}
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	da04      	bge.n	80128e4 <_puts_r+0x60>
 80128da:	69a2      	ldr	r2, [r4, #24]
 80128dc:	429a      	cmp	r2, r3
 80128de:	dc17      	bgt.n	8012910 <_puts_r+0x8c>
 80128e0:	290a      	cmp	r1, #10
 80128e2:	d015      	beq.n	8012910 <_puts_r+0x8c>
 80128e4:	6823      	ldr	r3, [r4, #0]
 80128e6:	1c5a      	adds	r2, r3, #1
 80128e8:	6022      	str	r2, [r4, #0]
 80128ea:	7019      	strb	r1, [r3, #0]
 80128ec:	68a3      	ldr	r3, [r4, #8]
 80128ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80128f2:	3b01      	subs	r3, #1
 80128f4:	60a3      	str	r3, [r4, #8]
 80128f6:	2900      	cmp	r1, #0
 80128f8:	d1ed      	bne.n	80128d6 <_puts_r+0x52>
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	da11      	bge.n	8012922 <_puts_r+0x9e>
 80128fe:	4622      	mov	r2, r4
 8012900:	210a      	movs	r1, #10
 8012902:	4628      	mov	r0, r5
 8012904:	f000 f898 	bl	8012a38 <__swbuf_r>
 8012908:	3001      	adds	r0, #1
 801290a:	d0d7      	beq.n	80128bc <_puts_r+0x38>
 801290c:	250a      	movs	r5, #10
 801290e:	e7d7      	b.n	80128c0 <_puts_r+0x3c>
 8012910:	4622      	mov	r2, r4
 8012912:	4628      	mov	r0, r5
 8012914:	f000 f890 	bl	8012a38 <__swbuf_r>
 8012918:	3001      	adds	r0, #1
 801291a:	d1e7      	bne.n	80128ec <_puts_r+0x68>
 801291c:	e7ce      	b.n	80128bc <_puts_r+0x38>
 801291e:	3e01      	subs	r6, #1
 8012920:	e7e4      	b.n	80128ec <_puts_r+0x68>
 8012922:	6823      	ldr	r3, [r4, #0]
 8012924:	1c5a      	adds	r2, r3, #1
 8012926:	6022      	str	r2, [r4, #0]
 8012928:	220a      	movs	r2, #10
 801292a:	701a      	strb	r2, [r3, #0]
 801292c:	e7ee      	b.n	801290c <_puts_r+0x88>
	...

08012930 <puts>:
 8012930:	4b02      	ldr	r3, [pc, #8]	@ (801293c <puts+0xc>)
 8012932:	4601      	mov	r1, r0
 8012934:	6818      	ldr	r0, [r3, #0]
 8012936:	f7ff bfa5 	b.w	8012884 <_puts_r>
 801293a:	bf00      	nop
 801293c:	200001d8 	.word	0x200001d8

08012940 <__sread>:
 8012940:	b510      	push	{r4, lr}
 8012942:	460c      	mov	r4, r1
 8012944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012948:	f000 f952 	bl	8012bf0 <_read_r>
 801294c:	2800      	cmp	r0, #0
 801294e:	bfab      	itete	ge
 8012950:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012952:	89a3      	ldrhlt	r3, [r4, #12]
 8012954:	181b      	addge	r3, r3, r0
 8012956:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801295a:	bfac      	ite	ge
 801295c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801295e:	81a3      	strhlt	r3, [r4, #12]
 8012960:	bd10      	pop	{r4, pc}

08012962 <__swrite>:
 8012962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012966:	461f      	mov	r7, r3
 8012968:	898b      	ldrh	r3, [r1, #12]
 801296a:	05db      	lsls	r3, r3, #23
 801296c:	4605      	mov	r5, r0
 801296e:	460c      	mov	r4, r1
 8012970:	4616      	mov	r6, r2
 8012972:	d505      	bpl.n	8012980 <__swrite+0x1e>
 8012974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012978:	2302      	movs	r3, #2
 801297a:	2200      	movs	r2, #0
 801297c:	f000 f926 	bl	8012bcc <_lseek_r>
 8012980:	89a3      	ldrh	r3, [r4, #12]
 8012982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012986:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801298a:	81a3      	strh	r3, [r4, #12]
 801298c:	4632      	mov	r2, r6
 801298e:	463b      	mov	r3, r7
 8012990:	4628      	mov	r0, r5
 8012992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012996:	f000 b94d 	b.w	8012c34 <_write_r>

0801299a <__sseek>:
 801299a:	b510      	push	{r4, lr}
 801299c:	460c      	mov	r4, r1
 801299e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129a2:	f000 f913 	bl	8012bcc <_lseek_r>
 80129a6:	1c43      	adds	r3, r0, #1
 80129a8:	89a3      	ldrh	r3, [r4, #12]
 80129aa:	bf15      	itete	ne
 80129ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80129ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80129b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80129b6:	81a3      	strheq	r3, [r4, #12]
 80129b8:	bf18      	it	ne
 80129ba:	81a3      	strhne	r3, [r4, #12]
 80129bc:	bd10      	pop	{r4, pc}

080129be <__sclose>:
 80129be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129c2:	f000 b8f3 	b.w	8012bac <_close_r>

080129c6 <_vsniprintf_r>:
 80129c6:	b530      	push	{r4, r5, lr}
 80129c8:	4614      	mov	r4, r2
 80129ca:	2c00      	cmp	r4, #0
 80129cc:	b09b      	sub	sp, #108	@ 0x6c
 80129ce:	4605      	mov	r5, r0
 80129d0:	461a      	mov	r2, r3
 80129d2:	da05      	bge.n	80129e0 <_vsniprintf_r+0x1a>
 80129d4:	238b      	movs	r3, #139	@ 0x8b
 80129d6:	6003      	str	r3, [r0, #0]
 80129d8:	f04f 30ff 	mov.w	r0, #4294967295
 80129dc:	b01b      	add	sp, #108	@ 0x6c
 80129de:	bd30      	pop	{r4, r5, pc}
 80129e0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80129e4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80129e8:	bf14      	ite	ne
 80129ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 80129ee:	4623      	moveq	r3, r4
 80129f0:	9302      	str	r3, [sp, #8]
 80129f2:	9305      	str	r3, [sp, #20]
 80129f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80129f8:	9100      	str	r1, [sp, #0]
 80129fa:	9104      	str	r1, [sp, #16]
 80129fc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012a00:	4669      	mov	r1, sp
 8012a02:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8012a04:	f001 fbd8 	bl	80141b8 <_svfiprintf_r>
 8012a08:	1c43      	adds	r3, r0, #1
 8012a0a:	bfbc      	itt	lt
 8012a0c:	238b      	movlt	r3, #139	@ 0x8b
 8012a0e:	602b      	strlt	r3, [r5, #0]
 8012a10:	2c00      	cmp	r4, #0
 8012a12:	d0e3      	beq.n	80129dc <_vsniprintf_r+0x16>
 8012a14:	9b00      	ldr	r3, [sp, #0]
 8012a16:	2200      	movs	r2, #0
 8012a18:	701a      	strb	r2, [r3, #0]
 8012a1a:	e7df      	b.n	80129dc <_vsniprintf_r+0x16>

08012a1c <vsniprintf>:
 8012a1c:	b507      	push	{r0, r1, r2, lr}
 8012a1e:	9300      	str	r3, [sp, #0]
 8012a20:	4613      	mov	r3, r2
 8012a22:	460a      	mov	r2, r1
 8012a24:	4601      	mov	r1, r0
 8012a26:	4803      	ldr	r0, [pc, #12]	@ (8012a34 <vsniprintf+0x18>)
 8012a28:	6800      	ldr	r0, [r0, #0]
 8012a2a:	f7ff ffcc 	bl	80129c6 <_vsniprintf_r>
 8012a2e:	b003      	add	sp, #12
 8012a30:	f85d fb04 	ldr.w	pc, [sp], #4
 8012a34:	200001d8 	.word	0x200001d8

08012a38 <__swbuf_r>:
 8012a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a3a:	460e      	mov	r6, r1
 8012a3c:	4614      	mov	r4, r2
 8012a3e:	4605      	mov	r5, r0
 8012a40:	b118      	cbz	r0, 8012a4a <__swbuf_r+0x12>
 8012a42:	6a03      	ldr	r3, [r0, #32]
 8012a44:	b90b      	cbnz	r3, 8012a4a <__swbuf_r+0x12>
 8012a46:	f7ff fed5 	bl	80127f4 <__sinit>
 8012a4a:	69a3      	ldr	r3, [r4, #24]
 8012a4c:	60a3      	str	r3, [r4, #8]
 8012a4e:	89a3      	ldrh	r3, [r4, #12]
 8012a50:	071a      	lsls	r2, r3, #28
 8012a52:	d501      	bpl.n	8012a58 <__swbuf_r+0x20>
 8012a54:	6923      	ldr	r3, [r4, #16]
 8012a56:	b943      	cbnz	r3, 8012a6a <__swbuf_r+0x32>
 8012a58:	4621      	mov	r1, r4
 8012a5a:	4628      	mov	r0, r5
 8012a5c:	f000 f82a 	bl	8012ab4 <__swsetup_r>
 8012a60:	b118      	cbz	r0, 8012a6a <__swbuf_r+0x32>
 8012a62:	f04f 37ff 	mov.w	r7, #4294967295
 8012a66:	4638      	mov	r0, r7
 8012a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a6a:	6823      	ldr	r3, [r4, #0]
 8012a6c:	6922      	ldr	r2, [r4, #16]
 8012a6e:	1a98      	subs	r0, r3, r2
 8012a70:	6963      	ldr	r3, [r4, #20]
 8012a72:	b2f6      	uxtb	r6, r6
 8012a74:	4283      	cmp	r3, r0
 8012a76:	4637      	mov	r7, r6
 8012a78:	dc05      	bgt.n	8012a86 <__swbuf_r+0x4e>
 8012a7a:	4621      	mov	r1, r4
 8012a7c:	4628      	mov	r0, r5
 8012a7e:	f001 fe5d 	bl	801473c <_fflush_r>
 8012a82:	2800      	cmp	r0, #0
 8012a84:	d1ed      	bne.n	8012a62 <__swbuf_r+0x2a>
 8012a86:	68a3      	ldr	r3, [r4, #8]
 8012a88:	3b01      	subs	r3, #1
 8012a8a:	60a3      	str	r3, [r4, #8]
 8012a8c:	6823      	ldr	r3, [r4, #0]
 8012a8e:	1c5a      	adds	r2, r3, #1
 8012a90:	6022      	str	r2, [r4, #0]
 8012a92:	701e      	strb	r6, [r3, #0]
 8012a94:	6962      	ldr	r2, [r4, #20]
 8012a96:	1c43      	adds	r3, r0, #1
 8012a98:	429a      	cmp	r2, r3
 8012a9a:	d004      	beq.n	8012aa6 <__swbuf_r+0x6e>
 8012a9c:	89a3      	ldrh	r3, [r4, #12]
 8012a9e:	07db      	lsls	r3, r3, #31
 8012aa0:	d5e1      	bpl.n	8012a66 <__swbuf_r+0x2e>
 8012aa2:	2e0a      	cmp	r6, #10
 8012aa4:	d1df      	bne.n	8012a66 <__swbuf_r+0x2e>
 8012aa6:	4621      	mov	r1, r4
 8012aa8:	4628      	mov	r0, r5
 8012aaa:	f001 fe47 	bl	801473c <_fflush_r>
 8012aae:	2800      	cmp	r0, #0
 8012ab0:	d0d9      	beq.n	8012a66 <__swbuf_r+0x2e>
 8012ab2:	e7d6      	b.n	8012a62 <__swbuf_r+0x2a>

08012ab4 <__swsetup_r>:
 8012ab4:	b538      	push	{r3, r4, r5, lr}
 8012ab6:	4b29      	ldr	r3, [pc, #164]	@ (8012b5c <__swsetup_r+0xa8>)
 8012ab8:	4605      	mov	r5, r0
 8012aba:	6818      	ldr	r0, [r3, #0]
 8012abc:	460c      	mov	r4, r1
 8012abe:	b118      	cbz	r0, 8012ac8 <__swsetup_r+0x14>
 8012ac0:	6a03      	ldr	r3, [r0, #32]
 8012ac2:	b90b      	cbnz	r3, 8012ac8 <__swsetup_r+0x14>
 8012ac4:	f7ff fe96 	bl	80127f4 <__sinit>
 8012ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012acc:	0719      	lsls	r1, r3, #28
 8012ace:	d422      	bmi.n	8012b16 <__swsetup_r+0x62>
 8012ad0:	06da      	lsls	r2, r3, #27
 8012ad2:	d407      	bmi.n	8012ae4 <__swsetup_r+0x30>
 8012ad4:	2209      	movs	r2, #9
 8012ad6:	602a      	str	r2, [r5, #0]
 8012ad8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012adc:	81a3      	strh	r3, [r4, #12]
 8012ade:	f04f 30ff 	mov.w	r0, #4294967295
 8012ae2:	e033      	b.n	8012b4c <__swsetup_r+0x98>
 8012ae4:	0758      	lsls	r0, r3, #29
 8012ae6:	d512      	bpl.n	8012b0e <__swsetup_r+0x5a>
 8012ae8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012aea:	b141      	cbz	r1, 8012afe <__swsetup_r+0x4a>
 8012aec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012af0:	4299      	cmp	r1, r3
 8012af2:	d002      	beq.n	8012afa <__swsetup_r+0x46>
 8012af4:	4628      	mov	r0, r5
 8012af6:	f000 ff37 	bl	8013968 <_free_r>
 8012afa:	2300      	movs	r3, #0
 8012afc:	6363      	str	r3, [r4, #52]	@ 0x34
 8012afe:	89a3      	ldrh	r3, [r4, #12]
 8012b00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012b04:	81a3      	strh	r3, [r4, #12]
 8012b06:	2300      	movs	r3, #0
 8012b08:	6063      	str	r3, [r4, #4]
 8012b0a:	6923      	ldr	r3, [r4, #16]
 8012b0c:	6023      	str	r3, [r4, #0]
 8012b0e:	89a3      	ldrh	r3, [r4, #12]
 8012b10:	f043 0308 	orr.w	r3, r3, #8
 8012b14:	81a3      	strh	r3, [r4, #12]
 8012b16:	6923      	ldr	r3, [r4, #16]
 8012b18:	b94b      	cbnz	r3, 8012b2e <__swsetup_r+0x7a>
 8012b1a:	89a3      	ldrh	r3, [r4, #12]
 8012b1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012b20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012b24:	d003      	beq.n	8012b2e <__swsetup_r+0x7a>
 8012b26:	4621      	mov	r1, r4
 8012b28:	4628      	mov	r0, r5
 8012b2a:	f001 fe55 	bl	80147d8 <__smakebuf_r>
 8012b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b32:	f013 0201 	ands.w	r2, r3, #1
 8012b36:	d00a      	beq.n	8012b4e <__swsetup_r+0x9a>
 8012b38:	2200      	movs	r2, #0
 8012b3a:	60a2      	str	r2, [r4, #8]
 8012b3c:	6962      	ldr	r2, [r4, #20]
 8012b3e:	4252      	negs	r2, r2
 8012b40:	61a2      	str	r2, [r4, #24]
 8012b42:	6922      	ldr	r2, [r4, #16]
 8012b44:	b942      	cbnz	r2, 8012b58 <__swsetup_r+0xa4>
 8012b46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012b4a:	d1c5      	bne.n	8012ad8 <__swsetup_r+0x24>
 8012b4c:	bd38      	pop	{r3, r4, r5, pc}
 8012b4e:	0799      	lsls	r1, r3, #30
 8012b50:	bf58      	it	pl
 8012b52:	6962      	ldrpl	r2, [r4, #20]
 8012b54:	60a2      	str	r2, [r4, #8]
 8012b56:	e7f4      	b.n	8012b42 <__swsetup_r+0x8e>
 8012b58:	2000      	movs	r0, #0
 8012b5a:	e7f7      	b.n	8012b4c <__swsetup_r+0x98>
 8012b5c:	200001d8 	.word	0x200001d8

08012b60 <memmove>:
 8012b60:	4288      	cmp	r0, r1
 8012b62:	b510      	push	{r4, lr}
 8012b64:	eb01 0402 	add.w	r4, r1, r2
 8012b68:	d902      	bls.n	8012b70 <memmove+0x10>
 8012b6a:	4284      	cmp	r4, r0
 8012b6c:	4623      	mov	r3, r4
 8012b6e:	d807      	bhi.n	8012b80 <memmove+0x20>
 8012b70:	1e43      	subs	r3, r0, #1
 8012b72:	42a1      	cmp	r1, r4
 8012b74:	d008      	beq.n	8012b88 <memmove+0x28>
 8012b76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012b7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012b7e:	e7f8      	b.n	8012b72 <memmove+0x12>
 8012b80:	4402      	add	r2, r0
 8012b82:	4601      	mov	r1, r0
 8012b84:	428a      	cmp	r2, r1
 8012b86:	d100      	bne.n	8012b8a <memmove+0x2a>
 8012b88:	bd10      	pop	{r4, pc}
 8012b8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012b8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012b92:	e7f7      	b.n	8012b84 <memmove+0x24>

08012b94 <memset>:
 8012b94:	4402      	add	r2, r0
 8012b96:	4603      	mov	r3, r0
 8012b98:	4293      	cmp	r3, r2
 8012b9a:	d100      	bne.n	8012b9e <memset+0xa>
 8012b9c:	4770      	bx	lr
 8012b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8012ba2:	e7f9      	b.n	8012b98 <memset+0x4>

08012ba4 <_localeconv_r>:
 8012ba4:	4800      	ldr	r0, [pc, #0]	@ (8012ba8 <_localeconv_r+0x4>)
 8012ba6:	4770      	bx	lr
 8012ba8:	20000318 	.word	0x20000318

08012bac <_close_r>:
 8012bac:	b538      	push	{r3, r4, r5, lr}
 8012bae:	4d06      	ldr	r5, [pc, #24]	@ (8012bc8 <_close_r+0x1c>)
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	4604      	mov	r4, r0
 8012bb4:	4608      	mov	r0, r1
 8012bb6:	602b      	str	r3, [r5, #0]
 8012bb8:	f7f1 f844 	bl	8003c44 <_close>
 8012bbc:	1c43      	adds	r3, r0, #1
 8012bbe:	d102      	bne.n	8012bc6 <_close_r+0x1a>
 8012bc0:	682b      	ldr	r3, [r5, #0]
 8012bc2:	b103      	cbz	r3, 8012bc6 <_close_r+0x1a>
 8012bc4:	6023      	str	r3, [r4, #0]
 8012bc6:	bd38      	pop	{r3, r4, r5, pc}
 8012bc8:	20000bd0 	.word	0x20000bd0

08012bcc <_lseek_r>:
 8012bcc:	b538      	push	{r3, r4, r5, lr}
 8012bce:	4d07      	ldr	r5, [pc, #28]	@ (8012bec <_lseek_r+0x20>)
 8012bd0:	4604      	mov	r4, r0
 8012bd2:	4608      	mov	r0, r1
 8012bd4:	4611      	mov	r1, r2
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	602a      	str	r2, [r5, #0]
 8012bda:	461a      	mov	r2, r3
 8012bdc:	f7f1 f859 	bl	8003c92 <_lseek>
 8012be0:	1c43      	adds	r3, r0, #1
 8012be2:	d102      	bne.n	8012bea <_lseek_r+0x1e>
 8012be4:	682b      	ldr	r3, [r5, #0]
 8012be6:	b103      	cbz	r3, 8012bea <_lseek_r+0x1e>
 8012be8:	6023      	str	r3, [r4, #0]
 8012bea:	bd38      	pop	{r3, r4, r5, pc}
 8012bec:	20000bd0 	.word	0x20000bd0

08012bf0 <_read_r>:
 8012bf0:	b538      	push	{r3, r4, r5, lr}
 8012bf2:	4d07      	ldr	r5, [pc, #28]	@ (8012c10 <_read_r+0x20>)
 8012bf4:	4604      	mov	r4, r0
 8012bf6:	4608      	mov	r0, r1
 8012bf8:	4611      	mov	r1, r2
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	602a      	str	r2, [r5, #0]
 8012bfe:	461a      	mov	r2, r3
 8012c00:	f7f1 f803 	bl	8003c0a <_read>
 8012c04:	1c43      	adds	r3, r0, #1
 8012c06:	d102      	bne.n	8012c0e <_read_r+0x1e>
 8012c08:	682b      	ldr	r3, [r5, #0]
 8012c0a:	b103      	cbz	r3, 8012c0e <_read_r+0x1e>
 8012c0c:	6023      	str	r3, [r4, #0]
 8012c0e:	bd38      	pop	{r3, r4, r5, pc}
 8012c10:	20000bd0 	.word	0x20000bd0

08012c14 <_sbrk_r>:
 8012c14:	b538      	push	{r3, r4, r5, lr}
 8012c16:	4d06      	ldr	r5, [pc, #24]	@ (8012c30 <_sbrk_r+0x1c>)
 8012c18:	2300      	movs	r3, #0
 8012c1a:	4604      	mov	r4, r0
 8012c1c:	4608      	mov	r0, r1
 8012c1e:	602b      	str	r3, [r5, #0]
 8012c20:	f7f1 f844 	bl	8003cac <_sbrk>
 8012c24:	1c43      	adds	r3, r0, #1
 8012c26:	d102      	bne.n	8012c2e <_sbrk_r+0x1a>
 8012c28:	682b      	ldr	r3, [r5, #0]
 8012c2a:	b103      	cbz	r3, 8012c2e <_sbrk_r+0x1a>
 8012c2c:	6023      	str	r3, [r4, #0]
 8012c2e:	bd38      	pop	{r3, r4, r5, pc}
 8012c30:	20000bd0 	.word	0x20000bd0

08012c34 <_write_r>:
 8012c34:	b538      	push	{r3, r4, r5, lr}
 8012c36:	4d07      	ldr	r5, [pc, #28]	@ (8012c54 <_write_r+0x20>)
 8012c38:	4604      	mov	r4, r0
 8012c3a:	4608      	mov	r0, r1
 8012c3c:	4611      	mov	r1, r2
 8012c3e:	2200      	movs	r2, #0
 8012c40:	602a      	str	r2, [r5, #0]
 8012c42:	461a      	mov	r2, r3
 8012c44:	f7f0 fcbe 	bl	80035c4 <_write>
 8012c48:	1c43      	adds	r3, r0, #1
 8012c4a:	d102      	bne.n	8012c52 <_write_r+0x1e>
 8012c4c:	682b      	ldr	r3, [r5, #0]
 8012c4e:	b103      	cbz	r3, 8012c52 <_write_r+0x1e>
 8012c50:	6023      	str	r3, [r4, #0]
 8012c52:	bd38      	pop	{r3, r4, r5, pc}
 8012c54:	20000bd0 	.word	0x20000bd0

08012c58 <__errno>:
 8012c58:	4b01      	ldr	r3, [pc, #4]	@ (8012c60 <__errno+0x8>)
 8012c5a:	6818      	ldr	r0, [r3, #0]
 8012c5c:	4770      	bx	lr
 8012c5e:	bf00      	nop
 8012c60:	200001d8 	.word	0x200001d8

08012c64 <__libc_init_array>:
 8012c64:	b570      	push	{r4, r5, r6, lr}
 8012c66:	4d0d      	ldr	r5, [pc, #52]	@ (8012c9c <__libc_init_array+0x38>)
 8012c68:	4c0d      	ldr	r4, [pc, #52]	@ (8012ca0 <__libc_init_array+0x3c>)
 8012c6a:	1b64      	subs	r4, r4, r5
 8012c6c:	10a4      	asrs	r4, r4, #2
 8012c6e:	2600      	movs	r6, #0
 8012c70:	42a6      	cmp	r6, r4
 8012c72:	d109      	bne.n	8012c88 <__libc_init_array+0x24>
 8012c74:	4d0b      	ldr	r5, [pc, #44]	@ (8012ca4 <__libc_init_array+0x40>)
 8012c76:	4c0c      	ldr	r4, [pc, #48]	@ (8012ca8 <__libc_init_array+0x44>)
 8012c78:	f002 fc80 	bl	801557c <_init>
 8012c7c:	1b64      	subs	r4, r4, r5
 8012c7e:	10a4      	asrs	r4, r4, #2
 8012c80:	2600      	movs	r6, #0
 8012c82:	42a6      	cmp	r6, r4
 8012c84:	d105      	bne.n	8012c92 <__libc_init_array+0x2e>
 8012c86:	bd70      	pop	{r4, r5, r6, pc}
 8012c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8012c8c:	4798      	blx	r3
 8012c8e:	3601      	adds	r6, #1
 8012c90:	e7ee      	b.n	8012c70 <__libc_init_array+0xc>
 8012c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8012c96:	4798      	blx	r3
 8012c98:	3601      	adds	r6, #1
 8012c9a:	e7f2      	b.n	8012c82 <__libc_init_array+0x1e>
 8012c9c:	0801b458 	.word	0x0801b458
 8012ca0:	0801b458 	.word	0x0801b458
 8012ca4:	0801b458 	.word	0x0801b458
 8012ca8:	0801b45c 	.word	0x0801b45c

08012cac <__retarget_lock_init_recursive>:
 8012cac:	4770      	bx	lr

08012cae <__retarget_lock_acquire_recursive>:
 8012cae:	4770      	bx	lr

08012cb0 <__retarget_lock_release_recursive>:
 8012cb0:	4770      	bx	lr

08012cb2 <memcpy>:
 8012cb2:	440a      	add	r2, r1
 8012cb4:	4291      	cmp	r1, r2
 8012cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8012cba:	d100      	bne.n	8012cbe <memcpy+0xc>
 8012cbc:	4770      	bx	lr
 8012cbe:	b510      	push	{r4, lr}
 8012cc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012cc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012cc8:	4291      	cmp	r1, r2
 8012cca:	d1f9      	bne.n	8012cc0 <memcpy+0xe>
 8012ccc:	bd10      	pop	{r4, pc}

08012cce <quorem>:
 8012cce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cd2:	6903      	ldr	r3, [r0, #16]
 8012cd4:	690c      	ldr	r4, [r1, #16]
 8012cd6:	42a3      	cmp	r3, r4
 8012cd8:	4607      	mov	r7, r0
 8012cda:	db7e      	blt.n	8012dda <quorem+0x10c>
 8012cdc:	3c01      	subs	r4, #1
 8012cde:	f101 0814 	add.w	r8, r1, #20
 8012ce2:	00a3      	lsls	r3, r4, #2
 8012ce4:	f100 0514 	add.w	r5, r0, #20
 8012ce8:	9300      	str	r3, [sp, #0]
 8012cea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012cee:	9301      	str	r3, [sp, #4]
 8012cf0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012cf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012cf8:	3301      	adds	r3, #1
 8012cfa:	429a      	cmp	r2, r3
 8012cfc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012d00:	fbb2 f6f3 	udiv	r6, r2, r3
 8012d04:	d32e      	bcc.n	8012d64 <quorem+0x96>
 8012d06:	f04f 0a00 	mov.w	sl, #0
 8012d0a:	46c4      	mov	ip, r8
 8012d0c:	46ae      	mov	lr, r5
 8012d0e:	46d3      	mov	fp, sl
 8012d10:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012d14:	b298      	uxth	r0, r3
 8012d16:	fb06 a000 	mla	r0, r6, r0, sl
 8012d1a:	0c02      	lsrs	r2, r0, #16
 8012d1c:	0c1b      	lsrs	r3, r3, #16
 8012d1e:	fb06 2303 	mla	r3, r6, r3, r2
 8012d22:	f8de 2000 	ldr.w	r2, [lr]
 8012d26:	b280      	uxth	r0, r0
 8012d28:	b292      	uxth	r2, r2
 8012d2a:	1a12      	subs	r2, r2, r0
 8012d2c:	445a      	add	r2, fp
 8012d2e:	f8de 0000 	ldr.w	r0, [lr]
 8012d32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012d36:	b29b      	uxth	r3, r3
 8012d38:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012d3c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012d40:	b292      	uxth	r2, r2
 8012d42:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012d46:	45e1      	cmp	r9, ip
 8012d48:	f84e 2b04 	str.w	r2, [lr], #4
 8012d4c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012d50:	d2de      	bcs.n	8012d10 <quorem+0x42>
 8012d52:	9b00      	ldr	r3, [sp, #0]
 8012d54:	58eb      	ldr	r3, [r5, r3]
 8012d56:	b92b      	cbnz	r3, 8012d64 <quorem+0x96>
 8012d58:	9b01      	ldr	r3, [sp, #4]
 8012d5a:	3b04      	subs	r3, #4
 8012d5c:	429d      	cmp	r5, r3
 8012d5e:	461a      	mov	r2, r3
 8012d60:	d32f      	bcc.n	8012dc2 <quorem+0xf4>
 8012d62:	613c      	str	r4, [r7, #16]
 8012d64:	4638      	mov	r0, r7
 8012d66:	f001 f8c3 	bl	8013ef0 <__mcmp>
 8012d6a:	2800      	cmp	r0, #0
 8012d6c:	db25      	blt.n	8012dba <quorem+0xec>
 8012d6e:	4629      	mov	r1, r5
 8012d70:	2000      	movs	r0, #0
 8012d72:	f858 2b04 	ldr.w	r2, [r8], #4
 8012d76:	f8d1 c000 	ldr.w	ip, [r1]
 8012d7a:	fa1f fe82 	uxth.w	lr, r2
 8012d7e:	fa1f f38c 	uxth.w	r3, ip
 8012d82:	eba3 030e 	sub.w	r3, r3, lr
 8012d86:	4403      	add	r3, r0
 8012d88:	0c12      	lsrs	r2, r2, #16
 8012d8a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012d8e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012d92:	b29b      	uxth	r3, r3
 8012d94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012d98:	45c1      	cmp	r9, r8
 8012d9a:	f841 3b04 	str.w	r3, [r1], #4
 8012d9e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012da2:	d2e6      	bcs.n	8012d72 <quorem+0xa4>
 8012da4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012da8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012dac:	b922      	cbnz	r2, 8012db8 <quorem+0xea>
 8012dae:	3b04      	subs	r3, #4
 8012db0:	429d      	cmp	r5, r3
 8012db2:	461a      	mov	r2, r3
 8012db4:	d30b      	bcc.n	8012dce <quorem+0x100>
 8012db6:	613c      	str	r4, [r7, #16]
 8012db8:	3601      	adds	r6, #1
 8012dba:	4630      	mov	r0, r6
 8012dbc:	b003      	add	sp, #12
 8012dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dc2:	6812      	ldr	r2, [r2, #0]
 8012dc4:	3b04      	subs	r3, #4
 8012dc6:	2a00      	cmp	r2, #0
 8012dc8:	d1cb      	bne.n	8012d62 <quorem+0x94>
 8012dca:	3c01      	subs	r4, #1
 8012dcc:	e7c6      	b.n	8012d5c <quorem+0x8e>
 8012dce:	6812      	ldr	r2, [r2, #0]
 8012dd0:	3b04      	subs	r3, #4
 8012dd2:	2a00      	cmp	r2, #0
 8012dd4:	d1ef      	bne.n	8012db6 <quorem+0xe8>
 8012dd6:	3c01      	subs	r4, #1
 8012dd8:	e7ea      	b.n	8012db0 <quorem+0xe2>
 8012dda:	2000      	movs	r0, #0
 8012ddc:	e7ee      	b.n	8012dbc <quorem+0xee>
	...

08012de0 <_dtoa_r>:
 8012de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012de4:	69c7      	ldr	r7, [r0, #28]
 8012de6:	b099      	sub	sp, #100	@ 0x64
 8012de8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012dec:	ec55 4b10 	vmov	r4, r5, d0
 8012df0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8012df2:	9109      	str	r1, [sp, #36]	@ 0x24
 8012df4:	4683      	mov	fp, r0
 8012df6:	920e      	str	r2, [sp, #56]	@ 0x38
 8012df8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012dfa:	b97f      	cbnz	r7, 8012e1c <_dtoa_r+0x3c>
 8012dfc:	2010      	movs	r0, #16
 8012dfe:	f7fe ff57 	bl	8011cb0 <malloc>
 8012e02:	4602      	mov	r2, r0
 8012e04:	f8cb 001c 	str.w	r0, [fp, #28]
 8012e08:	b920      	cbnz	r0, 8012e14 <_dtoa_r+0x34>
 8012e0a:	4ba7      	ldr	r3, [pc, #668]	@ (80130a8 <_dtoa_r+0x2c8>)
 8012e0c:	21ef      	movs	r1, #239	@ 0xef
 8012e0e:	48a7      	ldr	r0, [pc, #668]	@ (80130ac <_dtoa_r+0x2cc>)
 8012e10:	f001 fd40 	bl	8014894 <__assert_func>
 8012e14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012e18:	6007      	str	r7, [r0, #0]
 8012e1a:	60c7      	str	r7, [r0, #12]
 8012e1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012e20:	6819      	ldr	r1, [r3, #0]
 8012e22:	b159      	cbz	r1, 8012e3c <_dtoa_r+0x5c>
 8012e24:	685a      	ldr	r2, [r3, #4]
 8012e26:	604a      	str	r2, [r1, #4]
 8012e28:	2301      	movs	r3, #1
 8012e2a:	4093      	lsls	r3, r2
 8012e2c:	608b      	str	r3, [r1, #8]
 8012e2e:	4658      	mov	r0, fp
 8012e30:	f000 fe24 	bl	8013a7c <_Bfree>
 8012e34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012e38:	2200      	movs	r2, #0
 8012e3a:	601a      	str	r2, [r3, #0]
 8012e3c:	1e2b      	subs	r3, r5, #0
 8012e3e:	bfb9      	ittee	lt
 8012e40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012e44:	9303      	strlt	r3, [sp, #12]
 8012e46:	2300      	movge	r3, #0
 8012e48:	6033      	strge	r3, [r6, #0]
 8012e4a:	9f03      	ldr	r7, [sp, #12]
 8012e4c:	4b98      	ldr	r3, [pc, #608]	@ (80130b0 <_dtoa_r+0x2d0>)
 8012e4e:	bfbc      	itt	lt
 8012e50:	2201      	movlt	r2, #1
 8012e52:	6032      	strlt	r2, [r6, #0]
 8012e54:	43bb      	bics	r3, r7
 8012e56:	d112      	bne.n	8012e7e <_dtoa_r+0x9e>
 8012e58:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012e5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012e5e:	6013      	str	r3, [r2, #0]
 8012e60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012e64:	4323      	orrs	r3, r4
 8012e66:	f000 854d 	beq.w	8013904 <_dtoa_r+0xb24>
 8012e6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012e6c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80130c4 <_dtoa_r+0x2e4>
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	f000 854f 	beq.w	8013914 <_dtoa_r+0xb34>
 8012e76:	f10a 0303 	add.w	r3, sl, #3
 8012e7a:	f000 bd49 	b.w	8013910 <_dtoa_r+0xb30>
 8012e7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012e82:	2200      	movs	r2, #0
 8012e84:	ec51 0b17 	vmov	r0, r1, d7
 8012e88:	2300      	movs	r3, #0
 8012e8a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8012e8e:	f7ed fdf3 	bl	8000a78 <__aeabi_dcmpeq>
 8012e92:	4680      	mov	r8, r0
 8012e94:	b158      	cbz	r0, 8012eae <_dtoa_r+0xce>
 8012e96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012e98:	2301      	movs	r3, #1
 8012e9a:	6013      	str	r3, [r2, #0]
 8012e9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012e9e:	b113      	cbz	r3, 8012ea6 <_dtoa_r+0xc6>
 8012ea0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012ea2:	4b84      	ldr	r3, [pc, #528]	@ (80130b4 <_dtoa_r+0x2d4>)
 8012ea4:	6013      	str	r3, [r2, #0]
 8012ea6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80130c8 <_dtoa_r+0x2e8>
 8012eaa:	f000 bd33 	b.w	8013914 <_dtoa_r+0xb34>
 8012eae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012eb2:	aa16      	add	r2, sp, #88	@ 0x58
 8012eb4:	a917      	add	r1, sp, #92	@ 0x5c
 8012eb6:	4658      	mov	r0, fp
 8012eb8:	f001 f8ca 	bl	8014050 <__d2b>
 8012ebc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012ec0:	4681      	mov	r9, r0
 8012ec2:	2e00      	cmp	r6, #0
 8012ec4:	d077      	beq.n	8012fb6 <_dtoa_r+0x1d6>
 8012ec6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012ec8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8012ecc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012ed0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012ed4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012ed8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8012edc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012ee0:	4619      	mov	r1, r3
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	4b74      	ldr	r3, [pc, #464]	@ (80130b8 <_dtoa_r+0x2d8>)
 8012ee6:	f7ed f9a7 	bl	8000238 <__aeabi_dsub>
 8012eea:	a369      	add	r3, pc, #420	@ (adr r3, 8013090 <_dtoa_r+0x2b0>)
 8012eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef0:	f7ed fb5a 	bl	80005a8 <__aeabi_dmul>
 8012ef4:	a368      	add	r3, pc, #416	@ (adr r3, 8013098 <_dtoa_r+0x2b8>)
 8012ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012efa:	f7ed f99f 	bl	800023c <__adddf3>
 8012efe:	4604      	mov	r4, r0
 8012f00:	4630      	mov	r0, r6
 8012f02:	460d      	mov	r5, r1
 8012f04:	f7ed fae6 	bl	80004d4 <__aeabi_i2d>
 8012f08:	a365      	add	r3, pc, #404	@ (adr r3, 80130a0 <_dtoa_r+0x2c0>)
 8012f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f0e:	f7ed fb4b 	bl	80005a8 <__aeabi_dmul>
 8012f12:	4602      	mov	r2, r0
 8012f14:	460b      	mov	r3, r1
 8012f16:	4620      	mov	r0, r4
 8012f18:	4629      	mov	r1, r5
 8012f1a:	f7ed f98f 	bl	800023c <__adddf3>
 8012f1e:	4604      	mov	r4, r0
 8012f20:	460d      	mov	r5, r1
 8012f22:	f7ed fdf1 	bl	8000b08 <__aeabi_d2iz>
 8012f26:	2200      	movs	r2, #0
 8012f28:	4607      	mov	r7, r0
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	4620      	mov	r0, r4
 8012f2e:	4629      	mov	r1, r5
 8012f30:	f7ed fdac 	bl	8000a8c <__aeabi_dcmplt>
 8012f34:	b140      	cbz	r0, 8012f48 <_dtoa_r+0x168>
 8012f36:	4638      	mov	r0, r7
 8012f38:	f7ed facc 	bl	80004d4 <__aeabi_i2d>
 8012f3c:	4622      	mov	r2, r4
 8012f3e:	462b      	mov	r3, r5
 8012f40:	f7ed fd9a 	bl	8000a78 <__aeabi_dcmpeq>
 8012f44:	b900      	cbnz	r0, 8012f48 <_dtoa_r+0x168>
 8012f46:	3f01      	subs	r7, #1
 8012f48:	2f16      	cmp	r7, #22
 8012f4a:	d851      	bhi.n	8012ff0 <_dtoa_r+0x210>
 8012f4c:	4b5b      	ldr	r3, [pc, #364]	@ (80130bc <_dtoa_r+0x2dc>)
 8012f4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012f5a:	f7ed fd97 	bl	8000a8c <__aeabi_dcmplt>
 8012f5e:	2800      	cmp	r0, #0
 8012f60:	d048      	beq.n	8012ff4 <_dtoa_r+0x214>
 8012f62:	3f01      	subs	r7, #1
 8012f64:	2300      	movs	r3, #0
 8012f66:	9312      	str	r3, [sp, #72]	@ 0x48
 8012f68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012f6a:	1b9b      	subs	r3, r3, r6
 8012f6c:	1e5a      	subs	r2, r3, #1
 8012f6e:	bf44      	itt	mi
 8012f70:	f1c3 0801 	rsbmi	r8, r3, #1
 8012f74:	2300      	movmi	r3, #0
 8012f76:	9208      	str	r2, [sp, #32]
 8012f78:	bf54      	ite	pl
 8012f7a:	f04f 0800 	movpl.w	r8, #0
 8012f7e:	9308      	strmi	r3, [sp, #32]
 8012f80:	2f00      	cmp	r7, #0
 8012f82:	db39      	blt.n	8012ff8 <_dtoa_r+0x218>
 8012f84:	9b08      	ldr	r3, [sp, #32]
 8012f86:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012f88:	443b      	add	r3, r7
 8012f8a:	9308      	str	r3, [sp, #32]
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012f90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f92:	2b09      	cmp	r3, #9
 8012f94:	d864      	bhi.n	8013060 <_dtoa_r+0x280>
 8012f96:	2b05      	cmp	r3, #5
 8012f98:	bfc4      	itt	gt
 8012f9a:	3b04      	subgt	r3, #4
 8012f9c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8012f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012fa0:	f1a3 0302 	sub.w	r3, r3, #2
 8012fa4:	bfcc      	ite	gt
 8012fa6:	2400      	movgt	r4, #0
 8012fa8:	2401      	movle	r4, #1
 8012faa:	2b03      	cmp	r3, #3
 8012fac:	d863      	bhi.n	8013076 <_dtoa_r+0x296>
 8012fae:	e8df f003 	tbb	[pc, r3]
 8012fb2:	372a      	.short	0x372a
 8012fb4:	5535      	.short	0x5535
 8012fb6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8012fba:	441e      	add	r6, r3
 8012fbc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012fc0:	2b20      	cmp	r3, #32
 8012fc2:	bfc1      	itttt	gt
 8012fc4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012fc8:	409f      	lslgt	r7, r3
 8012fca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012fce:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012fd2:	bfd6      	itet	le
 8012fd4:	f1c3 0320 	rsble	r3, r3, #32
 8012fd8:	ea47 0003 	orrgt.w	r0, r7, r3
 8012fdc:	fa04 f003 	lslle.w	r0, r4, r3
 8012fe0:	f7ed fa68 	bl	80004b4 <__aeabi_ui2d>
 8012fe4:	2201      	movs	r2, #1
 8012fe6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012fea:	3e01      	subs	r6, #1
 8012fec:	9214      	str	r2, [sp, #80]	@ 0x50
 8012fee:	e777      	b.n	8012ee0 <_dtoa_r+0x100>
 8012ff0:	2301      	movs	r3, #1
 8012ff2:	e7b8      	b.n	8012f66 <_dtoa_r+0x186>
 8012ff4:	9012      	str	r0, [sp, #72]	@ 0x48
 8012ff6:	e7b7      	b.n	8012f68 <_dtoa_r+0x188>
 8012ff8:	427b      	negs	r3, r7
 8012ffa:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	eba8 0807 	sub.w	r8, r8, r7
 8013002:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013004:	e7c4      	b.n	8012f90 <_dtoa_r+0x1b0>
 8013006:	2300      	movs	r3, #0
 8013008:	930b      	str	r3, [sp, #44]	@ 0x2c
 801300a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801300c:	2b00      	cmp	r3, #0
 801300e:	dc35      	bgt.n	801307c <_dtoa_r+0x29c>
 8013010:	2301      	movs	r3, #1
 8013012:	9300      	str	r3, [sp, #0]
 8013014:	9307      	str	r3, [sp, #28]
 8013016:	461a      	mov	r2, r3
 8013018:	920e      	str	r2, [sp, #56]	@ 0x38
 801301a:	e00b      	b.n	8013034 <_dtoa_r+0x254>
 801301c:	2301      	movs	r3, #1
 801301e:	e7f3      	b.n	8013008 <_dtoa_r+0x228>
 8013020:	2300      	movs	r3, #0
 8013022:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013024:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013026:	18fb      	adds	r3, r7, r3
 8013028:	9300      	str	r3, [sp, #0]
 801302a:	3301      	adds	r3, #1
 801302c:	2b01      	cmp	r3, #1
 801302e:	9307      	str	r3, [sp, #28]
 8013030:	bfb8      	it	lt
 8013032:	2301      	movlt	r3, #1
 8013034:	f8db 001c 	ldr.w	r0, [fp, #28]
 8013038:	2100      	movs	r1, #0
 801303a:	2204      	movs	r2, #4
 801303c:	f102 0514 	add.w	r5, r2, #20
 8013040:	429d      	cmp	r5, r3
 8013042:	d91f      	bls.n	8013084 <_dtoa_r+0x2a4>
 8013044:	6041      	str	r1, [r0, #4]
 8013046:	4658      	mov	r0, fp
 8013048:	f000 fcd8 	bl	80139fc <_Balloc>
 801304c:	4682      	mov	sl, r0
 801304e:	2800      	cmp	r0, #0
 8013050:	d13c      	bne.n	80130cc <_dtoa_r+0x2ec>
 8013052:	4b1b      	ldr	r3, [pc, #108]	@ (80130c0 <_dtoa_r+0x2e0>)
 8013054:	4602      	mov	r2, r0
 8013056:	f240 11af 	movw	r1, #431	@ 0x1af
 801305a:	e6d8      	b.n	8012e0e <_dtoa_r+0x2e>
 801305c:	2301      	movs	r3, #1
 801305e:	e7e0      	b.n	8013022 <_dtoa_r+0x242>
 8013060:	2401      	movs	r4, #1
 8013062:	2300      	movs	r3, #0
 8013064:	9309      	str	r3, [sp, #36]	@ 0x24
 8013066:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013068:	f04f 33ff 	mov.w	r3, #4294967295
 801306c:	9300      	str	r3, [sp, #0]
 801306e:	9307      	str	r3, [sp, #28]
 8013070:	2200      	movs	r2, #0
 8013072:	2312      	movs	r3, #18
 8013074:	e7d0      	b.n	8013018 <_dtoa_r+0x238>
 8013076:	2301      	movs	r3, #1
 8013078:	930b      	str	r3, [sp, #44]	@ 0x2c
 801307a:	e7f5      	b.n	8013068 <_dtoa_r+0x288>
 801307c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801307e:	9300      	str	r3, [sp, #0]
 8013080:	9307      	str	r3, [sp, #28]
 8013082:	e7d7      	b.n	8013034 <_dtoa_r+0x254>
 8013084:	3101      	adds	r1, #1
 8013086:	0052      	lsls	r2, r2, #1
 8013088:	e7d8      	b.n	801303c <_dtoa_r+0x25c>
 801308a:	bf00      	nop
 801308c:	f3af 8000 	nop.w
 8013090:	636f4361 	.word	0x636f4361
 8013094:	3fd287a7 	.word	0x3fd287a7
 8013098:	8b60c8b3 	.word	0x8b60c8b3
 801309c:	3fc68a28 	.word	0x3fc68a28
 80130a0:	509f79fb 	.word	0x509f79fb
 80130a4:	3fd34413 	.word	0x3fd34413
 80130a8:	0801ad4f 	.word	0x0801ad4f
 80130ac:	0801ad66 	.word	0x0801ad66
 80130b0:	7ff00000 	.word	0x7ff00000
 80130b4:	0801ad1f 	.word	0x0801ad1f
 80130b8:	3ff80000 	.word	0x3ff80000
 80130bc:	0801ae60 	.word	0x0801ae60
 80130c0:	0801adbe 	.word	0x0801adbe
 80130c4:	0801ad4b 	.word	0x0801ad4b
 80130c8:	0801ad1e 	.word	0x0801ad1e
 80130cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80130d0:	6018      	str	r0, [r3, #0]
 80130d2:	9b07      	ldr	r3, [sp, #28]
 80130d4:	2b0e      	cmp	r3, #14
 80130d6:	f200 80a4 	bhi.w	8013222 <_dtoa_r+0x442>
 80130da:	2c00      	cmp	r4, #0
 80130dc:	f000 80a1 	beq.w	8013222 <_dtoa_r+0x442>
 80130e0:	2f00      	cmp	r7, #0
 80130e2:	dd33      	ble.n	801314c <_dtoa_r+0x36c>
 80130e4:	4bad      	ldr	r3, [pc, #692]	@ (801339c <_dtoa_r+0x5bc>)
 80130e6:	f007 020f 	and.w	r2, r7, #15
 80130ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80130ee:	ed93 7b00 	vldr	d7, [r3]
 80130f2:	05f8      	lsls	r0, r7, #23
 80130f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80130f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80130fc:	d516      	bpl.n	801312c <_dtoa_r+0x34c>
 80130fe:	4ba8      	ldr	r3, [pc, #672]	@ (80133a0 <_dtoa_r+0x5c0>)
 8013100:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013104:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013108:	f7ed fb78 	bl	80007fc <__aeabi_ddiv>
 801310c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013110:	f004 040f 	and.w	r4, r4, #15
 8013114:	2603      	movs	r6, #3
 8013116:	4da2      	ldr	r5, [pc, #648]	@ (80133a0 <_dtoa_r+0x5c0>)
 8013118:	b954      	cbnz	r4, 8013130 <_dtoa_r+0x350>
 801311a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801311e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013122:	f7ed fb6b 	bl	80007fc <__aeabi_ddiv>
 8013126:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801312a:	e028      	b.n	801317e <_dtoa_r+0x39e>
 801312c:	2602      	movs	r6, #2
 801312e:	e7f2      	b.n	8013116 <_dtoa_r+0x336>
 8013130:	07e1      	lsls	r1, r4, #31
 8013132:	d508      	bpl.n	8013146 <_dtoa_r+0x366>
 8013134:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013138:	e9d5 2300 	ldrd	r2, r3, [r5]
 801313c:	f7ed fa34 	bl	80005a8 <__aeabi_dmul>
 8013140:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013144:	3601      	adds	r6, #1
 8013146:	1064      	asrs	r4, r4, #1
 8013148:	3508      	adds	r5, #8
 801314a:	e7e5      	b.n	8013118 <_dtoa_r+0x338>
 801314c:	f000 80d2 	beq.w	80132f4 <_dtoa_r+0x514>
 8013150:	427c      	negs	r4, r7
 8013152:	4b92      	ldr	r3, [pc, #584]	@ (801339c <_dtoa_r+0x5bc>)
 8013154:	4d92      	ldr	r5, [pc, #584]	@ (80133a0 <_dtoa_r+0x5c0>)
 8013156:	f004 020f 	and.w	r2, r4, #15
 801315a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801315e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013162:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013166:	f7ed fa1f 	bl	80005a8 <__aeabi_dmul>
 801316a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801316e:	1124      	asrs	r4, r4, #4
 8013170:	2300      	movs	r3, #0
 8013172:	2602      	movs	r6, #2
 8013174:	2c00      	cmp	r4, #0
 8013176:	f040 80b2 	bne.w	80132de <_dtoa_r+0x4fe>
 801317a:	2b00      	cmp	r3, #0
 801317c:	d1d3      	bne.n	8013126 <_dtoa_r+0x346>
 801317e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013180:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013184:	2b00      	cmp	r3, #0
 8013186:	f000 80b7 	beq.w	80132f8 <_dtoa_r+0x518>
 801318a:	4b86      	ldr	r3, [pc, #536]	@ (80133a4 <_dtoa_r+0x5c4>)
 801318c:	2200      	movs	r2, #0
 801318e:	4620      	mov	r0, r4
 8013190:	4629      	mov	r1, r5
 8013192:	f7ed fc7b 	bl	8000a8c <__aeabi_dcmplt>
 8013196:	2800      	cmp	r0, #0
 8013198:	f000 80ae 	beq.w	80132f8 <_dtoa_r+0x518>
 801319c:	9b07      	ldr	r3, [sp, #28]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	f000 80aa 	beq.w	80132f8 <_dtoa_r+0x518>
 80131a4:	9b00      	ldr	r3, [sp, #0]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	dd37      	ble.n	801321a <_dtoa_r+0x43a>
 80131aa:	1e7b      	subs	r3, r7, #1
 80131ac:	9304      	str	r3, [sp, #16]
 80131ae:	4620      	mov	r0, r4
 80131b0:	4b7d      	ldr	r3, [pc, #500]	@ (80133a8 <_dtoa_r+0x5c8>)
 80131b2:	2200      	movs	r2, #0
 80131b4:	4629      	mov	r1, r5
 80131b6:	f7ed f9f7 	bl	80005a8 <__aeabi_dmul>
 80131ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80131be:	9c00      	ldr	r4, [sp, #0]
 80131c0:	3601      	adds	r6, #1
 80131c2:	4630      	mov	r0, r6
 80131c4:	f7ed f986 	bl	80004d4 <__aeabi_i2d>
 80131c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80131cc:	f7ed f9ec 	bl	80005a8 <__aeabi_dmul>
 80131d0:	4b76      	ldr	r3, [pc, #472]	@ (80133ac <_dtoa_r+0x5cc>)
 80131d2:	2200      	movs	r2, #0
 80131d4:	f7ed f832 	bl	800023c <__adddf3>
 80131d8:	4605      	mov	r5, r0
 80131da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80131de:	2c00      	cmp	r4, #0
 80131e0:	f040 808d 	bne.w	80132fe <_dtoa_r+0x51e>
 80131e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80131e8:	4b71      	ldr	r3, [pc, #452]	@ (80133b0 <_dtoa_r+0x5d0>)
 80131ea:	2200      	movs	r2, #0
 80131ec:	f7ed f824 	bl	8000238 <__aeabi_dsub>
 80131f0:	4602      	mov	r2, r0
 80131f2:	460b      	mov	r3, r1
 80131f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80131f8:	462a      	mov	r2, r5
 80131fa:	4633      	mov	r3, r6
 80131fc:	f7ed fc64 	bl	8000ac8 <__aeabi_dcmpgt>
 8013200:	2800      	cmp	r0, #0
 8013202:	f040 828b 	bne.w	801371c <_dtoa_r+0x93c>
 8013206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801320a:	462a      	mov	r2, r5
 801320c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013210:	f7ed fc3c 	bl	8000a8c <__aeabi_dcmplt>
 8013214:	2800      	cmp	r0, #0
 8013216:	f040 8128 	bne.w	801346a <_dtoa_r+0x68a>
 801321a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801321e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8013222:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013224:	2b00      	cmp	r3, #0
 8013226:	f2c0 815a 	blt.w	80134de <_dtoa_r+0x6fe>
 801322a:	2f0e      	cmp	r7, #14
 801322c:	f300 8157 	bgt.w	80134de <_dtoa_r+0x6fe>
 8013230:	4b5a      	ldr	r3, [pc, #360]	@ (801339c <_dtoa_r+0x5bc>)
 8013232:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013236:	ed93 7b00 	vldr	d7, [r3]
 801323a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801323c:	2b00      	cmp	r3, #0
 801323e:	ed8d 7b00 	vstr	d7, [sp]
 8013242:	da03      	bge.n	801324c <_dtoa_r+0x46c>
 8013244:	9b07      	ldr	r3, [sp, #28]
 8013246:	2b00      	cmp	r3, #0
 8013248:	f340 8101 	ble.w	801344e <_dtoa_r+0x66e>
 801324c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013250:	4656      	mov	r6, sl
 8013252:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013256:	4620      	mov	r0, r4
 8013258:	4629      	mov	r1, r5
 801325a:	f7ed facf 	bl	80007fc <__aeabi_ddiv>
 801325e:	f7ed fc53 	bl	8000b08 <__aeabi_d2iz>
 8013262:	4680      	mov	r8, r0
 8013264:	f7ed f936 	bl	80004d4 <__aeabi_i2d>
 8013268:	e9dd 2300 	ldrd	r2, r3, [sp]
 801326c:	f7ed f99c 	bl	80005a8 <__aeabi_dmul>
 8013270:	4602      	mov	r2, r0
 8013272:	460b      	mov	r3, r1
 8013274:	4620      	mov	r0, r4
 8013276:	4629      	mov	r1, r5
 8013278:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801327c:	f7ec ffdc 	bl	8000238 <__aeabi_dsub>
 8013280:	f806 4b01 	strb.w	r4, [r6], #1
 8013284:	9d07      	ldr	r5, [sp, #28]
 8013286:	eba6 040a 	sub.w	r4, r6, sl
 801328a:	42a5      	cmp	r5, r4
 801328c:	4602      	mov	r2, r0
 801328e:	460b      	mov	r3, r1
 8013290:	f040 8117 	bne.w	80134c2 <_dtoa_r+0x6e2>
 8013294:	f7ec ffd2 	bl	800023c <__adddf3>
 8013298:	e9dd 2300 	ldrd	r2, r3, [sp]
 801329c:	4604      	mov	r4, r0
 801329e:	460d      	mov	r5, r1
 80132a0:	f7ed fc12 	bl	8000ac8 <__aeabi_dcmpgt>
 80132a4:	2800      	cmp	r0, #0
 80132a6:	f040 80f9 	bne.w	801349c <_dtoa_r+0x6bc>
 80132aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80132ae:	4620      	mov	r0, r4
 80132b0:	4629      	mov	r1, r5
 80132b2:	f7ed fbe1 	bl	8000a78 <__aeabi_dcmpeq>
 80132b6:	b118      	cbz	r0, 80132c0 <_dtoa_r+0x4e0>
 80132b8:	f018 0f01 	tst.w	r8, #1
 80132bc:	f040 80ee 	bne.w	801349c <_dtoa_r+0x6bc>
 80132c0:	4649      	mov	r1, r9
 80132c2:	4658      	mov	r0, fp
 80132c4:	f000 fbda 	bl	8013a7c <_Bfree>
 80132c8:	2300      	movs	r3, #0
 80132ca:	7033      	strb	r3, [r6, #0]
 80132cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80132ce:	3701      	adds	r7, #1
 80132d0:	601f      	str	r7, [r3, #0]
 80132d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	f000 831d 	beq.w	8013914 <_dtoa_r+0xb34>
 80132da:	601e      	str	r6, [r3, #0]
 80132dc:	e31a      	b.n	8013914 <_dtoa_r+0xb34>
 80132de:	07e2      	lsls	r2, r4, #31
 80132e0:	d505      	bpl.n	80132ee <_dtoa_r+0x50e>
 80132e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80132e6:	f7ed f95f 	bl	80005a8 <__aeabi_dmul>
 80132ea:	3601      	adds	r6, #1
 80132ec:	2301      	movs	r3, #1
 80132ee:	1064      	asrs	r4, r4, #1
 80132f0:	3508      	adds	r5, #8
 80132f2:	e73f      	b.n	8013174 <_dtoa_r+0x394>
 80132f4:	2602      	movs	r6, #2
 80132f6:	e742      	b.n	801317e <_dtoa_r+0x39e>
 80132f8:	9c07      	ldr	r4, [sp, #28]
 80132fa:	9704      	str	r7, [sp, #16]
 80132fc:	e761      	b.n	80131c2 <_dtoa_r+0x3e2>
 80132fe:	4b27      	ldr	r3, [pc, #156]	@ (801339c <_dtoa_r+0x5bc>)
 8013300:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013302:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013306:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801330a:	4454      	add	r4, sl
 801330c:	2900      	cmp	r1, #0
 801330e:	d053      	beq.n	80133b8 <_dtoa_r+0x5d8>
 8013310:	4928      	ldr	r1, [pc, #160]	@ (80133b4 <_dtoa_r+0x5d4>)
 8013312:	2000      	movs	r0, #0
 8013314:	f7ed fa72 	bl	80007fc <__aeabi_ddiv>
 8013318:	4633      	mov	r3, r6
 801331a:	462a      	mov	r2, r5
 801331c:	f7ec ff8c 	bl	8000238 <__aeabi_dsub>
 8013320:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013324:	4656      	mov	r6, sl
 8013326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801332a:	f7ed fbed 	bl	8000b08 <__aeabi_d2iz>
 801332e:	4605      	mov	r5, r0
 8013330:	f7ed f8d0 	bl	80004d4 <__aeabi_i2d>
 8013334:	4602      	mov	r2, r0
 8013336:	460b      	mov	r3, r1
 8013338:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801333c:	f7ec ff7c 	bl	8000238 <__aeabi_dsub>
 8013340:	3530      	adds	r5, #48	@ 0x30
 8013342:	4602      	mov	r2, r0
 8013344:	460b      	mov	r3, r1
 8013346:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801334a:	f806 5b01 	strb.w	r5, [r6], #1
 801334e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013352:	f7ed fb9b 	bl	8000a8c <__aeabi_dcmplt>
 8013356:	2800      	cmp	r0, #0
 8013358:	d171      	bne.n	801343e <_dtoa_r+0x65e>
 801335a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801335e:	4911      	ldr	r1, [pc, #68]	@ (80133a4 <_dtoa_r+0x5c4>)
 8013360:	2000      	movs	r0, #0
 8013362:	f7ec ff69 	bl	8000238 <__aeabi_dsub>
 8013366:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801336a:	f7ed fb8f 	bl	8000a8c <__aeabi_dcmplt>
 801336e:	2800      	cmp	r0, #0
 8013370:	f040 8095 	bne.w	801349e <_dtoa_r+0x6be>
 8013374:	42a6      	cmp	r6, r4
 8013376:	f43f af50 	beq.w	801321a <_dtoa_r+0x43a>
 801337a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801337e:	4b0a      	ldr	r3, [pc, #40]	@ (80133a8 <_dtoa_r+0x5c8>)
 8013380:	2200      	movs	r2, #0
 8013382:	f7ed f911 	bl	80005a8 <__aeabi_dmul>
 8013386:	4b08      	ldr	r3, [pc, #32]	@ (80133a8 <_dtoa_r+0x5c8>)
 8013388:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801338c:	2200      	movs	r2, #0
 801338e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013392:	f7ed f909 	bl	80005a8 <__aeabi_dmul>
 8013396:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801339a:	e7c4      	b.n	8013326 <_dtoa_r+0x546>
 801339c:	0801ae60 	.word	0x0801ae60
 80133a0:	0801ae38 	.word	0x0801ae38
 80133a4:	3ff00000 	.word	0x3ff00000
 80133a8:	40240000 	.word	0x40240000
 80133ac:	401c0000 	.word	0x401c0000
 80133b0:	40140000 	.word	0x40140000
 80133b4:	3fe00000 	.word	0x3fe00000
 80133b8:	4631      	mov	r1, r6
 80133ba:	4628      	mov	r0, r5
 80133bc:	f7ed f8f4 	bl	80005a8 <__aeabi_dmul>
 80133c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80133c4:	9415      	str	r4, [sp, #84]	@ 0x54
 80133c6:	4656      	mov	r6, sl
 80133c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80133cc:	f7ed fb9c 	bl	8000b08 <__aeabi_d2iz>
 80133d0:	4605      	mov	r5, r0
 80133d2:	f7ed f87f 	bl	80004d4 <__aeabi_i2d>
 80133d6:	4602      	mov	r2, r0
 80133d8:	460b      	mov	r3, r1
 80133da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80133de:	f7ec ff2b 	bl	8000238 <__aeabi_dsub>
 80133e2:	3530      	adds	r5, #48	@ 0x30
 80133e4:	f806 5b01 	strb.w	r5, [r6], #1
 80133e8:	4602      	mov	r2, r0
 80133ea:	460b      	mov	r3, r1
 80133ec:	42a6      	cmp	r6, r4
 80133ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80133f2:	f04f 0200 	mov.w	r2, #0
 80133f6:	d124      	bne.n	8013442 <_dtoa_r+0x662>
 80133f8:	4bac      	ldr	r3, [pc, #688]	@ (80136ac <_dtoa_r+0x8cc>)
 80133fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80133fe:	f7ec ff1d 	bl	800023c <__adddf3>
 8013402:	4602      	mov	r2, r0
 8013404:	460b      	mov	r3, r1
 8013406:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801340a:	f7ed fb5d 	bl	8000ac8 <__aeabi_dcmpgt>
 801340e:	2800      	cmp	r0, #0
 8013410:	d145      	bne.n	801349e <_dtoa_r+0x6be>
 8013412:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013416:	49a5      	ldr	r1, [pc, #660]	@ (80136ac <_dtoa_r+0x8cc>)
 8013418:	2000      	movs	r0, #0
 801341a:	f7ec ff0d 	bl	8000238 <__aeabi_dsub>
 801341e:	4602      	mov	r2, r0
 8013420:	460b      	mov	r3, r1
 8013422:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013426:	f7ed fb31 	bl	8000a8c <__aeabi_dcmplt>
 801342a:	2800      	cmp	r0, #0
 801342c:	f43f aef5 	beq.w	801321a <_dtoa_r+0x43a>
 8013430:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8013432:	1e73      	subs	r3, r6, #1
 8013434:	9315      	str	r3, [sp, #84]	@ 0x54
 8013436:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801343a:	2b30      	cmp	r3, #48	@ 0x30
 801343c:	d0f8      	beq.n	8013430 <_dtoa_r+0x650>
 801343e:	9f04      	ldr	r7, [sp, #16]
 8013440:	e73e      	b.n	80132c0 <_dtoa_r+0x4e0>
 8013442:	4b9b      	ldr	r3, [pc, #620]	@ (80136b0 <_dtoa_r+0x8d0>)
 8013444:	f7ed f8b0 	bl	80005a8 <__aeabi_dmul>
 8013448:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801344c:	e7bc      	b.n	80133c8 <_dtoa_r+0x5e8>
 801344e:	d10c      	bne.n	801346a <_dtoa_r+0x68a>
 8013450:	4b98      	ldr	r3, [pc, #608]	@ (80136b4 <_dtoa_r+0x8d4>)
 8013452:	2200      	movs	r2, #0
 8013454:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013458:	f7ed f8a6 	bl	80005a8 <__aeabi_dmul>
 801345c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013460:	f7ed fb28 	bl	8000ab4 <__aeabi_dcmpge>
 8013464:	2800      	cmp	r0, #0
 8013466:	f000 8157 	beq.w	8013718 <_dtoa_r+0x938>
 801346a:	2400      	movs	r4, #0
 801346c:	4625      	mov	r5, r4
 801346e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013470:	43db      	mvns	r3, r3
 8013472:	9304      	str	r3, [sp, #16]
 8013474:	4656      	mov	r6, sl
 8013476:	2700      	movs	r7, #0
 8013478:	4621      	mov	r1, r4
 801347a:	4658      	mov	r0, fp
 801347c:	f000 fafe 	bl	8013a7c <_Bfree>
 8013480:	2d00      	cmp	r5, #0
 8013482:	d0dc      	beq.n	801343e <_dtoa_r+0x65e>
 8013484:	b12f      	cbz	r7, 8013492 <_dtoa_r+0x6b2>
 8013486:	42af      	cmp	r7, r5
 8013488:	d003      	beq.n	8013492 <_dtoa_r+0x6b2>
 801348a:	4639      	mov	r1, r7
 801348c:	4658      	mov	r0, fp
 801348e:	f000 faf5 	bl	8013a7c <_Bfree>
 8013492:	4629      	mov	r1, r5
 8013494:	4658      	mov	r0, fp
 8013496:	f000 faf1 	bl	8013a7c <_Bfree>
 801349a:	e7d0      	b.n	801343e <_dtoa_r+0x65e>
 801349c:	9704      	str	r7, [sp, #16]
 801349e:	4633      	mov	r3, r6
 80134a0:	461e      	mov	r6, r3
 80134a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80134a6:	2a39      	cmp	r2, #57	@ 0x39
 80134a8:	d107      	bne.n	80134ba <_dtoa_r+0x6da>
 80134aa:	459a      	cmp	sl, r3
 80134ac:	d1f8      	bne.n	80134a0 <_dtoa_r+0x6c0>
 80134ae:	9a04      	ldr	r2, [sp, #16]
 80134b0:	3201      	adds	r2, #1
 80134b2:	9204      	str	r2, [sp, #16]
 80134b4:	2230      	movs	r2, #48	@ 0x30
 80134b6:	f88a 2000 	strb.w	r2, [sl]
 80134ba:	781a      	ldrb	r2, [r3, #0]
 80134bc:	3201      	adds	r2, #1
 80134be:	701a      	strb	r2, [r3, #0]
 80134c0:	e7bd      	b.n	801343e <_dtoa_r+0x65e>
 80134c2:	4b7b      	ldr	r3, [pc, #492]	@ (80136b0 <_dtoa_r+0x8d0>)
 80134c4:	2200      	movs	r2, #0
 80134c6:	f7ed f86f 	bl	80005a8 <__aeabi_dmul>
 80134ca:	2200      	movs	r2, #0
 80134cc:	2300      	movs	r3, #0
 80134ce:	4604      	mov	r4, r0
 80134d0:	460d      	mov	r5, r1
 80134d2:	f7ed fad1 	bl	8000a78 <__aeabi_dcmpeq>
 80134d6:	2800      	cmp	r0, #0
 80134d8:	f43f aebb 	beq.w	8013252 <_dtoa_r+0x472>
 80134dc:	e6f0      	b.n	80132c0 <_dtoa_r+0x4e0>
 80134de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80134e0:	2a00      	cmp	r2, #0
 80134e2:	f000 80db 	beq.w	801369c <_dtoa_r+0x8bc>
 80134e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80134e8:	2a01      	cmp	r2, #1
 80134ea:	f300 80bf 	bgt.w	801366c <_dtoa_r+0x88c>
 80134ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80134f0:	2a00      	cmp	r2, #0
 80134f2:	f000 80b7 	beq.w	8013664 <_dtoa_r+0x884>
 80134f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80134fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80134fc:	4646      	mov	r6, r8
 80134fe:	9a08      	ldr	r2, [sp, #32]
 8013500:	2101      	movs	r1, #1
 8013502:	441a      	add	r2, r3
 8013504:	4658      	mov	r0, fp
 8013506:	4498      	add	r8, r3
 8013508:	9208      	str	r2, [sp, #32]
 801350a:	f000 fb6b 	bl	8013be4 <__i2b>
 801350e:	4605      	mov	r5, r0
 8013510:	b15e      	cbz	r6, 801352a <_dtoa_r+0x74a>
 8013512:	9b08      	ldr	r3, [sp, #32]
 8013514:	2b00      	cmp	r3, #0
 8013516:	dd08      	ble.n	801352a <_dtoa_r+0x74a>
 8013518:	42b3      	cmp	r3, r6
 801351a:	9a08      	ldr	r2, [sp, #32]
 801351c:	bfa8      	it	ge
 801351e:	4633      	movge	r3, r6
 8013520:	eba8 0803 	sub.w	r8, r8, r3
 8013524:	1af6      	subs	r6, r6, r3
 8013526:	1ad3      	subs	r3, r2, r3
 8013528:	9308      	str	r3, [sp, #32]
 801352a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801352c:	b1f3      	cbz	r3, 801356c <_dtoa_r+0x78c>
 801352e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013530:	2b00      	cmp	r3, #0
 8013532:	f000 80b7 	beq.w	80136a4 <_dtoa_r+0x8c4>
 8013536:	b18c      	cbz	r4, 801355c <_dtoa_r+0x77c>
 8013538:	4629      	mov	r1, r5
 801353a:	4622      	mov	r2, r4
 801353c:	4658      	mov	r0, fp
 801353e:	f000 fc11 	bl	8013d64 <__pow5mult>
 8013542:	464a      	mov	r2, r9
 8013544:	4601      	mov	r1, r0
 8013546:	4605      	mov	r5, r0
 8013548:	4658      	mov	r0, fp
 801354a:	f000 fb61 	bl	8013c10 <__multiply>
 801354e:	4649      	mov	r1, r9
 8013550:	9004      	str	r0, [sp, #16]
 8013552:	4658      	mov	r0, fp
 8013554:	f000 fa92 	bl	8013a7c <_Bfree>
 8013558:	9b04      	ldr	r3, [sp, #16]
 801355a:	4699      	mov	r9, r3
 801355c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801355e:	1b1a      	subs	r2, r3, r4
 8013560:	d004      	beq.n	801356c <_dtoa_r+0x78c>
 8013562:	4649      	mov	r1, r9
 8013564:	4658      	mov	r0, fp
 8013566:	f000 fbfd 	bl	8013d64 <__pow5mult>
 801356a:	4681      	mov	r9, r0
 801356c:	2101      	movs	r1, #1
 801356e:	4658      	mov	r0, fp
 8013570:	f000 fb38 	bl	8013be4 <__i2b>
 8013574:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013576:	4604      	mov	r4, r0
 8013578:	2b00      	cmp	r3, #0
 801357a:	f000 81cf 	beq.w	801391c <_dtoa_r+0xb3c>
 801357e:	461a      	mov	r2, r3
 8013580:	4601      	mov	r1, r0
 8013582:	4658      	mov	r0, fp
 8013584:	f000 fbee 	bl	8013d64 <__pow5mult>
 8013588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801358a:	2b01      	cmp	r3, #1
 801358c:	4604      	mov	r4, r0
 801358e:	f300 8095 	bgt.w	80136bc <_dtoa_r+0x8dc>
 8013592:	9b02      	ldr	r3, [sp, #8]
 8013594:	2b00      	cmp	r3, #0
 8013596:	f040 8087 	bne.w	80136a8 <_dtoa_r+0x8c8>
 801359a:	9b03      	ldr	r3, [sp, #12]
 801359c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	f040 8089 	bne.w	80136b8 <_dtoa_r+0x8d8>
 80135a6:	9b03      	ldr	r3, [sp, #12]
 80135a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80135ac:	0d1b      	lsrs	r3, r3, #20
 80135ae:	051b      	lsls	r3, r3, #20
 80135b0:	b12b      	cbz	r3, 80135be <_dtoa_r+0x7de>
 80135b2:	9b08      	ldr	r3, [sp, #32]
 80135b4:	3301      	adds	r3, #1
 80135b6:	9308      	str	r3, [sp, #32]
 80135b8:	f108 0801 	add.w	r8, r8, #1
 80135bc:	2301      	movs	r3, #1
 80135be:	930a      	str	r3, [sp, #40]	@ 0x28
 80135c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	f000 81b0 	beq.w	8013928 <_dtoa_r+0xb48>
 80135c8:	6923      	ldr	r3, [r4, #16]
 80135ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80135ce:	6918      	ldr	r0, [r3, #16]
 80135d0:	f000 fabc 	bl	8013b4c <__hi0bits>
 80135d4:	f1c0 0020 	rsb	r0, r0, #32
 80135d8:	9b08      	ldr	r3, [sp, #32]
 80135da:	4418      	add	r0, r3
 80135dc:	f010 001f 	ands.w	r0, r0, #31
 80135e0:	d077      	beq.n	80136d2 <_dtoa_r+0x8f2>
 80135e2:	f1c0 0320 	rsb	r3, r0, #32
 80135e6:	2b04      	cmp	r3, #4
 80135e8:	dd6b      	ble.n	80136c2 <_dtoa_r+0x8e2>
 80135ea:	9b08      	ldr	r3, [sp, #32]
 80135ec:	f1c0 001c 	rsb	r0, r0, #28
 80135f0:	4403      	add	r3, r0
 80135f2:	4480      	add	r8, r0
 80135f4:	4406      	add	r6, r0
 80135f6:	9308      	str	r3, [sp, #32]
 80135f8:	f1b8 0f00 	cmp.w	r8, #0
 80135fc:	dd05      	ble.n	801360a <_dtoa_r+0x82a>
 80135fe:	4649      	mov	r1, r9
 8013600:	4642      	mov	r2, r8
 8013602:	4658      	mov	r0, fp
 8013604:	f000 fc08 	bl	8013e18 <__lshift>
 8013608:	4681      	mov	r9, r0
 801360a:	9b08      	ldr	r3, [sp, #32]
 801360c:	2b00      	cmp	r3, #0
 801360e:	dd05      	ble.n	801361c <_dtoa_r+0x83c>
 8013610:	4621      	mov	r1, r4
 8013612:	461a      	mov	r2, r3
 8013614:	4658      	mov	r0, fp
 8013616:	f000 fbff 	bl	8013e18 <__lshift>
 801361a:	4604      	mov	r4, r0
 801361c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801361e:	2b00      	cmp	r3, #0
 8013620:	d059      	beq.n	80136d6 <_dtoa_r+0x8f6>
 8013622:	4621      	mov	r1, r4
 8013624:	4648      	mov	r0, r9
 8013626:	f000 fc63 	bl	8013ef0 <__mcmp>
 801362a:	2800      	cmp	r0, #0
 801362c:	da53      	bge.n	80136d6 <_dtoa_r+0x8f6>
 801362e:	1e7b      	subs	r3, r7, #1
 8013630:	9304      	str	r3, [sp, #16]
 8013632:	4649      	mov	r1, r9
 8013634:	2300      	movs	r3, #0
 8013636:	220a      	movs	r2, #10
 8013638:	4658      	mov	r0, fp
 801363a:	f000 fa41 	bl	8013ac0 <__multadd>
 801363e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013640:	4681      	mov	r9, r0
 8013642:	2b00      	cmp	r3, #0
 8013644:	f000 8172 	beq.w	801392c <_dtoa_r+0xb4c>
 8013648:	2300      	movs	r3, #0
 801364a:	4629      	mov	r1, r5
 801364c:	220a      	movs	r2, #10
 801364e:	4658      	mov	r0, fp
 8013650:	f000 fa36 	bl	8013ac0 <__multadd>
 8013654:	9b00      	ldr	r3, [sp, #0]
 8013656:	2b00      	cmp	r3, #0
 8013658:	4605      	mov	r5, r0
 801365a:	dc67      	bgt.n	801372c <_dtoa_r+0x94c>
 801365c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801365e:	2b02      	cmp	r3, #2
 8013660:	dc41      	bgt.n	80136e6 <_dtoa_r+0x906>
 8013662:	e063      	b.n	801372c <_dtoa_r+0x94c>
 8013664:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013666:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801366a:	e746      	b.n	80134fa <_dtoa_r+0x71a>
 801366c:	9b07      	ldr	r3, [sp, #28]
 801366e:	1e5c      	subs	r4, r3, #1
 8013670:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013672:	42a3      	cmp	r3, r4
 8013674:	bfbf      	itttt	lt
 8013676:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013678:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801367a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801367c:	1ae3      	sublt	r3, r4, r3
 801367e:	bfb4      	ite	lt
 8013680:	18d2      	addlt	r2, r2, r3
 8013682:	1b1c      	subge	r4, r3, r4
 8013684:	9b07      	ldr	r3, [sp, #28]
 8013686:	bfbc      	itt	lt
 8013688:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801368a:	2400      	movlt	r4, #0
 801368c:	2b00      	cmp	r3, #0
 801368e:	bfb5      	itete	lt
 8013690:	eba8 0603 	sublt.w	r6, r8, r3
 8013694:	9b07      	ldrge	r3, [sp, #28]
 8013696:	2300      	movlt	r3, #0
 8013698:	4646      	movge	r6, r8
 801369a:	e730      	b.n	80134fe <_dtoa_r+0x71e>
 801369c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801369e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80136a0:	4646      	mov	r6, r8
 80136a2:	e735      	b.n	8013510 <_dtoa_r+0x730>
 80136a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80136a6:	e75c      	b.n	8013562 <_dtoa_r+0x782>
 80136a8:	2300      	movs	r3, #0
 80136aa:	e788      	b.n	80135be <_dtoa_r+0x7de>
 80136ac:	3fe00000 	.word	0x3fe00000
 80136b0:	40240000 	.word	0x40240000
 80136b4:	40140000 	.word	0x40140000
 80136b8:	9b02      	ldr	r3, [sp, #8]
 80136ba:	e780      	b.n	80135be <_dtoa_r+0x7de>
 80136bc:	2300      	movs	r3, #0
 80136be:	930a      	str	r3, [sp, #40]	@ 0x28
 80136c0:	e782      	b.n	80135c8 <_dtoa_r+0x7e8>
 80136c2:	d099      	beq.n	80135f8 <_dtoa_r+0x818>
 80136c4:	9a08      	ldr	r2, [sp, #32]
 80136c6:	331c      	adds	r3, #28
 80136c8:	441a      	add	r2, r3
 80136ca:	4498      	add	r8, r3
 80136cc:	441e      	add	r6, r3
 80136ce:	9208      	str	r2, [sp, #32]
 80136d0:	e792      	b.n	80135f8 <_dtoa_r+0x818>
 80136d2:	4603      	mov	r3, r0
 80136d4:	e7f6      	b.n	80136c4 <_dtoa_r+0x8e4>
 80136d6:	9b07      	ldr	r3, [sp, #28]
 80136d8:	9704      	str	r7, [sp, #16]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	dc20      	bgt.n	8013720 <_dtoa_r+0x940>
 80136de:	9300      	str	r3, [sp, #0]
 80136e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80136e2:	2b02      	cmp	r3, #2
 80136e4:	dd1e      	ble.n	8013724 <_dtoa_r+0x944>
 80136e6:	9b00      	ldr	r3, [sp, #0]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	f47f aec0 	bne.w	801346e <_dtoa_r+0x68e>
 80136ee:	4621      	mov	r1, r4
 80136f0:	2205      	movs	r2, #5
 80136f2:	4658      	mov	r0, fp
 80136f4:	f000 f9e4 	bl	8013ac0 <__multadd>
 80136f8:	4601      	mov	r1, r0
 80136fa:	4604      	mov	r4, r0
 80136fc:	4648      	mov	r0, r9
 80136fe:	f000 fbf7 	bl	8013ef0 <__mcmp>
 8013702:	2800      	cmp	r0, #0
 8013704:	f77f aeb3 	ble.w	801346e <_dtoa_r+0x68e>
 8013708:	4656      	mov	r6, sl
 801370a:	2331      	movs	r3, #49	@ 0x31
 801370c:	f806 3b01 	strb.w	r3, [r6], #1
 8013710:	9b04      	ldr	r3, [sp, #16]
 8013712:	3301      	adds	r3, #1
 8013714:	9304      	str	r3, [sp, #16]
 8013716:	e6ae      	b.n	8013476 <_dtoa_r+0x696>
 8013718:	9c07      	ldr	r4, [sp, #28]
 801371a:	9704      	str	r7, [sp, #16]
 801371c:	4625      	mov	r5, r4
 801371e:	e7f3      	b.n	8013708 <_dtoa_r+0x928>
 8013720:	9b07      	ldr	r3, [sp, #28]
 8013722:	9300      	str	r3, [sp, #0]
 8013724:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013726:	2b00      	cmp	r3, #0
 8013728:	f000 8104 	beq.w	8013934 <_dtoa_r+0xb54>
 801372c:	2e00      	cmp	r6, #0
 801372e:	dd05      	ble.n	801373c <_dtoa_r+0x95c>
 8013730:	4629      	mov	r1, r5
 8013732:	4632      	mov	r2, r6
 8013734:	4658      	mov	r0, fp
 8013736:	f000 fb6f 	bl	8013e18 <__lshift>
 801373a:	4605      	mov	r5, r0
 801373c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801373e:	2b00      	cmp	r3, #0
 8013740:	d05a      	beq.n	80137f8 <_dtoa_r+0xa18>
 8013742:	6869      	ldr	r1, [r5, #4]
 8013744:	4658      	mov	r0, fp
 8013746:	f000 f959 	bl	80139fc <_Balloc>
 801374a:	4606      	mov	r6, r0
 801374c:	b928      	cbnz	r0, 801375a <_dtoa_r+0x97a>
 801374e:	4b84      	ldr	r3, [pc, #528]	@ (8013960 <_dtoa_r+0xb80>)
 8013750:	4602      	mov	r2, r0
 8013752:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013756:	f7ff bb5a 	b.w	8012e0e <_dtoa_r+0x2e>
 801375a:	692a      	ldr	r2, [r5, #16]
 801375c:	3202      	adds	r2, #2
 801375e:	0092      	lsls	r2, r2, #2
 8013760:	f105 010c 	add.w	r1, r5, #12
 8013764:	300c      	adds	r0, #12
 8013766:	f7ff faa4 	bl	8012cb2 <memcpy>
 801376a:	2201      	movs	r2, #1
 801376c:	4631      	mov	r1, r6
 801376e:	4658      	mov	r0, fp
 8013770:	f000 fb52 	bl	8013e18 <__lshift>
 8013774:	f10a 0301 	add.w	r3, sl, #1
 8013778:	9307      	str	r3, [sp, #28]
 801377a:	9b00      	ldr	r3, [sp, #0]
 801377c:	4453      	add	r3, sl
 801377e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013780:	9b02      	ldr	r3, [sp, #8]
 8013782:	f003 0301 	and.w	r3, r3, #1
 8013786:	462f      	mov	r7, r5
 8013788:	930a      	str	r3, [sp, #40]	@ 0x28
 801378a:	4605      	mov	r5, r0
 801378c:	9b07      	ldr	r3, [sp, #28]
 801378e:	4621      	mov	r1, r4
 8013790:	3b01      	subs	r3, #1
 8013792:	4648      	mov	r0, r9
 8013794:	9300      	str	r3, [sp, #0]
 8013796:	f7ff fa9a 	bl	8012cce <quorem>
 801379a:	4639      	mov	r1, r7
 801379c:	9002      	str	r0, [sp, #8]
 801379e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80137a2:	4648      	mov	r0, r9
 80137a4:	f000 fba4 	bl	8013ef0 <__mcmp>
 80137a8:	462a      	mov	r2, r5
 80137aa:	9008      	str	r0, [sp, #32]
 80137ac:	4621      	mov	r1, r4
 80137ae:	4658      	mov	r0, fp
 80137b0:	f000 fbba 	bl	8013f28 <__mdiff>
 80137b4:	68c2      	ldr	r2, [r0, #12]
 80137b6:	4606      	mov	r6, r0
 80137b8:	bb02      	cbnz	r2, 80137fc <_dtoa_r+0xa1c>
 80137ba:	4601      	mov	r1, r0
 80137bc:	4648      	mov	r0, r9
 80137be:	f000 fb97 	bl	8013ef0 <__mcmp>
 80137c2:	4602      	mov	r2, r0
 80137c4:	4631      	mov	r1, r6
 80137c6:	4658      	mov	r0, fp
 80137c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80137ca:	f000 f957 	bl	8013a7c <_Bfree>
 80137ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80137d2:	9e07      	ldr	r6, [sp, #28]
 80137d4:	ea43 0102 	orr.w	r1, r3, r2
 80137d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80137da:	4319      	orrs	r1, r3
 80137dc:	d110      	bne.n	8013800 <_dtoa_r+0xa20>
 80137de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80137e2:	d029      	beq.n	8013838 <_dtoa_r+0xa58>
 80137e4:	9b08      	ldr	r3, [sp, #32]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	dd02      	ble.n	80137f0 <_dtoa_r+0xa10>
 80137ea:	9b02      	ldr	r3, [sp, #8]
 80137ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80137f0:	9b00      	ldr	r3, [sp, #0]
 80137f2:	f883 8000 	strb.w	r8, [r3]
 80137f6:	e63f      	b.n	8013478 <_dtoa_r+0x698>
 80137f8:	4628      	mov	r0, r5
 80137fa:	e7bb      	b.n	8013774 <_dtoa_r+0x994>
 80137fc:	2201      	movs	r2, #1
 80137fe:	e7e1      	b.n	80137c4 <_dtoa_r+0x9e4>
 8013800:	9b08      	ldr	r3, [sp, #32]
 8013802:	2b00      	cmp	r3, #0
 8013804:	db04      	blt.n	8013810 <_dtoa_r+0xa30>
 8013806:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013808:	430b      	orrs	r3, r1
 801380a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801380c:	430b      	orrs	r3, r1
 801380e:	d120      	bne.n	8013852 <_dtoa_r+0xa72>
 8013810:	2a00      	cmp	r2, #0
 8013812:	dded      	ble.n	80137f0 <_dtoa_r+0xa10>
 8013814:	4649      	mov	r1, r9
 8013816:	2201      	movs	r2, #1
 8013818:	4658      	mov	r0, fp
 801381a:	f000 fafd 	bl	8013e18 <__lshift>
 801381e:	4621      	mov	r1, r4
 8013820:	4681      	mov	r9, r0
 8013822:	f000 fb65 	bl	8013ef0 <__mcmp>
 8013826:	2800      	cmp	r0, #0
 8013828:	dc03      	bgt.n	8013832 <_dtoa_r+0xa52>
 801382a:	d1e1      	bne.n	80137f0 <_dtoa_r+0xa10>
 801382c:	f018 0f01 	tst.w	r8, #1
 8013830:	d0de      	beq.n	80137f0 <_dtoa_r+0xa10>
 8013832:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013836:	d1d8      	bne.n	80137ea <_dtoa_r+0xa0a>
 8013838:	9a00      	ldr	r2, [sp, #0]
 801383a:	2339      	movs	r3, #57	@ 0x39
 801383c:	7013      	strb	r3, [r2, #0]
 801383e:	4633      	mov	r3, r6
 8013840:	461e      	mov	r6, r3
 8013842:	3b01      	subs	r3, #1
 8013844:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013848:	2a39      	cmp	r2, #57	@ 0x39
 801384a:	d052      	beq.n	80138f2 <_dtoa_r+0xb12>
 801384c:	3201      	adds	r2, #1
 801384e:	701a      	strb	r2, [r3, #0]
 8013850:	e612      	b.n	8013478 <_dtoa_r+0x698>
 8013852:	2a00      	cmp	r2, #0
 8013854:	dd07      	ble.n	8013866 <_dtoa_r+0xa86>
 8013856:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801385a:	d0ed      	beq.n	8013838 <_dtoa_r+0xa58>
 801385c:	9a00      	ldr	r2, [sp, #0]
 801385e:	f108 0301 	add.w	r3, r8, #1
 8013862:	7013      	strb	r3, [r2, #0]
 8013864:	e608      	b.n	8013478 <_dtoa_r+0x698>
 8013866:	9b07      	ldr	r3, [sp, #28]
 8013868:	9a07      	ldr	r2, [sp, #28]
 801386a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801386e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013870:	4293      	cmp	r3, r2
 8013872:	d028      	beq.n	80138c6 <_dtoa_r+0xae6>
 8013874:	4649      	mov	r1, r9
 8013876:	2300      	movs	r3, #0
 8013878:	220a      	movs	r2, #10
 801387a:	4658      	mov	r0, fp
 801387c:	f000 f920 	bl	8013ac0 <__multadd>
 8013880:	42af      	cmp	r7, r5
 8013882:	4681      	mov	r9, r0
 8013884:	f04f 0300 	mov.w	r3, #0
 8013888:	f04f 020a 	mov.w	r2, #10
 801388c:	4639      	mov	r1, r7
 801388e:	4658      	mov	r0, fp
 8013890:	d107      	bne.n	80138a2 <_dtoa_r+0xac2>
 8013892:	f000 f915 	bl	8013ac0 <__multadd>
 8013896:	4607      	mov	r7, r0
 8013898:	4605      	mov	r5, r0
 801389a:	9b07      	ldr	r3, [sp, #28]
 801389c:	3301      	adds	r3, #1
 801389e:	9307      	str	r3, [sp, #28]
 80138a0:	e774      	b.n	801378c <_dtoa_r+0x9ac>
 80138a2:	f000 f90d 	bl	8013ac0 <__multadd>
 80138a6:	4629      	mov	r1, r5
 80138a8:	4607      	mov	r7, r0
 80138aa:	2300      	movs	r3, #0
 80138ac:	220a      	movs	r2, #10
 80138ae:	4658      	mov	r0, fp
 80138b0:	f000 f906 	bl	8013ac0 <__multadd>
 80138b4:	4605      	mov	r5, r0
 80138b6:	e7f0      	b.n	801389a <_dtoa_r+0xaba>
 80138b8:	9b00      	ldr	r3, [sp, #0]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	bfcc      	ite	gt
 80138be:	461e      	movgt	r6, r3
 80138c0:	2601      	movle	r6, #1
 80138c2:	4456      	add	r6, sl
 80138c4:	2700      	movs	r7, #0
 80138c6:	4649      	mov	r1, r9
 80138c8:	2201      	movs	r2, #1
 80138ca:	4658      	mov	r0, fp
 80138cc:	f000 faa4 	bl	8013e18 <__lshift>
 80138d0:	4621      	mov	r1, r4
 80138d2:	4681      	mov	r9, r0
 80138d4:	f000 fb0c 	bl	8013ef0 <__mcmp>
 80138d8:	2800      	cmp	r0, #0
 80138da:	dcb0      	bgt.n	801383e <_dtoa_r+0xa5e>
 80138dc:	d102      	bne.n	80138e4 <_dtoa_r+0xb04>
 80138de:	f018 0f01 	tst.w	r8, #1
 80138e2:	d1ac      	bne.n	801383e <_dtoa_r+0xa5e>
 80138e4:	4633      	mov	r3, r6
 80138e6:	461e      	mov	r6, r3
 80138e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80138ec:	2a30      	cmp	r2, #48	@ 0x30
 80138ee:	d0fa      	beq.n	80138e6 <_dtoa_r+0xb06>
 80138f0:	e5c2      	b.n	8013478 <_dtoa_r+0x698>
 80138f2:	459a      	cmp	sl, r3
 80138f4:	d1a4      	bne.n	8013840 <_dtoa_r+0xa60>
 80138f6:	9b04      	ldr	r3, [sp, #16]
 80138f8:	3301      	adds	r3, #1
 80138fa:	9304      	str	r3, [sp, #16]
 80138fc:	2331      	movs	r3, #49	@ 0x31
 80138fe:	f88a 3000 	strb.w	r3, [sl]
 8013902:	e5b9      	b.n	8013478 <_dtoa_r+0x698>
 8013904:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013906:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8013964 <_dtoa_r+0xb84>
 801390a:	b11b      	cbz	r3, 8013914 <_dtoa_r+0xb34>
 801390c:	f10a 0308 	add.w	r3, sl, #8
 8013910:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013912:	6013      	str	r3, [r2, #0]
 8013914:	4650      	mov	r0, sl
 8013916:	b019      	add	sp, #100	@ 0x64
 8013918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801391c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801391e:	2b01      	cmp	r3, #1
 8013920:	f77f ae37 	ble.w	8013592 <_dtoa_r+0x7b2>
 8013924:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013926:	930a      	str	r3, [sp, #40]	@ 0x28
 8013928:	2001      	movs	r0, #1
 801392a:	e655      	b.n	80135d8 <_dtoa_r+0x7f8>
 801392c:	9b00      	ldr	r3, [sp, #0]
 801392e:	2b00      	cmp	r3, #0
 8013930:	f77f aed6 	ble.w	80136e0 <_dtoa_r+0x900>
 8013934:	4656      	mov	r6, sl
 8013936:	4621      	mov	r1, r4
 8013938:	4648      	mov	r0, r9
 801393a:	f7ff f9c8 	bl	8012cce <quorem>
 801393e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8013942:	f806 8b01 	strb.w	r8, [r6], #1
 8013946:	9b00      	ldr	r3, [sp, #0]
 8013948:	eba6 020a 	sub.w	r2, r6, sl
 801394c:	4293      	cmp	r3, r2
 801394e:	ddb3      	ble.n	80138b8 <_dtoa_r+0xad8>
 8013950:	4649      	mov	r1, r9
 8013952:	2300      	movs	r3, #0
 8013954:	220a      	movs	r2, #10
 8013956:	4658      	mov	r0, fp
 8013958:	f000 f8b2 	bl	8013ac0 <__multadd>
 801395c:	4681      	mov	r9, r0
 801395e:	e7ea      	b.n	8013936 <_dtoa_r+0xb56>
 8013960:	0801adbe 	.word	0x0801adbe
 8013964:	0801ad42 	.word	0x0801ad42

08013968 <_free_r>:
 8013968:	b538      	push	{r3, r4, r5, lr}
 801396a:	4605      	mov	r5, r0
 801396c:	2900      	cmp	r1, #0
 801396e:	d041      	beq.n	80139f4 <_free_r+0x8c>
 8013970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013974:	1f0c      	subs	r4, r1, #4
 8013976:	2b00      	cmp	r3, #0
 8013978:	bfb8      	it	lt
 801397a:	18e4      	addlt	r4, r4, r3
 801397c:	f7fe fa4a 	bl	8011e14 <__malloc_lock>
 8013980:	4a1d      	ldr	r2, [pc, #116]	@ (80139f8 <_free_r+0x90>)
 8013982:	6813      	ldr	r3, [r2, #0]
 8013984:	b933      	cbnz	r3, 8013994 <_free_r+0x2c>
 8013986:	6063      	str	r3, [r4, #4]
 8013988:	6014      	str	r4, [r2, #0]
 801398a:	4628      	mov	r0, r5
 801398c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013990:	f7fe ba46 	b.w	8011e20 <__malloc_unlock>
 8013994:	42a3      	cmp	r3, r4
 8013996:	d908      	bls.n	80139aa <_free_r+0x42>
 8013998:	6820      	ldr	r0, [r4, #0]
 801399a:	1821      	adds	r1, r4, r0
 801399c:	428b      	cmp	r3, r1
 801399e:	bf01      	itttt	eq
 80139a0:	6819      	ldreq	r1, [r3, #0]
 80139a2:	685b      	ldreq	r3, [r3, #4]
 80139a4:	1809      	addeq	r1, r1, r0
 80139a6:	6021      	streq	r1, [r4, #0]
 80139a8:	e7ed      	b.n	8013986 <_free_r+0x1e>
 80139aa:	461a      	mov	r2, r3
 80139ac:	685b      	ldr	r3, [r3, #4]
 80139ae:	b10b      	cbz	r3, 80139b4 <_free_r+0x4c>
 80139b0:	42a3      	cmp	r3, r4
 80139b2:	d9fa      	bls.n	80139aa <_free_r+0x42>
 80139b4:	6811      	ldr	r1, [r2, #0]
 80139b6:	1850      	adds	r0, r2, r1
 80139b8:	42a0      	cmp	r0, r4
 80139ba:	d10b      	bne.n	80139d4 <_free_r+0x6c>
 80139bc:	6820      	ldr	r0, [r4, #0]
 80139be:	4401      	add	r1, r0
 80139c0:	1850      	adds	r0, r2, r1
 80139c2:	4283      	cmp	r3, r0
 80139c4:	6011      	str	r1, [r2, #0]
 80139c6:	d1e0      	bne.n	801398a <_free_r+0x22>
 80139c8:	6818      	ldr	r0, [r3, #0]
 80139ca:	685b      	ldr	r3, [r3, #4]
 80139cc:	6053      	str	r3, [r2, #4]
 80139ce:	4408      	add	r0, r1
 80139d0:	6010      	str	r0, [r2, #0]
 80139d2:	e7da      	b.n	801398a <_free_r+0x22>
 80139d4:	d902      	bls.n	80139dc <_free_r+0x74>
 80139d6:	230c      	movs	r3, #12
 80139d8:	602b      	str	r3, [r5, #0]
 80139da:	e7d6      	b.n	801398a <_free_r+0x22>
 80139dc:	6820      	ldr	r0, [r4, #0]
 80139de:	1821      	adds	r1, r4, r0
 80139e0:	428b      	cmp	r3, r1
 80139e2:	bf04      	itt	eq
 80139e4:	6819      	ldreq	r1, [r3, #0]
 80139e6:	685b      	ldreq	r3, [r3, #4]
 80139e8:	6063      	str	r3, [r4, #4]
 80139ea:	bf04      	itt	eq
 80139ec:	1809      	addeq	r1, r1, r0
 80139ee:	6021      	streq	r1, [r4, #0]
 80139f0:	6054      	str	r4, [r2, #4]
 80139f2:	e7ca      	b.n	801398a <_free_r+0x22>
 80139f4:	bd38      	pop	{r3, r4, r5, pc}
 80139f6:	bf00      	nop
 80139f8:	20000a90 	.word	0x20000a90

080139fc <_Balloc>:
 80139fc:	b570      	push	{r4, r5, r6, lr}
 80139fe:	69c6      	ldr	r6, [r0, #28]
 8013a00:	4604      	mov	r4, r0
 8013a02:	460d      	mov	r5, r1
 8013a04:	b976      	cbnz	r6, 8013a24 <_Balloc+0x28>
 8013a06:	2010      	movs	r0, #16
 8013a08:	f7fe f952 	bl	8011cb0 <malloc>
 8013a0c:	4602      	mov	r2, r0
 8013a0e:	61e0      	str	r0, [r4, #28]
 8013a10:	b920      	cbnz	r0, 8013a1c <_Balloc+0x20>
 8013a12:	4b18      	ldr	r3, [pc, #96]	@ (8013a74 <_Balloc+0x78>)
 8013a14:	4818      	ldr	r0, [pc, #96]	@ (8013a78 <_Balloc+0x7c>)
 8013a16:	216b      	movs	r1, #107	@ 0x6b
 8013a18:	f000 ff3c 	bl	8014894 <__assert_func>
 8013a1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013a20:	6006      	str	r6, [r0, #0]
 8013a22:	60c6      	str	r6, [r0, #12]
 8013a24:	69e6      	ldr	r6, [r4, #28]
 8013a26:	68f3      	ldr	r3, [r6, #12]
 8013a28:	b183      	cbz	r3, 8013a4c <_Balloc+0x50>
 8013a2a:	69e3      	ldr	r3, [r4, #28]
 8013a2c:	68db      	ldr	r3, [r3, #12]
 8013a2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013a32:	b9b8      	cbnz	r0, 8013a64 <_Balloc+0x68>
 8013a34:	2101      	movs	r1, #1
 8013a36:	fa01 f605 	lsl.w	r6, r1, r5
 8013a3a:	1d72      	adds	r2, r6, #5
 8013a3c:	0092      	lsls	r2, r2, #2
 8013a3e:	4620      	mov	r0, r4
 8013a40:	f7fe f922 	bl	8011c88 <_calloc_r>
 8013a44:	b160      	cbz	r0, 8013a60 <_Balloc+0x64>
 8013a46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013a4a:	e00e      	b.n	8013a6a <_Balloc+0x6e>
 8013a4c:	2221      	movs	r2, #33	@ 0x21
 8013a4e:	2104      	movs	r1, #4
 8013a50:	4620      	mov	r0, r4
 8013a52:	f7fe f919 	bl	8011c88 <_calloc_r>
 8013a56:	69e3      	ldr	r3, [r4, #28]
 8013a58:	60f0      	str	r0, [r6, #12]
 8013a5a:	68db      	ldr	r3, [r3, #12]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d1e4      	bne.n	8013a2a <_Balloc+0x2e>
 8013a60:	2000      	movs	r0, #0
 8013a62:	bd70      	pop	{r4, r5, r6, pc}
 8013a64:	6802      	ldr	r2, [r0, #0]
 8013a66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013a70:	e7f7      	b.n	8013a62 <_Balloc+0x66>
 8013a72:	bf00      	nop
 8013a74:	0801ad4f 	.word	0x0801ad4f
 8013a78:	0801adcf 	.word	0x0801adcf

08013a7c <_Bfree>:
 8013a7c:	b570      	push	{r4, r5, r6, lr}
 8013a7e:	69c6      	ldr	r6, [r0, #28]
 8013a80:	4605      	mov	r5, r0
 8013a82:	460c      	mov	r4, r1
 8013a84:	b976      	cbnz	r6, 8013aa4 <_Bfree+0x28>
 8013a86:	2010      	movs	r0, #16
 8013a88:	f7fe f912 	bl	8011cb0 <malloc>
 8013a8c:	4602      	mov	r2, r0
 8013a8e:	61e8      	str	r0, [r5, #28]
 8013a90:	b920      	cbnz	r0, 8013a9c <_Bfree+0x20>
 8013a92:	4b09      	ldr	r3, [pc, #36]	@ (8013ab8 <_Bfree+0x3c>)
 8013a94:	4809      	ldr	r0, [pc, #36]	@ (8013abc <_Bfree+0x40>)
 8013a96:	218f      	movs	r1, #143	@ 0x8f
 8013a98:	f000 fefc 	bl	8014894 <__assert_func>
 8013a9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013aa0:	6006      	str	r6, [r0, #0]
 8013aa2:	60c6      	str	r6, [r0, #12]
 8013aa4:	b13c      	cbz	r4, 8013ab6 <_Bfree+0x3a>
 8013aa6:	69eb      	ldr	r3, [r5, #28]
 8013aa8:	6862      	ldr	r2, [r4, #4]
 8013aaa:	68db      	ldr	r3, [r3, #12]
 8013aac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013ab0:	6021      	str	r1, [r4, #0]
 8013ab2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013ab6:	bd70      	pop	{r4, r5, r6, pc}
 8013ab8:	0801ad4f 	.word	0x0801ad4f
 8013abc:	0801adcf 	.word	0x0801adcf

08013ac0 <__multadd>:
 8013ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ac4:	690d      	ldr	r5, [r1, #16]
 8013ac6:	4607      	mov	r7, r0
 8013ac8:	460c      	mov	r4, r1
 8013aca:	461e      	mov	r6, r3
 8013acc:	f101 0c14 	add.w	ip, r1, #20
 8013ad0:	2000      	movs	r0, #0
 8013ad2:	f8dc 3000 	ldr.w	r3, [ip]
 8013ad6:	b299      	uxth	r1, r3
 8013ad8:	fb02 6101 	mla	r1, r2, r1, r6
 8013adc:	0c1e      	lsrs	r6, r3, #16
 8013ade:	0c0b      	lsrs	r3, r1, #16
 8013ae0:	fb02 3306 	mla	r3, r2, r6, r3
 8013ae4:	b289      	uxth	r1, r1
 8013ae6:	3001      	adds	r0, #1
 8013ae8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013aec:	4285      	cmp	r5, r0
 8013aee:	f84c 1b04 	str.w	r1, [ip], #4
 8013af2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013af6:	dcec      	bgt.n	8013ad2 <__multadd+0x12>
 8013af8:	b30e      	cbz	r6, 8013b3e <__multadd+0x7e>
 8013afa:	68a3      	ldr	r3, [r4, #8]
 8013afc:	42ab      	cmp	r3, r5
 8013afe:	dc19      	bgt.n	8013b34 <__multadd+0x74>
 8013b00:	6861      	ldr	r1, [r4, #4]
 8013b02:	4638      	mov	r0, r7
 8013b04:	3101      	adds	r1, #1
 8013b06:	f7ff ff79 	bl	80139fc <_Balloc>
 8013b0a:	4680      	mov	r8, r0
 8013b0c:	b928      	cbnz	r0, 8013b1a <__multadd+0x5a>
 8013b0e:	4602      	mov	r2, r0
 8013b10:	4b0c      	ldr	r3, [pc, #48]	@ (8013b44 <__multadd+0x84>)
 8013b12:	480d      	ldr	r0, [pc, #52]	@ (8013b48 <__multadd+0x88>)
 8013b14:	21ba      	movs	r1, #186	@ 0xba
 8013b16:	f000 febd 	bl	8014894 <__assert_func>
 8013b1a:	6922      	ldr	r2, [r4, #16]
 8013b1c:	3202      	adds	r2, #2
 8013b1e:	f104 010c 	add.w	r1, r4, #12
 8013b22:	0092      	lsls	r2, r2, #2
 8013b24:	300c      	adds	r0, #12
 8013b26:	f7ff f8c4 	bl	8012cb2 <memcpy>
 8013b2a:	4621      	mov	r1, r4
 8013b2c:	4638      	mov	r0, r7
 8013b2e:	f7ff ffa5 	bl	8013a7c <_Bfree>
 8013b32:	4644      	mov	r4, r8
 8013b34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013b38:	3501      	adds	r5, #1
 8013b3a:	615e      	str	r6, [r3, #20]
 8013b3c:	6125      	str	r5, [r4, #16]
 8013b3e:	4620      	mov	r0, r4
 8013b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b44:	0801adbe 	.word	0x0801adbe
 8013b48:	0801adcf 	.word	0x0801adcf

08013b4c <__hi0bits>:
 8013b4c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013b50:	4603      	mov	r3, r0
 8013b52:	bf36      	itet	cc
 8013b54:	0403      	lslcc	r3, r0, #16
 8013b56:	2000      	movcs	r0, #0
 8013b58:	2010      	movcc	r0, #16
 8013b5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013b5e:	bf3c      	itt	cc
 8013b60:	021b      	lslcc	r3, r3, #8
 8013b62:	3008      	addcc	r0, #8
 8013b64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013b68:	bf3c      	itt	cc
 8013b6a:	011b      	lslcc	r3, r3, #4
 8013b6c:	3004      	addcc	r0, #4
 8013b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013b72:	bf3c      	itt	cc
 8013b74:	009b      	lslcc	r3, r3, #2
 8013b76:	3002      	addcc	r0, #2
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	db05      	blt.n	8013b88 <__hi0bits+0x3c>
 8013b7c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013b80:	f100 0001 	add.w	r0, r0, #1
 8013b84:	bf08      	it	eq
 8013b86:	2020      	moveq	r0, #32
 8013b88:	4770      	bx	lr

08013b8a <__lo0bits>:
 8013b8a:	6803      	ldr	r3, [r0, #0]
 8013b8c:	4602      	mov	r2, r0
 8013b8e:	f013 0007 	ands.w	r0, r3, #7
 8013b92:	d00b      	beq.n	8013bac <__lo0bits+0x22>
 8013b94:	07d9      	lsls	r1, r3, #31
 8013b96:	d421      	bmi.n	8013bdc <__lo0bits+0x52>
 8013b98:	0798      	lsls	r0, r3, #30
 8013b9a:	bf49      	itett	mi
 8013b9c:	085b      	lsrmi	r3, r3, #1
 8013b9e:	089b      	lsrpl	r3, r3, #2
 8013ba0:	2001      	movmi	r0, #1
 8013ba2:	6013      	strmi	r3, [r2, #0]
 8013ba4:	bf5c      	itt	pl
 8013ba6:	6013      	strpl	r3, [r2, #0]
 8013ba8:	2002      	movpl	r0, #2
 8013baa:	4770      	bx	lr
 8013bac:	b299      	uxth	r1, r3
 8013bae:	b909      	cbnz	r1, 8013bb4 <__lo0bits+0x2a>
 8013bb0:	0c1b      	lsrs	r3, r3, #16
 8013bb2:	2010      	movs	r0, #16
 8013bb4:	b2d9      	uxtb	r1, r3
 8013bb6:	b909      	cbnz	r1, 8013bbc <__lo0bits+0x32>
 8013bb8:	3008      	adds	r0, #8
 8013bba:	0a1b      	lsrs	r3, r3, #8
 8013bbc:	0719      	lsls	r1, r3, #28
 8013bbe:	bf04      	itt	eq
 8013bc0:	091b      	lsreq	r3, r3, #4
 8013bc2:	3004      	addeq	r0, #4
 8013bc4:	0799      	lsls	r1, r3, #30
 8013bc6:	bf04      	itt	eq
 8013bc8:	089b      	lsreq	r3, r3, #2
 8013bca:	3002      	addeq	r0, #2
 8013bcc:	07d9      	lsls	r1, r3, #31
 8013bce:	d403      	bmi.n	8013bd8 <__lo0bits+0x4e>
 8013bd0:	085b      	lsrs	r3, r3, #1
 8013bd2:	f100 0001 	add.w	r0, r0, #1
 8013bd6:	d003      	beq.n	8013be0 <__lo0bits+0x56>
 8013bd8:	6013      	str	r3, [r2, #0]
 8013bda:	4770      	bx	lr
 8013bdc:	2000      	movs	r0, #0
 8013bde:	4770      	bx	lr
 8013be0:	2020      	movs	r0, #32
 8013be2:	4770      	bx	lr

08013be4 <__i2b>:
 8013be4:	b510      	push	{r4, lr}
 8013be6:	460c      	mov	r4, r1
 8013be8:	2101      	movs	r1, #1
 8013bea:	f7ff ff07 	bl	80139fc <_Balloc>
 8013bee:	4602      	mov	r2, r0
 8013bf0:	b928      	cbnz	r0, 8013bfe <__i2b+0x1a>
 8013bf2:	4b05      	ldr	r3, [pc, #20]	@ (8013c08 <__i2b+0x24>)
 8013bf4:	4805      	ldr	r0, [pc, #20]	@ (8013c0c <__i2b+0x28>)
 8013bf6:	f240 1145 	movw	r1, #325	@ 0x145
 8013bfa:	f000 fe4b 	bl	8014894 <__assert_func>
 8013bfe:	2301      	movs	r3, #1
 8013c00:	6144      	str	r4, [r0, #20]
 8013c02:	6103      	str	r3, [r0, #16]
 8013c04:	bd10      	pop	{r4, pc}
 8013c06:	bf00      	nop
 8013c08:	0801adbe 	.word	0x0801adbe
 8013c0c:	0801adcf 	.word	0x0801adcf

08013c10 <__multiply>:
 8013c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c14:	4614      	mov	r4, r2
 8013c16:	690a      	ldr	r2, [r1, #16]
 8013c18:	6923      	ldr	r3, [r4, #16]
 8013c1a:	429a      	cmp	r2, r3
 8013c1c:	bfa8      	it	ge
 8013c1e:	4623      	movge	r3, r4
 8013c20:	460f      	mov	r7, r1
 8013c22:	bfa4      	itt	ge
 8013c24:	460c      	movge	r4, r1
 8013c26:	461f      	movge	r7, r3
 8013c28:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013c2c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013c30:	68a3      	ldr	r3, [r4, #8]
 8013c32:	6861      	ldr	r1, [r4, #4]
 8013c34:	eb0a 0609 	add.w	r6, sl, r9
 8013c38:	42b3      	cmp	r3, r6
 8013c3a:	b085      	sub	sp, #20
 8013c3c:	bfb8      	it	lt
 8013c3e:	3101      	addlt	r1, #1
 8013c40:	f7ff fedc 	bl	80139fc <_Balloc>
 8013c44:	b930      	cbnz	r0, 8013c54 <__multiply+0x44>
 8013c46:	4602      	mov	r2, r0
 8013c48:	4b44      	ldr	r3, [pc, #272]	@ (8013d5c <__multiply+0x14c>)
 8013c4a:	4845      	ldr	r0, [pc, #276]	@ (8013d60 <__multiply+0x150>)
 8013c4c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013c50:	f000 fe20 	bl	8014894 <__assert_func>
 8013c54:	f100 0514 	add.w	r5, r0, #20
 8013c58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013c5c:	462b      	mov	r3, r5
 8013c5e:	2200      	movs	r2, #0
 8013c60:	4543      	cmp	r3, r8
 8013c62:	d321      	bcc.n	8013ca8 <__multiply+0x98>
 8013c64:	f107 0114 	add.w	r1, r7, #20
 8013c68:	f104 0214 	add.w	r2, r4, #20
 8013c6c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013c70:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013c74:	9302      	str	r3, [sp, #8]
 8013c76:	1b13      	subs	r3, r2, r4
 8013c78:	3b15      	subs	r3, #21
 8013c7a:	f023 0303 	bic.w	r3, r3, #3
 8013c7e:	3304      	adds	r3, #4
 8013c80:	f104 0715 	add.w	r7, r4, #21
 8013c84:	42ba      	cmp	r2, r7
 8013c86:	bf38      	it	cc
 8013c88:	2304      	movcc	r3, #4
 8013c8a:	9301      	str	r3, [sp, #4]
 8013c8c:	9b02      	ldr	r3, [sp, #8]
 8013c8e:	9103      	str	r1, [sp, #12]
 8013c90:	428b      	cmp	r3, r1
 8013c92:	d80c      	bhi.n	8013cae <__multiply+0x9e>
 8013c94:	2e00      	cmp	r6, #0
 8013c96:	dd03      	ble.n	8013ca0 <__multiply+0x90>
 8013c98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d05b      	beq.n	8013d58 <__multiply+0x148>
 8013ca0:	6106      	str	r6, [r0, #16]
 8013ca2:	b005      	add	sp, #20
 8013ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ca8:	f843 2b04 	str.w	r2, [r3], #4
 8013cac:	e7d8      	b.n	8013c60 <__multiply+0x50>
 8013cae:	f8b1 a000 	ldrh.w	sl, [r1]
 8013cb2:	f1ba 0f00 	cmp.w	sl, #0
 8013cb6:	d024      	beq.n	8013d02 <__multiply+0xf2>
 8013cb8:	f104 0e14 	add.w	lr, r4, #20
 8013cbc:	46a9      	mov	r9, r5
 8013cbe:	f04f 0c00 	mov.w	ip, #0
 8013cc2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013cc6:	f8d9 3000 	ldr.w	r3, [r9]
 8013cca:	fa1f fb87 	uxth.w	fp, r7
 8013cce:	b29b      	uxth	r3, r3
 8013cd0:	fb0a 330b 	mla	r3, sl, fp, r3
 8013cd4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013cd8:	f8d9 7000 	ldr.w	r7, [r9]
 8013cdc:	4463      	add	r3, ip
 8013cde:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013ce2:	fb0a c70b 	mla	r7, sl, fp, ip
 8013ce6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013cea:	b29b      	uxth	r3, r3
 8013cec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013cf0:	4572      	cmp	r2, lr
 8013cf2:	f849 3b04 	str.w	r3, [r9], #4
 8013cf6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013cfa:	d8e2      	bhi.n	8013cc2 <__multiply+0xb2>
 8013cfc:	9b01      	ldr	r3, [sp, #4]
 8013cfe:	f845 c003 	str.w	ip, [r5, r3]
 8013d02:	9b03      	ldr	r3, [sp, #12]
 8013d04:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013d08:	3104      	adds	r1, #4
 8013d0a:	f1b9 0f00 	cmp.w	r9, #0
 8013d0e:	d021      	beq.n	8013d54 <__multiply+0x144>
 8013d10:	682b      	ldr	r3, [r5, #0]
 8013d12:	f104 0c14 	add.w	ip, r4, #20
 8013d16:	46ae      	mov	lr, r5
 8013d18:	f04f 0a00 	mov.w	sl, #0
 8013d1c:	f8bc b000 	ldrh.w	fp, [ip]
 8013d20:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013d24:	fb09 770b 	mla	r7, r9, fp, r7
 8013d28:	4457      	add	r7, sl
 8013d2a:	b29b      	uxth	r3, r3
 8013d2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013d30:	f84e 3b04 	str.w	r3, [lr], #4
 8013d34:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013d38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013d3c:	f8be 3000 	ldrh.w	r3, [lr]
 8013d40:	fb09 330a 	mla	r3, r9, sl, r3
 8013d44:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013d48:	4562      	cmp	r2, ip
 8013d4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013d4e:	d8e5      	bhi.n	8013d1c <__multiply+0x10c>
 8013d50:	9f01      	ldr	r7, [sp, #4]
 8013d52:	51eb      	str	r3, [r5, r7]
 8013d54:	3504      	adds	r5, #4
 8013d56:	e799      	b.n	8013c8c <__multiply+0x7c>
 8013d58:	3e01      	subs	r6, #1
 8013d5a:	e79b      	b.n	8013c94 <__multiply+0x84>
 8013d5c:	0801adbe 	.word	0x0801adbe
 8013d60:	0801adcf 	.word	0x0801adcf

08013d64 <__pow5mult>:
 8013d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d68:	4615      	mov	r5, r2
 8013d6a:	f012 0203 	ands.w	r2, r2, #3
 8013d6e:	4607      	mov	r7, r0
 8013d70:	460e      	mov	r6, r1
 8013d72:	d007      	beq.n	8013d84 <__pow5mult+0x20>
 8013d74:	4c25      	ldr	r4, [pc, #148]	@ (8013e0c <__pow5mult+0xa8>)
 8013d76:	3a01      	subs	r2, #1
 8013d78:	2300      	movs	r3, #0
 8013d7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013d7e:	f7ff fe9f 	bl	8013ac0 <__multadd>
 8013d82:	4606      	mov	r6, r0
 8013d84:	10ad      	asrs	r5, r5, #2
 8013d86:	d03d      	beq.n	8013e04 <__pow5mult+0xa0>
 8013d88:	69fc      	ldr	r4, [r7, #28]
 8013d8a:	b97c      	cbnz	r4, 8013dac <__pow5mult+0x48>
 8013d8c:	2010      	movs	r0, #16
 8013d8e:	f7fd ff8f 	bl	8011cb0 <malloc>
 8013d92:	4602      	mov	r2, r0
 8013d94:	61f8      	str	r0, [r7, #28]
 8013d96:	b928      	cbnz	r0, 8013da4 <__pow5mult+0x40>
 8013d98:	4b1d      	ldr	r3, [pc, #116]	@ (8013e10 <__pow5mult+0xac>)
 8013d9a:	481e      	ldr	r0, [pc, #120]	@ (8013e14 <__pow5mult+0xb0>)
 8013d9c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013da0:	f000 fd78 	bl	8014894 <__assert_func>
 8013da4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013da8:	6004      	str	r4, [r0, #0]
 8013daa:	60c4      	str	r4, [r0, #12]
 8013dac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013db0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013db4:	b94c      	cbnz	r4, 8013dca <__pow5mult+0x66>
 8013db6:	f240 2171 	movw	r1, #625	@ 0x271
 8013dba:	4638      	mov	r0, r7
 8013dbc:	f7ff ff12 	bl	8013be4 <__i2b>
 8013dc0:	2300      	movs	r3, #0
 8013dc2:	f8c8 0008 	str.w	r0, [r8, #8]
 8013dc6:	4604      	mov	r4, r0
 8013dc8:	6003      	str	r3, [r0, #0]
 8013dca:	f04f 0900 	mov.w	r9, #0
 8013dce:	07eb      	lsls	r3, r5, #31
 8013dd0:	d50a      	bpl.n	8013de8 <__pow5mult+0x84>
 8013dd2:	4631      	mov	r1, r6
 8013dd4:	4622      	mov	r2, r4
 8013dd6:	4638      	mov	r0, r7
 8013dd8:	f7ff ff1a 	bl	8013c10 <__multiply>
 8013ddc:	4631      	mov	r1, r6
 8013dde:	4680      	mov	r8, r0
 8013de0:	4638      	mov	r0, r7
 8013de2:	f7ff fe4b 	bl	8013a7c <_Bfree>
 8013de6:	4646      	mov	r6, r8
 8013de8:	106d      	asrs	r5, r5, #1
 8013dea:	d00b      	beq.n	8013e04 <__pow5mult+0xa0>
 8013dec:	6820      	ldr	r0, [r4, #0]
 8013dee:	b938      	cbnz	r0, 8013e00 <__pow5mult+0x9c>
 8013df0:	4622      	mov	r2, r4
 8013df2:	4621      	mov	r1, r4
 8013df4:	4638      	mov	r0, r7
 8013df6:	f7ff ff0b 	bl	8013c10 <__multiply>
 8013dfa:	6020      	str	r0, [r4, #0]
 8013dfc:	f8c0 9000 	str.w	r9, [r0]
 8013e00:	4604      	mov	r4, r0
 8013e02:	e7e4      	b.n	8013dce <__pow5mult+0x6a>
 8013e04:	4630      	mov	r0, r6
 8013e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e0a:	bf00      	nop
 8013e0c:	0801ae28 	.word	0x0801ae28
 8013e10:	0801ad4f 	.word	0x0801ad4f
 8013e14:	0801adcf 	.word	0x0801adcf

08013e18 <__lshift>:
 8013e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e1c:	460c      	mov	r4, r1
 8013e1e:	6849      	ldr	r1, [r1, #4]
 8013e20:	6923      	ldr	r3, [r4, #16]
 8013e22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013e26:	68a3      	ldr	r3, [r4, #8]
 8013e28:	4607      	mov	r7, r0
 8013e2a:	4691      	mov	r9, r2
 8013e2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013e30:	f108 0601 	add.w	r6, r8, #1
 8013e34:	42b3      	cmp	r3, r6
 8013e36:	db0b      	blt.n	8013e50 <__lshift+0x38>
 8013e38:	4638      	mov	r0, r7
 8013e3a:	f7ff fddf 	bl	80139fc <_Balloc>
 8013e3e:	4605      	mov	r5, r0
 8013e40:	b948      	cbnz	r0, 8013e56 <__lshift+0x3e>
 8013e42:	4602      	mov	r2, r0
 8013e44:	4b28      	ldr	r3, [pc, #160]	@ (8013ee8 <__lshift+0xd0>)
 8013e46:	4829      	ldr	r0, [pc, #164]	@ (8013eec <__lshift+0xd4>)
 8013e48:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013e4c:	f000 fd22 	bl	8014894 <__assert_func>
 8013e50:	3101      	adds	r1, #1
 8013e52:	005b      	lsls	r3, r3, #1
 8013e54:	e7ee      	b.n	8013e34 <__lshift+0x1c>
 8013e56:	2300      	movs	r3, #0
 8013e58:	f100 0114 	add.w	r1, r0, #20
 8013e5c:	f100 0210 	add.w	r2, r0, #16
 8013e60:	4618      	mov	r0, r3
 8013e62:	4553      	cmp	r3, sl
 8013e64:	db33      	blt.n	8013ece <__lshift+0xb6>
 8013e66:	6920      	ldr	r0, [r4, #16]
 8013e68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013e6c:	f104 0314 	add.w	r3, r4, #20
 8013e70:	f019 091f 	ands.w	r9, r9, #31
 8013e74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013e78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013e7c:	d02b      	beq.n	8013ed6 <__lshift+0xbe>
 8013e7e:	f1c9 0e20 	rsb	lr, r9, #32
 8013e82:	468a      	mov	sl, r1
 8013e84:	2200      	movs	r2, #0
 8013e86:	6818      	ldr	r0, [r3, #0]
 8013e88:	fa00 f009 	lsl.w	r0, r0, r9
 8013e8c:	4310      	orrs	r0, r2
 8013e8e:	f84a 0b04 	str.w	r0, [sl], #4
 8013e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e96:	459c      	cmp	ip, r3
 8013e98:	fa22 f20e 	lsr.w	r2, r2, lr
 8013e9c:	d8f3      	bhi.n	8013e86 <__lshift+0x6e>
 8013e9e:	ebac 0304 	sub.w	r3, ip, r4
 8013ea2:	3b15      	subs	r3, #21
 8013ea4:	f023 0303 	bic.w	r3, r3, #3
 8013ea8:	3304      	adds	r3, #4
 8013eaa:	f104 0015 	add.w	r0, r4, #21
 8013eae:	4584      	cmp	ip, r0
 8013eb0:	bf38      	it	cc
 8013eb2:	2304      	movcc	r3, #4
 8013eb4:	50ca      	str	r2, [r1, r3]
 8013eb6:	b10a      	cbz	r2, 8013ebc <__lshift+0xa4>
 8013eb8:	f108 0602 	add.w	r6, r8, #2
 8013ebc:	3e01      	subs	r6, #1
 8013ebe:	4638      	mov	r0, r7
 8013ec0:	612e      	str	r6, [r5, #16]
 8013ec2:	4621      	mov	r1, r4
 8013ec4:	f7ff fdda 	bl	8013a7c <_Bfree>
 8013ec8:	4628      	mov	r0, r5
 8013eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ece:	f842 0f04 	str.w	r0, [r2, #4]!
 8013ed2:	3301      	adds	r3, #1
 8013ed4:	e7c5      	b.n	8013e62 <__lshift+0x4a>
 8013ed6:	3904      	subs	r1, #4
 8013ed8:	f853 2b04 	ldr.w	r2, [r3], #4
 8013edc:	f841 2f04 	str.w	r2, [r1, #4]!
 8013ee0:	459c      	cmp	ip, r3
 8013ee2:	d8f9      	bhi.n	8013ed8 <__lshift+0xc0>
 8013ee4:	e7ea      	b.n	8013ebc <__lshift+0xa4>
 8013ee6:	bf00      	nop
 8013ee8:	0801adbe 	.word	0x0801adbe
 8013eec:	0801adcf 	.word	0x0801adcf

08013ef0 <__mcmp>:
 8013ef0:	690a      	ldr	r2, [r1, #16]
 8013ef2:	4603      	mov	r3, r0
 8013ef4:	6900      	ldr	r0, [r0, #16]
 8013ef6:	1a80      	subs	r0, r0, r2
 8013ef8:	b530      	push	{r4, r5, lr}
 8013efa:	d10e      	bne.n	8013f1a <__mcmp+0x2a>
 8013efc:	3314      	adds	r3, #20
 8013efe:	3114      	adds	r1, #20
 8013f00:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013f04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013f08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013f0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013f10:	4295      	cmp	r5, r2
 8013f12:	d003      	beq.n	8013f1c <__mcmp+0x2c>
 8013f14:	d205      	bcs.n	8013f22 <__mcmp+0x32>
 8013f16:	f04f 30ff 	mov.w	r0, #4294967295
 8013f1a:	bd30      	pop	{r4, r5, pc}
 8013f1c:	42a3      	cmp	r3, r4
 8013f1e:	d3f3      	bcc.n	8013f08 <__mcmp+0x18>
 8013f20:	e7fb      	b.n	8013f1a <__mcmp+0x2a>
 8013f22:	2001      	movs	r0, #1
 8013f24:	e7f9      	b.n	8013f1a <__mcmp+0x2a>
	...

08013f28 <__mdiff>:
 8013f28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f2c:	4689      	mov	r9, r1
 8013f2e:	4606      	mov	r6, r0
 8013f30:	4611      	mov	r1, r2
 8013f32:	4648      	mov	r0, r9
 8013f34:	4614      	mov	r4, r2
 8013f36:	f7ff ffdb 	bl	8013ef0 <__mcmp>
 8013f3a:	1e05      	subs	r5, r0, #0
 8013f3c:	d112      	bne.n	8013f64 <__mdiff+0x3c>
 8013f3e:	4629      	mov	r1, r5
 8013f40:	4630      	mov	r0, r6
 8013f42:	f7ff fd5b 	bl	80139fc <_Balloc>
 8013f46:	4602      	mov	r2, r0
 8013f48:	b928      	cbnz	r0, 8013f56 <__mdiff+0x2e>
 8013f4a:	4b3f      	ldr	r3, [pc, #252]	@ (8014048 <__mdiff+0x120>)
 8013f4c:	f240 2137 	movw	r1, #567	@ 0x237
 8013f50:	483e      	ldr	r0, [pc, #248]	@ (801404c <__mdiff+0x124>)
 8013f52:	f000 fc9f 	bl	8014894 <__assert_func>
 8013f56:	2301      	movs	r3, #1
 8013f58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013f5c:	4610      	mov	r0, r2
 8013f5e:	b003      	add	sp, #12
 8013f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f64:	bfbc      	itt	lt
 8013f66:	464b      	movlt	r3, r9
 8013f68:	46a1      	movlt	r9, r4
 8013f6a:	4630      	mov	r0, r6
 8013f6c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013f70:	bfba      	itte	lt
 8013f72:	461c      	movlt	r4, r3
 8013f74:	2501      	movlt	r5, #1
 8013f76:	2500      	movge	r5, #0
 8013f78:	f7ff fd40 	bl	80139fc <_Balloc>
 8013f7c:	4602      	mov	r2, r0
 8013f7e:	b918      	cbnz	r0, 8013f88 <__mdiff+0x60>
 8013f80:	4b31      	ldr	r3, [pc, #196]	@ (8014048 <__mdiff+0x120>)
 8013f82:	f240 2145 	movw	r1, #581	@ 0x245
 8013f86:	e7e3      	b.n	8013f50 <__mdiff+0x28>
 8013f88:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013f8c:	6926      	ldr	r6, [r4, #16]
 8013f8e:	60c5      	str	r5, [r0, #12]
 8013f90:	f109 0310 	add.w	r3, r9, #16
 8013f94:	f109 0514 	add.w	r5, r9, #20
 8013f98:	f104 0e14 	add.w	lr, r4, #20
 8013f9c:	f100 0b14 	add.w	fp, r0, #20
 8013fa0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013fa4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013fa8:	9301      	str	r3, [sp, #4]
 8013faa:	46d9      	mov	r9, fp
 8013fac:	f04f 0c00 	mov.w	ip, #0
 8013fb0:	9b01      	ldr	r3, [sp, #4]
 8013fb2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013fb6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013fba:	9301      	str	r3, [sp, #4]
 8013fbc:	fa1f f38a 	uxth.w	r3, sl
 8013fc0:	4619      	mov	r1, r3
 8013fc2:	b283      	uxth	r3, r0
 8013fc4:	1acb      	subs	r3, r1, r3
 8013fc6:	0c00      	lsrs	r0, r0, #16
 8013fc8:	4463      	add	r3, ip
 8013fca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013fce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013fd2:	b29b      	uxth	r3, r3
 8013fd4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013fd8:	4576      	cmp	r6, lr
 8013fda:	f849 3b04 	str.w	r3, [r9], #4
 8013fde:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013fe2:	d8e5      	bhi.n	8013fb0 <__mdiff+0x88>
 8013fe4:	1b33      	subs	r3, r6, r4
 8013fe6:	3b15      	subs	r3, #21
 8013fe8:	f023 0303 	bic.w	r3, r3, #3
 8013fec:	3415      	adds	r4, #21
 8013fee:	3304      	adds	r3, #4
 8013ff0:	42a6      	cmp	r6, r4
 8013ff2:	bf38      	it	cc
 8013ff4:	2304      	movcc	r3, #4
 8013ff6:	441d      	add	r5, r3
 8013ff8:	445b      	add	r3, fp
 8013ffa:	461e      	mov	r6, r3
 8013ffc:	462c      	mov	r4, r5
 8013ffe:	4544      	cmp	r4, r8
 8014000:	d30e      	bcc.n	8014020 <__mdiff+0xf8>
 8014002:	f108 0103 	add.w	r1, r8, #3
 8014006:	1b49      	subs	r1, r1, r5
 8014008:	f021 0103 	bic.w	r1, r1, #3
 801400c:	3d03      	subs	r5, #3
 801400e:	45a8      	cmp	r8, r5
 8014010:	bf38      	it	cc
 8014012:	2100      	movcc	r1, #0
 8014014:	440b      	add	r3, r1
 8014016:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801401a:	b191      	cbz	r1, 8014042 <__mdiff+0x11a>
 801401c:	6117      	str	r7, [r2, #16]
 801401e:	e79d      	b.n	8013f5c <__mdiff+0x34>
 8014020:	f854 1b04 	ldr.w	r1, [r4], #4
 8014024:	46e6      	mov	lr, ip
 8014026:	0c08      	lsrs	r0, r1, #16
 8014028:	fa1c fc81 	uxtah	ip, ip, r1
 801402c:	4471      	add	r1, lr
 801402e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014032:	b289      	uxth	r1, r1
 8014034:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014038:	f846 1b04 	str.w	r1, [r6], #4
 801403c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014040:	e7dd      	b.n	8013ffe <__mdiff+0xd6>
 8014042:	3f01      	subs	r7, #1
 8014044:	e7e7      	b.n	8014016 <__mdiff+0xee>
 8014046:	bf00      	nop
 8014048:	0801adbe 	.word	0x0801adbe
 801404c:	0801adcf 	.word	0x0801adcf

08014050 <__d2b>:
 8014050:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014054:	460f      	mov	r7, r1
 8014056:	2101      	movs	r1, #1
 8014058:	ec59 8b10 	vmov	r8, r9, d0
 801405c:	4616      	mov	r6, r2
 801405e:	f7ff fccd 	bl	80139fc <_Balloc>
 8014062:	4604      	mov	r4, r0
 8014064:	b930      	cbnz	r0, 8014074 <__d2b+0x24>
 8014066:	4602      	mov	r2, r0
 8014068:	4b23      	ldr	r3, [pc, #140]	@ (80140f8 <__d2b+0xa8>)
 801406a:	4824      	ldr	r0, [pc, #144]	@ (80140fc <__d2b+0xac>)
 801406c:	f240 310f 	movw	r1, #783	@ 0x30f
 8014070:	f000 fc10 	bl	8014894 <__assert_func>
 8014074:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014078:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801407c:	b10d      	cbz	r5, 8014082 <__d2b+0x32>
 801407e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014082:	9301      	str	r3, [sp, #4]
 8014084:	f1b8 0300 	subs.w	r3, r8, #0
 8014088:	d023      	beq.n	80140d2 <__d2b+0x82>
 801408a:	4668      	mov	r0, sp
 801408c:	9300      	str	r3, [sp, #0]
 801408e:	f7ff fd7c 	bl	8013b8a <__lo0bits>
 8014092:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014096:	b1d0      	cbz	r0, 80140ce <__d2b+0x7e>
 8014098:	f1c0 0320 	rsb	r3, r0, #32
 801409c:	fa02 f303 	lsl.w	r3, r2, r3
 80140a0:	430b      	orrs	r3, r1
 80140a2:	40c2      	lsrs	r2, r0
 80140a4:	6163      	str	r3, [r4, #20]
 80140a6:	9201      	str	r2, [sp, #4]
 80140a8:	9b01      	ldr	r3, [sp, #4]
 80140aa:	61a3      	str	r3, [r4, #24]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	bf0c      	ite	eq
 80140b0:	2201      	moveq	r2, #1
 80140b2:	2202      	movne	r2, #2
 80140b4:	6122      	str	r2, [r4, #16]
 80140b6:	b1a5      	cbz	r5, 80140e2 <__d2b+0x92>
 80140b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80140bc:	4405      	add	r5, r0
 80140be:	603d      	str	r5, [r7, #0]
 80140c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80140c4:	6030      	str	r0, [r6, #0]
 80140c6:	4620      	mov	r0, r4
 80140c8:	b003      	add	sp, #12
 80140ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80140ce:	6161      	str	r1, [r4, #20]
 80140d0:	e7ea      	b.n	80140a8 <__d2b+0x58>
 80140d2:	a801      	add	r0, sp, #4
 80140d4:	f7ff fd59 	bl	8013b8a <__lo0bits>
 80140d8:	9b01      	ldr	r3, [sp, #4]
 80140da:	6163      	str	r3, [r4, #20]
 80140dc:	3020      	adds	r0, #32
 80140de:	2201      	movs	r2, #1
 80140e0:	e7e8      	b.n	80140b4 <__d2b+0x64>
 80140e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80140e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80140ea:	6038      	str	r0, [r7, #0]
 80140ec:	6918      	ldr	r0, [r3, #16]
 80140ee:	f7ff fd2d 	bl	8013b4c <__hi0bits>
 80140f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80140f6:	e7e5      	b.n	80140c4 <__d2b+0x74>
 80140f8:	0801adbe 	.word	0x0801adbe
 80140fc:	0801adcf 	.word	0x0801adcf

08014100 <__ssputs_r>:
 8014100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014104:	688e      	ldr	r6, [r1, #8]
 8014106:	461f      	mov	r7, r3
 8014108:	42be      	cmp	r6, r7
 801410a:	680b      	ldr	r3, [r1, #0]
 801410c:	4682      	mov	sl, r0
 801410e:	460c      	mov	r4, r1
 8014110:	4690      	mov	r8, r2
 8014112:	d82d      	bhi.n	8014170 <__ssputs_r+0x70>
 8014114:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014118:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801411c:	d026      	beq.n	801416c <__ssputs_r+0x6c>
 801411e:	6965      	ldr	r5, [r4, #20]
 8014120:	6909      	ldr	r1, [r1, #16]
 8014122:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014126:	eba3 0901 	sub.w	r9, r3, r1
 801412a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801412e:	1c7b      	adds	r3, r7, #1
 8014130:	444b      	add	r3, r9
 8014132:	106d      	asrs	r5, r5, #1
 8014134:	429d      	cmp	r5, r3
 8014136:	bf38      	it	cc
 8014138:	461d      	movcc	r5, r3
 801413a:	0553      	lsls	r3, r2, #21
 801413c:	d527      	bpl.n	801418e <__ssputs_r+0x8e>
 801413e:	4629      	mov	r1, r5
 8014140:	f7fd fde8 	bl	8011d14 <_malloc_r>
 8014144:	4606      	mov	r6, r0
 8014146:	b360      	cbz	r0, 80141a2 <__ssputs_r+0xa2>
 8014148:	6921      	ldr	r1, [r4, #16]
 801414a:	464a      	mov	r2, r9
 801414c:	f7fe fdb1 	bl	8012cb2 <memcpy>
 8014150:	89a3      	ldrh	r3, [r4, #12]
 8014152:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014156:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801415a:	81a3      	strh	r3, [r4, #12]
 801415c:	6126      	str	r6, [r4, #16]
 801415e:	6165      	str	r5, [r4, #20]
 8014160:	444e      	add	r6, r9
 8014162:	eba5 0509 	sub.w	r5, r5, r9
 8014166:	6026      	str	r6, [r4, #0]
 8014168:	60a5      	str	r5, [r4, #8]
 801416a:	463e      	mov	r6, r7
 801416c:	42be      	cmp	r6, r7
 801416e:	d900      	bls.n	8014172 <__ssputs_r+0x72>
 8014170:	463e      	mov	r6, r7
 8014172:	6820      	ldr	r0, [r4, #0]
 8014174:	4632      	mov	r2, r6
 8014176:	4641      	mov	r1, r8
 8014178:	f7fe fcf2 	bl	8012b60 <memmove>
 801417c:	68a3      	ldr	r3, [r4, #8]
 801417e:	1b9b      	subs	r3, r3, r6
 8014180:	60a3      	str	r3, [r4, #8]
 8014182:	6823      	ldr	r3, [r4, #0]
 8014184:	4433      	add	r3, r6
 8014186:	6023      	str	r3, [r4, #0]
 8014188:	2000      	movs	r0, #0
 801418a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801418e:	462a      	mov	r2, r5
 8014190:	f000 fbb0 	bl	80148f4 <_realloc_r>
 8014194:	4606      	mov	r6, r0
 8014196:	2800      	cmp	r0, #0
 8014198:	d1e0      	bne.n	801415c <__ssputs_r+0x5c>
 801419a:	6921      	ldr	r1, [r4, #16]
 801419c:	4650      	mov	r0, sl
 801419e:	f7ff fbe3 	bl	8013968 <_free_r>
 80141a2:	230c      	movs	r3, #12
 80141a4:	f8ca 3000 	str.w	r3, [sl]
 80141a8:	89a3      	ldrh	r3, [r4, #12]
 80141aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80141ae:	81a3      	strh	r3, [r4, #12]
 80141b0:	f04f 30ff 	mov.w	r0, #4294967295
 80141b4:	e7e9      	b.n	801418a <__ssputs_r+0x8a>
	...

080141b8 <_svfiprintf_r>:
 80141b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141bc:	4698      	mov	r8, r3
 80141be:	898b      	ldrh	r3, [r1, #12]
 80141c0:	061b      	lsls	r3, r3, #24
 80141c2:	b09d      	sub	sp, #116	@ 0x74
 80141c4:	4607      	mov	r7, r0
 80141c6:	460d      	mov	r5, r1
 80141c8:	4614      	mov	r4, r2
 80141ca:	d510      	bpl.n	80141ee <_svfiprintf_r+0x36>
 80141cc:	690b      	ldr	r3, [r1, #16]
 80141ce:	b973      	cbnz	r3, 80141ee <_svfiprintf_r+0x36>
 80141d0:	2140      	movs	r1, #64	@ 0x40
 80141d2:	f7fd fd9f 	bl	8011d14 <_malloc_r>
 80141d6:	6028      	str	r0, [r5, #0]
 80141d8:	6128      	str	r0, [r5, #16]
 80141da:	b930      	cbnz	r0, 80141ea <_svfiprintf_r+0x32>
 80141dc:	230c      	movs	r3, #12
 80141de:	603b      	str	r3, [r7, #0]
 80141e0:	f04f 30ff 	mov.w	r0, #4294967295
 80141e4:	b01d      	add	sp, #116	@ 0x74
 80141e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141ea:	2340      	movs	r3, #64	@ 0x40
 80141ec:	616b      	str	r3, [r5, #20]
 80141ee:	2300      	movs	r3, #0
 80141f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80141f2:	2320      	movs	r3, #32
 80141f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80141f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80141fc:	2330      	movs	r3, #48	@ 0x30
 80141fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801439c <_svfiprintf_r+0x1e4>
 8014202:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014206:	f04f 0901 	mov.w	r9, #1
 801420a:	4623      	mov	r3, r4
 801420c:	469a      	mov	sl, r3
 801420e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014212:	b10a      	cbz	r2, 8014218 <_svfiprintf_r+0x60>
 8014214:	2a25      	cmp	r2, #37	@ 0x25
 8014216:	d1f9      	bne.n	801420c <_svfiprintf_r+0x54>
 8014218:	ebba 0b04 	subs.w	fp, sl, r4
 801421c:	d00b      	beq.n	8014236 <_svfiprintf_r+0x7e>
 801421e:	465b      	mov	r3, fp
 8014220:	4622      	mov	r2, r4
 8014222:	4629      	mov	r1, r5
 8014224:	4638      	mov	r0, r7
 8014226:	f7ff ff6b 	bl	8014100 <__ssputs_r>
 801422a:	3001      	adds	r0, #1
 801422c:	f000 80a7 	beq.w	801437e <_svfiprintf_r+0x1c6>
 8014230:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014232:	445a      	add	r2, fp
 8014234:	9209      	str	r2, [sp, #36]	@ 0x24
 8014236:	f89a 3000 	ldrb.w	r3, [sl]
 801423a:	2b00      	cmp	r3, #0
 801423c:	f000 809f 	beq.w	801437e <_svfiprintf_r+0x1c6>
 8014240:	2300      	movs	r3, #0
 8014242:	f04f 32ff 	mov.w	r2, #4294967295
 8014246:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801424a:	f10a 0a01 	add.w	sl, sl, #1
 801424e:	9304      	str	r3, [sp, #16]
 8014250:	9307      	str	r3, [sp, #28]
 8014252:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014256:	931a      	str	r3, [sp, #104]	@ 0x68
 8014258:	4654      	mov	r4, sl
 801425a:	2205      	movs	r2, #5
 801425c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014260:	484e      	ldr	r0, [pc, #312]	@ (801439c <_svfiprintf_r+0x1e4>)
 8014262:	f7eb ff8d 	bl	8000180 <memchr>
 8014266:	9a04      	ldr	r2, [sp, #16]
 8014268:	b9d8      	cbnz	r0, 80142a2 <_svfiprintf_r+0xea>
 801426a:	06d0      	lsls	r0, r2, #27
 801426c:	bf44      	itt	mi
 801426e:	2320      	movmi	r3, #32
 8014270:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014274:	0711      	lsls	r1, r2, #28
 8014276:	bf44      	itt	mi
 8014278:	232b      	movmi	r3, #43	@ 0x2b
 801427a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801427e:	f89a 3000 	ldrb.w	r3, [sl]
 8014282:	2b2a      	cmp	r3, #42	@ 0x2a
 8014284:	d015      	beq.n	80142b2 <_svfiprintf_r+0xfa>
 8014286:	9a07      	ldr	r2, [sp, #28]
 8014288:	4654      	mov	r4, sl
 801428a:	2000      	movs	r0, #0
 801428c:	f04f 0c0a 	mov.w	ip, #10
 8014290:	4621      	mov	r1, r4
 8014292:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014296:	3b30      	subs	r3, #48	@ 0x30
 8014298:	2b09      	cmp	r3, #9
 801429a:	d94b      	bls.n	8014334 <_svfiprintf_r+0x17c>
 801429c:	b1b0      	cbz	r0, 80142cc <_svfiprintf_r+0x114>
 801429e:	9207      	str	r2, [sp, #28]
 80142a0:	e014      	b.n	80142cc <_svfiprintf_r+0x114>
 80142a2:	eba0 0308 	sub.w	r3, r0, r8
 80142a6:	fa09 f303 	lsl.w	r3, r9, r3
 80142aa:	4313      	orrs	r3, r2
 80142ac:	9304      	str	r3, [sp, #16]
 80142ae:	46a2      	mov	sl, r4
 80142b0:	e7d2      	b.n	8014258 <_svfiprintf_r+0xa0>
 80142b2:	9b03      	ldr	r3, [sp, #12]
 80142b4:	1d19      	adds	r1, r3, #4
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	9103      	str	r1, [sp, #12]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	bfbb      	ittet	lt
 80142be:	425b      	neglt	r3, r3
 80142c0:	f042 0202 	orrlt.w	r2, r2, #2
 80142c4:	9307      	strge	r3, [sp, #28]
 80142c6:	9307      	strlt	r3, [sp, #28]
 80142c8:	bfb8      	it	lt
 80142ca:	9204      	strlt	r2, [sp, #16]
 80142cc:	7823      	ldrb	r3, [r4, #0]
 80142ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80142d0:	d10a      	bne.n	80142e8 <_svfiprintf_r+0x130>
 80142d2:	7863      	ldrb	r3, [r4, #1]
 80142d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80142d6:	d132      	bne.n	801433e <_svfiprintf_r+0x186>
 80142d8:	9b03      	ldr	r3, [sp, #12]
 80142da:	1d1a      	adds	r2, r3, #4
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	9203      	str	r2, [sp, #12]
 80142e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80142e4:	3402      	adds	r4, #2
 80142e6:	9305      	str	r3, [sp, #20]
 80142e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80143ac <_svfiprintf_r+0x1f4>
 80142ec:	7821      	ldrb	r1, [r4, #0]
 80142ee:	2203      	movs	r2, #3
 80142f0:	4650      	mov	r0, sl
 80142f2:	f7eb ff45 	bl	8000180 <memchr>
 80142f6:	b138      	cbz	r0, 8014308 <_svfiprintf_r+0x150>
 80142f8:	9b04      	ldr	r3, [sp, #16]
 80142fa:	eba0 000a 	sub.w	r0, r0, sl
 80142fe:	2240      	movs	r2, #64	@ 0x40
 8014300:	4082      	lsls	r2, r0
 8014302:	4313      	orrs	r3, r2
 8014304:	3401      	adds	r4, #1
 8014306:	9304      	str	r3, [sp, #16]
 8014308:	f814 1b01 	ldrb.w	r1, [r4], #1
 801430c:	4824      	ldr	r0, [pc, #144]	@ (80143a0 <_svfiprintf_r+0x1e8>)
 801430e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014312:	2206      	movs	r2, #6
 8014314:	f7eb ff34 	bl	8000180 <memchr>
 8014318:	2800      	cmp	r0, #0
 801431a:	d036      	beq.n	801438a <_svfiprintf_r+0x1d2>
 801431c:	4b21      	ldr	r3, [pc, #132]	@ (80143a4 <_svfiprintf_r+0x1ec>)
 801431e:	bb1b      	cbnz	r3, 8014368 <_svfiprintf_r+0x1b0>
 8014320:	9b03      	ldr	r3, [sp, #12]
 8014322:	3307      	adds	r3, #7
 8014324:	f023 0307 	bic.w	r3, r3, #7
 8014328:	3308      	adds	r3, #8
 801432a:	9303      	str	r3, [sp, #12]
 801432c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801432e:	4433      	add	r3, r6
 8014330:	9309      	str	r3, [sp, #36]	@ 0x24
 8014332:	e76a      	b.n	801420a <_svfiprintf_r+0x52>
 8014334:	fb0c 3202 	mla	r2, ip, r2, r3
 8014338:	460c      	mov	r4, r1
 801433a:	2001      	movs	r0, #1
 801433c:	e7a8      	b.n	8014290 <_svfiprintf_r+0xd8>
 801433e:	2300      	movs	r3, #0
 8014340:	3401      	adds	r4, #1
 8014342:	9305      	str	r3, [sp, #20]
 8014344:	4619      	mov	r1, r3
 8014346:	f04f 0c0a 	mov.w	ip, #10
 801434a:	4620      	mov	r0, r4
 801434c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014350:	3a30      	subs	r2, #48	@ 0x30
 8014352:	2a09      	cmp	r2, #9
 8014354:	d903      	bls.n	801435e <_svfiprintf_r+0x1a6>
 8014356:	2b00      	cmp	r3, #0
 8014358:	d0c6      	beq.n	80142e8 <_svfiprintf_r+0x130>
 801435a:	9105      	str	r1, [sp, #20]
 801435c:	e7c4      	b.n	80142e8 <_svfiprintf_r+0x130>
 801435e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014362:	4604      	mov	r4, r0
 8014364:	2301      	movs	r3, #1
 8014366:	e7f0      	b.n	801434a <_svfiprintf_r+0x192>
 8014368:	ab03      	add	r3, sp, #12
 801436a:	9300      	str	r3, [sp, #0]
 801436c:	462a      	mov	r2, r5
 801436e:	4b0e      	ldr	r3, [pc, #56]	@ (80143a8 <_svfiprintf_r+0x1f0>)
 8014370:	a904      	add	r1, sp, #16
 8014372:	4638      	mov	r0, r7
 8014374:	f7fd fdfa 	bl	8011f6c <_printf_float>
 8014378:	1c42      	adds	r2, r0, #1
 801437a:	4606      	mov	r6, r0
 801437c:	d1d6      	bne.n	801432c <_svfiprintf_r+0x174>
 801437e:	89ab      	ldrh	r3, [r5, #12]
 8014380:	065b      	lsls	r3, r3, #25
 8014382:	f53f af2d 	bmi.w	80141e0 <_svfiprintf_r+0x28>
 8014386:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014388:	e72c      	b.n	80141e4 <_svfiprintf_r+0x2c>
 801438a:	ab03      	add	r3, sp, #12
 801438c:	9300      	str	r3, [sp, #0]
 801438e:	462a      	mov	r2, r5
 8014390:	4b05      	ldr	r3, [pc, #20]	@ (80143a8 <_svfiprintf_r+0x1f0>)
 8014392:	a904      	add	r1, sp, #16
 8014394:	4638      	mov	r0, r7
 8014396:	f7fe f881 	bl	801249c <_printf_i>
 801439a:	e7ed      	b.n	8014378 <_svfiprintf_r+0x1c0>
 801439c:	0801af28 	.word	0x0801af28
 80143a0:	0801af32 	.word	0x0801af32
 80143a4:	08011f6d 	.word	0x08011f6d
 80143a8:	08014101 	.word	0x08014101
 80143ac:	0801af2e 	.word	0x0801af2e

080143b0 <__sfputc_r>:
 80143b0:	6893      	ldr	r3, [r2, #8]
 80143b2:	3b01      	subs	r3, #1
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	b410      	push	{r4}
 80143b8:	6093      	str	r3, [r2, #8]
 80143ba:	da08      	bge.n	80143ce <__sfputc_r+0x1e>
 80143bc:	6994      	ldr	r4, [r2, #24]
 80143be:	42a3      	cmp	r3, r4
 80143c0:	db01      	blt.n	80143c6 <__sfputc_r+0x16>
 80143c2:	290a      	cmp	r1, #10
 80143c4:	d103      	bne.n	80143ce <__sfputc_r+0x1e>
 80143c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80143ca:	f7fe bb35 	b.w	8012a38 <__swbuf_r>
 80143ce:	6813      	ldr	r3, [r2, #0]
 80143d0:	1c58      	adds	r0, r3, #1
 80143d2:	6010      	str	r0, [r2, #0]
 80143d4:	7019      	strb	r1, [r3, #0]
 80143d6:	4608      	mov	r0, r1
 80143d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80143dc:	4770      	bx	lr

080143de <__sfputs_r>:
 80143de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143e0:	4606      	mov	r6, r0
 80143e2:	460f      	mov	r7, r1
 80143e4:	4614      	mov	r4, r2
 80143e6:	18d5      	adds	r5, r2, r3
 80143e8:	42ac      	cmp	r4, r5
 80143ea:	d101      	bne.n	80143f0 <__sfputs_r+0x12>
 80143ec:	2000      	movs	r0, #0
 80143ee:	e007      	b.n	8014400 <__sfputs_r+0x22>
 80143f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143f4:	463a      	mov	r2, r7
 80143f6:	4630      	mov	r0, r6
 80143f8:	f7ff ffda 	bl	80143b0 <__sfputc_r>
 80143fc:	1c43      	adds	r3, r0, #1
 80143fe:	d1f3      	bne.n	80143e8 <__sfputs_r+0xa>
 8014400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014404 <_vfiprintf_r>:
 8014404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014408:	460d      	mov	r5, r1
 801440a:	b09d      	sub	sp, #116	@ 0x74
 801440c:	4614      	mov	r4, r2
 801440e:	4698      	mov	r8, r3
 8014410:	4606      	mov	r6, r0
 8014412:	b118      	cbz	r0, 801441c <_vfiprintf_r+0x18>
 8014414:	6a03      	ldr	r3, [r0, #32]
 8014416:	b90b      	cbnz	r3, 801441c <_vfiprintf_r+0x18>
 8014418:	f7fe f9ec 	bl	80127f4 <__sinit>
 801441c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801441e:	07d9      	lsls	r1, r3, #31
 8014420:	d405      	bmi.n	801442e <_vfiprintf_r+0x2a>
 8014422:	89ab      	ldrh	r3, [r5, #12]
 8014424:	059a      	lsls	r2, r3, #22
 8014426:	d402      	bmi.n	801442e <_vfiprintf_r+0x2a>
 8014428:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801442a:	f7fe fc40 	bl	8012cae <__retarget_lock_acquire_recursive>
 801442e:	89ab      	ldrh	r3, [r5, #12]
 8014430:	071b      	lsls	r3, r3, #28
 8014432:	d501      	bpl.n	8014438 <_vfiprintf_r+0x34>
 8014434:	692b      	ldr	r3, [r5, #16]
 8014436:	b99b      	cbnz	r3, 8014460 <_vfiprintf_r+0x5c>
 8014438:	4629      	mov	r1, r5
 801443a:	4630      	mov	r0, r6
 801443c:	f7fe fb3a 	bl	8012ab4 <__swsetup_r>
 8014440:	b170      	cbz	r0, 8014460 <_vfiprintf_r+0x5c>
 8014442:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014444:	07dc      	lsls	r4, r3, #31
 8014446:	d504      	bpl.n	8014452 <_vfiprintf_r+0x4e>
 8014448:	f04f 30ff 	mov.w	r0, #4294967295
 801444c:	b01d      	add	sp, #116	@ 0x74
 801444e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014452:	89ab      	ldrh	r3, [r5, #12]
 8014454:	0598      	lsls	r0, r3, #22
 8014456:	d4f7      	bmi.n	8014448 <_vfiprintf_r+0x44>
 8014458:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801445a:	f7fe fc29 	bl	8012cb0 <__retarget_lock_release_recursive>
 801445e:	e7f3      	b.n	8014448 <_vfiprintf_r+0x44>
 8014460:	2300      	movs	r3, #0
 8014462:	9309      	str	r3, [sp, #36]	@ 0x24
 8014464:	2320      	movs	r3, #32
 8014466:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801446a:	f8cd 800c 	str.w	r8, [sp, #12]
 801446e:	2330      	movs	r3, #48	@ 0x30
 8014470:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014620 <_vfiprintf_r+0x21c>
 8014474:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014478:	f04f 0901 	mov.w	r9, #1
 801447c:	4623      	mov	r3, r4
 801447e:	469a      	mov	sl, r3
 8014480:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014484:	b10a      	cbz	r2, 801448a <_vfiprintf_r+0x86>
 8014486:	2a25      	cmp	r2, #37	@ 0x25
 8014488:	d1f9      	bne.n	801447e <_vfiprintf_r+0x7a>
 801448a:	ebba 0b04 	subs.w	fp, sl, r4
 801448e:	d00b      	beq.n	80144a8 <_vfiprintf_r+0xa4>
 8014490:	465b      	mov	r3, fp
 8014492:	4622      	mov	r2, r4
 8014494:	4629      	mov	r1, r5
 8014496:	4630      	mov	r0, r6
 8014498:	f7ff ffa1 	bl	80143de <__sfputs_r>
 801449c:	3001      	adds	r0, #1
 801449e:	f000 80a7 	beq.w	80145f0 <_vfiprintf_r+0x1ec>
 80144a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80144a4:	445a      	add	r2, fp
 80144a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80144a8:	f89a 3000 	ldrb.w	r3, [sl]
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	f000 809f 	beq.w	80145f0 <_vfiprintf_r+0x1ec>
 80144b2:	2300      	movs	r3, #0
 80144b4:	f04f 32ff 	mov.w	r2, #4294967295
 80144b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80144bc:	f10a 0a01 	add.w	sl, sl, #1
 80144c0:	9304      	str	r3, [sp, #16]
 80144c2:	9307      	str	r3, [sp, #28]
 80144c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80144c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80144ca:	4654      	mov	r4, sl
 80144cc:	2205      	movs	r2, #5
 80144ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144d2:	4853      	ldr	r0, [pc, #332]	@ (8014620 <_vfiprintf_r+0x21c>)
 80144d4:	f7eb fe54 	bl	8000180 <memchr>
 80144d8:	9a04      	ldr	r2, [sp, #16]
 80144da:	b9d8      	cbnz	r0, 8014514 <_vfiprintf_r+0x110>
 80144dc:	06d1      	lsls	r1, r2, #27
 80144de:	bf44      	itt	mi
 80144e0:	2320      	movmi	r3, #32
 80144e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80144e6:	0713      	lsls	r3, r2, #28
 80144e8:	bf44      	itt	mi
 80144ea:	232b      	movmi	r3, #43	@ 0x2b
 80144ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80144f0:	f89a 3000 	ldrb.w	r3, [sl]
 80144f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80144f6:	d015      	beq.n	8014524 <_vfiprintf_r+0x120>
 80144f8:	9a07      	ldr	r2, [sp, #28]
 80144fa:	4654      	mov	r4, sl
 80144fc:	2000      	movs	r0, #0
 80144fe:	f04f 0c0a 	mov.w	ip, #10
 8014502:	4621      	mov	r1, r4
 8014504:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014508:	3b30      	subs	r3, #48	@ 0x30
 801450a:	2b09      	cmp	r3, #9
 801450c:	d94b      	bls.n	80145a6 <_vfiprintf_r+0x1a2>
 801450e:	b1b0      	cbz	r0, 801453e <_vfiprintf_r+0x13a>
 8014510:	9207      	str	r2, [sp, #28]
 8014512:	e014      	b.n	801453e <_vfiprintf_r+0x13a>
 8014514:	eba0 0308 	sub.w	r3, r0, r8
 8014518:	fa09 f303 	lsl.w	r3, r9, r3
 801451c:	4313      	orrs	r3, r2
 801451e:	9304      	str	r3, [sp, #16]
 8014520:	46a2      	mov	sl, r4
 8014522:	e7d2      	b.n	80144ca <_vfiprintf_r+0xc6>
 8014524:	9b03      	ldr	r3, [sp, #12]
 8014526:	1d19      	adds	r1, r3, #4
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	9103      	str	r1, [sp, #12]
 801452c:	2b00      	cmp	r3, #0
 801452e:	bfbb      	ittet	lt
 8014530:	425b      	neglt	r3, r3
 8014532:	f042 0202 	orrlt.w	r2, r2, #2
 8014536:	9307      	strge	r3, [sp, #28]
 8014538:	9307      	strlt	r3, [sp, #28]
 801453a:	bfb8      	it	lt
 801453c:	9204      	strlt	r2, [sp, #16]
 801453e:	7823      	ldrb	r3, [r4, #0]
 8014540:	2b2e      	cmp	r3, #46	@ 0x2e
 8014542:	d10a      	bne.n	801455a <_vfiprintf_r+0x156>
 8014544:	7863      	ldrb	r3, [r4, #1]
 8014546:	2b2a      	cmp	r3, #42	@ 0x2a
 8014548:	d132      	bne.n	80145b0 <_vfiprintf_r+0x1ac>
 801454a:	9b03      	ldr	r3, [sp, #12]
 801454c:	1d1a      	adds	r2, r3, #4
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	9203      	str	r2, [sp, #12]
 8014552:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014556:	3402      	adds	r4, #2
 8014558:	9305      	str	r3, [sp, #20]
 801455a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014630 <_vfiprintf_r+0x22c>
 801455e:	7821      	ldrb	r1, [r4, #0]
 8014560:	2203      	movs	r2, #3
 8014562:	4650      	mov	r0, sl
 8014564:	f7eb fe0c 	bl	8000180 <memchr>
 8014568:	b138      	cbz	r0, 801457a <_vfiprintf_r+0x176>
 801456a:	9b04      	ldr	r3, [sp, #16]
 801456c:	eba0 000a 	sub.w	r0, r0, sl
 8014570:	2240      	movs	r2, #64	@ 0x40
 8014572:	4082      	lsls	r2, r0
 8014574:	4313      	orrs	r3, r2
 8014576:	3401      	adds	r4, #1
 8014578:	9304      	str	r3, [sp, #16]
 801457a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801457e:	4829      	ldr	r0, [pc, #164]	@ (8014624 <_vfiprintf_r+0x220>)
 8014580:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014584:	2206      	movs	r2, #6
 8014586:	f7eb fdfb 	bl	8000180 <memchr>
 801458a:	2800      	cmp	r0, #0
 801458c:	d03f      	beq.n	801460e <_vfiprintf_r+0x20a>
 801458e:	4b26      	ldr	r3, [pc, #152]	@ (8014628 <_vfiprintf_r+0x224>)
 8014590:	bb1b      	cbnz	r3, 80145da <_vfiprintf_r+0x1d6>
 8014592:	9b03      	ldr	r3, [sp, #12]
 8014594:	3307      	adds	r3, #7
 8014596:	f023 0307 	bic.w	r3, r3, #7
 801459a:	3308      	adds	r3, #8
 801459c:	9303      	str	r3, [sp, #12]
 801459e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145a0:	443b      	add	r3, r7
 80145a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80145a4:	e76a      	b.n	801447c <_vfiprintf_r+0x78>
 80145a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80145aa:	460c      	mov	r4, r1
 80145ac:	2001      	movs	r0, #1
 80145ae:	e7a8      	b.n	8014502 <_vfiprintf_r+0xfe>
 80145b0:	2300      	movs	r3, #0
 80145b2:	3401      	adds	r4, #1
 80145b4:	9305      	str	r3, [sp, #20]
 80145b6:	4619      	mov	r1, r3
 80145b8:	f04f 0c0a 	mov.w	ip, #10
 80145bc:	4620      	mov	r0, r4
 80145be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80145c2:	3a30      	subs	r2, #48	@ 0x30
 80145c4:	2a09      	cmp	r2, #9
 80145c6:	d903      	bls.n	80145d0 <_vfiprintf_r+0x1cc>
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d0c6      	beq.n	801455a <_vfiprintf_r+0x156>
 80145cc:	9105      	str	r1, [sp, #20]
 80145ce:	e7c4      	b.n	801455a <_vfiprintf_r+0x156>
 80145d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80145d4:	4604      	mov	r4, r0
 80145d6:	2301      	movs	r3, #1
 80145d8:	e7f0      	b.n	80145bc <_vfiprintf_r+0x1b8>
 80145da:	ab03      	add	r3, sp, #12
 80145dc:	9300      	str	r3, [sp, #0]
 80145de:	462a      	mov	r2, r5
 80145e0:	4b12      	ldr	r3, [pc, #72]	@ (801462c <_vfiprintf_r+0x228>)
 80145e2:	a904      	add	r1, sp, #16
 80145e4:	4630      	mov	r0, r6
 80145e6:	f7fd fcc1 	bl	8011f6c <_printf_float>
 80145ea:	4607      	mov	r7, r0
 80145ec:	1c78      	adds	r0, r7, #1
 80145ee:	d1d6      	bne.n	801459e <_vfiprintf_r+0x19a>
 80145f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80145f2:	07d9      	lsls	r1, r3, #31
 80145f4:	d405      	bmi.n	8014602 <_vfiprintf_r+0x1fe>
 80145f6:	89ab      	ldrh	r3, [r5, #12]
 80145f8:	059a      	lsls	r2, r3, #22
 80145fa:	d402      	bmi.n	8014602 <_vfiprintf_r+0x1fe>
 80145fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80145fe:	f7fe fb57 	bl	8012cb0 <__retarget_lock_release_recursive>
 8014602:	89ab      	ldrh	r3, [r5, #12]
 8014604:	065b      	lsls	r3, r3, #25
 8014606:	f53f af1f 	bmi.w	8014448 <_vfiprintf_r+0x44>
 801460a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801460c:	e71e      	b.n	801444c <_vfiprintf_r+0x48>
 801460e:	ab03      	add	r3, sp, #12
 8014610:	9300      	str	r3, [sp, #0]
 8014612:	462a      	mov	r2, r5
 8014614:	4b05      	ldr	r3, [pc, #20]	@ (801462c <_vfiprintf_r+0x228>)
 8014616:	a904      	add	r1, sp, #16
 8014618:	4630      	mov	r0, r6
 801461a:	f7fd ff3f 	bl	801249c <_printf_i>
 801461e:	e7e4      	b.n	80145ea <_vfiprintf_r+0x1e6>
 8014620:	0801af28 	.word	0x0801af28
 8014624:	0801af32 	.word	0x0801af32
 8014628:	08011f6d 	.word	0x08011f6d
 801462c:	080143df 	.word	0x080143df
 8014630:	0801af2e 	.word	0x0801af2e

08014634 <__sflush_r>:
 8014634:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801463c:	0716      	lsls	r6, r2, #28
 801463e:	4605      	mov	r5, r0
 8014640:	460c      	mov	r4, r1
 8014642:	d454      	bmi.n	80146ee <__sflush_r+0xba>
 8014644:	684b      	ldr	r3, [r1, #4]
 8014646:	2b00      	cmp	r3, #0
 8014648:	dc02      	bgt.n	8014650 <__sflush_r+0x1c>
 801464a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801464c:	2b00      	cmp	r3, #0
 801464e:	dd48      	ble.n	80146e2 <__sflush_r+0xae>
 8014650:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014652:	2e00      	cmp	r6, #0
 8014654:	d045      	beq.n	80146e2 <__sflush_r+0xae>
 8014656:	2300      	movs	r3, #0
 8014658:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801465c:	682f      	ldr	r7, [r5, #0]
 801465e:	6a21      	ldr	r1, [r4, #32]
 8014660:	602b      	str	r3, [r5, #0]
 8014662:	d030      	beq.n	80146c6 <__sflush_r+0x92>
 8014664:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014666:	89a3      	ldrh	r3, [r4, #12]
 8014668:	0759      	lsls	r1, r3, #29
 801466a:	d505      	bpl.n	8014678 <__sflush_r+0x44>
 801466c:	6863      	ldr	r3, [r4, #4]
 801466e:	1ad2      	subs	r2, r2, r3
 8014670:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014672:	b10b      	cbz	r3, 8014678 <__sflush_r+0x44>
 8014674:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014676:	1ad2      	subs	r2, r2, r3
 8014678:	2300      	movs	r3, #0
 801467a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801467c:	6a21      	ldr	r1, [r4, #32]
 801467e:	4628      	mov	r0, r5
 8014680:	47b0      	blx	r6
 8014682:	1c43      	adds	r3, r0, #1
 8014684:	89a3      	ldrh	r3, [r4, #12]
 8014686:	d106      	bne.n	8014696 <__sflush_r+0x62>
 8014688:	6829      	ldr	r1, [r5, #0]
 801468a:	291d      	cmp	r1, #29
 801468c:	d82b      	bhi.n	80146e6 <__sflush_r+0xb2>
 801468e:	4a2a      	ldr	r2, [pc, #168]	@ (8014738 <__sflush_r+0x104>)
 8014690:	410a      	asrs	r2, r1
 8014692:	07d6      	lsls	r6, r2, #31
 8014694:	d427      	bmi.n	80146e6 <__sflush_r+0xb2>
 8014696:	2200      	movs	r2, #0
 8014698:	6062      	str	r2, [r4, #4]
 801469a:	04d9      	lsls	r1, r3, #19
 801469c:	6922      	ldr	r2, [r4, #16]
 801469e:	6022      	str	r2, [r4, #0]
 80146a0:	d504      	bpl.n	80146ac <__sflush_r+0x78>
 80146a2:	1c42      	adds	r2, r0, #1
 80146a4:	d101      	bne.n	80146aa <__sflush_r+0x76>
 80146a6:	682b      	ldr	r3, [r5, #0]
 80146a8:	b903      	cbnz	r3, 80146ac <__sflush_r+0x78>
 80146aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80146ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80146ae:	602f      	str	r7, [r5, #0]
 80146b0:	b1b9      	cbz	r1, 80146e2 <__sflush_r+0xae>
 80146b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80146b6:	4299      	cmp	r1, r3
 80146b8:	d002      	beq.n	80146c0 <__sflush_r+0x8c>
 80146ba:	4628      	mov	r0, r5
 80146bc:	f7ff f954 	bl	8013968 <_free_r>
 80146c0:	2300      	movs	r3, #0
 80146c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80146c4:	e00d      	b.n	80146e2 <__sflush_r+0xae>
 80146c6:	2301      	movs	r3, #1
 80146c8:	4628      	mov	r0, r5
 80146ca:	47b0      	blx	r6
 80146cc:	4602      	mov	r2, r0
 80146ce:	1c50      	adds	r0, r2, #1
 80146d0:	d1c9      	bne.n	8014666 <__sflush_r+0x32>
 80146d2:	682b      	ldr	r3, [r5, #0]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d0c6      	beq.n	8014666 <__sflush_r+0x32>
 80146d8:	2b1d      	cmp	r3, #29
 80146da:	d001      	beq.n	80146e0 <__sflush_r+0xac>
 80146dc:	2b16      	cmp	r3, #22
 80146de:	d11e      	bne.n	801471e <__sflush_r+0xea>
 80146e0:	602f      	str	r7, [r5, #0]
 80146e2:	2000      	movs	r0, #0
 80146e4:	e022      	b.n	801472c <__sflush_r+0xf8>
 80146e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80146ea:	b21b      	sxth	r3, r3
 80146ec:	e01b      	b.n	8014726 <__sflush_r+0xf2>
 80146ee:	690f      	ldr	r7, [r1, #16]
 80146f0:	2f00      	cmp	r7, #0
 80146f2:	d0f6      	beq.n	80146e2 <__sflush_r+0xae>
 80146f4:	0793      	lsls	r3, r2, #30
 80146f6:	680e      	ldr	r6, [r1, #0]
 80146f8:	bf08      	it	eq
 80146fa:	694b      	ldreq	r3, [r1, #20]
 80146fc:	600f      	str	r7, [r1, #0]
 80146fe:	bf18      	it	ne
 8014700:	2300      	movne	r3, #0
 8014702:	eba6 0807 	sub.w	r8, r6, r7
 8014706:	608b      	str	r3, [r1, #8]
 8014708:	f1b8 0f00 	cmp.w	r8, #0
 801470c:	dde9      	ble.n	80146e2 <__sflush_r+0xae>
 801470e:	6a21      	ldr	r1, [r4, #32]
 8014710:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014712:	4643      	mov	r3, r8
 8014714:	463a      	mov	r2, r7
 8014716:	4628      	mov	r0, r5
 8014718:	47b0      	blx	r6
 801471a:	2800      	cmp	r0, #0
 801471c:	dc08      	bgt.n	8014730 <__sflush_r+0xfc>
 801471e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014726:	81a3      	strh	r3, [r4, #12]
 8014728:	f04f 30ff 	mov.w	r0, #4294967295
 801472c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014730:	4407      	add	r7, r0
 8014732:	eba8 0800 	sub.w	r8, r8, r0
 8014736:	e7e7      	b.n	8014708 <__sflush_r+0xd4>
 8014738:	dfbffffe 	.word	0xdfbffffe

0801473c <_fflush_r>:
 801473c:	b538      	push	{r3, r4, r5, lr}
 801473e:	690b      	ldr	r3, [r1, #16]
 8014740:	4605      	mov	r5, r0
 8014742:	460c      	mov	r4, r1
 8014744:	b913      	cbnz	r3, 801474c <_fflush_r+0x10>
 8014746:	2500      	movs	r5, #0
 8014748:	4628      	mov	r0, r5
 801474a:	bd38      	pop	{r3, r4, r5, pc}
 801474c:	b118      	cbz	r0, 8014756 <_fflush_r+0x1a>
 801474e:	6a03      	ldr	r3, [r0, #32]
 8014750:	b90b      	cbnz	r3, 8014756 <_fflush_r+0x1a>
 8014752:	f7fe f84f 	bl	80127f4 <__sinit>
 8014756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d0f3      	beq.n	8014746 <_fflush_r+0xa>
 801475e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014760:	07d0      	lsls	r0, r2, #31
 8014762:	d404      	bmi.n	801476e <_fflush_r+0x32>
 8014764:	0599      	lsls	r1, r3, #22
 8014766:	d402      	bmi.n	801476e <_fflush_r+0x32>
 8014768:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801476a:	f7fe faa0 	bl	8012cae <__retarget_lock_acquire_recursive>
 801476e:	4628      	mov	r0, r5
 8014770:	4621      	mov	r1, r4
 8014772:	f7ff ff5f 	bl	8014634 <__sflush_r>
 8014776:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014778:	07da      	lsls	r2, r3, #31
 801477a:	4605      	mov	r5, r0
 801477c:	d4e4      	bmi.n	8014748 <_fflush_r+0xc>
 801477e:	89a3      	ldrh	r3, [r4, #12]
 8014780:	059b      	lsls	r3, r3, #22
 8014782:	d4e1      	bmi.n	8014748 <_fflush_r+0xc>
 8014784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014786:	f7fe fa93 	bl	8012cb0 <__retarget_lock_release_recursive>
 801478a:	e7dd      	b.n	8014748 <_fflush_r+0xc>

0801478c <__swhatbuf_r>:
 801478c:	b570      	push	{r4, r5, r6, lr}
 801478e:	460c      	mov	r4, r1
 8014790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014794:	2900      	cmp	r1, #0
 8014796:	b096      	sub	sp, #88	@ 0x58
 8014798:	4615      	mov	r5, r2
 801479a:	461e      	mov	r6, r3
 801479c:	da0d      	bge.n	80147ba <__swhatbuf_r+0x2e>
 801479e:	89a3      	ldrh	r3, [r4, #12]
 80147a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80147a4:	f04f 0100 	mov.w	r1, #0
 80147a8:	bf14      	ite	ne
 80147aa:	2340      	movne	r3, #64	@ 0x40
 80147ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80147b0:	2000      	movs	r0, #0
 80147b2:	6031      	str	r1, [r6, #0]
 80147b4:	602b      	str	r3, [r5, #0]
 80147b6:	b016      	add	sp, #88	@ 0x58
 80147b8:	bd70      	pop	{r4, r5, r6, pc}
 80147ba:	466a      	mov	r2, sp
 80147bc:	f000 f848 	bl	8014850 <_fstat_r>
 80147c0:	2800      	cmp	r0, #0
 80147c2:	dbec      	blt.n	801479e <__swhatbuf_r+0x12>
 80147c4:	9901      	ldr	r1, [sp, #4]
 80147c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80147ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80147ce:	4259      	negs	r1, r3
 80147d0:	4159      	adcs	r1, r3
 80147d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80147d6:	e7eb      	b.n	80147b0 <__swhatbuf_r+0x24>

080147d8 <__smakebuf_r>:
 80147d8:	898b      	ldrh	r3, [r1, #12]
 80147da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80147dc:	079d      	lsls	r5, r3, #30
 80147de:	4606      	mov	r6, r0
 80147e0:	460c      	mov	r4, r1
 80147e2:	d507      	bpl.n	80147f4 <__smakebuf_r+0x1c>
 80147e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80147e8:	6023      	str	r3, [r4, #0]
 80147ea:	6123      	str	r3, [r4, #16]
 80147ec:	2301      	movs	r3, #1
 80147ee:	6163      	str	r3, [r4, #20]
 80147f0:	b003      	add	sp, #12
 80147f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147f4:	ab01      	add	r3, sp, #4
 80147f6:	466a      	mov	r2, sp
 80147f8:	f7ff ffc8 	bl	801478c <__swhatbuf_r>
 80147fc:	9f00      	ldr	r7, [sp, #0]
 80147fe:	4605      	mov	r5, r0
 8014800:	4639      	mov	r1, r7
 8014802:	4630      	mov	r0, r6
 8014804:	f7fd fa86 	bl	8011d14 <_malloc_r>
 8014808:	b948      	cbnz	r0, 801481e <__smakebuf_r+0x46>
 801480a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801480e:	059a      	lsls	r2, r3, #22
 8014810:	d4ee      	bmi.n	80147f0 <__smakebuf_r+0x18>
 8014812:	f023 0303 	bic.w	r3, r3, #3
 8014816:	f043 0302 	orr.w	r3, r3, #2
 801481a:	81a3      	strh	r3, [r4, #12]
 801481c:	e7e2      	b.n	80147e4 <__smakebuf_r+0xc>
 801481e:	89a3      	ldrh	r3, [r4, #12]
 8014820:	6020      	str	r0, [r4, #0]
 8014822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014826:	81a3      	strh	r3, [r4, #12]
 8014828:	9b01      	ldr	r3, [sp, #4]
 801482a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801482e:	b15b      	cbz	r3, 8014848 <__smakebuf_r+0x70>
 8014830:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014834:	4630      	mov	r0, r6
 8014836:	f000 f81d 	bl	8014874 <_isatty_r>
 801483a:	b128      	cbz	r0, 8014848 <__smakebuf_r+0x70>
 801483c:	89a3      	ldrh	r3, [r4, #12]
 801483e:	f023 0303 	bic.w	r3, r3, #3
 8014842:	f043 0301 	orr.w	r3, r3, #1
 8014846:	81a3      	strh	r3, [r4, #12]
 8014848:	89a3      	ldrh	r3, [r4, #12]
 801484a:	431d      	orrs	r5, r3
 801484c:	81a5      	strh	r5, [r4, #12]
 801484e:	e7cf      	b.n	80147f0 <__smakebuf_r+0x18>

08014850 <_fstat_r>:
 8014850:	b538      	push	{r3, r4, r5, lr}
 8014852:	4d07      	ldr	r5, [pc, #28]	@ (8014870 <_fstat_r+0x20>)
 8014854:	2300      	movs	r3, #0
 8014856:	4604      	mov	r4, r0
 8014858:	4608      	mov	r0, r1
 801485a:	4611      	mov	r1, r2
 801485c:	602b      	str	r3, [r5, #0]
 801485e:	f7ef f9fd 	bl	8003c5c <_fstat>
 8014862:	1c43      	adds	r3, r0, #1
 8014864:	d102      	bne.n	801486c <_fstat_r+0x1c>
 8014866:	682b      	ldr	r3, [r5, #0]
 8014868:	b103      	cbz	r3, 801486c <_fstat_r+0x1c>
 801486a:	6023      	str	r3, [r4, #0]
 801486c:	bd38      	pop	{r3, r4, r5, pc}
 801486e:	bf00      	nop
 8014870:	20000bd0 	.word	0x20000bd0

08014874 <_isatty_r>:
 8014874:	b538      	push	{r3, r4, r5, lr}
 8014876:	4d06      	ldr	r5, [pc, #24]	@ (8014890 <_isatty_r+0x1c>)
 8014878:	2300      	movs	r3, #0
 801487a:	4604      	mov	r4, r0
 801487c:	4608      	mov	r0, r1
 801487e:	602b      	str	r3, [r5, #0]
 8014880:	f7ef f9fc 	bl	8003c7c <_isatty>
 8014884:	1c43      	adds	r3, r0, #1
 8014886:	d102      	bne.n	801488e <_isatty_r+0x1a>
 8014888:	682b      	ldr	r3, [r5, #0]
 801488a:	b103      	cbz	r3, 801488e <_isatty_r+0x1a>
 801488c:	6023      	str	r3, [r4, #0]
 801488e:	bd38      	pop	{r3, r4, r5, pc}
 8014890:	20000bd0 	.word	0x20000bd0

08014894 <__assert_func>:
 8014894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014896:	4614      	mov	r4, r2
 8014898:	461a      	mov	r2, r3
 801489a:	4b09      	ldr	r3, [pc, #36]	@ (80148c0 <__assert_func+0x2c>)
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	4605      	mov	r5, r0
 80148a0:	68d8      	ldr	r0, [r3, #12]
 80148a2:	b954      	cbnz	r4, 80148ba <__assert_func+0x26>
 80148a4:	4b07      	ldr	r3, [pc, #28]	@ (80148c4 <__assert_func+0x30>)
 80148a6:	461c      	mov	r4, r3
 80148a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80148ac:	9100      	str	r1, [sp, #0]
 80148ae:	462b      	mov	r3, r5
 80148b0:	4905      	ldr	r1, [pc, #20]	@ (80148c8 <__assert_func+0x34>)
 80148b2:	f000 f85b 	bl	801496c <fiprintf>
 80148b6:	f000 f86b 	bl	8014990 <abort>
 80148ba:	4b04      	ldr	r3, [pc, #16]	@ (80148cc <__assert_func+0x38>)
 80148bc:	e7f4      	b.n	80148a8 <__assert_func+0x14>
 80148be:	bf00      	nop
 80148c0:	200001d8 	.word	0x200001d8
 80148c4:	0801af7e 	.word	0x0801af7e
 80148c8:	0801af50 	.word	0x0801af50
 80148cc:	0801af43 	.word	0x0801af43

080148d0 <__ascii_mbtowc>:
 80148d0:	b082      	sub	sp, #8
 80148d2:	b901      	cbnz	r1, 80148d6 <__ascii_mbtowc+0x6>
 80148d4:	a901      	add	r1, sp, #4
 80148d6:	b142      	cbz	r2, 80148ea <__ascii_mbtowc+0x1a>
 80148d8:	b14b      	cbz	r3, 80148ee <__ascii_mbtowc+0x1e>
 80148da:	7813      	ldrb	r3, [r2, #0]
 80148dc:	600b      	str	r3, [r1, #0]
 80148de:	7812      	ldrb	r2, [r2, #0]
 80148e0:	1e10      	subs	r0, r2, #0
 80148e2:	bf18      	it	ne
 80148e4:	2001      	movne	r0, #1
 80148e6:	b002      	add	sp, #8
 80148e8:	4770      	bx	lr
 80148ea:	4610      	mov	r0, r2
 80148ec:	e7fb      	b.n	80148e6 <__ascii_mbtowc+0x16>
 80148ee:	f06f 0001 	mvn.w	r0, #1
 80148f2:	e7f8      	b.n	80148e6 <__ascii_mbtowc+0x16>

080148f4 <_realloc_r>:
 80148f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148f8:	4680      	mov	r8, r0
 80148fa:	4615      	mov	r5, r2
 80148fc:	460c      	mov	r4, r1
 80148fe:	b921      	cbnz	r1, 801490a <_realloc_r+0x16>
 8014900:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014904:	4611      	mov	r1, r2
 8014906:	f7fd ba05 	b.w	8011d14 <_malloc_r>
 801490a:	b92a      	cbnz	r2, 8014918 <_realloc_r+0x24>
 801490c:	f7ff f82c 	bl	8013968 <_free_r>
 8014910:	2400      	movs	r4, #0
 8014912:	4620      	mov	r0, r4
 8014914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014918:	f000 f841 	bl	801499e <_malloc_usable_size_r>
 801491c:	4285      	cmp	r5, r0
 801491e:	4606      	mov	r6, r0
 8014920:	d802      	bhi.n	8014928 <_realloc_r+0x34>
 8014922:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014926:	d8f4      	bhi.n	8014912 <_realloc_r+0x1e>
 8014928:	4629      	mov	r1, r5
 801492a:	4640      	mov	r0, r8
 801492c:	f7fd f9f2 	bl	8011d14 <_malloc_r>
 8014930:	4607      	mov	r7, r0
 8014932:	2800      	cmp	r0, #0
 8014934:	d0ec      	beq.n	8014910 <_realloc_r+0x1c>
 8014936:	42b5      	cmp	r5, r6
 8014938:	462a      	mov	r2, r5
 801493a:	4621      	mov	r1, r4
 801493c:	bf28      	it	cs
 801493e:	4632      	movcs	r2, r6
 8014940:	f7fe f9b7 	bl	8012cb2 <memcpy>
 8014944:	4621      	mov	r1, r4
 8014946:	4640      	mov	r0, r8
 8014948:	f7ff f80e 	bl	8013968 <_free_r>
 801494c:	463c      	mov	r4, r7
 801494e:	e7e0      	b.n	8014912 <_realloc_r+0x1e>

08014950 <__ascii_wctomb>:
 8014950:	4603      	mov	r3, r0
 8014952:	4608      	mov	r0, r1
 8014954:	b141      	cbz	r1, 8014968 <__ascii_wctomb+0x18>
 8014956:	2aff      	cmp	r2, #255	@ 0xff
 8014958:	d904      	bls.n	8014964 <__ascii_wctomb+0x14>
 801495a:	228a      	movs	r2, #138	@ 0x8a
 801495c:	601a      	str	r2, [r3, #0]
 801495e:	f04f 30ff 	mov.w	r0, #4294967295
 8014962:	4770      	bx	lr
 8014964:	700a      	strb	r2, [r1, #0]
 8014966:	2001      	movs	r0, #1
 8014968:	4770      	bx	lr
	...

0801496c <fiprintf>:
 801496c:	b40e      	push	{r1, r2, r3}
 801496e:	b503      	push	{r0, r1, lr}
 8014970:	4601      	mov	r1, r0
 8014972:	ab03      	add	r3, sp, #12
 8014974:	4805      	ldr	r0, [pc, #20]	@ (801498c <fiprintf+0x20>)
 8014976:	f853 2b04 	ldr.w	r2, [r3], #4
 801497a:	6800      	ldr	r0, [r0, #0]
 801497c:	9301      	str	r3, [sp, #4]
 801497e:	f7ff fd41 	bl	8014404 <_vfiprintf_r>
 8014982:	b002      	add	sp, #8
 8014984:	f85d eb04 	ldr.w	lr, [sp], #4
 8014988:	b003      	add	sp, #12
 801498a:	4770      	bx	lr
 801498c:	200001d8 	.word	0x200001d8

08014990 <abort>:
 8014990:	b508      	push	{r3, lr}
 8014992:	2006      	movs	r0, #6
 8014994:	f000 f834 	bl	8014a00 <raise>
 8014998:	2001      	movs	r0, #1
 801499a:	f7ef f92b 	bl	8003bf4 <_exit>

0801499e <_malloc_usable_size_r>:
 801499e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80149a2:	1f18      	subs	r0, r3, #4
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	bfbc      	itt	lt
 80149a8:	580b      	ldrlt	r3, [r1, r0]
 80149aa:	18c0      	addlt	r0, r0, r3
 80149ac:	4770      	bx	lr

080149ae <_raise_r>:
 80149ae:	291f      	cmp	r1, #31
 80149b0:	b538      	push	{r3, r4, r5, lr}
 80149b2:	4605      	mov	r5, r0
 80149b4:	460c      	mov	r4, r1
 80149b6:	d904      	bls.n	80149c2 <_raise_r+0x14>
 80149b8:	2316      	movs	r3, #22
 80149ba:	6003      	str	r3, [r0, #0]
 80149bc:	f04f 30ff 	mov.w	r0, #4294967295
 80149c0:	bd38      	pop	{r3, r4, r5, pc}
 80149c2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80149c4:	b112      	cbz	r2, 80149cc <_raise_r+0x1e>
 80149c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80149ca:	b94b      	cbnz	r3, 80149e0 <_raise_r+0x32>
 80149cc:	4628      	mov	r0, r5
 80149ce:	f000 f831 	bl	8014a34 <_getpid_r>
 80149d2:	4622      	mov	r2, r4
 80149d4:	4601      	mov	r1, r0
 80149d6:	4628      	mov	r0, r5
 80149d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80149dc:	f000 b818 	b.w	8014a10 <_kill_r>
 80149e0:	2b01      	cmp	r3, #1
 80149e2:	d00a      	beq.n	80149fa <_raise_r+0x4c>
 80149e4:	1c59      	adds	r1, r3, #1
 80149e6:	d103      	bne.n	80149f0 <_raise_r+0x42>
 80149e8:	2316      	movs	r3, #22
 80149ea:	6003      	str	r3, [r0, #0]
 80149ec:	2001      	movs	r0, #1
 80149ee:	e7e7      	b.n	80149c0 <_raise_r+0x12>
 80149f0:	2100      	movs	r1, #0
 80149f2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80149f6:	4620      	mov	r0, r4
 80149f8:	4798      	blx	r3
 80149fa:	2000      	movs	r0, #0
 80149fc:	e7e0      	b.n	80149c0 <_raise_r+0x12>
	...

08014a00 <raise>:
 8014a00:	4b02      	ldr	r3, [pc, #8]	@ (8014a0c <raise+0xc>)
 8014a02:	4601      	mov	r1, r0
 8014a04:	6818      	ldr	r0, [r3, #0]
 8014a06:	f7ff bfd2 	b.w	80149ae <_raise_r>
 8014a0a:	bf00      	nop
 8014a0c:	200001d8 	.word	0x200001d8

08014a10 <_kill_r>:
 8014a10:	b538      	push	{r3, r4, r5, lr}
 8014a12:	4d07      	ldr	r5, [pc, #28]	@ (8014a30 <_kill_r+0x20>)
 8014a14:	2300      	movs	r3, #0
 8014a16:	4604      	mov	r4, r0
 8014a18:	4608      	mov	r0, r1
 8014a1a:	4611      	mov	r1, r2
 8014a1c:	602b      	str	r3, [r5, #0]
 8014a1e:	f7ef f8d9 	bl	8003bd4 <_kill>
 8014a22:	1c43      	adds	r3, r0, #1
 8014a24:	d102      	bne.n	8014a2c <_kill_r+0x1c>
 8014a26:	682b      	ldr	r3, [r5, #0]
 8014a28:	b103      	cbz	r3, 8014a2c <_kill_r+0x1c>
 8014a2a:	6023      	str	r3, [r4, #0]
 8014a2c:	bd38      	pop	{r3, r4, r5, pc}
 8014a2e:	bf00      	nop
 8014a30:	20000bd0 	.word	0x20000bd0

08014a34 <_getpid_r>:
 8014a34:	f7ef b8c6 	b.w	8003bc4 <_getpid>

08014a38 <cosf>:
 8014a38:	ee10 3a10 	vmov	r3, s0
 8014a3c:	b507      	push	{r0, r1, r2, lr}
 8014a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8014ab8 <cosf+0x80>)
 8014a40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014a44:	4293      	cmp	r3, r2
 8014a46:	d806      	bhi.n	8014a56 <cosf+0x1e>
 8014a48:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8014abc <cosf+0x84>
 8014a4c:	b003      	add	sp, #12
 8014a4e:	f85d eb04 	ldr.w	lr, [sp], #4
 8014a52:	f000 b8eb 	b.w	8014c2c <__kernel_cosf>
 8014a56:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8014a5a:	d304      	bcc.n	8014a66 <cosf+0x2e>
 8014a5c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8014a60:	b003      	add	sp, #12
 8014a62:	f85d fb04 	ldr.w	pc, [sp], #4
 8014a66:	4668      	mov	r0, sp
 8014a68:	f000 f980 	bl	8014d6c <__ieee754_rem_pio2f>
 8014a6c:	f000 0003 	and.w	r0, r0, #3
 8014a70:	2801      	cmp	r0, #1
 8014a72:	d009      	beq.n	8014a88 <cosf+0x50>
 8014a74:	2802      	cmp	r0, #2
 8014a76:	d010      	beq.n	8014a9a <cosf+0x62>
 8014a78:	b9b0      	cbnz	r0, 8014aa8 <cosf+0x70>
 8014a7a:	eddd 0a01 	vldr	s1, [sp, #4]
 8014a7e:	ed9d 0a00 	vldr	s0, [sp]
 8014a82:	f000 f8d3 	bl	8014c2c <__kernel_cosf>
 8014a86:	e7eb      	b.n	8014a60 <cosf+0x28>
 8014a88:	eddd 0a01 	vldr	s1, [sp, #4]
 8014a8c:	ed9d 0a00 	vldr	s0, [sp]
 8014a90:	f000 f924 	bl	8014cdc <__kernel_sinf>
 8014a94:	eeb1 0a40 	vneg.f32	s0, s0
 8014a98:	e7e2      	b.n	8014a60 <cosf+0x28>
 8014a9a:	eddd 0a01 	vldr	s1, [sp, #4]
 8014a9e:	ed9d 0a00 	vldr	s0, [sp]
 8014aa2:	f000 f8c3 	bl	8014c2c <__kernel_cosf>
 8014aa6:	e7f5      	b.n	8014a94 <cosf+0x5c>
 8014aa8:	eddd 0a01 	vldr	s1, [sp, #4]
 8014aac:	ed9d 0a00 	vldr	s0, [sp]
 8014ab0:	2001      	movs	r0, #1
 8014ab2:	f000 f913 	bl	8014cdc <__kernel_sinf>
 8014ab6:	e7d3      	b.n	8014a60 <cosf+0x28>
 8014ab8:	3f490fd8 	.word	0x3f490fd8
 8014abc:	00000000 	.word	0x00000000

08014ac0 <fabsf>:
 8014ac0:	ee10 3a10 	vmov	r3, s0
 8014ac4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014ac8:	ee00 3a10 	vmov	s0, r3
 8014acc:	4770      	bx	lr
	...

08014ad0 <sinf>:
 8014ad0:	ee10 3a10 	vmov	r3, s0
 8014ad4:	b507      	push	{r0, r1, r2, lr}
 8014ad6:	4a1f      	ldr	r2, [pc, #124]	@ (8014b54 <sinf+0x84>)
 8014ad8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014adc:	4293      	cmp	r3, r2
 8014ade:	d807      	bhi.n	8014af0 <sinf+0x20>
 8014ae0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8014b58 <sinf+0x88>
 8014ae4:	2000      	movs	r0, #0
 8014ae6:	b003      	add	sp, #12
 8014ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8014aec:	f000 b8f6 	b.w	8014cdc <__kernel_sinf>
 8014af0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8014af4:	d304      	bcc.n	8014b00 <sinf+0x30>
 8014af6:	ee30 0a40 	vsub.f32	s0, s0, s0
 8014afa:	b003      	add	sp, #12
 8014afc:	f85d fb04 	ldr.w	pc, [sp], #4
 8014b00:	4668      	mov	r0, sp
 8014b02:	f000 f933 	bl	8014d6c <__ieee754_rem_pio2f>
 8014b06:	f000 0003 	and.w	r0, r0, #3
 8014b0a:	2801      	cmp	r0, #1
 8014b0c:	d00a      	beq.n	8014b24 <sinf+0x54>
 8014b0e:	2802      	cmp	r0, #2
 8014b10:	d00f      	beq.n	8014b32 <sinf+0x62>
 8014b12:	b9c0      	cbnz	r0, 8014b46 <sinf+0x76>
 8014b14:	eddd 0a01 	vldr	s1, [sp, #4]
 8014b18:	ed9d 0a00 	vldr	s0, [sp]
 8014b1c:	2001      	movs	r0, #1
 8014b1e:	f000 f8dd 	bl	8014cdc <__kernel_sinf>
 8014b22:	e7ea      	b.n	8014afa <sinf+0x2a>
 8014b24:	eddd 0a01 	vldr	s1, [sp, #4]
 8014b28:	ed9d 0a00 	vldr	s0, [sp]
 8014b2c:	f000 f87e 	bl	8014c2c <__kernel_cosf>
 8014b30:	e7e3      	b.n	8014afa <sinf+0x2a>
 8014b32:	eddd 0a01 	vldr	s1, [sp, #4]
 8014b36:	ed9d 0a00 	vldr	s0, [sp]
 8014b3a:	2001      	movs	r0, #1
 8014b3c:	f000 f8ce 	bl	8014cdc <__kernel_sinf>
 8014b40:	eeb1 0a40 	vneg.f32	s0, s0
 8014b44:	e7d9      	b.n	8014afa <sinf+0x2a>
 8014b46:	eddd 0a01 	vldr	s1, [sp, #4]
 8014b4a:	ed9d 0a00 	vldr	s0, [sp]
 8014b4e:	f000 f86d 	bl	8014c2c <__kernel_cosf>
 8014b52:	e7f5      	b.n	8014b40 <sinf+0x70>
 8014b54:	3f490fd8 	.word	0x3f490fd8
 8014b58:	00000000 	.word	0x00000000

08014b5c <floorf>:
 8014b5c:	ee10 3a10 	vmov	r3, s0
 8014b60:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014b64:	3a7f      	subs	r2, #127	@ 0x7f
 8014b66:	2a16      	cmp	r2, #22
 8014b68:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014b6c:	dc2b      	bgt.n	8014bc6 <floorf+0x6a>
 8014b6e:	2a00      	cmp	r2, #0
 8014b70:	da12      	bge.n	8014b98 <floorf+0x3c>
 8014b72:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8014bd8 <floorf+0x7c>
 8014b76:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014b7a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b82:	dd06      	ble.n	8014b92 <floorf+0x36>
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	da24      	bge.n	8014bd2 <floorf+0x76>
 8014b88:	2900      	cmp	r1, #0
 8014b8a:	4b14      	ldr	r3, [pc, #80]	@ (8014bdc <floorf+0x80>)
 8014b8c:	bf08      	it	eq
 8014b8e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8014b92:	ee00 3a10 	vmov	s0, r3
 8014b96:	4770      	bx	lr
 8014b98:	4911      	ldr	r1, [pc, #68]	@ (8014be0 <floorf+0x84>)
 8014b9a:	4111      	asrs	r1, r2
 8014b9c:	420b      	tst	r3, r1
 8014b9e:	d0fa      	beq.n	8014b96 <floorf+0x3a>
 8014ba0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8014bd8 <floorf+0x7c>
 8014ba4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014ba8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bb0:	ddef      	ble.n	8014b92 <floorf+0x36>
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	bfbe      	ittt	lt
 8014bb6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8014bba:	fa40 f202 	asrlt.w	r2, r0, r2
 8014bbe:	189b      	addlt	r3, r3, r2
 8014bc0:	ea23 0301 	bic.w	r3, r3, r1
 8014bc4:	e7e5      	b.n	8014b92 <floorf+0x36>
 8014bc6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8014bca:	d3e4      	bcc.n	8014b96 <floorf+0x3a>
 8014bcc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014bd0:	4770      	bx	lr
 8014bd2:	2300      	movs	r3, #0
 8014bd4:	e7dd      	b.n	8014b92 <floorf+0x36>
 8014bd6:	bf00      	nop
 8014bd8:	7149f2ca 	.word	0x7149f2ca
 8014bdc:	bf800000 	.word	0xbf800000
 8014be0:	007fffff 	.word	0x007fffff

08014be4 <roundf>:
 8014be4:	ee10 0a10 	vmov	r0, s0
 8014be8:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8014bec:	3a7f      	subs	r2, #127	@ 0x7f
 8014bee:	2a16      	cmp	r2, #22
 8014bf0:	dc15      	bgt.n	8014c1e <roundf+0x3a>
 8014bf2:	2a00      	cmp	r2, #0
 8014bf4:	da08      	bge.n	8014c08 <roundf+0x24>
 8014bf6:	3201      	adds	r2, #1
 8014bf8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8014bfc:	d101      	bne.n	8014c02 <roundf+0x1e>
 8014bfe:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8014c02:	ee00 3a10 	vmov	s0, r3
 8014c06:	4770      	bx	lr
 8014c08:	4907      	ldr	r1, [pc, #28]	@ (8014c28 <roundf+0x44>)
 8014c0a:	4111      	asrs	r1, r2
 8014c0c:	4201      	tst	r1, r0
 8014c0e:	d0fa      	beq.n	8014c06 <roundf+0x22>
 8014c10:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8014c14:	4113      	asrs	r3, r2
 8014c16:	4403      	add	r3, r0
 8014c18:	ea23 0301 	bic.w	r3, r3, r1
 8014c1c:	e7f1      	b.n	8014c02 <roundf+0x1e>
 8014c1e:	2a80      	cmp	r2, #128	@ 0x80
 8014c20:	d1f1      	bne.n	8014c06 <roundf+0x22>
 8014c22:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014c26:	4770      	bx	lr
 8014c28:	007fffff 	.word	0x007fffff

08014c2c <__kernel_cosf>:
 8014c2c:	ee10 3a10 	vmov	r3, s0
 8014c30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014c34:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8014c38:	eef0 6a40 	vmov.f32	s13, s0
 8014c3c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014c40:	d204      	bcs.n	8014c4c <__kernel_cosf+0x20>
 8014c42:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8014c46:	ee17 2a90 	vmov	r2, s15
 8014c4a:	b342      	cbz	r2, 8014c9e <__kernel_cosf+0x72>
 8014c4c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8014c50:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8014cbc <__kernel_cosf+0x90>
 8014c54:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8014cc0 <__kernel_cosf+0x94>
 8014c58:	4a1a      	ldr	r2, [pc, #104]	@ (8014cc4 <__kernel_cosf+0x98>)
 8014c5a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8014c5e:	4293      	cmp	r3, r2
 8014c60:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8014cc8 <__kernel_cosf+0x9c>
 8014c64:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014c68:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8014ccc <__kernel_cosf+0xa0>
 8014c6c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8014c70:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8014cd0 <__kernel_cosf+0xa4>
 8014c74:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014c78:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8014cd4 <__kernel_cosf+0xa8>
 8014c7c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8014c80:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8014c84:	ee26 6a07 	vmul.f32	s12, s12, s14
 8014c88:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8014c8c:	eee7 0a06 	vfma.f32	s1, s14, s12
 8014c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c94:	d804      	bhi.n	8014ca0 <__kernel_cosf+0x74>
 8014c96:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8014c9a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014c9e:	4770      	bx	lr
 8014ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8014cd8 <__kernel_cosf+0xac>)
 8014ca2:	4293      	cmp	r3, r2
 8014ca4:	bf9a      	itte	ls
 8014ca6:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8014caa:	ee07 3a10 	vmovls	s14, r3
 8014cae:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8014cb2:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014cb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014cba:	e7ec      	b.n	8014c96 <__kernel_cosf+0x6a>
 8014cbc:	ad47d74e 	.word	0xad47d74e
 8014cc0:	310f74f6 	.word	0x310f74f6
 8014cc4:	3e999999 	.word	0x3e999999
 8014cc8:	b493f27c 	.word	0xb493f27c
 8014ccc:	37d00d01 	.word	0x37d00d01
 8014cd0:	bab60b61 	.word	0xbab60b61
 8014cd4:	3d2aaaab 	.word	0x3d2aaaab
 8014cd8:	3f480000 	.word	0x3f480000

08014cdc <__kernel_sinf>:
 8014cdc:	ee10 3a10 	vmov	r3, s0
 8014ce0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014ce4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8014ce8:	d204      	bcs.n	8014cf4 <__kernel_sinf+0x18>
 8014cea:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014cee:	ee17 3a90 	vmov	r3, s15
 8014cf2:	b35b      	cbz	r3, 8014d4c <__kernel_sinf+0x70>
 8014cf4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014cf8:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8014d50 <__kernel_sinf+0x74>
 8014cfc:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8014d54 <__kernel_sinf+0x78>
 8014d00:	eea7 6a27 	vfma.f32	s12, s14, s15
 8014d04:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8014d58 <__kernel_sinf+0x7c>
 8014d08:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014d0c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8014d5c <__kernel_sinf+0x80>
 8014d10:	eea7 6a87 	vfma.f32	s12, s15, s14
 8014d14:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8014d60 <__kernel_sinf+0x84>
 8014d18:	ee60 6a07 	vmul.f32	s13, s0, s14
 8014d1c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014d20:	b930      	cbnz	r0, 8014d30 <__kernel_sinf+0x54>
 8014d22:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8014d64 <__kernel_sinf+0x88>
 8014d26:	eea7 6a27 	vfma.f32	s12, s14, s15
 8014d2a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8014d2e:	4770      	bx	lr
 8014d30:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8014d34:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8014d38:	eee0 7a86 	vfma.f32	s15, s1, s12
 8014d3c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8014d40:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8014d68 <__kernel_sinf+0x8c>
 8014d44:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8014d48:	ee30 0a60 	vsub.f32	s0, s0, s1
 8014d4c:	4770      	bx	lr
 8014d4e:	bf00      	nop
 8014d50:	2f2ec9d3 	.word	0x2f2ec9d3
 8014d54:	b2d72f34 	.word	0xb2d72f34
 8014d58:	3638ef1b 	.word	0x3638ef1b
 8014d5c:	b9500d01 	.word	0xb9500d01
 8014d60:	3c088889 	.word	0x3c088889
 8014d64:	be2aaaab 	.word	0xbe2aaaab
 8014d68:	3e2aaaab 	.word	0x3e2aaaab

08014d6c <__ieee754_rem_pio2f>:
 8014d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d6e:	ee10 6a10 	vmov	r6, s0
 8014d72:	4b88      	ldr	r3, [pc, #544]	@ (8014f94 <__ieee754_rem_pio2f+0x228>)
 8014d74:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8014d78:	429d      	cmp	r5, r3
 8014d7a:	b087      	sub	sp, #28
 8014d7c:	4604      	mov	r4, r0
 8014d7e:	d805      	bhi.n	8014d8c <__ieee754_rem_pio2f+0x20>
 8014d80:	2300      	movs	r3, #0
 8014d82:	ed80 0a00 	vstr	s0, [r0]
 8014d86:	6043      	str	r3, [r0, #4]
 8014d88:	2000      	movs	r0, #0
 8014d8a:	e022      	b.n	8014dd2 <__ieee754_rem_pio2f+0x66>
 8014d8c:	4b82      	ldr	r3, [pc, #520]	@ (8014f98 <__ieee754_rem_pio2f+0x22c>)
 8014d8e:	429d      	cmp	r5, r3
 8014d90:	d83a      	bhi.n	8014e08 <__ieee754_rem_pio2f+0x9c>
 8014d92:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8014d96:	2e00      	cmp	r6, #0
 8014d98:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8014f9c <__ieee754_rem_pio2f+0x230>
 8014d9c:	4a80      	ldr	r2, [pc, #512]	@ (8014fa0 <__ieee754_rem_pio2f+0x234>)
 8014d9e:	f023 030f 	bic.w	r3, r3, #15
 8014da2:	dd18      	ble.n	8014dd6 <__ieee754_rem_pio2f+0x6a>
 8014da4:	4293      	cmp	r3, r2
 8014da6:	ee70 7a47 	vsub.f32	s15, s0, s14
 8014daa:	bf09      	itett	eq
 8014dac:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8014fa4 <__ieee754_rem_pio2f+0x238>
 8014db0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8014fa8 <__ieee754_rem_pio2f+0x23c>
 8014db4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8014fac <__ieee754_rem_pio2f+0x240>
 8014db8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8014dbc:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8014dc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014dc4:	ed80 7a00 	vstr	s14, [r0]
 8014dc8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014dcc:	edc0 7a01 	vstr	s15, [r0, #4]
 8014dd0:	2001      	movs	r0, #1
 8014dd2:	b007      	add	sp, #28
 8014dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014dd6:	4293      	cmp	r3, r2
 8014dd8:	ee70 7a07 	vadd.f32	s15, s0, s14
 8014ddc:	bf09      	itett	eq
 8014dde:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8014fa4 <__ieee754_rem_pio2f+0x238>
 8014de2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8014fa8 <__ieee754_rem_pio2f+0x23c>
 8014de6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8014fac <__ieee754_rem_pio2f+0x240>
 8014dea:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8014dee:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014df2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014df6:	ed80 7a00 	vstr	s14, [r0]
 8014dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014dfe:	edc0 7a01 	vstr	s15, [r0, #4]
 8014e02:	f04f 30ff 	mov.w	r0, #4294967295
 8014e06:	e7e4      	b.n	8014dd2 <__ieee754_rem_pio2f+0x66>
 8014e08:	4b69      	ldr	r3, [pc, #420]	@ (8014fb0 <__ieee754_rem_pio2f+0x244>)
 8014e0a:	429d      	cmp	r5, r3
 8014e0c:	d873      	bhi.n	8014ef6 <__ieee754_rem_pio2f+0x18a>
 8014e0e:	f7ff fe57 	bl	8014ac0 <fabsf>
 8014e12:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8014fb4 <__ieee754_rem_pio2f+0x248>
 8014e16:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8014e1a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014e1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014e22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014e26:	ee17 0a90 	vmov	r0, s15
 8014e2a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8014f9c <__ieee754_rem_pio2f+0x230>
 8014e2e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8014e32:	281f      	cmp	r0, #31
 8014e34:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8014fa8 <__ieee754_rem_pio2f+0x23c>
 8014e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014e3c:	eeb1 6a47 	vneg.f32	s12, s14
 8014e40:	ee70 6a67 	vsub.f32	s13, s0, s15
 8014e44:	ee16 1a90 	vmov	r1, s13
 8014e48:	dc09      	bgt.n	8014e5e <__ieee754_rem_pio2f+0xf2>
 8014e4a:	4a5b      	ldr	r2, [pc, #364]	@ (8014fb8 <__ieee754_rem_pio2f+0x24c>)
 8014e4c:	1e47      	subs	r7, r0, #1
 8014e4e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8014e52:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8014e56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8014e5a:	4293      	cmp	r3, r2
 8014e5c:	d107      	bne.n	8014e6e <__ieee754_rem_pio2f+0x102>
 8014e5e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8014e62:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8014e66:	2a08      	cmp	r2, #8
 8014e68:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8014e6c:	dc14      	bgt.n	8014e98 <__ieee754_rem_pio2f+0x12c>
 8014e6e:	6021      	str	r1, [r4, #0]
 8014e70:	ed94 7a00 	vldr	s14, [r4]
 8014e74:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014e78:	2e00      	cmp	r6, #0
 8014e7a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014e7e:	ed84 0a01 	vstr	s0, [r4, #4]
 8014e82:	daa6      	bge.n	8014dd2 <__ieee754_rem_pio2f+0x66>
 8014e84:	eeb1 7a47 	vneg.f32	s14, s14
 8014e88:	eeb1 0a40 	vneg.f32	s0, s0
 8014e8c:	ed84 7a00 	vstr	s14, [r4]
 8014e90:	ed84 0a01 	vstr	s0, [r4, #4]
 8014e94:	4240      	negs	r0, r0
 8014e96:	e79c      	b.n	8014dd2 <__ieee754_rem_pio2f+0x66>
 8014e98:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8014fa4 <__ieee754_rem_pio2f+0x238>
 8014e9c:	eef0 6a40 	vmov.f32	s13, s0
 8014ea0:	eee6 6a25 	vfma.f32	s13, s12, s11
 8014ea4:	ee70 7a66 	vsub.f32	s15, s0, s13
 8014ea8:	eee6 7a25 	vfma.f32	s15, s12, s11
 8014eac:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8014fac <__ieee754_rem_pio2f+0x240>
 8014eb0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8014eb4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8014eb8:	ee15 2a90 	vmov	r2, s11
 8014ebc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8014ec0:	1a5b      	subs	r3, r3, r1
 8014ec2:	2b19      	cmp	r3, #25
 8014ec4:	dc04      	bgt.n	8014ed0 <__ieee754_rem_pio2f+0x164>
 8014ec6:	edc4 5a00 	vstr	s11, [r4]
 8014eca:	eeb0 0a66 	vmov.f32	s0, s13
 8014ece:	e7cf      	b.n	8014e70 <__ieee754_rem_pio2f+0x104>
 8014ed0:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8014fbc <__ieee754_rem_pio2f+0x250>
 8014ed4:	eeb0 0a66 	vmov.f32	s0, s13
 8014ed8:	eea6 0a25 	vfma.f32	s0, s12, s11
 8014edc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8014ee0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8014fc0 <__ieee754_rem_pio2f+0x254>
 8014ee4:	eee6 7a25 	vfma.f32	s15, s12, s11
 8014ee8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8014eec:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014ef0:	ed84 7a00 	vstr	s14, [r4]
 8014ef4:	e7bc      	b.n	8014e70 <__ieee754_rem_pio2f+0x104>
 8014ef6:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8014efa:	d306      	bcc.n	8014f0a <__ieee754_rem_pio2f+0x19e>
 8014efc:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014f00:	edc0 7a01 	vstr	s15, [r0, #4]
 8014f04:	edc0 7a00 	vstr	s15, [r0]
 8014f08:	e73e      	b.n	8014d88 <__ieee754_rem_pio2f+0x1c>
 8014f0a:	15ea      	asrs	r2, r5, #23
 8014f0c:	3a86      	subs	r2, #134	@ 0x86
 8014f0e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8014f12:	ee07 3a90 	vmov	s15, r3
 8014f16:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014f1a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8014fc4 <__ieee754_rem_pio2f+0x258>
 8014f1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014f22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014f26:	ed8d 7a03 	vstr	s14, [sp, #12]
 8014f2a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014f2e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014f32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014f36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014f3a:	ed8d 7a04 	vstr	s14, [sp, #16]
 8014f3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014f42:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f4a:	edcd 7a05 	vstr	s15, [sp, #20]
 8014f4e:	d11e      	bne.n	8014f8e <__ieee754_rem_pio2f+0x222>
 8014f50:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f58:	bf0c      	ite	eq
 8014f5a:	2301      	moveq	r3, #1
 8014f5c:	2302      	movne	r3, #2
 8014f5e:	491a      	ldr	r1, [pc, #104]	@ (8014fc8 <__ieee754_rem_pio2f+0x25c>)
 8014f60:	9101      	str	r1, [sp, #4]
 8014f62:	2102      	movs	r1, #2
 8014f64:	9100      	str	r1, [sp, #0]
 8014f66:	a803      	add	r0, sp, #12
 8014f68:	4621      	mov	r1, r4
 8014f6a:	f000 f895 	bl	8015098 <__kernel_rem_pio2f>
 8014f6e:	2e00      	cmp	r6, #0
 8014f70:	f6bf af2f 	bge.w	8014dd2 <__ieee754_rem_pio2f+0x66>
 8014f74:	edd4 7a00 	vldr	s15, [r4]
 8014f78:	eef1 7a67 	vneg.f32	s15, s15
 8014f7c:	edc4 7a00 	vstr	s15, [r4]
 8014f80:	edd4 7a01 	vldr	s15, [r4, #4]
 8014f84:	eef1 7a67 	vneg.f32	s15, s15
 8014f88:	edc4 7a01 	vstr	s15, [r4, #4]
 8014f8c:	e782      	b.n	8014e94 <__ieee754_rem_pio2f+0x128>
 8014f8e:	2303      	movs	r3, #3
 8014f90:	e7e5      	b.n	8014f5e <__ieee754_rem_pio2f+0x1f2>
 8014f92:	bf00      	nop
 8014f94:	3f490fd8 	.word	0x3f490fd8
 8014f98:	4016cbe3 	.word	0x4016cbe3
 8014f9c:	3fc90f80 	.word	0x3fc90f80
 8014fa0:	3fc90fd0 	.word	0x3fc90fd0
 8014fa4:	37354400 	.word	0x37354400
 8014fa8:	37354443 	.word	0x37354443
 8014fac:	2e85a308 	.word	0x2e85a308
 8014fb0:	43490f80 	.word	0x43490f80
 8014fb4:	3f22f984 	.word	0x3f22f984
 8014fb8:	0801b080 	.word	0x0801b080
 8014fbc:	2e85a300 	.word	0x2e85a300
 8014fc0:	248d3132 	.word	0x248d3132
 8014fc4:	43800000 	.word	0x43800000
 8014fc8:	0801b100 	.word	0x0801b100

08014fcc <scalbnf>:
 8014fcc:	ee10 3a10 	vmov	r3, s0
 8014fd0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8014fd4:	d02b      	beq.n	801502e <scalbnf+0x62>
 8014fd6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8014fda:	d302      	bcc.n	8014fe2 <scalbnf+0x16>
 8014fdc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014fe0:	4770      	bx	lr
 8014fe2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8014fe6:	d123      	bne.n	8015030 <scalbnf+0x64>
 8014fe8:	4b24      	ldr	r3, [pc, #144]	@ (801507c <scalbnf+0xb0>)
 8014fea:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8015080 <scalbnf+0xb4>
 8014fee:	4298      	cmp	r0, r3
 8014ff0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014ff4:	db17      	blt.n	8015026 <scalbnf+0x5a>
 8014ff6:	ee10 3a10 	vmov	r3, s0
 8014ffa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014ffe:	3a19      	subs	r2, #25
 8015000:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8015004:	4288      	cmp	r0, r1
 8015006:	dd15      	ble.n	8015034 <scalbnf+0x68>
 8015008:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8015084 <scalbnf+0xb8>
 801500c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8015088 <scalbnf+0xbc>
 8015010:	ee10 3a10 	vmov	r3, s0
 8015014:	eeb0 7a67 	vmov.f32	s14, s15
 8015018:	2b00      	cmp	r3, #0
 801501a:	bfb8      	it	lt
 801501c:	eef0 7a66 	vmovlt.f32	s15, s13
 8015020:	ee27 0a87 	vmul.f32	s0, s15, s14
 8015024:	4770      	bx	lr
 8015026:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801508c <scalbnf+0xc0>
 801502a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801502e:	4770      	bx	lr
 8015030:	0dd2      	lsrs	r2, r2, #23
 8015032:	e7e5      	b.n	8015000 <scalbnf+0x34>
 8015034:	4410      	add	r0, r2
 8015036:	28fe      	cmp	r0, #254	@ 0xfe
 8015038:	dce6      	bgt.n	8015008 <scalbnf+0x3c>
 801503a:	2800      	cmp	r0, #0
 801503c:	dd06      	ble.n	801504c <scalbnf+0x80>
 801503e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8015042:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8015046:	ee00 3a10 	vmov	s0, r3
 801504a:	4770      	bx	lr
 801504c:	f110 0f16 	cmn.w	r0, #22
 8015050:	da09      	bge.n	8015066 <scalbnf+0x9a>
 8015052:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801508c <scalbnf+0xc0>
 8015056:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8015090 <scalbnf+0xc4>
 801505a:	ee10 3a10 	vmov	r3, s0
 801505e:	eeb0 7a67 	vmov.f32	s14, s15
 8015062:	2b00      	cmp	r3, #0
 8015064:	e7d9      	b.n	801501a <scalbnf+0x4e>
 8015066:	3019      	adds	r0, #25
 8015068:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801506c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8015070:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8015094 <scalbnf+0xc8>
 8015074:	ee07 3a90 	vmov	s15, r3
 8015078:	e7d7      	b.n	801502a <scalbnf+0x5e>
 801507a:	bf00      	nop
 801507c:	ffff3cb0 	.word	0xffff3cb0
 8015080:	4c000000 	.word	0x4c000000
 8015084:	7149f2ca 	.word	0x7149f2ca
 8015088:	f149f2ca 	.word	0xf149f2ca
 801508c:	0da24260 	.word	0x0da24260
 8015090:	8da24260 	.word	0x8da24260
 8015094:	33000000 	.word	0x33000000

08015098 <__kernel_rem_pio2f>:
 8015098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801509c:	ed2d 8b04 	vpush	{d8-d9}
 80150a0:	b0d9      	sub	sp, #356	@ 0x164
 80150a2:	4690      	mov	r8, r2
 80150a4:	9001      	str	r0, [sp, #4]
 80150a6:	4ab9      	ldr	r2, [pc, #740]	@ (801538c <__kernel_rem_pio2f+0x2f4>)
 80150a8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80150aa:	f118 0f04 	cmn.w	r8, #4
 80150ae:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80150b2:	460f      	mov	r7, r1
 80150b4:	f103 3bff 	add.w	fp, r3, #4294967295
 80150b8:	db27      	blt.n	801510a <__kernel_rem_pio2f+0x72>
 80150ba:	f1b8 0203 	subs.w	r2, r8, #3
 80150be:	bf48      	it	mi
 80150c0:	f108 0204 	addmi.w	r2, r8, #4
 80150c4:	10d2      	asrs	r2, r2, #3
 80150c6:	1c55      	adds	r5, r2, #1
 80150c8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80150ca:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 801539c <__kernel_rem_pio2f+0x304>
 80150ce:	00e8      	lsls	r0, r5, #3
 80150d0:	eba2 060b 	sub.w	r6, r2, fp
 80150d4:	9002      	str	r0, [sp, #8]
 80150d6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80150da:	eb0a 0c0b 	add.w	ip, sl, fp
 80150de:	ac1c      	add	r4, sp, #112	@ 0x70
 80150e0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80150e4:	2000      	movs	r0, #0
 80150e6:	4560      	cmp	r0, ip
 80150e8:	dd11      	ble.n	801510e <__kernel_rem_pio2f+0x76>
 80150ea:	a91c      	add	r1, sp, #112	@ 0x70
 80150ec:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80150f0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80150f4:	f04f 0c00 	mov.w	ip, #0
 80150f8:	45d4      	cmp	ip, sl
 80150fa:	dc27      	bgt.n	801514c <__kernel_rem_pio2f+0xb4>
 80150fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8015100:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 801539c <__kernel_rem_pio2f+0x304>
 8015104:	4606      	mov	r6, r0
 8015106:	2400      	movs	r4, #0
 8015108:	e016      	b.n	8015138 <__kernel_rem_pio2f+0xa0>
 801510a:	2200      	movs	r2, #0
 801510c:	e7db      	b.n	80150c6 <__kernel_rem_pio2f+0x2e>
 801510e:	42c6      	cmn	r6, r0
 8015110:	bf5d      	ittte	pl
 8015112:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8015116:	ee07 1a90 	vmovpl	s15, r1
 801511a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801511e:	eef0 7a47 	vmovmi.f32	s15, s14
 8015122:	ece4 7a01 	vstmia	r4!, {s15}
 8015126:	3001      	adds	r0, #1
 8015128:	e7dd      	b.n	80150e6 <__kernel_rem_pio2f+0x4e>
 801512a:	ecfe 6a01 	vldmia	lr!, {s13}
 801512e:	ed96 7a00 	vldr	s14, [r6]
 8015132:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015136:	3401      	adds	r4, #1
 8015138:	455c      	cmp	r4, fp
 801513a:	f1a6 0604 	sub.w	r6, r6, #4
 801513e:	ddf4      	ble.n	801512a <__kernel_rem_pio2f+0x92>
 8015140:	ece9 7a01 	vstmia	r9!, {s15}
 8015144:	f10c 0c01 	add.w	ip, ip, #1
 8015148:	3004      	adds	r0, #4
 801514a:	e7d5      	b.n	80150f8 <__kernel_rem_pio2f+0x60>
 801514c:	a908      	add	r1, sp, #32
 801514e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015152:	9104      	str	r1, [sp, #16]
 8015154:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8015156:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8015398 <__kernel_rem_pio2f+0x300>
 801515a:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8015394 <__kernel_rem_pio2f+0x2fc>
 801515e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8015162:	9203      	str	r2, [sp, #12]
 8015164:	4654      	mov	r4, sl
 8015166:	00a2      	lsls	r2, r4, #2
 8015168:	9205      	str	r2, [sp, #20]
 801516a:	aa58      	add	r2, sp, #352	@ 0x160
 801516c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8015170:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8015174:	a944      	add	r1, sp, #272	@ 0x110
 8015176:	aa08      	add	r2, sp, #32
 8015178:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801517c:	4694      	mov	ip, r2
 801517e:	4626      	mov	r6, r4
 8015180:	2e00      	cmp	r6, #0
 8015182:	f1a0 0004 	sub.w	r0, r0, #4
 8015186:	dc4c      	bgt.n	8015222 <__kernel_rem_pio2f+0x18a>
 8015188:	4628      	mov	r0, r5
 801518a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801518e:	f7ff ff1d 	bl	8014fcc <scalbnf>
 8015192:	eeb0 8a40 	vmov.f32	s16, s0
 8015196:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801519a:	ee28 0a00 	vmul.f32	s0, s16, s0
 801519e:	f7ff fcdd 	bl	8014b5c <floorf>
 80151a2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80151a6:	eea0 8a67 	vfms.f32	s16, s0, s15
 80151aa:	2d00      	cmp	r5, #0
 80151ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80151b0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80151b4:	ee17 9a90 	vmov	r9, s15
 80151b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80151bc:	ee38 8a67 	vsub.f32	s16, s16, s15
 80151c0:	dd41      	ble.n	8015246 <__kernel_rem_pio2f+0x1ae>
 80151c2:	f104 3cff 	add.w	ip, r4, #4294967295
 80151c6:	a908      	add	r1, sp, #32
 80151c8:	f1c5 0e08 	rsb	lr, r5, #8
 80151cc:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80151d0:	fa46 f00e 	asr.w	r0, r6, lr
 80151d4:	4481      	add	r9, r0
 80151d6:	fa00 f00e 	lsl.w	r0, r0, lr
 80151da:	1a36      	subs	r6, r6, r0
 80151dc:	f1c5 0007 	rsb	r0, r5, #7
 80151e0:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80151e4:	4106      	asrs	r6, r0
 80151e6:	2e00      	cmp	r6, #0
 80151e8:	dd3c      	ble.n	8015264 <__kernel_rem_pio2f+0x1cc>
 80151ea:	f04f 0e00 	mov.w	lr, #0
 80151ee:	f109 0901 	add.w	r9, r9, #1
 80151f2:	4670      	mov	r0, lr
 80151f4:	4574      	cmp	r4, lr
 80151f6:	dc68      	bgt.n	80152ca <__kernel_rem_pio2f+0x232>
 80151f8:	2d00      	cmp	r5, #0
 80151fa:	dd03      	ble.n	8015204 <__kernel_rem_pio2f+0x16c>
 80151fc:	2d01      	cmp	r5, #1
 80151fe:	d074      	beq.n	80152ea <__kernel_rem_pio2f+0x252>
 8015200:	2d02      	cmp	r5, #2
 8015202:	d07d      	beq.n	8015300 <__kernel_rem_pio2f+0x268>
 8015204:	2e02      	cmp	r6, #2
 8015206:	d12d      	bne.n	8015264 <__kernel_rem_pio2f+0x1cc>
 8015208:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801520c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8015210:	b340      	cbz	r0, 8015264 <__kernel_rem_pio2f+0x1cc>
 8015212:	4628      	mov	r0, r5
 8015214:	9306      	str	r3, [sp, #24]
 8015216:	f7ff fed9 	bl	8014fcc <scalbnf>
 801521a:	9b06      	ldr	r3, [sp, #24]
 801521c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8015220:	e020      	b.n	8015264 <__kernel_rem_pio2f+0x1cc>
 8015222:	ee60 7a28 	vmul.f32	s15, s0, s17
 8015226:	3e01      	subs	r6, #1
 8015228:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801522c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015230:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8015234:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8015238:	ecac 0a01 	vstmia	ip!, {s0}
 801523c:	ed90 0a00 	vldr	s0, [r0]
 8015240:	ee37 0a80 	vadd.f32	s0, s15, s0
 8015244:	e79c      	b.n	8015180 <__kernel_rem_pio2f+0xe8>
 8015246:	d105      	bne.n	8015254 <__kernel_rem_pio2f+0x1bc>
 8015248:	1e60      	subs	r0, r4, #1
 801524a:	a908      	add	r1, sp, #32
 801524c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8015250:	11f6      	asrs	r6, r6, #7
 8015252:	e7c8      	b.n	80151e6 <__kernel_rem_pio2f+0x14e>
 8015254:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8015258:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801525c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015260:	da31      	bge.n	80152c6 <__kernel_rem_pio2f+0x22e>
 8015262:	2600      	movs	r6, #0
 8015264:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8015268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801526c:	f040 8098 	bne.w	80153a0 <__kernel_rem_pio2f+0x308>
 8015270:	1e60      	subs	r0, r4, #1
 8015272:	2200      	movs	r2, #0
 8015274:	4550      	cmp	r0, sl
 8015276:	da4b      	bge.n	8015310 <__kernel_rem_pio2f+0x278>
 8015278:	2a00      	cmp	r2, #0
 801527a:	d065      	beq.n	8015348 <__kernel_rem_pio2f+0x2b0>
 801527c:	3c01      	subs	r4, #1
 801527e:	ab08      	add	r3, sp, #32
 8015280:	3d08      	subs	r5, #8
 8015282:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8015286:	2b00      	cmp	r3, #0
 8015288:	d0f8      	beq.n	801527c <__kernel_rem_pio2f+0x1e4>
 801528a:	4628      	mov	r0, r5
 801528c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015290:	f7ff fe9c 	bl	8014fcc <scalbnf>
 8015294:	1c63      	adds	r3, r4, #1
 8015296:	aa44      	add	r2, sp, #272	@ 0x110
 8015298:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8015398 <__kernel_rem_pio2f+0x300>
 801529c:	0099      	lsls	r1, r3, #2
 801529e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80152a2:	4623      	mov	r3, r4
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	f280 80a9 	bge.w	80153fc <__kernel_rem_pio2f+0x364>
 80152aa:	4623      	mov	r3, r4
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	f2c0 80c7 	blt.w	8015440 <__kernel_rem_pio2f+0x3a8>
 80152b2:	aa44      	add	r2, sp, #272	@ 0x110
 80152b4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80152b8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8015390 <__kernel_rem_pio2f+0x2f8>
 80152bc:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801539c <__kernel_rem_pio2f+0x304>
 80152c0:	2000      	movs	r0, #0
 80152c2:	1ae2      	subs	r2, r4, r3
 80152c4:	e0b1      	b.n	801542a <__kernel_rem_pio2f+0x392>
 80152c6:	2602      	movs	r6, #2
 80152c8:	e78f      	b.n	80151ea <__kernel_rem_pio2f+0x152>
 80152ca:	f852 1b04 	ldr.w	r1, [r2], #4
 80152ce:	b948      	cbnz	r0, 80152e4 <__kernel_rem_pio2f+0x24c>
 80152d0:	b121      	cbz	r1, 80152dc <__kernel_rem_pio2f+0x244>
 80152d2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80152d6:	f842 1c04 	str.w	r1, [r2, #-4]
 80152da:	2101      	movs	r1, #1
 80152dc:	f10e 0e01 	add.w	lr, lr, #1
 80152e0:	4608      	mov	r0, r1
 80152e2:	e787      	b.n	80151f4 <__kernel_rem_pio2f+0x15c>
 80152e4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80152e8:	e7f5      	b.n	80152d6 <__kernel_rem_pio2f+0x23e>
 80152ea:	f104 3cff 	add.w	ip, r4, #4294967295
 80152ee:	aa08      	add	r2, sp, #32
 80152f0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80152f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80152f8:	a908      	add	r1, sp, #32
 80152fa:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80152fe:	e781      	b.n	8015204 <__kernel_rem_pio2f+0x16c>
 8015300:	f104 3cff 	add.w	ip, r4, #4294967295
 8015304:	aa08      	add	r2, sp, #32
 8015306:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801530a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801530e:	e7f3      	b.n	80152f8 <__kernel_rem_pio2f+0x260>
 8015310:	a908      	add	r1, sp, #32
 8015312:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8015316:	3801      	subs	r0, #1
 8015318:	430a      	orrs	r2, r1
 801531a:	e7ab      	b.n	8015274 <__kernel_rem_pio2f+0x1dc>
 801531c:	3201      	adds	r2, #1
 801531e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8015322:	2e00      	cmp	r6, #0
 8015324:	d0fa      	beq.n	801531c <__kernel_rem_pio2f+0x284>
 8015326:	9905      	ldr	r1, [sp, #20]
 8015328:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801532c:	eb0d 0001 	add.w	r0, sp, r1
 8015330:	18e6      	adds	r6, r4, r3
 8015332:	a91c      	add	r1, sp, #112	@ 0x70
 8015334:	f104 0c01 	add.w	ip, r4, #1
 8015338:	384c      	subs	r0, #76	@ 0x4c
 801533a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801533e:	4422      	add	r2, r4
 8015340:	4562      	cmp	r2, ip
 8015342:	da04      	bge.n	801534e <__kernel_rem_pio2f+0x2b6>
 8015344:	4614      	mov	r4, r2
 8015346:	e70e      	b.n	8015166 <__kernel_rem_pio2f+0xce>
 8015348:	9804      	ldr	r0, [sp, #16]
 801534a:	2201      	movs	r2, #1
 801534c:	e7e7      	b.n	801531e <__kernel_rem_pio2f+0x286>
 801534e:	9903      	ldr	r1, [sp, #12]
 8015350:	f8dd e004 	ldr.w	lr, [sp, #4]
 8015354:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8015358:	9105      	str	r1, [sp, #20]
 801535a:	ee07 1a90 	vmov	s15, r1
 801535e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015362:	2400      	movs	r4, #0
 8015364:	ece6 7a01 	vstmia	r6!, {s15}
 8015368:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801539c <__kernel_rem_pio2f+0x304>
 801536c:	46b1      	mov	r9, r6
 801536e:	455c      	cmp	r4, fp
 8015370:	dd04      	ble.n	801537c <__kernel_rem_pio2f+0x2e4>
 8015372:	ece0 7a01 	vstmia	r0!, {s15}
 8015376:	f10c 0c01 	add.w	ip, ip, #1
 801537a:	e7e1      	b.n	8015340 <__kernel_rem_pio2f+0x2a8>
 801537c:	ecfe 6a01 	vldmia	lr!, {s13}
 8015380:	ed39 7a01 	vldmdb	r9!, {s14}
 8015384:	3401      	adds	r4, #1
 8015386:	eee6 7a87 	vfma.f32	s15, s13, s14
 801538a:	e7f0      	b.n	801536e <__kernel_rem_pio2f+0x2d6>
 801538c:	0801b444 	.word	0x0801b444
 8015390:	0801b418 	.word	0x0801b418
 8015394:	43800000 	.word	0x43800000
 8015398:	3b800000 	.word	0x3b800000
 801539c:	00000000 	.word	0x00000000
 80153a0:	9b02      	ldr	r3, [sp, #8]
 80153a2:	eeb0 0a48 	vmov.f32	s0, s16
 80153a6:	eba3 0008 	sub.w	r0, r3, r8
 80153aa:	f7ff fe0f 	bl	8014fcc <scalbnf>
 80153ae:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8015394 <__kernel_rem_pio2f+0x2fc>
 80153b2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80153b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153ba:	db19      	blt.n	80153f0 <__kernel_rem_pio2f+0x358>
 80153bc:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8015398 <__kernel_rem_pio2f+0x300>
 80153c0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80153c4:	aa08      	add	r2, sp, #32
 80153c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80153ca:	3508      	adds	r5, #8
 80153cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80153d0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80153d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80153d8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80153dc:	ee10 3a10 	vmov	r3, s0
 80153e0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80153e4:	ee17 3a90 	vmov	r3, s15
 80153e8:	3401      	adds	r4, #1
 80153ea:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80153ee:	e74c      	b.n	801528a <__kernel_rem_pio2f+0x1f2>
 80153f0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80153f4:	aa08      	add	r2, sp, #32
 80153f6:	ee10 3a10 	vmov	r3, s0
 80153fa:	e7f6      	b.n	80153ea <__kernel_rem_pio2f+0x352>
 80153fc:	a808      	add	r0, sp, #32
 80153fe:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8015402:	9001      	str	r0, [sp, #4]
 8015404:	ee07 0a90 	vmov	s15, r0
 8015408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801540c:	3b01      	subs	r3, #1
 801540e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015412:	ee20 0a07 	vmul.f32	s0, s0, s14
 8015416:	ed62 7a01 	vstmdb	r2!, {s15}
 801541a:	e743      	b.n	80152a4 <__kernel_rem_pio2f+0x20c>
 801541c:	ecfc 6a01 	vldmia	ip!, {s13}
 8015420:	ecb5 7a01 	vldmia	r5!, {s14}
 8015424:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015428:	3001      	adds	r0, #1
 801542a:	4550      	cmp	r0, sl
 801542c:	dc01      	bgt.n	8015432 <__kernel_rem_pio2f+0x39a>
 801542e:	4282      	cmp	r2, r0
 8015430:	daf4      	bge.n	801541c <__kernel_rem_pio2f+0x384>
 8015432:	a858      	add	r0, sp, #352	@ 0x160
 8015434:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8015438:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801543c:	3b01      	subs	r3, #1
 801543e:	e735      	b.n	80152ac <__kernel_rem_pio2f+0x214>
 8015440:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8015442:	2b02      	cmp	r3, #2
 8015444:	dc09      	bgt.n	801545a <__kernel_rem_pio2f+0x3c2>
 8015446:	2b00      	cmp	r3, #0
 8015448:	dc2b      	bgt.n	80154a2 <__kernel_rem_pio2f+0x40a>
 801544a:	d044      	beq.n	80154d6 <__kernel_rem_pio2f+0x43e>
 801544c:	f009 0007 	and.w	r0, r9, #7
 8015450:	b059      	add	sp, #356	@ 0x164
 8015452:	ecbd 8b04 	vpop	{d8-d9}
 8015456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801545a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801545c:	2b03      	cmp	r3, #3
 801545e:	d1f5      	bne.n	801544c <__kernel_rem_pio2f+0x3b4>
 8015460:	aa30      	add	r2, sp, #192	@ 0xc0
 8015462:	1f0b      	subs	r3, r1, #4
 8015464:	4413      	add	r3, r2
 8015466:	461a      	mov	r2, r3
 8015468:	4620      	mov	r0, r4
 801546a:	2800      	cmp	r0, #0
 801546c:	f1a2 0204 	sub.w	r2, r2, #4
 8015470:	dc52      	bgt.n	8015518 <__kernel_rem_pio2f+0x480>
 8015472:	4622      	mov	r2, r4
 8015474:	2a01      	cmp	r2, #1
 8015476:	f1a3 0304 	sub.w	r3, r3, #4
 801547a:	dc5d      	bgt.n	8015538 <__kernel_rem_pio2f+0x4a0>
 801547c:	ab30      	add	r3, sp, #192	@ 0xc0
 801547e:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 801539c <__kernel_rem_pio2f+0x304>
 8015482:	440b      	add	r3, r1
 8015484:	2c01      	cmp	r4, #1
 8015486:	dc67      	bgt.n	8015558 <__kernel_rem_pio2f+0x4c0>
 8015488:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801548c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8015490:	2e00      	cmp	r6, #0
 8015492:	d167      	bne.n	8015564 <__kernel_rem_pio2f+0x4cc>
 8015494:	edc7 6a00 	vstr	s13, [r7]
 8015498:	ed87 7a01 	vstr	s14, [r7, #4]
 801549c:	edc7 7a02 	vstr	s15, [r7, #8]
 80154a0:	e7d4      	b.n	801544c <__kernel_rem_pio2f+0x3b4>
 80154a2:	ab30      	add	r3, sp, #192	@ 0xc0
 80154a4:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 801539c <__kernel_rem_pio2f+0x304>
 80154a8:	440b      	add	r3, r1
 80154aa:	4622      	mov	r2, r4
 80154ac:	2a00      	cmp	r2, #0
 80154ae:	da24      	bge.n	80154fa <__kernel_rem_pio2f+0x462>
 80154b0:	b34e      	cbz	r6, 8015506 <__kernel_rem_pio2f+0x46e>
 80154b2:	eef1 7a47 	vneg.f32	s15, s14
 80154b6:	edc7 7a00 	vstr	s15, [r7]
 80154ba:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80154be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80154c2:	aa31      	add	r2, sp, #196	@ 0xc4
 80154c4:	2301      	movs	r3, #1
 80154c6:	429c      	cmp	r4, r3
 80154c8:	da20      	bge.n	801550c <__kernel_rem_pio2f+0x474>
 80154ca:	b10e      	cbz	r6, 80154d0 <__kernel_rem_pio2f+0x438>
 80154cc:	eef1 7a67 	vneg.f32	s15, s15
 80154d0:	edc7 7a01 	vstr	s15, [r7, #4]
 80154d4:	e7ba      	b.n	801544c <__kernel_rem_pio2f+0x3b4>
 80154d6:	ab30      	add	r3, sp, #192	@ 0xc0
 80154d8:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 801539c <__kernel_rem_pio2f+0x304>
 80154dc:	440b      	add	r3, r1
 80154de:	2c00      	cmp	r4, #0
 80154e0:	da05      	bge.n	80154ee <__kernel_rem_pio2f+0x456>
 80154e2:	b10e      	cbz	r6, 80154e8 <__kernel_rem_pio2f+0x450>
 80154e4:	eef1 7a67 	vneg.f32	s15, s15
 80154e8:	edc7 7a00 	vstr	s15, [r7]
 80154ec:	e7ae      	b.n	801544c <__kernel_rem_pio2f+0x3b4>
 80154ee:	ed33 7a01 	vldmdb	r3!, {s14}
 80154f2:	3c01      	subs	r4, #1
 80154f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80154f8:	e7f1      	b.n	80154de <__kernel_rem_pio2f+0x446>
 80154fa:	ed73 7a01 	vldmdb	r3!, {s15}
 80154fe:	3a01      	subs	r2, #1
 8015500:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015504:	e7d2      	b.n	80154ac <__kernel_rem_pio2f+0x414>
 8015506:	eef0 7a47 	vmov.f32	s15, s14
 801550a:	e7d4      	b.n	80154b6 <__kernel_rem_pio2f+0x41e>
 801550c:	ecb2 7a01 	vldmia	r2!, {s14}
 8015510:	3301      	adds	r3, #1
 8015512:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015516:	e7d6      	b.n	80154c6 <__kernel_rem_pio2f+0x42e>
 8015518:	edd2 7a00 	vldr	s15, [r2]
 801551c:	edd2 6a01 	vldr	s13, [r2, #4]
 8015520:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8015524:	3801      	subs	r0, #1
 8015526:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801552a:	ed82 7a00 	vstr	s14, [r2]
 801552e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015532:	edc2 7a01 	vstr	s15, [r2, #4]
 8015536:	e798      	b.n	801546a <__kernel_rem_pio2f+0x3d2>
 8015538:	edd3 7a00 	vldr	s15, [r3]
 801553c:	edd3 6a01 	vldr	s13, [r3, #4]
 8015540:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8015544:	3a01      	subs	r2, #1
 8015546:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801554a:	ed83 7a00 	vstr	s14, [r3]
 801554e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015552:	edc3 7a01 	vstr	s15, [r3, #4]
 8015556:	e78d      	b.n	8015474 <__kernel_rem_pio2f+0x3dc>
 8015558:	ed33 7a01 	vldmdb	r3!, {s14}
 801555c:	3c01      	subs	r4, #1
 801555e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015562:	e78f      	b.n	8015484 <__kernel_rem_pio2f+0x3ec>
 8015564:	eef1 6a66 	vneg.f32	s13, s13
 8015568:	eeb1 7a47 	vneg.f32	s14, s14
 801556c:	edc7 6a00 	vstr	s13, [r7]
 8015570:	ed87 7a01 	vstr	s14, [r7, #4]
 8015574:	eef1 7a67 	vneg.f32	s15, s15
 8015578:	e790      	b.n	801549c <__kernel_rem_pio2f+0x404>
 801557a:	bf00      	nop

0801557c <_init>:
 801557c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801557e:	bf00      	nop
 8015580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015582:	bc08      	pop	{r3}
 8015584:	469e      	mov	lr, r3
 8015586:	4770      	bx	lr

08015588 <_fini>:
 8015588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801558a:	bf00      	nop
 801558c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801558e:	bc08      	pop	{r3}
 8015590:	469e      	mov	lr, r3
 8015592:	4770      	bx	lr
